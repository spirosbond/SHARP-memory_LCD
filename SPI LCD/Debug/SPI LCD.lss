
SPI LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000081c2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000422e  00802000  000081c2  00008276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003022  0080622e  0080622e  0000c4a4  2**0
                  ALLOC
  3 .eeprom       00000484  00810000  00810000  0000c4a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  0000c928  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000006f0  00000000  00000000  0000c988  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000110a0  00000000  00000000  0000d078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002bd4  00000000  00000000  0001e118  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a011  00000000  00000000  00020cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b7c  00000000  00000000  0002ad00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002b20b  00000000  00000000  0002c87c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000735a  00000000  00000000  00057a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008b0  00000000  00000000  0005ede8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000b706  00000000  00000000  0005f698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 da 19 	jmp	0x33b4	; 0x33b4 <__ctors_end>
       4:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
       8:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
       c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      10:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      14:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      18:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      1c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      20:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      24:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      28:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      2c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      30:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      34:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      38:	0c 94 a7 26 	jmp	0x4d4e	; 0x4d4e <__vector_14>
      3c:	0c 94 d4 26 	jmp	0x4da8	; 0x4da8 <__vector_15>
      40:	0c 94 01 27 	jmp	0x4e02	; 0x4e02 <__vector_16>
      44:	0c 94 2e 27 	jmp	0x4e5c	; 0x4e5c <__vector_17>
      48:	0c 94 5b 27 	jmp	0x4eb6	; 0x4eb6 <__vector_18>
      4c:	0c 94 88 27 	jmp	0x4f10	; 0x4f10 <__vector_19>
      50:	0c 94 b5 27 	jmp	0x4f6a	; 0x4f6a <__vector_20>
      54:	0c 94 e2 27 	jmp	0x4fc4	; 0x4fc4 <__vector_21>
      58:	0c 94 0f 28 	jmp	0x501e	; 0x501e <__vector_22>
      5c:	0c 94 3c 28 	jmp	0x5078	; 0x5078 <__vector_23>
      60:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      64:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      68:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      6c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      70:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      74:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      78:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      7c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      80:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      84:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      88:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      8c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      90:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      94:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      98:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      9c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      a0:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      a4:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      a8:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      ac:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      b0:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      b4:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      b8:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      bc:	0c 94 77 29 	jmp	0x52ee	; 0x52ee <__vector_47>
      c0:	0c 94 a4 29 	jmp	0x5348	; 0x5348 <__vector_48>
      c4:	0c 94 d1 29 	jmp	0x53a2	; 0x53a2 <__vector_49>
      c8:	0c 94 fe 29 	jmp	0x53fc	; 0x53fc <__vector_50>
      cc:	0c 94 2b 2a 	jmp	0x5456	; 0x5456 <__vector_51>
      d0:	0c 94 58 2a 	jmp	0x54b0	; 0x54b0 <__vector_52>
      d4:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      d8:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      dc:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      e0:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      e4:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      e8:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      ec:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      f0:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      f4:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      f8:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
      fc:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     100:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     104:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     108:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     10c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     110:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     114:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     118:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     11c:	0c 94 3e 1e 	jmp	0x3c7c	; 0x3c7c <__vector_71>
     120:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     124:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     128:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     12c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     130:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     134:	0c 94 69 28 	jmp	0x50d2	; 0x50d2 <__vector_77>
     138:	0c 94 96 28 	jmp	0x512c	; 0x512c <__vector_78>
     13c:	0c 94 c3 28 	jmp	0x5186	; 0x5186 <__vector_79>
     140:	0c 94 f0 28 	jmp	0x51e0	; 0x51e0 <__vector_80>
     144:	0c 94 1d 29 	jmp	0x523a	; 0x523a <__vector_81>
     148:	0c 94 4a 29 	jmp	0x5294	; 0x5294 <__vector_82>
     14c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     150:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     154:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     158:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     15c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     160:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     164:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     168:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     16c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     170:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     174:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     178:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     17c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     180:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     184:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     188:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     18c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     190:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     194:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     198:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     19c:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1a0:	0c 94 1b 33 	jmp	0x6636	; 0x6636 <__vector_104>
     1a4:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1a8:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1ac:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1b0:	0c 94 85 2a 	jmp	0x550a	; 0x550a <__vector_108>
     1b4:	0c 94 b2 2a 	jmp	0x5564	; 0x5564 <__vector_109>
     1b8:	0c 94 df 2a 	jmp	0x55be	; 0x55be <__vector_110>
     1bc:	0c 94 0c 2b 	jmp	0x5618	; 0x5618 <__vector_111>
     1c0:	0c 94 39 2b 	jmp	0x5672	; 0x5672 <__vector_112>
     1c4:	0c 94 66 2b 	jmp	0x56cc	; 0x56cc <__vector_113>
     1c8:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1cc:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1d0:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1d4:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1d8:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1dc:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1e0:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1e4:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1e8:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1ec:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1f0:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1f4:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1f8:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__bad_interrupt>
     1fc:	0c 1a       	sub	r0, r28
     1fe:	12 1a       	sub	r1, r18
     200:	18 1a       	sub	r1, r24
     202:	1e 1a       	sub	r1, r30
     204:	24 1a       	sub	r2, r20
     206:	2a 1a       	sub	r2, r26
     208:	30 1a       	sub	r3, r16
     20a:	36 1a       	sub	r3, r22
     20c:	3c 1a       	sub	r3, r28
     20e:	42 1a       	sub	r4, r18
     210:	48 1a       	sub	r4, r24
     212:	4e 1a       	sub	r4, r30
     214:	54 1a       	sub	r5, r20
     216:	5a 1a       	sub	r5, r26
     218:	60 1a       	sub	r6, r16
     21a:	66 1a       	sub	r6, r22
     21c:	6c 1a       	sub	r6, r28
     21e:	72 1a       	sub	r7, r18
     220:	78 1a       	sub	r7, r24
     222:	7e 1a       	sub	r7, r30
     224:	84 1a       	sub	r8, r20
     226:	8a 1a       	sub	r8, r26
     228:	90 1a       	sub	r9, r16
     22a:	96 1a       	sub	r9, r22
     22c:	9c 1a       	sub	r9, r28
     22e:	a2 1a       	sub	r10, r18
     230:	a8 1a       	sub	r10, r24
     232:	ae 1a       	sub	r10, r30
     234:	b4 1a       	sub	r11, r20
     236:	ba 1a       	sub	r11, r26
     238:	c0 1a       	sub	r12, r16
     23a:	c6 1a       	sub	r12, r22
     23c:	cc 1a       	sub	r12, r28
     23e:	d2 1a       	sub	r13, r18
     240:	d8 1a       	sub	r13, r24
     242:	de 1a       	sub	r13, r30
     244:	e4 1a       	sub	r14, r20
     246:	ea 1a       	sub	r14, r26
     248:	f0 1a       	sub	r15, r16
     24a:	f6 1a       	sub	r15, r22
     24c:	fc 1a       	sub	r15, r28
     24e:	02 1b       	sub	r16, r18
     250:	08 1b       	sub	r16, r24
     252:	0e 1b       	sub	r16, r30
     254:	14 1b       	sub	r17, r20
     256:	1a 1b       	sub	r17, r26
     258:	20 1b       	sub	r18, r16
     25a:	26 1b       	sub	r18, r22
     25c:	2c 1b       	sub	r18, r28
     25e:	32 1b       	sub	r19, r18
     260:	38 1b       	sub	r19, r24
     262:	3e 1b       	sub	r19, r30
     264:	44 1b       	sub	r20, r20
     266:	4a 1b       	sub	r20, r26
     268:	50 1b       	sub	r21, r16
     26a:	56 1b       	sub	r21, r22
     26c:	5c 1b       	sub	r21, r28
     26e:	62 1b       	sub	r22, r18
     270:	68 1b       	sub	r22, r24
     272:	6e 1b       	sub	r22, r30
     274:	74 1b       	sub	r23, r20
     276:	7a 1b       	sub	r23, r26
     278:	80 1b       	sub	r24, r16
     27a:	86 1b       	sub	r24, r22
     27c:	8c 1b       	sub	r24, r28
     27e:	92 1b       	sub	r25, r18
     280:	98 1b       	sub	r25, r24
     282:	9e 1b       	sub	r25, r30
     284:	a4 1b       	sub	r26, r20
     286:	aa 1b       	sub	r26, r26
     288:	b0 1b       	sub	r27, r16
     28a:	b6 1b       	sub	r27, r22
     28c:	bc 1b       	sub	r27, r28
     28e:	c2 1b       	sub	r28, r18
     290:	c8 1b       	sub	r28, r24
     292:	ce 1b       	sub	r28, r30
     294:	d4 1b       	sub	r29, r20
     296:	da 1b       	sub	r29, r26
     298:	e0 1b       	sub	r30, r16
     29a:	e6 1b       	sub	r30, r22
     29c:	ec 1b       	sub	r30, r28
     29e:	f2 1b       	sub	r31, r18
     2a0:	f8 1b       	sub	r31, r24
     2a2:	fe 1b       	sub	r31, r30
     2a4:	04 1c       	adc	r0, r4
     2a6:	0a 1c       	adc	r0, r10
     2a8:	10 1c       	adc	r1, r0
     2aa:	16 1c       	adc	r1, r6
     2ac:	1c 1c       	adc	r1, r12
     2ae:	22 1c       	adc	r2, r2
     2b0:	28 1c       	adc	r2, r8
     2b2:	2e 1c       	adc	r2, r14
     2b4:	34 1c       	adc	r3, r4
     2b6:	3a 1c       	adc	r3, r10
     2b8:	40 1c       	adc	r4, r0
     2ba:	16 1f       	adc	r17, r22
     2bc:	1c 1f       	adc	r17, r28
     2be:	22 1f       	adc	r18, r18
     2c0:	28 1f       	adc	r18, r24
     2c2:	2e 1f       	adc	r18, r30
     2c4:	34 1f       	adc	r19, r20
     2c6:	3a 1f       	adc	r19, r26
     2c8:	40 1f       	adc	r20, r16
     2ca:	46 1f       	adc	r20, r22
     2cc:	4c 1f       	adc	r20, r28
     2ce:	52 1f       	adc	r21, r18
     2d0:	58 1f       	adc	r21, r24
     2d2:	5e 1f       	adc	r21, r30
     2d4:	64 1f       	adc	r22, r20
     2d6:	6a 1f       	adc	r22, r26
     2d8:	70 1f       	adc	r23, r16
     2da:	76 1f       	adc	r23, r22
     2dc:	7c 1f       	adc	r23, r28
     2de:	82 1f       	adc	r24, r18
     2e0:	88 1f       	adc	r24, r24
     2e2:	8e 1f       	adc	r24, r30
     2e4:	94 1f       	adc	r25, r20
     2e6:	9a 1f       	adc	r25, r26
     2e8:	a0 1f       	adc	r26, r16
     2ea:	a6 1f       	adc	r26, r22
     2ec:	ac 1f       	adc	r26, r28
     2ee:	b2 1f       	adc	r27, r18
     2f0:	b8 1f       	adc	r27, r24
     2f2:	be 1f       	adc	r27, r30
     2f4:	c4 1f       	adc	r28, r20
     2f6:	ca 1f       	adc	r28, r26
     2f8:	d0 1f       	adc	r29, r16
     2fa:	d6 1f       	adc	r29, r22
     2fc:	dc 1f       	adc	r29, r28
     2fe:	e2 1f       	adc	r30, r18
     300:	e8 1f       	adc	r30, r24
     302:	ee 1f       	adc	r30, r30
     304:	f4 1f       	adc	r31, r20
     306:	fa 1f       	adc	r31, r26
     308:	00 20       	and	r0, r0
     30a:	06 20       	and	r0, r6
     30c:	0c 20       	and	r0, r12
     30e:	12 20       	and	r1, r2
     310:	18 20       	and	r1, r8
     312:	1e 20       	and	r1, r14
     314:	24 20       	and	r2, r4
     316:	2a 20       	and	r2, r10
     318:	30 20       	and	r3, r0
     31a:	36 20       	and	r3, r6
     31c:	3c 20       	and	r3, r12
     31e:	42 20       	and	r4, r2
     320:	48 20       	and	r4, r8
     322:	4e 20       	and	r4, r14
     324:	54 20       	and	r5, r4
     326:	5a 20       	and	r5, r10
     328:	60 20       	and	r6, r0
     32a:	66 20       	and	r6, r6
     32c:	6c 20       	and	r6, r12
     32e:	72 20       	and	r7, r2
     330:	78 20       	and	r7, r8
     332:	7e 20       	and	r7, r14
     334:	84 20       	and	r8, r4
     336:	8a 20       	and	r8, r10
     338:	90 20       	and	r9, r0
     33a:	96 20       	and	r9, r6
     33c:	9c 20       	and	r9, r12
     33e:	a2 20       	and	r10, r2
     340:	a8 20       	and	r10, r8
     342:	ae 20       	and	r10, r14
     344:	b4 20       	and	r11, r4
     346:	ba 20       	and	r11, r10
     348:	c0 20       	and	r12, r0
     34a:	c6 20       	and	r12, r6
     34c:	cc 20       	and	r12, r12
     34e:	d2 20       	and	r13, r2
     350:	d8 20       	and	r13, r8
     352:	de 20       	and	r13, r14
     354:	e4 20       	and	r14, r4
     356:	ea 20       	and	r14, r10
     358:	f0 20       	and	r15, r0
     35a:	f6 20       	and	r15, r6
     35c:	fc 20       	and	r15, r12
     35e:	02 21       	and	r16, r2
     360:	08 21       	and	r16, r8
     362:	0e 21       	and	r16, r14
     364:	14 21       	and	r17, r4
     366:	1a 21       	and	r17, r10
     368:	20 21       	and	r18, r0
     36a:	26 21       	and	r18, r6
     36c:	2c 21       	and	r18, r12
     36e:	32 21       	and	r19, r2
     370:	38 21       	and	r19, r8
     372:	3e 21       	and	r19, r14
     374:	44 21       	and	r20, r4
     376:	4a 21       	and	r20, r10
     378:	08 00       	.word	0x0008	; ????
     37a:	00 00       	nop
     37c:	be 92       	st	-X, r11
     37e:	24 49       	sbci	r18, 0x94	; 148
     380:	12 3e       	cpi	r17, 0xE2	; 226
     382:	ab aa       	std	Y+51, r10	; 0x33
     384:	aa 2a       	or	r10, r26
     386:	be cd       	rjmp	.-1156   	; 0xffffff04 <__eeprom_end+0xff7efa80>
     388:	cc cc       	rjmp	.-1640   	; 0xfffffd22 <__eeprom_end+0xff7ef89e>
     38a:	4c 3e       	cpi	r20, 0xEC	; 236
     38c:	00 00       	nop
     38e:	00 80       	ld	r0, Z
     390:	be ab       	std	Y+54, r27	; 0x36
     392:	aa aa       	std	Y+50, r10	; 0x32
     394:	aa 3e       	cpi	r26, 0xEA	; 234
     396:	00 00       	nop
     398:	00 00       	nop
     39a:	bf 00       	.word	0x00bf	; ????
     39c:	00 00       	nop
     39e:	80 3f       	cpi	r24, 0xF0	; 240
     3a0:	00 00       	nop
     3a2:	00 00       	nop
     3a4:	00 08       	sbc	r0, r0
     3a6:	41 78       	andi	r20, 0x81	; 129
     3a8:	d3 bb       	out	0x13, r29	; 19
     3aa:	43 87       	std	Z+11, r20	; 0x0b
     3ac:	d1 13       	cpse	r29, r17
     3ae:	3d 19       	sub	r19, r13
     3b0:	0e 3c       	cpi	r16, 0xCE	; 206
     3b2:	c3 bd       	out	0x23, r28	; 35
     3b4:	42 82       	std	Z+2, r4	; 0x02
     3b6:	ad 2b       	or	r26, r29
     3b8:	3e 68       	ori	r19, 0x8E	; 142
     3ba:	ec 82       	std	Y+4, r14	; 0x04
     3bc:	76 be       	out	0x36, r7	; 54
     3be:	d9 8f       	std	Y+25, r29	; 0x19
     3c0:	e1 a9       	ldd	r30, Z+49	; 0x31
     3c2:	3e 4c       	sbci	r19, 0xCE	; 206
     3c4:	80 ef       	ldi	r24, 0xF0	; 240
     3c6:	ff be       	out	0x3f, r15	; 63
     3c8:	01 c4       	rjmp	.+2050   	; 0xbcc <__trampolines_end+0x7fa>
     3ca:	ff 7f       	andi	r31, 0xFF	; 255
     3cc:	3f 00       	.word	0x003f	; ????
     3ce:	00 00       	nop
	...

000003d2 <__trampolines_end>:
	...
     472:	7f ff       	.word	0xff7f	; ????
     474:	fc 00       	.word	0x00fc	; ????
	...
     4a2:	00 3f       	cpi	r16, 0xF0	; 240
     4a4:	ff ff       	.word	0xffff	; ????
     4a6:	ff fc       	.word	0xfcff	; ????
	...
     4d4:	03 ff       	sbrs	r16, 3
     4d6:	ff ff       	.word	0xffff	; ????
     4d8:	ff ff       	.word	0xffff	; ????
     4da:	c0 00       	.word	0x00c0	; ????
	...
     504:	00 00       	nop
     506:	0f ff       	.word	0xff0f	; ????
     508:	ff f0       	brie	.+62     	; 0x548 <__trampolines_end+0x176>
     50a:	00 ff       	sbrs	r16, 0
     50c:	fc 00       	.word	0x00fc	; ????
	...
     536:	00 00       	nop
     538:	ff ff       	.word	0xffff	; ????
     53a:	f8 00       	.word	0x00f8	; ????
     53c:	00 00       	nop
     53e:	ff c0       	rjmp	.+510    	; 0x73e <__trampolines_end+0x36c>
	...
     568:	00 01       	movw	r0, r0
     56a:	ff ff       	.word	0xffff	; ????
     56c:	80 00       	.word	0x0080	; ????
     56e:	00 00       	nop
     570:	03 f8       	bld	r0, 3
	...
     59a:	00 0f       	add	r16, r16
     59c:	ff f8       	.word	0xf8ff	; ????
     59e:	00 00       	nop
     5a0:	00 00       	nop
     5a2:	00 3f       	cpi	r16, 0xF0	; 240
	...
     5cc:	00 3f       	cpi	r16, 0xF0	; 240
     5ce:	ff c0       	rjmp	.+510    	; 0x7ce <__trampolines_end+0x3fc>
     5d0:	00 00       	nop
     5d2:	00 00       	nop
     5d4:	00 03       	mulsu	r16, r16
     5d6:	e0 00       	.word	0x00e0	; ????
	...
     5fc:	00 00       	nop
     5fe:	00 7f       	andi	r16, 0xF0	; 240
     600:	ff 00       	.word	0x00ff	; ????
     602:	00 00       	nop
     604:	00 00       	nop
     606:	00 00       	nop
     608:	3c 00       	.word	0x003c	; ????
	...
     62e:	00 00       	nop
     630:	01 ff       	sbrs	r16, 1
     632:	fc 00       	.word	0x00fc	; ????
     634:	00 00       	nop
     636:	00 00       	nop
     638:	00 00       	nop
     63a:	0f 00       	.word	0x000f	; ????
	...
     660:	00 00       	nop
     662:	03 ff       	sbrs	r16, 3
     664:	f0 00       	.word	0x00f0	; ????
     666:	00 00       	nop
     668:	00 00       	nop
     66a:	00 00       	nop
     66c:	01 e0       	ldi	r16, 0x01	; 1
	...
     692:	00 00       	nop
     694:	0f ff       	.word	0xff0f	; ????
     696:	c0 00       	.word	0x00c0	; ????
     698:	00 00       	nop
     69a:	00 00       	nop
     69c:	00 00       	nop
     69e:	00 38       	cpi	r16, 0x80	; 128
	...
     6c4:	00 00       	nop
     6c6:	1f ff       	.word	0xff1f	; ????
     6c8:	80 00       	.word	0x0080	; ????
     6ca:	00 00       	nop
     6cc:	00 00       	nop
     6ce:	00 00       	nop
     6d0:	00 0e       	add	r0, r16
	...
     6f6:	00 00       	nop
     6f8:	3f fe       	.word	0xfe3f	; ????
	...
     702:	00 01       	movw	r0, r0
     704:	80 00       	.word	0x0080	; ????
	...
     72a:	7f fc       	.word	0xfc7f	; ????
	...
     734:	00 00       	nop
     736:	70 00       	.word	0x0070	; ????
	...
     75c:	ff f0       	brie	.+62     	; 0x79c <__trampolines_end+0x3ca>
	...
     766:	00 00       	nop
     768:	18 00       	.word	0x0018	; ????
	...
     78a:	00 00       	nop
     78c:	00 01       	movw	r0, r0
     78e:	ff e0       	ldi	r31, 0x0F	; 15
	...
     798:	00 00       	nop
     79a:	06 00       	.word	0x0006	; ????
	...
     7bc:	00 00       	nop
     7be:	00 03       	mulsu	r16, r16
     7c0:	ff c0       	rjmp	.+510    	; 0x9c0 <__trampolines_end+0x5ee>
	...
     7ca:	00 00       	nop
     7cc:	01 80       	ldd	r0, Z+1	; 0x01
	...
     7ee:	00 00       	nop
     7f0:	00 07       	cpc	r16, r16
     7f2:	ff 80       	ldd	r15, Y+7	; 0x07
	...
     7fc:	00 00       	nop
     7fe:	00 60       	ori	r16, 0x00	; 0
	...
     820:	00 00       	nop
     822:	00 0f       	add	r16, r16
     824:	ff 00       	.word	0x00ff	; ????
	...
     82e:	00 00       	nop
     830:	00 18       	sub	r0, r0
	...
     852:	00 00       	nop
     854:	00 1f       	adc	r16, r16
     856:	fe 00       	.word	0x00fe	; ????
	...
     860:	00 00       	nop
     862:	00 04       	cpc	r0, r0
	...
     884:	00 00       	nop
     886:	00 1f       	adc	r16, r16
     888:	fe 00       	.word	0x00fe	; ????
	...
     892:	00 00       	nop
     894:	00 01       	movw	r0, r0
	...
     8b6:	00 00       	nop
     8b8:	00 3f       	cpi	r16, 0xF0	; 240
     8ba:	fc 00       	.word	0x00fc	; ????
	...
     8c8:	40 00       	.word	0x0040	; ????
	...
     8ea:	00 7f       	andi	r16, 0xF0	; 240
     8ec:	f8 00       	.word	0x00f8	; ????
	...
     8fa:	20 00       	.word	0x0020	; ????
	...
     91c:	00 7f       	andi	r16, 0xF0	; 240
     91e:	f0 00       	.word	0x00f0	; ????
	...
     92c:	08 00       	.word	0x0008	; ????
	...
     94e:	00 ff       	sbrs	r16, 0
     950:	f0 00       	.word	0x00f0	; ????
	...
     95e:	04 00       	.word	0x0004	; ????
	...
     980:	00 ff       	sbrs	r16, 0
     982:	e0 00       	.word	0x00e0	; ????
	...
     990:	01 00       	.word	0x0001	; ????
	...
     9b2:	01 ff       	sbrs	r16, 1
     9b4:	c0 00       	.word	0x00c0	; ????
	...
     9e2:	00 00       	nop
     9e4:	01 ff       	sbrs	r16, 1
     9e6:	c0 00       	.word	0x00c0	; ????
	...
     a14:	00 00       	nop
     a16:	03 ff       	sbrs	r16, 3
     a18:	80 00       	.word	0x0080	; ????
	...
     a46:	00 00       	nop
     a48:	03 ff       	sbrs	r16, 3
     a4a:	80 00       	.word	0x0080	; ????
	...
     a78:	00 00       	nop
     a7a:	03 ff       	sbrs	r16, 3
	...
     aac:	07 ff       	sbrs	r16, 7
	...
     ade:	07 ff       	sbrs	r16, 7
	...
     b10:	0f fe       	.word	0xfe0f	; ????
	...
     b42:	0f fe       	.word	0xfe0f	; ????
	...
     b74:	0f fe       	.word	0xfe0f	; ????
	...
     ba6:	1f fc       	.word	0xfc1f	; ????
	...
     bd8:	1f fc       	.word	0xfc1f	; ????
	...
     c0a:	1f fc       	.word	0xfc1f	; ????
	...
     c3c:	1f f8       	.word	0xf81f	; ????
	...
     c6e:	1f f8       	.word	0xf81f	; ????
	...
     ca0:	3f f8       	.word	0xf83f	; ????
	...
     cd2:	3f f8       	.word	0xf83f	; ????
	...
     d04:	3f f8       	.word	0xf83f	; ????
	...
     d36:	3f f8       	.word	0xf83f	; ????
	...
     d40:	00 00       	nop
     d42:	ff e0       	ldi	r31, 0x0F	; 15
	...
     d68:	3f f8       	.word	0xf83f	; ????
	...
     d72:	00 00       	nop
     d74:	ff e0       	ldi	r31, 0x0F	; 15
	...
     d9a:	3f f0       	brie	.+14     	; 0xdaa <__trampolines_end+0x9d8>
	...
     da4:	00 00       	nop
     da6:	ff e0       	ldi	r31, 0x0F	; 15
	...
     dcc:	3f f0       	brie	.+14     	; 0xddc <__trampolines_end+0xa0a>
	...
     dd6:	00 00       	nop
     dd8:	ff e0       	ldi	r31, 0x0F	; 15
	...
     dfe:	3f f0       	brie	.+14     	; 0xe0e <__trampolines_end+0xa3c>
	...
     e08:	00 00       	nop
     e0a:	ff e0       	ldi	r31, 0x0F	; 15
	...
     e30:	3f f0       	brie	.+14     	; 0xe40 <__trampolines_end+0xa6e>
	...
     e3a:	00 00       	nop
     e3c:	ff e0       	ldi	r31, 0x0F	; 15
	...
     e62:	3f f0       	brie	.+14     	; 0xe72 <__trampolines_end+0xaa0>
	...
     e6c:	00 00       	nop
     e6e:	ff e0       	ldi	r31, 0x0F	; 15
	...
     e94:	7f f0       	brie	.+30     	; 0xeb4 <__trampolines_end+0xae2>
	...
     e9e:	00 00       	nop
     ea0:	ff e0       	ldi	r31, 0x0F	; 15
	...
     ec6:	7f f0       	brie	.+30     	; 0xee6 <__trampolines_end+0xb14>
	...
     ed0:	00 00       	nop
     ed2:	ff e0       	ldi	r31, 0x0F	; 15
	...
     ef8:	7f f0       	brie	.+30     	; 0xf18 <__trampolines_end+0xb46>
	...
     f02:	00 00       	nop
     f04:	ff e0       	ldi	r31, 0x0F	; 15
	...
     f2a:	3f f0       	brie	.+14     	; 0xf3a <__trampolines_end+0xb68>
	...
     f5c:	3f f0       	brie	.+14     	; 0xf6c <__trampolines_end+0xb9a>
	...
     f8e:	3f f0       	brie	.+14     	; 0xf9e <__trampolines_end+0xbcc>
	...
     fc0:	3f f0       	brie	.+14     	; 0xfd0 <__trampolines_end+0xbfe>
	...
     ff2:	3f f0       	brie	.+14     	; 0x1002 <__trampolines_end+0xc30>
	...
    1024:	3f f8       	.word	0xf83f	; ????
	...
    1056:	3f f8       	.word	0xf83f	; ????
	...
    1088:	3f f8       	.word	0xf83f	; ????
	...
    10ba:	3f f8       	.word	0xf83f	; ????
	...
    10ec:	3f f8       	.word	0xf83f	; ????
	...
    111e:	1f f8       	.word	0xf81f	; ????
	...
    1150:	1f f8       	.word	0xf81f	; ????
	...
    1182:	1f f8       	.word	0xf81f	; ????
	...
    11b4:	1f fc       	.word	0xfc1f	; ????
	...
    11c6:	3e 00       	.word	0x003e	; ????
    11c8:	00 00       	nop
    11ca:	0f 80       	ldd	r0, Y+7	; 0x07
	...
    11e4:	00 00       	nop
    11e6:	1f fc       	.word	0xfc1f	; ????
	...
    11f4:	00 00       	nop
    11f6:	00 0f       	add	r16, r16
    11f8:	ff fc       	.word	0xfcff	; ????
    11fa:	00 07       	cpc	r16, r16
    11fc:	ff ff       	.word	0xffff	; ????
    11fe:	00 00       	nop
    1200:	00 00       	nop
    1202:	00 0f       	add	r16, r16
    1204:	ff c0       	rjmp	.+510    	; 0x1404 <__trampolines_end+0x1032>
    1206:	00 00       	nop
    1208:	00 00       	nop
    120a:	00 0f       	add	r16, r16
    120c:	ff e0       	ldi	r31, 0x0F	; 15
	...
    1216:	00 00       	nop
    1218:	1f fc       	.word	0xfc1f	; ????
	...
    1222:	00 00       	nop
    1224:	ff e0       	ldi	r31, 0x0F	; 15
    1226:	00 00       	nop
    1228:	00 7f       	andi	r16, 0xF0	; 240
    122a:	ff ff       	.word	0xffff	; ????
    122c:	00 1f       	adc	r16, r16
    122e:	ff ff       	.word	0xffff	; ????
    1230:	c0 00       	.word	0x00c0	; ????
    1232:	00 00       	nop
    1234:	00 7f       	andi	r16, 0xF0	; 240
    1236:	ff f8       	.word	0xf8ff	; ????
    1238:	00 00       	nop
    123a:	00 00       	nop
    123c:	00 7f       	andi	r16, 0xF0	; 240
    123e:	ff fc       	.word	0xfcff	; ????
	...
    1248:	00 00       	nop
    124a:	0f fc       	.word	0xfc0f	; ????
	...
    1254:	00 00       	nop
    1256:	ff e0       	ldi	r31, 0x0F	; 15
    1258:	00 00       	nop
    125a:	01 ff       	sbrs	r16, 1
    125c:	ff ff       	.word	0xffff	; ????
    125e:	c0 7f       	andi	r28, 0xF0	; 240
    1260:	ff ff       	.word	0xffff	; ????
    1262:	f8 00       	.word	0x00f8	; ????
    1264:	00 00       	nop
    1266:	03 ff       	sbrs	r16, 3
    1268:	ff ff       	.word	0xffff	; ????
    126a:	00 00       	nop
    126c:	00 00       	nop
    126e:	03 ff       	sbrs	r16, 3
    1270:	ff ff       	.word	0xffff	; ????
    1272:	80 00       	.word	0x0080	; ????
	...
    127c:	0f fe       	.word	0xfe0f	; ????
	...
    1286:	00 00       	nop
    1288:	ff e0       	ldi	r31, 0x0F	; 15
    128a:	00 00       	nop
    128c:	03 ff       	sbrs	r16, 3
    128e:	ff ff       	.word	0xffff	; ????
    1290:	f0 ff       	sbrs	r31, 0
    1292:	ff ff       	.word	0xffff	; ????
    1294:	fc 00       	.word	0x00fc	; ????
    1296:	00 00       	nop
    1298:	0f ff       	.word	0xff0f	; ????
    129a:	ff ff       	.word	0xffff	; ????
    129c:	c0 00       	.word	0x00c0	; ????
    129e:	00 00       	nop
    12a0:	07 ff       	sbrs	r16, 7
    12a2:	ff ff       	.word	0xffff	; ????
    12a4:	c0 00       	.word	0x00c0	; ????
	...
    12ae:	0f fe       	.word	0xfe0f	; ????
	...
    12b8:	00 00       	nop
    12ba:	ff e0       	ldi	r31, 0x0F	; 15
    12bc:	00 00       	nop
    12be:	0f ff       	.word	0xff0f	; ????
    12c0:	ff ff       	.word	0xffff	; ????
    12c2:	fb ff       	.word	0xfffb	; ????
    12c4:	ff ff       	.word	0xffff	; ????
    12c6:	fe 00       	.word	0x00fe	; ????
    12c8:	00 00       	nop
    12ca:	1f ff       	.word	0xff1f	; ????
    12cc:	ff ff       	.word	0xffff	; ????
    12ce:	e0 00       	.word	0x00e0	; ????
    12d0:	00 00       	nop
    12d2:	1f ff       	.word	0xff1f	; ????
    12d4:	ff ff       	.word	0xffff	; ????
    12d6:	f0 00       	.word	0x00f0	; ????
	...
    12e0:	0f fe       	.word	0xfe0f	; ????
	...
    12ea:	00 00       	nop
    12ec:	ff e0       	ldi	r31, 0x0F	; 15
    12ee:	00 00       	nop
    12f0:	1f ff       	.word	0xff1f	; ????
    12f2:	ff ff       	.word	0xffff	; ????
    12f4:	ff ff       	.word	0xffff	; ????
    12f6:	ff ff       	.word	0xffff	; ????
    12f8:	ff 00       	.word	0x00ff	; ????
    12fa:	00 00       	nop
    12fc:	3f ff       	.word	0xff3f	; ????
    12fe:	ff ff       	.word	0xffff	; ????
    1300:	f8 00       	.word	0x00f8	; ????
    1302:	00 00       	nop
    1304:	3f ff       	.word	0xff3f	; ????
    1306:	ff ff       	.word	0xffff	; ????
    1308:	fc 00       	.word	0x00fc	; ????
	...
    1312:	07 fe       	sbrs	r0, 7
	...
    131c:	00 00       	nop
    131e:	ff e0       	ldi	r31, 0x0F	; 15
    1320:	00 00       	nop
    1322:	1f ff       	.word	0xff1f	; ????
    1324:	ff ff       	.word	0xffff	; ????
    1326:	ff ff       	.word	0xffff	; ????
    1328:	ff ff       	.word	0xffff	; ????
    132a:	ff 80       	ldd	r15, Y+7	; 0x07
    132c:	00 00       	nop
    132e:	ff ff       	.word	0xffff	; ????
    1330:	ff ff       	.word	0xffff	; ????
    1332:	fc 00       	.word	0x00fc	; ????
    1334:	00 00       	nop
    1336:	7f ff       	.word	0xff7f	; ????
    1338:	ff ff       	.word	0xffff	; ????
    133a:	fe 00       	.word	0x00fe	; ????
	...
    1344:	07 ff       	sbrs	r16, 7
	...
    134e:	00 00       	nop
    1350:	ff e0       	ldi	r31, 0x0F	; 15
    1352:	00 00       	nop
    1354:	3f ff       	.word	0xff3f	; ????
    1356:	ff ff       	.word	0xffff	; ????
    1358:	ff ff       	.word	0xffff	; ????
    135a:	ff ff       	.word	0xffff	; ????
    135c:	ff c0       	rjmp	.+510    	; 0x155c <__trampolines_end+0x118a>
    135e:	00 01       	movw	r0, r0
    1360:	ff ff       	.word	0xffff	; ????
    1362:	ff ff       	.word	0xffff	; ????
    1364:	fe 00       	.word	0x00fe	; ????
    1366:	00 00       	nop
    1368:	ff ff       	.word	0xffff	; ????
    136a:	ff ff       	.word	0xffff	; ????
    136c:	ff 00       	.word	0x00ff	; ????
	...
    1376:	07 ff       	sbrs	r16, 7
	...
    1380:	00 00       	nop
    1382:	ff e0       	ldi	r31, 0x0F	; 15
    1384:	00 00       	nop
    1386:	7f ff       	.word	0xff7f	; ????
    1388:	ff ff       	.word	0xffff	; ????
    138a:	ff ff       	.word	0xffff	; ????
    138c:	ff ff       	.word	0xffff	; ????
    138e:	ff c0       	rjmp	.+510    	; 0x158e <__trampolines_end+0x11bc>
    1390:	00 03       	mulsu	r16, r16
    1392:	ff ff       	.word	0xffff	; ????
    1394:	ff ff       	.word	0xffff	; ????
    1396:	ff 00       	.word	0x00ff	; ????
    1398:	00 01       	movw	r0, r0
    139a:	ff ff       	.word	0xffff	; ????
    139c:	ff ff       	.word	0xffff	; ????
    139e:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    13a8:	03 ff       	sbrs	r16, 3
	...
    13b2:	00 00       	nop
    13b4:	ff e0       	ldi	r31, 0x0F	; 15
    13b6:	00 00       	nop
    13b8:	7f ff       	.word	0xff7f	; ????
    13ba:	80 7f       	andi	r24, 0xF0	; 240
    13bc:	ff ff       	.word	0xffff	; ????
    13be:	e0 3f       	cpi	r30, 0xF0	; 240
    13c0:	ff e0       	ldi	r31, 0x0F	; 15
    13c2:	00 07       	cpc	r16, r16
    13c4:	ff ff       	.word	0xffff	; ????
    13c6:	ff ff       	.word	0xffff	; ????
    13c8:	ff 80       	ldd	r15, Y+7	; 0x07
    13ca:	00 03       	mulsu	r16, r16
    13cc:	ff ff       	.word	0xffff	; ????
    13ce:	ff ff       	.word	0xffff	; ????
    13d0:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    13da:	03 ff       	sbrs	r16, 3
    13dc:	80 00       	.word	0x0080	; ????
	...
    13e6:	ff e0       	ldi	r31, 0x0F	; 15
    13e8:	00 00       	nop
    13ea:	ff fe       	.word	0xfeff	; ????
    13ec:	00 3f       	cpi	r16, 0xF0	; 240
    13ee:	ff ff       	.word	0xffff	; ????
    13f0:	80 07       	cpc	r24, r16
    13f2:	ff e0       	ldi	r31, 0x0F	; 15
    13f4:	00 07       	cpc	r16, r16
    13f6:	ff fe       	.word	0xfeff	; ????
    13f8:	03 ff       	sbrs	r16, 3
    13fa:	ff 80       	ldd	r15, Y+7	; 0x07
    13fc:	00 07       	cpc	r16, r16
    13fe:	ff fe       	.word	0xfeff	; ????
    1400:	00 ff       	sbrs	r16, 0
    1402:	ff c0       	rjmp	.+510    	; 0x1602 <__trampolines_end+0x1230>
	...
    140c:	03 ff       	sbrs	r16, 3
    140e:	80 00       	.word	0x0080	; ????
	...
    1418:	ff e0       	ldi	r31, 0x0F	; 15
    141a:	00 00       	nop
    141c:	ff f8       	.word	0xf8ff	; ????
    141e:	00 0f       	add	r16, r16
    1420:	ff fe       	.word	0xfeff	; ????
    1422:	00 03       	mulsu	r16, r16
    1424:	ff e0       	ldi	r31, 0x0F	; 15
    1426:	00 0f       	add	r16, r16
    1428:	ff f0       	brie	.+62     	; 0x1468 <__trampolines_end+0x1096>
    142a:	00 3f       	cpi	r16, 0xF0	; 240
    142c:	ff c0       	rjmp	.+510    	; 0x162c <__trampolines_end+0x125a>
    142e:	00 0f       	add	r16, r16
    1430:	ff f0       	brie	.+62     	; 0x1470 <__trampolines_end+0x109e>
    1432:	00 1f       	adc	r16, r16
    1434:	ff e0       	ldi	r31, 0x0F	; 15
	...
    143e:	03 ff       	sbrs	r16, 3
    1440:	80 00       	.word	0x0080	; ????
	...
    144a:	ff e0       	ldi	r31, 0x0F	; 15
    144c:	00 00       	nop
    144e:	ff f0       	brie	.+62     	; 0x148e <__trampolines_end+0x10bc>
    1450:	00 07       	cpc	r16, r16
    1452:	ff fc       	.word	0xfcff	; ????
    1454:	00 01       	movw	r0, r0
    1456:	ff f0       	brie	.+62     	; 0x1496 <__trampolines_end+0x10c4>
    1458:	00 0f       	add	r16, r16
    145a:	ff c0       	rjmp	.+510    	; 0x165a <__trampolines_end+0x1288>
    145c:	00 0f       	add	r16, r16
    145e:	ff e0       	ldi	r31, 0x0F	; 15
    1460:	00 0f       	add	r16, r16
    1462:	ff c0       	rjmp	.+510    	; 0x1662 <__trampolines_end+0x1290>
    1464:	00 07       	cpc	r16, r16
    1466:	ff e0       	ldi	r31, 0x0F	; 15
	...
    1470:	01 ff       	sbrs	r16, 1
    1472:	c0 00       	.word	0x00c0	; ????
	...
    147c:	ff e0       	ldi	r31, 0x0F	; 15
    147e:	00 01       	movw	r0, r0
    1480:	ff f0       	brie	.+62     	; 0x14c0 <__trampolines_end+0x10ee>
    1482:	00 03       	mulsu	r16, r16
    1484:	ff fc       	.word	0xfcff	; ????
    1486:	00 00       	nop
    1488:	ff f0       	brie	.+62     	; 0x14c8 <__trampolines_end+0x10f6>
    148a:	00 1f       	adc	r16, r16
    148c:	ff 80       	ldd	r15, Y+7	; 0x07
    148e:	00 07       	cpc	r16, r16
    1490:	ff e0       	ldi	r31, 0x0F	; 15
    1492:	00 1f       	adc	r16, r16
    1494:	ff 80       	ldd	r15, Y+7	; 0x07
    1496:	00 03       	mulsu	r16, r16
    1498:	ff f0       	brie	.+62     	; 0x14d8 <__trampolines_end+0x1106>
	...
    14a2:	01 ff       	sbrs	r16, 1
    14a4:	c0 00       	.word	0x00c0	; ????
	...
    14ae:	ff e0       	ldi	r31, 0x0F	; 15
    14b0:	00 01       	movw	r0, r0
    14b2:	ff e0       	ldi	r31, 0x0F	; 15
    14b4:	00 03       	mulsu	r16, r16
    14b6:	ff f8       	.word	0xf8ff	; ????
    14b8:	00 00       	nop
    14ba:	ff f0       	brie	.+62     	; 0x14fa <__trampolines_end+0x1128>
    14bc:	00 1f       	adc	r16, r16
    14be:	ff 00       	.word	0x00ff	; ????
    14c0:	00 03       	mulsu	r16, r16
    14c2:	ff e0       	ldi	r31, 0x0F	; 15
    14c4:	00 1f       	adc	r16, r16
    14c6:	ff 00       	.word	0x00ff	; ????
    14c8:	00 01       	movw	r0, r0
    14ca:	ff f0       	brie	.+62     	; 0x150a <__trampolines_end+0x1138>
	...
    14d4:	00 ff       	sbrs	r16, 0
    14d6:	c0 00       	.word	0x00c0	; ????
	...
    14e0:	ff e0       	ldi	r31, 0x0F	; 15
    14e2:	00 01       	movw	r0, r0
    14e4:	ff c0       	rjmp	.+510    	; 0x16e4 <__trampolines_end+0x1312>
    14e6:	00 01       	movw	r0, r0
    14e8:	ff f0       	brie	.+62     	; 0x1528 <__trampolines_end+0x1156>
    14ea:	00 00       	nop
    14ec:	7f f0       	brie	.+30     	; 0x150c <__trampolines_end+0x113a>
    14ee:	00 3f       	cpi	r16, 0xF0	; 240
    14f0:	fe 00       	.word	0x00fe	; ????
    14f2:	00 01       	movw	r0, r0
    14f4:	ff f0       	brie	.+62     	; 0x1534 <__trampolines_end+0x1162>
    14f6:	00 3f       	cpi	r16, 0xF0	; 240
    14f8:	fe 00       	.word	0x00fe	; ????
    14fa:	00 00       	nop
    14fc:	ff f8       	.word	0xf8ff	; ????
	...
    1506:	00 ff       	sbrs	r16, 0
    1508:	e0 00       	.word	0x00e0	; ????
	...
    1512:	ff e0       	ldi	r31, 0x0F	; 15
    1514:	00 01       	movw	r0, r0
    1516:	ff c0       	rjmp	.+510    	; 0x1716 <__trampolines_end+0x1344>
    1518:	00 01       	movw	r0, r0
    151a:	ff f0       	brie	.+62     	; 0x155a <__trampolines_end+0x1188>
    151c:	00 00       	nop
    151e:	7f f8       	.word	0xf87f	; ????
    1520:	00 3f       	cpi	r16, 0xF0	; 240
    1522:	fc 00       	.word	0x00fc	; ????
    1524:	00 00       	nop
    1526:	ff f0       	brie	.+62     	; 0x1566 <__trampolines_end+0x1194>
    1528:	00 3f       	cpi	r16, 0xF0	; 240
    152a:	fc 00       	.word	0x00fc	; ????
    152c:	00 00       	nop
    152e:	7f f8       	.word	0xf87f	; ????
	...
    1538:	00 ff       	sbrs	r16, 0
    153a:	e0 00       	.word	0x00e0	; ????
	...
    1544:	ff e0       	ldi	r31, 0x0F	; 15
    1546:	00 03       	mulsu	r16, r16
    1548:	ff c0       	rjmp	.+510    	; 0x1748 <__trampolines_end+0x1376>
    154a:	00 01       	movw	r0, r0
    154c:	ff f0       	brie	.+62     	; 0x158c <__trampolines_end+0x11ba>
    154e:	00 00       	nop
    1550:	3f f8       	.word	0xf83f	; ????
    1552:	00 3f       	cpi	r16, 0xF0	; 240
    1554:	fc 00       	.word	0x00fc	; ????
    1556:	00 00       	nop
    1558:	7f f8       	.word	0xf87f	; ????
    155a:	00 7f       	andi	r16, 0xF0	; 240
    155c:	f8 00       	.word	0x00f8	; ????
    155e:	00 00       	nop
    1560:	3f fc       	.word	0xfc3f	; ????
	...
    156a:	00 7f       	andi	r16, 0xF0	; 240
    156c:	f0 00       	.word	0x00f0	; ????
	...
    1576:	ff e0       	ldi	r31, 0x0F	; 15
    1578:	00 03       	mulsu	r16, r16
    157a:	ff 80       	ldd	r15, Y+7	; 0x07
    157c:	00 00       	nop
    157e:	ff e0       	ldi	r31, 0x0F	; 15
    1580:	00 00       	nop
    1582:	3f f8       	.word	0xf83f	; ????
    1584:	00 7f       	andi	r16, 0xF0	; 240
    1586:	f8 00       	.word	0x00f8	; ????
    1588:	00 00       	nop
    158a:	7f f8       	.word	0xf87f	; ????
    158c:	00 7f       	andi	r16, 0xF0	; 240
    158e:	f8 00       	.word	0x00f8	; ????
    1590:	00 00       	nop
    1592:	3f fc       	.word	0xfc3f	; ????
	...
    159c:	00 7f       	andi	r16, 0xF0	; 240
    159e:	f0 00       	.word	0x00f0	; ????
	...
    15a8:	ff e0       	ldi	r31, 0x0F	; 15
    15aa:	00 03       	mulsu	r16, r16
    15ac:	ff 80       	ldd	r15, Y+7	; 0x07
    15ae:	00 00       	nop
    15b0:	ff e0       	ldi	r31, 0x0F	; 15
    15b2:	00 00       	nop
    15b4:	3f f8       	.word	0xf83f	; ????
    15b6:	00 7f       	andi	r16, 0xF0	; 240
    15b8:	f0 00       	.word	0x00f0	; ????
    15ba:	00 00       	nop
    15bc:	7f f8       	.word	0xf87f	; ????
    15be:	00 7f       	andi	r16, 0xF0	; 240
    15c0:	f0 00       	.word	0x00f0	; ????
    15c2:	00 00       	nop
    15c4:	1f fc       	.word	0xfc1f	; ????
	...
    15ce:	00 7f       	andi	r16, 0xF0	; 240
    15d0:	f0 00       	.word	0x00f0	; ????
	...
    15da:	ff e0       	ldi	r31, 0x0F	; 15
    15dc:	00 03       	mulsu	r16, r16
    15de:	ff 80       	ldd	r15, Y+7	; 0x07
    15e0:	00 00       	nop
    15e2:	ff e0       	ldi	r31, 0x0F	; 15
    15e4:	00 00       	nop
    15e6:	3f f8       	.word	0xf83f	; ????
    15e8:	00 ff       	sbrs	r16, 0
    15ea:	f0 00       	.word	0x00f0	; ????
    15ec:	00 00       	nop
    15ee:	3f f8       	.word	0xf83f	; ????
    15f0:	00 7f       	andi	r16, 0xF0	; 240
    15f2:	f0 00       	.word	0x00f0	; ????
    15f4:	00 00       	nop
    15f6:	10 00       	.word	0x0010	; ????
	...
    1600:	00 3f       	cpi	r16, 0xF0	; 240
    1602:	f8 00       	.word	0x00f8	; ????
	...
    160c:	ff e0       	ldi	r31, 0x0F	; 15
    160e:	00 03       	mulsu	r16, r16
    1610:	ff 80       	ldd	r15, Y+7	; 0x07
    1612:	00 00       	nop
    1614:	ff e0       	ldi	r31, 0x0F	; 15
    1616:	00 00       	nop
    1618:	3f f8       	.word	0xf83f	; ????
    161a:	00 ff       	sbrs	r16, 0
    161c:	f0 00       	.word	0x00f0	; ????
    161e:	00 00       	nop
    1620:	3f f8       	.word	0xf83f	; ????
    1622:	00 ff       	sbrs	r16, 0
    1624:	e0 00       	.word	0x00e0	; ????
	...
    1632:	00 3f       	cpi	r16, 0xF0	; 240
    1634:	f8 00       	.word	0x00f8	; ????
	...
    163e:	ff e0       	ldi	r31, 0x0F	; 15
    1640:	00 03       	mulsu	r16, r16
    1642:	ff 80       	ldd	r15, Y+7	; 0x07
    1644:	00 00       	nop
    1646:	ff e0       	ldi	r31, 0x0F	; 15
    1648:	00 00       	nop
    164a:	3f f8       	.word	0xf83f	; ????
    164c:	00 ff       	sbrs	r16, 0
    164e:	e0 00       	.word	0x00e0	; ????
    1650:	ff ff       	.word	0xffff	; ????
    1652:	ff fc       	.word	0xfcff	; ????
    1654:	00 ff       	sbrs	r16, 0
    1656:	e0 00       	.word	0x00e0	; ????
	...
    1664:	00 1f       	adc	r16, r16
    1666:	fc 00       	.word	0x00fc	; ????
	...
    1670:	ff e0       	ldi	r31, 0x0F	; 15
    1672:	00 03       	mulsu	r16, r16
    1674:	ff 80       	ldd	r15, Y+7	; 0x07
    1676:	00 00       	nop
    1678:	ff e0       	ldi	r31, 0x0F	; 15
    167a:	00 00       	nop
    167c:	3f f8       	.word	0xf83f	; ????
    167e:	00 ff       	sbrs	r16, 0
    1680:	e0 00       	.word	0x00e0	; ????
    1682:	ff ff       	.word	0xffff	; ????
    1684:	ff fc       	.word	0xfcff	; ????
    1686:	00 ff       	sbrs	r16, 0
    1688:	e0 00       	.word	0x00e0	; ????
	...
    1696:	00 1f       	adc	r16, r16
    1698:	fc 00       	.word	0x00fc	; ????
	...
    16a2:	ff e0       	ldi	r31, 0x0F	; 15
    16a4:	00 03       	mulsu	r16, r16
    16a6:	ff 80       	ldd	r15, Y+7	; 0x07
    16a8:	00 00       	nop
    16aa:	ff e0       	ldi	r31, 0x0F	; 15
    16ac:	00 00       	nop
    16ae:	3f f8       	.word	0xf83f	; ????
    16b0:	00 ff       	sbrs	r16, 0
    16b2:	e0 00       	.word	0x00e0	; ????
    16b4:	ff ff       	.word	0xffff	; ????
    16b6:	ff fc       	.word	0xfcff	; ????
    16b8:	00 ff       	sbrs	r16, 0
    16ba:	e0 00       	.word	0x00e0	; ????
	...
    16c8:	00 0f       	add	r16, r16
    16ca:	fe 00       	.word	0x00fe	; ????
	...
    16d4:	ff e0       	ldi	r31, 0x0F	; 15
    16d6:	00 03       	mulsu	r16, r16
    16d8:	ff 80       	ldd	r15, Y+7	; 0x07
    16da:	00 00       	nop
    16dc:	ff e0       	ldi	r31, 0x0F	; 15
    16de:	00 00       	nop
    16e0:	3f f8       	.word	0xf83f	; ????
    16e2:	00 ff       	sbrs	r16, 0
    16e4:	e0 00       	.word	0x00e0	; ????
    16e6:	ff ff       	.word	0xffff	; ????
    16e8:	ff fc       	.word	0xfcff	; ????
    16ea:	00 ff       	sbrs	r16, 0
    16ec:	c0 00       	.word	0x00c0	; ????
	...
    16fa:	00 0f       	add	r16, r16
    16fc:	fe 00       	.word	0x00fe	; ????
	...
    1706:	ff e0       	ldi	r31, 0x0F	; 15
    1708:	00 03       	mulsu	r16, r16
    170a:	ff 80       	ldd	r15, Y+7	; 0x07
    170c:	00 00       	nop
    170e:	ff e0       	ldi	r31, 0x0F	; 15
    1710:	00 00       	nop
    1712:	3f f8       	.word	0xf83f	; ????
    1714:	00 ff       	sbrs	r16, 0
    1716:	e0 00       	.word	0x00e0	; ????
    1718:	ff ff       	.word	0xffff	; ????
    171a:	ff fc       	.word	0xfcff	; ????
    171c:	00 ff       	sbrs	r16, 0
    171e:	c0 00       	.word	0x00c0	; ????
	...
    172c:	00 07       	cpc	r16, r16
    172e:	ff 00       	.word	0x00ff	; ????
	...
    1738:	ff e0       	ldi	r31, 0x0F	; 15
    173a:	00 03       	mulsu	r16, r16
    173c:	ff 80       	ldd	r15, Y+7	; 0x07
    173e:	00 00       	nop
    1740:	ff e0       	ldi	r31, 0x0F	; 15
    1742:	00 00       	nop
    1744:	3f f8       	.word	0xf83f	; ????
    1746:	00 ff       	sbrs	r16, 0
    1748:	e0 00       	.word	0x00e0	; ????
    174a:	ff ff       	.word	0xffff	; ????
    174c:	ff fc       	.word	0xfcff	; ????
    174e:	00 ff       	sbrs	r16, 0
    1750:	c0 00       	.word	0x00c0	; ????
	...
    175e:	00 07       	cpc	r16, r16
    1760:	ff 00       	.word	0x00ff	; ????
	...
    176a:	ff e0       	ldi	r31, 0x0F	; 15
    176c:	00 03       	mulsu	r16, r16
    176e:	ff 80       	ldd	r15, Y+7	; 0x07
    1770:	00 00       	nop
    1772:	ff e0       	ldi	r31, 0x0F	; 15
    1774:	00 00       	nop
    1776:	3f f8       	.word	0xf83f	; ????
    1778:	00 ff       	sbrs	r16, 0
    177a:	e0 00       	.word	0x00e0	; ????
    177c:	ff ff       	.word	0xffff	; ????
    177e:	ff fc       	.word	0xfcff	; ????
    1780:	00 ff       	sbrs	r16, 0
    1782:	c0 00       	.word	0x00c0	; ????
	...
    1790:	00 03       	mulsu	r16, r16
    1792:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    179c:	ff e0       	ldi	r31, 0x0F	; 15
    179e:	00 03       	mulsu	r16, r16
    17a0:	ff 80       	ldd	r15, Y+7	; 0x07
    17a2:	00 00       	nop
    17a4:	ff e0       	ldi	r31, 0x0F	; 15
    17a6:	00 00       	nop
    17a8:	3f f8       	.word	0xf83f	; ????
    17aa:	00 ff       	sbrs	r16, 0
    17ac:	e0 00       	.word	0x00e0	; ????
    17ae:	ff ff       	.word	0xffff	; ????
    17b0:	ff fc       	.word	0xfcff	; ????
    17b2:	00 ff       	sbrs	r16, 0
    17b4:	c0 00       	.word	0x00c0	; ????
	...
    17c2:	00 03       	mulsu	r16, r16
    17c4:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    17ce:	ff e0       	ldi	r31, 0x0F	; 15
    17d0:	00 03       	mulsu	r16, r16
    17d2:	ff 80       	ldd	r15, Y+7	; 0x07
    17d4:	00 00       	nop
    17d6:	ff e0       	ldi	r31, 0x0F	; 15
    17d8:	00 00       	nop
    17da:	3f f8       	.word	0xf83f	; ????
    17dc:	00 ff       	sbrs	r16, 0
    17de:	e0 00       	.word	0x00e0	; ????
    17e0:	00 00       	nop
    17e2:	00 00       	nop
    17e4:	00 ff       	sbrs	r16, 0
    17e6:	c0 00       	.word	0x00c0	; ????
	...
    17f4:	00 01       	movw	r0, r0
    17f6:	ff c0       	rjmp	.+510    	; 0x19f6 <__trampolines_end+0x1624>
	...
    1800:	ff e0       	ldi	r31, 0x0F	; 15
    1802:	00 03       	mulsu	r16, r16
    1804:	ff 80       	ldd	r15, Y+7	; 0x07
    1806:	00 00       	nop
    1808:	ff e0       	ldi	r31, 0x0F	; 15
    180a:	00 00       	nop
    180c:	3f f8       	.word	0xf83f	; ????
    180e:	00 ff       	sbrs	r16, 0
    1810:	e0 00       	.word	0x00e0	; ????
    1812:	00 00       	nop
    1814:	00 00       	nop
    1816:	00 ff       	sbrs	r16, 0
    1818:	c0 00       	.word	0x00c0	; ????
	...
    1826:	00 01       	movw	r0, r0
    1828:	ff c0       	rjmp	.+510    	; 0x1a28 <__trampolines_end+0x1656>
	...
    1832:	ff e0       	ldi	r31, 0x0F	; 15
    1834:	00 03       	mulsu	r16, r16
    1836:	ff 80       	ldd	r15, Y+7	; 0x07
    1838:	00 00       	nop
    183a:	ff e0       	ldi	r31, 0x0F	; 15
    183c:	00 00       	nop
    183e:	3f f8       	.word	0xf83f	; ????
    1840:	00 ff       	sbrs	r16, 0
    1842:	e0 00       	.word	0x00e0	; ????
    1844:	00 00       	nop
    1846:	00 00       	nop
    1848:	00 ff       	sbrs	r16, 0
    184a:	e0 00       	.word	0x00e0	; ????
	...
    1858:	00 00       	nop
    185a:	ff e0       	ldi	r31, 0x0F	; 15
	...
    1864:	ff e0       	ldi	r31, 0x0F	; 15
    1866:	00 03       	mulsu	r16, r16
    1868:	ff 80       	ldd	r15, Y+7	; 0x07
    186a:	00 00       	nop
    186c:	ff e0       	ldi	r31, 0x0F	; 15
    186e:	00 00       	nop
    1870:	3f f8       	.word	0xf83f	; ????
    1872:	00 ff       	sbrs	r16, 0
    1874:	e0 00       	.word	0x00e0	; ????
    1876:	00 00       	nop
    1878:	00 00       	nop
    187a:	00 ff       	sbrs	r16, 0
    187c:	e0 00       	.word	0x00e0	; ????
	...
    188a:	00 00       	nop
    188c:	ff f0       	brie	.+62     	; 0x18cc <__trampolines_end+0x14fa>
	...
    1896:	ff e0       	ldi	r31, 0x0F	; 15
    1898:	00 03       	mulsu	r16, r16
    189a:	ff 80       	ldd	r15, Y+7	; 0x07
    189c:	00 00       	nop
    189e:	ff e0       	ldi	r31, 0x0F	; 15
    18a0:	00 00       	nop
    18a2:	3f f8       	.word	0xf83f	; ????
    18a4:	00 ff       	sbrs	r16, 0
    18a6:	e0 00       	.word	0x00e0	; ????
    18a8:	00 00       	nop
    18aa:	00 00       	nop
    18ac:	00 ff       	sbrs	r16, 0
    18ae:	e0 00       	.word	0x00e0	; ????
	...
    18bc:	00 00       	nop
    18be:	7f f0       	brie	.+30     	; 0x18de <__trampolines_end+0x150c>
	...
    18c8:	ff e0       	ldi	r31, 0x0F	; 15
    18ca:	00 03       	mulsu	r16, r16
    18cc:	ff 80       	ldd	r15, Y+7	; 0x07
    18ce:	00 00       	nop
    18d0:	ff e0       	ldi	r31, 0x0F	; 15
    18d2:	00 00       	nop
    18d4:	3f f8       	.word	0xf83f	; ????
    18d6:	00 ff       	sbrs	r16, 0
    18d8:	f0 00       	.word	0x00f0	; ????
    18da:	00 00       	nop
    18dc:	00 00       	nop
    18de:	00 ff       	sbrs	r16, 0
    18e0:	f0 00       	.word	0x00f0	; ????
	...
    18ee:	00 00       	nop
    18f0:	3f f8       	.word	0xf83f	; ????
	...
    18fa:	ff e0       	ldi	r31, 0x0F	; 15
    18fc:	00 03       	mulsu	r16, r16
    18fe:	ff 80       	ldd	r15, Y+7	; 0x07
    1900:	00 00       	nop
    1902:	ff e0       	ldi	r31, 0x0F	; 15
    1904:	00 00       	nop
    1906:	3f f8       	.word	0xf83f	; ????
    1908:	00 7f       	andi	r16, 0xF0	; 240
    190a:	f0 00       	.word	0x00f0	; ????
    190c:	00 00       	nop
    190e:	00 00       	nop
    1910:	00 7f       	andi	r16, 0xF0	; 240
    1912:	f0 00       	.word	0x00f0	; ????
	...
    1920:	00 00       	nop
    1922:	3f f8       	.word	0xf83f	; ????
	...
    192c:	ff e0       	ldi	r31, 0x0F	; 15
    192e:	00 03       	mulsu	r16, r16
    1930:	ff 80       	ldd	r15, Y+7	; 0x07
    1932:	00 00       	nop
    1934:	ff e0       	ldi	r31, 0x0F	; 15
    1936:	00 00       	nop
    1938:	3f f8       	.word	0xf83f	; ????
    193a:	00 7f       	andi	r16, 0xF0	; 240
    193c:	f0 00       	.word	0x00f0	; ????
    193e:	00 00       	nop
    1940:	00 00       	nop
    1942:	00 7f       	andi	r16, 0xF0	; 240
    1944:	f8 00       	.word	0x00f8	; ????
	...
    1952:	00 00       	nop
    1954:	1f fc       	.word	0xfc1f	; ????
	...
    195e:	7f f0       	brie	.+30     	; 0x197e <__trampolines_end+0x15ac>
    1960:	00 03       	mulsu	r16, r16
    1962:	ff 80       	ldd	r15, Y+7	; 0x07
    1964:	00 00       	nop
    1966:	ff e0       	ldi	r31, 0x0F	; 15
    1968:	00 00       	nop
    196a:	3f f8       	.word	0xf83f	; ????
    196c:	00 7f       	andi	r16, 0xF0	; 240
    196e:	f8 00       	.word	0x00f8	; ????
    1970:	00 00       	nop
    1972:	00 00       	nop
    1974:	00 7f       	andi	r16, 0xF0	; 240
    1976:	f8 00       	.word	0x00f8	; ????
	...
    1984:	00 00       	nop
    1986:	1f fe       	.word	0xfe1f	; ????
	...
    1990:	7f f0       	brie	.+30     	; 0x19b0 <__trampolines_end+0x15de>
    1992:	00 03       	mulsu	r16, r16
    1994:	ff 80       	ldd	r15, Y+7	; 0x07
    1996:	00 00       	nop
    1998:	ff e0       	ldi	r31, 0x0F	; 15
    199a:	00 00       	nop
    199c:	3f f8       	.word	0xf83f	; ????
    199e:	00 7f       	andi	r16, 0xF0	; 240
    19a0:	fc 00       	.word	0x00fc	; ????
    19a2:	00 00       	nop
    19a4:	00 00       	nop
    19a6:	00 7f       	andi	r16, 0xF0	; 240
    19a8:	fc 00       	.word	0x00fc	; ????
	...
    19b6:	00 00       	nop
    19b8:	0f fe       	.word	0xfe0f	; ????
	...
    19c2:	7f f8       	.word	0xf87f	; ????
    19c4:	00 03       	mulsu	r16, r16
    19c6:	ff 80       	ldd	r15, Y+7	; 0x07
    19c8:	00 00       	nop
    19ca:	ff e0       	ldi	r31, 0x0F	; 15
    19cc:	00 00       	nop
    19ce:	3f f8       	.word	0xf83f	; ????
    19d0:	00 3f       	cpi	r16, 0xF0	; 240
    19d2:	fc 00       	.word	0x00fc	; ????
    19d4:	00 00       	nop
    19d6:	ff f0       	brie	.+62     	; 0x1a16 <__trampolines_end+0x1644>
    19d8:	00 3f       	cpi	r16, 0xF0	; 240
    19da:	fc 00       	.word	0x00fc	; ????
    19dc:	00 00       	nop
    19de:	7f f8       	.word	0xf87f	; ????
	...
    19e8:	00 00       	nop
    19ea:	07 ff       	sbrs	r16, 7
	...
    19f4:	7f f8       	.word	0xf87f	; ????
    19f6:	00 03       	mulsu	r16, r16
    19f8:	ff 80       	ldd	r15, Y+7	; 0x07
    19fa:	00 00       	nop
    19fc:	ff e0       	ldi	r31, 0x0F	; 15
    19fe:	00 00       	nop
    1a00:	3f f8       	.word	0xf83f	; ????
    1a02:	00 3f       	cpi	r16, 0xF0	; 240
    1a04:	fe 00       	.word	0x00fe	; ????
    1a06:	00 01       	movw	r0, r0
    1a08:	ff f0       	brie	.+62     	; 0x1a48 <__trampolines_end+0x1676>
    1a0a:	00 3f       	cpi	r16, 0xF0	; 240
    1a0c:	fe 00       	.word	0x00fe	; ????
    1a0e:	00 00       	nop
    1a10:	ff f8       	.word	0xf8ff	; ????
	...
    1a1a:	00 00       	nop
    1a1c:	07 ff       	sbrs	r16, 7
    1a1e:	80 00       	.word	0x0080	; ????
    1a20:	00 00       	nop
    1a22:	00 00       	nop
    1a24:	00 00       	nop
    1a26:	7f fc       	.word	0xfc7f	; ????
    1a28:	00 03       	mulsu	r16, r16
    1a2a:	ff 80       	ldd	r15, Y+7	; 0x07
    1a2c:	00 00       	nop
    1a2e:	ff e0       	ldi	r31, 0x0F	; 15
    1a30:	00 00       	nop
    1a32:	3f f8       	.word	0xf83f	; ????
    1a34:	00 1f       	adc	r16, r16
    1a36:	ff 00       	.word	0x00ff	; ????
    1a38:	00 03       	mulsu	r16, r16
    1a3a:	ff e0       	ldi	r31, 0x0F	; 15
    1a3c:	00 1f       	adc	r16, r16
    1a3e:	ff 00       	.word	0x00ff	; ????
    1a40:	00 01       	movw	r0, r0
    1a42:	ff f0       	brie	.+62     	; 0x1a82 <__trampolines_end+0x16b0>
	...
    1a4c:	00 00       	nop
    1a4e:	03 ff       	sbrs	r16, 3
    1a50:	80 00       	.word	0x0080	; ????
    1a52:	00 00       	nop
    1a54:	00 00       	nop
    1a56:	00 00       	nop
    1a58:	3f fe       	.word	0xfe3f	; ????
    1a5a:	00 03       	mulsu	r16, r16
    1a5c:	ff 80       	ldd	r15, Y+7	; 0x07
    1a5e:	00 00       	nop
    1a60:	ff e0       	ldi	r31, 0x0F	; 15
    1a62:	00 00       	nop
    1a64:	3f f8       	.word	0xf83f	; ????
    1a66:	00 1f       	adc	r16, r16
    1a68:	ff 80       	ldd	r15, Y+7	; 0x07
    1a6a:	00 07       	cpc	r16, r16
    1a6c:	ff e0       	ldi	r31, 0x0F	; 15
    1a6e:	00 1f       	adc	r16, r16
    1a70:	ff 80       	ldd	r15, Y+7	; 0x07
    1a72:	00 03       	mulsu	r16, r16
    1a74:	ff f0       	brie	.+62     	; 0x1ab4 <__trampolines_end+0x16e2>
	...
    1a7e:	00 00       	nop
    1a80:	01 ff       	sbrs	r16, 1
    1a82:	c0 00       	.word	0x00c0	; ????
    1a84:	00 00       	nop
    1a86:	00 00       	nop
    1a88:	00 00       	nop
    1a8a:	3f ff       	.word	0xff3f	; ????
    1a8c:	e0 03       	fmuls	r22, r16
    1a8e:	ff 80       	ldd	r15, Y+7	; 0x07
    1a90:	00 00       	nop
    1a92:	ff e0       	ldi	r31, 0x0F	; 15
    1a94:	00 00       	nop
    1a96:	3f f8       	.word	0xf83f	; ????
    1a98:	00 0f       	add	r16, r16
    1a9a:	ff e0       	ldi	r31, 0x0F	; 15
    1a9c:	00 1f       	adc	r16, r16
    1a9e:	ff e0       	ldi	r31, 0x0F	; 15
    1aa0:	00 0f       	add	r16, r16
    1aa2:	ff e0       	ldi	r31, 0x0F	; 15
    1aa4:	00 0f       	add	r16, r16
    1aa6:	ff e0       	ldi	r31, 0x0F	; 15
	...
    1ab0:	00 00       	nop
    1ab2:	01 ff       	sbrs	r16, 1
    1ab4:	e0 00       	.word	0x00e0	; ????
    1ab6:	00 00       	nop
    1ab8:	00 00       	nop
    1aba:	00 00       	nop
    1abc:	1f ff       	.word	0xff1f	; ????
    1abe:	e0 03       	fmuls	r22, r16
    1ac0:	ff 80       	ldd	r15, Y+7	; 0x07
    1ac2:	00 00       	nop
    1ac4:	ff e0       	ldi	r31, 0x0F	; 15
    1ac6:	00 00       	nop
    1ac8:	3f f8       	.word	0xf83f	; ????
    1aca:	00 0f       	add	r16, r16
    1acc:	ff f0       	brie	.+62     	; 0x1b0c <__trampolines_end+0x173a>
    1ace:	00 7f       	andi	r16, 0xF0	; 240
    1ad0:	ff c0       	rjmp	.+510    	; 0x1cd0 <__trampolines_end+0x18fe>
    1ad2:	00 07       	cpc	r16, r16
    1ad4:	ff f0       	brie	.+62     	; 0x1b14 <__trampolines_end+0x1742>
    1ad6:	00 1f       	adc	r16, r16
    1ad8:	ff e0       	ldi	r31, 0x0F	; 15
	...
    1ae2:	00 00       	nop
    1ae4:	00 ff       	sbrs	r16, 0
    1ae6:	e0 00       	.word	0x00e0	; ????
    1ae8:	00 00       	nop
    1aea:	00 00       	nop
    1aec:	00 00       	nop
    1aee:	1f ff       	.word	0xff1f	; ????
    1af0:	e0 03       	fmuls	r22, r16
    1af2:	ff 80       	ldd	r15, Y+7	; 0x07
    1af4:	00 00       	nop
    1af6:	ff e0       	ldi	r31, 0x0F	; 15
    1af8:	00 00       	nop
    1afa:	3f f8       	.word	0xf83f	; ????
    1afc:	00 07       	cpc	r16, r16
    1afe:	ff ff       	.word	0xffff	; ????
    1b00:	07 ff       	sbrs	r16, 7
    1b02:	ff 80       	ldd	r15, Y+7	; 0x07
    1b04:	00 07       	cpc	r16, r16
    1b06:	ff ff       	.word	0xffff	; ????
    1b08:	01 ff       	sbrs	r16, 1
    1b0a:	ff c0       	rjmp	.+510    	; 0x1d0a <__trampolines_end+0x1938>
	...
    1b14:	00 00       	nop
    1b16:	00 7f       	andi	r16, 0xF0	; 240
    1b18:	f0 00       	.word	0x00f0	; ????
    1b1a:	00 00       	nop
    1b1c:	00 00       	nop
    1b1e:	00 00       	nop
    1b20:	1f ff       	.word	0xff1f	; ????
    1b22:	e0 03       	fmuls	r22, r16
    1b24:	ff 80       	ldd	r15, Y+7	; 0x07
    1b26:	00 00       	nop
    1b28:	ff e0       	ldi	r31, 0x0F	; 15
    1b2a:	00 00       	nop
    1b2c:	3f f8       	.word	0xf83f	; ????
    1b2e:	00 03       	mulsu	r16, r16
    1b30:	ff ff       	.word	0xffff	; ????
    1b32:	ff ff       	.word	0xffff	; ????
    1b34:	ff 00       	.word	0x00ff	; ????
    1b36:	00 03       	mulsu	r16, r16
    1b38:	ff ff       	.word	0xffff	; ????
    1b3a:	ff ff       	.word	0xffff	; ????
    1b3c:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    1b46:	00 00       	nop
    1b48:	00 7f       	andi	r16, 0xF0	; 240
    1b4a:	f8 00       	.word	0x00f8	; ????
    1b4c:	00 00       	nop
    1b4e:	00 00       	nop
    1b50:	00 00       	nop
    1b52:	0f ff       	.word	0xff0f	; ????
    1b54:	e0 03       	fmuls	r22, r16
    1b56:	ff 80       	ldd	r15, Y+7	; 0x07
    1b58:	00 00       	nop
    1b5a:	ff e0       	ldi	r31, 0x0F	; 15
    1b5c:	00 00       	nop
    1b5e:	3f f8       	.word	0xf83f	; ????
    1b60:	00 03       	mulsu	r16, r16
    1b62:	ff ff       	.word	0xffff	; ????
    1b64:	ff ff       	.word	0xffff	; ????
    1b66:	ff 00       	.word	0x00ff	; ????
    1b68:	00 01       	movw	r0, r0
    1b6a:	ff ff       	.word	0xffff	; ????
    1b6c:	ff ff       	.word	0xffff	; ????
    1b6e:	ff 00       	.word	0x00ff	; ????
	...
    1b78:	00 00       	nop
    1b7a:	00 3f       	cpi	r16, 0xF0	; 240
    1b7c:	fc 00       	.word	0x00fc	; ????
    1b7e:	00 00       	nop
    1b80:	00 00       	nop
    1b82:	00 00       	nop
    1b84:	07 ff       	sbrs	r16, 7
    1b86:	e0 03       	fmuls	r22, r16
    1b88:	ff 80       	ldd	r15, Y+7	; 0x07
    1b8a:	00 00       	nop
    1b8c:	ff e0       	ldi	r31, 0x0F	; 15
    1b8e:	00 00       	nop
    1b90:	3f f8       	.word	0xf83f	; ????
    1b92:	00 01       	movw	r0, r0
    1b94:	ff ff       	.word	0xffff	; ????
    1b96:	ff ff       	.word	0xffff	; ????
    1b98:	fe 00       	.word	0x00fe	; ????
    1b9a:	00 00       	nop
    1b9c:	ff ff       	.word	0xffff	; ????
    1b9e:	ff ff       	.word	0xffff	; ????
    1ba0:	ff 00       	.word	0x00ff	; ????
	...
    1baa:	00 00       	nop
    1bac:	00 1f       	adc	r16, r16
    1bae:	fc 00       	.word	0x00fc	; ????
    1bb0:	00 00       	nop
    1bb2:	00 00       	nop
    1bb4:	00 00       	nop
    1bb6:	03 ff       	sbrs	r16, 3
    1bb8:	e0 03       	fmuls	r22, r16
    1bba:	ff 80       	ldd	r15, Y+7	; 0x07
    1bbc:	00 00       	nop
    1bbe:	ff e0       	ldi	r31, 0x0F	; 15
    1bc0:	00 00       	nop
    1bc2:	3f f8       	.word	0xf83f	; ????
    1bc4:	00 00       	nop
    1bc6:	7f ff       	.word	0xff7f	; ????
    1bc8:	ff ff       	.word	0xffff	; ????
    1bca:	fc 00       	.word	0x00fc	; ????
    1bcc:	00 00       	nop
    1bce:	7f ff       	.word	0xff7f	; ????
    1bd0:	ff ff       	.word	0xffff	; ????
    1bd2:	fc 00       	.word	0x00fc	; ????
	...
    1bdc:	00 00       	nop
    1bde:	00 ff       	sbrs	r16, 0
    1be0:	fe 00       	.word	0x00fe	; ????
    1be2:	00 00       	nop
    1be4:	00 00       	nop
    1be6:	00 00       	nop
    1be8:	01 ff       	sbrs	r16, 1
    1bea:	e0 03       	fmuls	r22, r16
    1bec:	ff 80       	ldd	r15, Y+7	; 0x07
    1bee:	00 00       	nop
    1bf0:	ff e0       	ldi	r31, 0x0F	; 15
    1bf2:	00 00       	nop
    1bf4:	3f f8       	.word	0xf83f	; ????
    1bf6:	00 00       	nop
    1bf8:	3f ff       	.word	0xff3f	; ????
    1bfa:	ff ff       	.word	0xffff	; ????
    1bfc:	f0 00       	.word	0x00f0	; ????
    1bfe:	00 00       	nop
    1c00:	3f ff       	.word	0xff3f	; ????
    1c02:	ff ff       	.word	0xffff	; ????
    1c04:	f8 00       	.word	0x00f8	; ????
	...
    1c0e:	00 00       	nop
    1c10:	03 ff       	sbrs	r16, 3
    1c12:	ff 00       	.word	0x00ff	; ????
    1c14:	00 00       	nop
    1c16:	00 00       	nop
    1c18:	00 00       	nop
    1c1a:	00 ff       	sbrs	r16, 0
    1c1c:	e0 03       	fmuls	r22, r16
    1c1e:	ff 80       	ldd	r15, Y+7	; 0x07
    1c20:	00 00       	nop
    1c22:	ff e0       	ldi	r31, 0x0F	; 15
    1c24:	00 00       	nop
    1c26:	3f f8       	.word	0xf83f	; ????
    1c28:	00 00       	nop
    1c2a:	1f ff       	.word	0xff1f	; ????
    1c2c:	ff ff       	.word	0xffff	; ????
    1c2e:	e0 00       	.word	0x00e0	; ????
    1c30:	00 00       	nop
    1c32:	1f ff       	.word	0xff1f	; ????
    1c34:	ff ff       	.word	0xffff	; ????
    1c36:	f0 00       	.word	0x00f0	; ????
	...
    1c40:	00 00       	nop
    1c42:	0f f7       	brid	.-62     	; 0x1c06 <__trampolines_end+0x1834>
    1c44:	ff 80       	ldd	r15, Y+7	; 0x07
    1c46:	00 00       	nop
    1c48:	00 00       	nop
    1c4a:	00 00       	nop
    1c4c:	00 3f       	cpi	r16, 0xF0	; 240
    1c4e:	e0 03       	fmuls	r22, r16
    1c50:	ff 80       	ldd	r15, Y+7	; 0x07
    1c52:	00 00       	nop
    1c54:	ff e0       	ldi	r31, 0x0F	; 15
    1c56:	00 00       	nop
    1c58:	3f f8       	.word	0xf83f	; ????
    1c5a:	00 00       	nop
    1c5c:	07 ff       	sbrs	r16, 7
    1c5e:	ff ff       	.word	0xffff	; ????
    1c60:	80 00       	.word	0x0080	; ????
    1c62:	00 00       	nop
    1c64:	07 ff       	sbrs	r16, 7
    1c66:	ff ff       	.word	0xffff	; ????
    1c68:	c0 00       	.word	0x00c0	; ????
	...
    1c72:	00 00       	nop
    1c74:	1f e3       	ldi	r17, 0x3F	; 63
    1c76:	ff 80       	ldd	r15, Y+7	; 0x07
    1c78:	00 00       	nop
    1c7a:	00 00       	nop
    1c7c:	00 00       	nop
    1c7e:	00 0f       	add	r16, r16
    1c80:	e0 03       	fmuls	r22, r16
    1c82:	ff 80       	ldd	r15, Y+7	; 0x07
    1c84:	00 00       	nop
    1c86:	ff e0       	ldi	r31, 0x0F	; 15
    1c88:	00 00       	nop
    1c8a:	3f f8       	.word	0xf83f	; ????
    1c8c:	00 00       	nop
    1c8e:	03 ff       	sbrs	r16, 3
    1c90:	ff ff       	.word	0xffff	; ????
    1c92:	00 00       	nop
    1c94:	00 00       	nop
    1c96:	01 ff       	sbrs	r16, 1
    1c98:	ff ff       	.word	0xffff	; ????
	...
    1ca6:	7f 81       	ldd	r23, Y+7	; 0x07
    1ca8:	ff c0       	rjmp	.+510    	; 0x1ea8 <__trampolines_end+0x1ad6>
	...
    1cbe:	00 00       	nop
    1cc0:	00 7f       	andi	r16, 0xF0	; 240
    1cc2:	ff f8       	.word	0xf8ff	; ????
    1cc4:	00 00       	nop
    1cc6:	00 00       	nop
    1cc8:	00 3f       	cpi	r16, 0xF0	; 240
    1cca:	ff f8       	.word	0xf8ff	; ????
	...
    1cd4:	00 00       	nop
    1cd6:	00 01       	movw	r0, r0
    1cd8:	fe 00       	.word	0x00fe	; ????
    1cda:	ff e0       	ldi	r31, 0x0F	; 15
	...
    1cf0:	00 00       	nop
    1cf2:	00 07       	cpc	r16, r16
    1cf4:	ff 80       	ldd	r15, Y+7	; 0x07
    1cf6:	00 00       	nop
    1cf8:	00 00       	nop
    1cfa:	00 03       	mulsu	r16, r16
    1cfc:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    1d06:	00 00       	nop
    1d08:	00 03       	mulsu	r16, r16
    1d0a:	fc 00       	.word	0x00fc	; ????
    1d0c:	ff f0       	brie	.+62     	; 0x1d4c <__trampolines_end+0x197a>
	...
    1d3a:	00 0f       	add	r16, r16
    1d3c:	f8 00       	.word	0x00f8	; ????
    1d3e:	7f f8       	.word	0xf87f	; ????
	...
    1d6c:	00 1f       	adc	r16, r16
    1d6e:	e0 00       	.word	0x00e0	; ????
    1d70:	3f fc       	.word	0xfc3f	; ????
	...
    1d9e:	00 3f       	cpi	r16, 0xF0	; 240
    1da0:	c0 00       	.word	0x00c0	; ????
    1da2:	1f fe       	.word	0xfe1f	; ????
	...
    1dd0:	00 7f       	andi	r16, 0xF0	; 240
    1dd2:	80 00       	.word	0x0080	; ????
    1dd4:	0f ff       	.word	0xff0f	; ????
	...
    1e02:	00 ff       	sbrs	r16, 0
    1e04:	00 00       	nop
    1e06:	07 ff       	sbrs	r16, 7
    1e08:	80 00       	.word	0x0080	; ????
	...
    1e32:	00 00       	nop
    1e34:	01 fe       	sbrs	r0, 1
    1e36:	00 00       	nop
    1e38:	03 ff       	sbrs	r16, 3
    1e3a:	c0 00       	.word	0x00c0	; ????
	...
    1e64:	00 00       	nop
    1e66:	03 fc       	sbrc	r0, 3
    1e68:	00 00       	nop
    1e6a:	03 ff       	sbrs	r16, 3
    1e6c:	e0 00       	.word	0x00e0	; ????
	...
    1e96:	00 00       	nop
    1e98:	07 fc       	sbrc	r0, 7
    1e9a:	00 00       	nop
    1e9c:	01 ff       	sbrs	r16, 1
    1e9e:	e0 00       	.word	0x00e0	; ????
	...
    1ec8:	00 00       	nop
    1eca:	0f f8       	.word	0xf80f	; ????
    1ecc:	00 00       	nop
    1ece:	00 ff       	sbrs	r16, 0
    1ed0:	f0 00       	.word	0x00f0	; ????
	...
    1efa:	00 00       	nop
    1efc:	1f f0       	brie	.+6      	; 0x1f04 <__trampolines_end+0x1b32>
    1efe:	00 00       	nop
    1f00:	00 7f       	andi	r16, 0xF0	; 240
    1f02:	f8 00       	.word	0x00f8	; ????
	...
    1f2c:	00 00       	nop
    1f2e:	1f f0       	brie	.+6      	; 0x1f36 <__trampolines_end+0x1b64>
    1f30:	00 00       	nop
    1f32:	00 3f       	cpi	r16, 0xF0	; 240
    1f34:	fc 00       	.word	0x00fc	; ????
	...
    1f5e:	00 00       	nop
    1f60:	3f e0       	ldi	r19, 0x0F	; 15
    1f62:	00 00       	nop
    1f64:	00 1f       	adc	r16, r16
    1f66:	fe 00       	.word	0x00fe	; ????
	...
    1f90:	00 00       	nop
    1f92:	7f e0       	ldi	r23, 0x0F	; 15
    1f94:	00 00       	nop
    1f96:	00 0f       	add	r16, r16
    1f98:	ff 00       	.word	0x00ff	; ????
	...
    1fc2:	00 00       	nop
    1fc4:	7f c0       	rjmp	.+254    	; 0x20c4 <__trampolines_end+0x1cf2>
    1fc6:	00 00       	nop
    1fc8:	00 07       	cpc	r16, r16
    1fca:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    1ff4:	00 00       	nop
    1ff6:	ff c0       	rjmp	.+510    	; 0x21f6 <__trampolines_end+0x1e24>
    1ff8:	00 00       	nop
    1ffa:	00 03       	mulsu	r16, r16
    1ffc:	ff e0       	ldi	r31, 0x0F	; 15
	...
    200a:	00 00       	nop
    200c:	00 80       	ld	r0, Z
	...
    2026:	00 00       	nop
    2028:	ff c0       	rjmp	.+510    	; 0x2228 <__trampolines_end+0x1e56>
    202a:	00 00       	nop
    202c:	00 01       	movw	r0, r0
    202e:	ff f0       	brie	.+62     	; 0x206e <__trampolines_end+0x1c9c>
	...
    203c:	00 00       	nop
    203e:	00 40       	sbci	r16, 0x00	; 0
	...
    2058:	00 00       	nop
    205a:	ff c0       	rjmp	.+510    	; 0x225a <__trampolines_end+0x1e88>
    205c:	00 00       	nop
    205e:	00 00       	nop
    2060:	ff f8       	.word	0xf8ff	; ????
	...
    206e:	00 00       	nop
    2070:	00 10       	cpse	r0, r0
	...
    208a:	00 00       	nop
    208c:	ff 80       	ldd	r15, Y+7	; 0x07
    208e:	00 00       	nop
    2090:	00 00       	nop
    2092:	7f fc       	.word	0xfc7f	; ????
	...
    20a0:	00 00       	nop
    20a2:	00 08       	sbc	r0, r0
	...
    20bc:	00 01       	movw	r0, r0
    20be:	ff 80       	ldd	r15, Y+7	; 0x07
    20c0:	00 00       	nop
    20c2:	00 00       	nop
    20c4:	3f fe       	.word	0xfe3f	; ????
	...
    20d2:	00 00       	nop
    20d4:	00 04       	cpc	r0, r0
	...
    20ee:	00 01       	movw	r0, r0
    20f0:	ff 80       	ldd	r15, Y+7	; 0x07
    20f2:	00 00       	nop
    20f4:	00 00       	nop
    20f6:	0f ff       	.word	0xff0f	; ????
	...
    2104:	00 00       	nop
    2106:	00 02       	muls	r16, r16
	...
    2120:	00 01       	movw	r0, r0
    2122:	ff 80       	ldd	r15, Y+7	; 0x07
    2124:	00 00       	nop
    2126:	00 00       	nop
    2128:	07 ff       	sbrs	r16, 7
    212a:	80 00       	.word	0x0080	; ????
	...
    2138:	00 01       	movw	r0, r0
	...
    2152:	00 01       	movw	r0, r0
    2154:	ff 80       	ldd	r15, Y+7	; 0x07
    2156:	00 00       	nop
    2158:	00 00       	nop
    215a:	03 ff       	sbrs	r16, 3
    215c:	e0 00       	.word	0x00e0	; ????
	...
    216a:	00 01       	movw	r0, r0
    216c:	80 00       	.word	0x0080	; ????
	...
    2182:	00 00       	nop
    2184:	00 01       	movw	r0, r0
    2186:	ff c0       	rjmp	.+510    	; 0x2386 <__trampolines_end+0x1fb4>
    2188:	00 00       	nop
    218a:	00 00       	nop
    218c:	01 ff       	sbrs	r16, 1
    218e:	f0 00       	.word	0x00f0	; ????
	...
    219c:	00 00       	nop
    219e:	c0 00       	.word	0x00c0	; ????
	...
    21b4:	00 00       	nop
    21b6:	00 01       	movw	r0, r0
    21b8:	ff c0       	rjmp	.+510    	; 0x23b8 <__trampolines_end+0x1fe6>
    21ba:	00 00       	nop
    21bc:	00 00       	nop
    21be:	00 ff       	sbrs	r16, 0
    21c0:	f8 00       	.word	0x00f8	; ????
	...
    21ce:	00 00       	nop
    21d0:	60 00       	.word	0x0060	; ????
	...
    21e6:	00 00       	nop
    21e8:	00 01       	movw	r0, r0
    21ea:	ff c0       	rjmp	.+510    	; 0x23ea <__trampolines_end+0x2018>
    21ec:	00 00       	nop
    21ee:	00 00       	nop
    21f0:	00 7f       	andi	r16, 0xF0	; 240
    21f2:	fc 00       	.word	0x00fc	; ????
	...
    2200:	00 00       	nop
    2202:	60 00       	.word	0x0060	; ????
	...
    221c:	ff c0       	rjmp	.+510    	; 0x241c <__trampolines_end+0x204a>
    221e:	00 00       	nop
    2220:	00 00       	nop
    2222:	00 1f       	adc	r16, r16
    2224:	ff 00       	.word	0x00ff	; ????
	...
    2232:	00 00       	nop
    2234:	30 00       	.word	0x0030	; ????
	...
    224e:	ff e0       	ldi	r31, 0x0F	; 15
    2250:	00 00       	nop
    2252:	00 00       	nop
    2254:	00 0f       	add	r16, r16
    2256:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    2264:	00 00       	nop
    2266:	18 00       	.word	0x0018	; ????
	...
    2280:	ff e0       	ldi	r31, 0x0F	; 15
    2282:	00 00       	nop
    2284:	00 00       	nop
    2286:	00 07       	cpc	r16, r16
    2288:	ff c0       	rjmp	.+510    	; 0x2488 <__trampolines_end+0x20b6>
	...
    2296:	00 00       	nop
    2298:	18 00       	.word	0x0018	; ????
	...
    22b2:	7f f0       	brie	.+30     	; 0x22d2 <__trampolines_end+0x1f00>
    22b4:	00 00       	nop
    22b6:	00 00       	nop
    22b8:	00 01       	movw	r0, r0
    22ba:	ff f0       	brie	.+62     	; 0x22fa <__trampolines_end+0x1f28>
	...
    22c8:	00 00       	nop
    22ca:	1c 00       	.word	0x001c	; ????
	...
    22e4:	7f f0       	brie	.+30     	; 0x2304 <__trampolines_end+0x1f32>
    22e6:	00 00       	nop
    22e8:	00 00       	nop
    22ea:	00 00       	nop
    22ec:	ff f8       	.word	0xf8ff	; ????
	...
    22fa:	00 00       	nop
    22fc:	0c 00       	.word	0x000c	; ????
	...
    2316:	7f f8       	.word	0xf87f	; ????
    2318:	00 00       	nop
    231a:	00 00       	nop
    231c:	00 00       	nop
    231e:	7f fc       	.word	0xfc7f	; ????
	...
    232c:	00 00       	nop
    232e:	0e 00       	.word	0x000e	; ????
	...
    2348:	3f fc       	.word	0xfc3f	; ????
    234a:	00 00       	nop
    234c:	00 00       	nop
    234e:	00 00       	nop
    2350:	1f ff       	.word	0xff1f	; ????
	...
    235e:	00 00       	nop
    2360:	06 00       	.word	0x0006	; ????
	...
    237a:	1f fc       	.word	0xfc1f	; ????
    237c:	00 00       	nop
    237e:	00 00       	nop
    2380:	00 00       	nop
    2382:	0f ff       	.word	0xff0f	; ????
    2384:	80 00       	.word	0x0080	; ????
	...
    2392:	06 00       	.word	0x0006	; ????
	...
    23ac:	1f fe       	.word	0xfe1f	; ????
    23ae:	00 00       	nop
    23b0:	00 00       	nop
    23b2:	00 00       	nop
    23b4:	07 ff       	sbrs	r16, 7
    23b6:	e0 00       	.word	0x00e0	; ????
	...
    23c4:	07 00       	.word	0x0007	; ????
	...
    23de:	0f ff       	.word	0xff0f	; ????
    23e0:	00 00       	nop
    23e2:	00 00       	nop
    23e4:	00 00       	nop
    23e6:	01 ff       	sbrs	r16, 1
    23e8:	f8 00       	.word	0x00f8	; ????
	...
    23f6:	03 00       	.word	0x0003	; ????
	...
    2410:	07 ff       	sbrs	r16, 7
    2412:	80 00       	.word	0x0080	; ????
    2414:	00 00       	nop
    2416:	00 00       	nop
    2418:	00 ff       	sbrs	r16, 0
    241a:	fc 00       	.word	0x00fc	; ????
	...
    2428:	03 00       	.word	0x0003	; ????
	...
    2442:	03 ff       	sbrs	r16, 3
    2444:	c0 00       	.word	0x00c0	; ????
    2446:	00 00       	nop
    2448:	00 00       	nop
    244a:	00 3f       	cpi	r16, 0xF0	; 240
    244c:	ff 00       	.word	0x00ff	; ????
	...
    245a:	03 80       	ldd	r0, Z+3	; 0x03
	...
    2474:	03 ff       	sbrs	r16, 3
    2476:	e0 00       	.word	0x00e0	; ????
    2478:	00 00       	nop
    247a:	00 00       	nop
    247c:	00 1f       	adc	r16, r16
    247e:	ff c0       	rjmp	.+510    	; 0x267e <__trampolines_end+0x22ac>
	...
    248c:	03 80       	ldd	r0, Z+3	; 0x03
	...
    24a6:	01 ff       	sbrs	r16, 1
    24a8:	f0 00       	.word	0x00f0	; ????
    24aa:	00 00       	nop
    24ac:	00 00       	nop
    24ae:	00 07       	cpc	r16, r16
    24b0:	ff e0       	ldi	r31, 0x0F	; 15
	...
    24be:	03 80       	ldd	r0, Z+3	; 0x03
	...
    24d8:	00 ff       	sbrs	r16, 0
    24da:	fc 00       	.word	0x00fc	; ????
    24dc:	00 00       	nop
    24de:	00 00       	nop
    24e0:	00 01       	movw	r0, r0
    24e2:	ff f8       	.word	0xf8ff	; ????
	...
    24f0:	03 80       	ldd	r0, Z+3	; 0x03
	...
    250a:	00 7f       	andi	r16, 0xF0	; 240
    250c:	fe 00       	.word	0x00fe	; ????
    250e:	00 00       	nop
    2510:	00 00       	nop
    2512:	00 00       	nop
    2514:	ff fe       	.word	0xfeff	; ????
	...
    2522:	03 c0       	rjmp	.+6      	; 0x252a <__trampolines_end+0x2158>
	...
    253c:	00 1f       	adc	r16, r16
    253e:	ff 00       	.word	0x00ff	; ????
    2540:	00 00       	nop
    2542:	00 00       	nop
    2544:	00 00       	nop
    2546:	3f ff       	.word	0xff3f	; ????
    2548:	80 00       	.word	0x0080	; ????
	...
    2552:	00 00       	nop
    2554:	43 c0       	rjmp	.+134    	; 0x25dc <__trampolines_end+0x220a>
	...
    256e:	00 0f       	add	r16, r16
    2570:	ff c0       	rjmp	.+510    	; 0x2770 <__trampolines_end+0x239e>
    2572:	00 00       	nop
    2574:	00 00       	nop
    2576:	00 00       	nop
    2578:	0f ff       	.word	0xff0f	; ????
    257a:	e0 00       	.word	0x00e0	; ????
	...
    2584:	00 00       	nop
    2586:	83 c0       	rjmp	.+262    	; 0x268e <__trampolines_end+0x22bc>
	...
    25a0:	00 07       	cpc	r16, r16
    25a2:	ff e0       	ldi	r31, 0x0F	; 15
    25a4:	00 00       	nop
    25a6:	00 00       	nop
    25a8:	00 00       	nop
    25aa:	07 ff       	sbrs	r16, 7
    25ac:	f8 00       	.word	0x00f8	; ????
	...
    25b6:	00 01       	movw	r0, r0
    25b8:	03 c0       	rjmp	.+6      	; 0x25c0 <__trampolines_end+0x21ee>
	...
    25d2:	00 01       	movw	r0, r0
    25d4:	ff f8       	.word	0xf8ff	; ????
    25d6:	00 00       	nop
    25d8:	00 00       	nop
    25da:	00 00       	nop
    25dc:	01 ff       	sbrs	r16, 1
    25de:	fe 00       	.word	0x00fe	; ????
	...
    25e8:	00 02       	muls	r16, r16
    25ea:	03 c0       	rjmp	.+6      	; 0x25f2 <__trampolines_end+0x2220>
	...
    2604:	00 00       	nop
    2606:	ff fe       	.word	0xfeff	; ????
    2608:	00 00       	nop
    260a:	00 00       	nop
    260c:	00 00       	nop
    260e:	00 7f       	andi	r16, 0xF0	; 240
    2610:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    261a:	00 04       	cpc	r0, r0
    261c:	01 c0       	rjmp	.+2      	; 0x2620 <__trampolines_end+0x224e>
	...
    2636:	00 00       	nop
    2638:	3f ff       	.word	0xff3f	; ????
    263a:	80 00       	.word	0x0080	; ????
    263c:	00 00       	nop
    263e:	00 00       	nop
    2640:	00 1f       	adc	r16, r16
    2642:	ff f0       	brie	.+62     	; 0x2682 <__trampolines_end+0x22b0>
	...
    264c:	00 08       	sbc	r0, r0
    264e:	03 c0       	rjmp	.+6      	; 0x2656 <__trampolines_end+0x2284>
	...
    2668:	00 00       	nop
    266a:	1f ff       	.word	0xff1f	; ????
    266c:	e0 00       	.word	0x00e0	; ????
    266e:	00 00       	nop
    2670:	00 00       	nop
    2672:	00 07       	cpc	r16, r16
    2674:	ff fc       	.word	0xfcff	; ????
	...
    267e:	00 30       	cpi	r16, 0x00	; 0
    2680:	03 c0       	rjmp	.+6      	; 0x2688 <__trampolines_end+0x22b6>
	...
    269a:	00 00       	nop
    269c:	07 ff       	sbrs	r16, 7
    269e:	f8 00       	.word	0x00f8	; ????
    26a0:	00 00       	nop
    26a2:	00 00       	nop
    26a4:	00 01       	movw	r0, r0
    26a6:	ff ff       	.word	0xffff	; ????
	...
    26b0:	00 60       	ori	r16, 0x00	; 0
    26b2:	03 c0       	rjmp	.+6      	; 0x26ba <__trampolines_end+0x22e8>
	...
    26cc:	00 00       	nop
    26ce:	01 ff       	sbrs	r16, 1
    26d0:	fe 00       	.word	0x00fe	; ????
    26d2:	00 00       	nop
    26d4:	00 00       	nop
    26d6:	00 00       	nop
    26d8:	3f ff       	.word	0xff3f	; ????
    26da:	c0 00       	.word	0x00c0	; ????
    26dc:	00 00       	nop
    26de:	00 00       	nop
    26e0:	00 00       	nop
    26e2:	01 80       	ldd	r0, Z+1	; 0x01
    26e4:	03 c0       	rjmp	.+6      	; 0x26ec <__trampolines_end+0x231a>
	...
    26fe:	00 00       	nop
    2700:	00 7f       	andi	r16, 0xF0	; 240
    2702:	ff c0       	rjmp	.+510    	; 0x2902 <__trampolines_end+0x2530>
    2704:	00 00       	nop
    2706:	00 00       	nop
    2708:	00 00       	nop
    270a:	0f ff       	.word	0xff0f	; ????
    270c:	fc 00       	.word	0x00fc	; ????
    270e:	00 00       	nop
    2710:	00 00       	nop
    2712:	00 00       	nop
    2714:	07 00       	.word	0x0007	; ????
    2716:	03 c0       	rjmp	.+6      	; 0x271e <__trampolines_end+0x234c>
	...
    2730:	00 00       	nop
    2732:	00 1f       	adc	r16, r16
    2734:	ff f0       	brie	.+62     	; 0x2774 <__trampolines_end+0x23a2>
    2736:	00 00       	nop
    2738:	00 00       	nop
    273a:	00 00       	nop
    273c:	03 ff       	sbrs	r16, 3
    273e:	ff 80       	ldd	r15, Y+7	; 0x07
    2740:	00 00       	nop
    2742:	00 00       	nop
    2744:	00 00       	nop
    2746:	1e 00       	.word	0x001e	; ????
    2748:	03 c0       	rjmp	.+6      	; 0x2750 <__trampolines_end+0x237e>
	...
    2762:	00 00       	nop
    2764:	00 07       	cpc	r16, r16
    2766:	ff fe       	.word	0xfeff	; ????
    2768:	00 00       	nop
    276a:	00 00       	nop
    276c:	00 00       	nop
    276e:	00 7f       	andi	r16, 0xF0	; 240
    2770:	ff f0       	brie	.+62     	; 0x27b0 <__trampolines_end+0x23de>
    2772:	00 00       	nop
    2774:	00 00       	nop
    2776:	00 00       	nop
    2778:	f8 00       	.word	0x00f8	; ????
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <__trampolines_end+0x23b0>
	...
    2794:	00 00       	nop
    2796:	00 01       	movw	r0, r0
    2798:	ff ff       	.word	0xffff	; ????
    279a:	c0 00       	.word	0x00c0	; ????
    279c:	00 00       	nop
    279e:	00 00       	nop
    27a0:	00 1f       	adc	r16, r16
    27a2:	ff ff       	.word	0xffff	; ????
    27a4:	00 00       	nop
    27a6:	00 00       	nop
    27a8:	00 03       	mulsu	r16, r16
    27aa:	e0 00       	.word	0x00e0	; ????
    27ac:	03 c0       	rjmp	.+6      	; 0x27b4 <__trampolines_end+0x23e2>
	...
    27ca:	3f ff       	.word	0xff3f	; ????
    27cc:	f0 00       	.word	0x00f0	; ????
    27ce:	00 00       	nop
    27d0:	00 00       	nop
    27d2:	00 81       	ld	r16, Z
    27d4:	ff ff       	.word	0xffff	; ????
    27d6:	f0 00       	.word	0x00f0	; ????
    27d8:	00 00       	nop
    27da:	00 1f       	adc	r16, r16
    27dc:	80 00       	.word	0x0080	; ????
    27de:	07 80       	ldd	r0, Z+7	; 0x07
	...
    27fc:	07 ff       	sbrs	r16, 7
    27fe:	ff 00       	.word	0x00ff	; ????
    2800:	00 00       	nop
    2802:	00 00       	nop
    2804:	00 80       	ld	r0, Z
    2806:	7f ff       	.word	0xff7f	; ????
    2808:	ff c0       	rjmp	.+510    	; 0x2a08 <__trampolines_end+0x2636>
    280a:	00 00       	nop
    280c:	03 fe       	sbrs	r0, 3
    280e:	00 00       	nop
    2810:	07 80       	ldd	r0, Z+7	; 0x07
	...
    282e:	01 ff       	sbrs	r16, 1
    2830:	ff f0       	brie	.+62     	; 0x2870 <__trampolines_end+0x249e>
    2832:	00 00       	nop
    2834:	00 00       	nop
    2836:	00 00       	nop
    2838:	07 ff       	sbrs	r16, 7
    283a:	ff ff       	.word	0xffff	; ????
    283c:	c0 01       	movw	r24, r0
    283e:	fe f8       	.word	0xf8fe	; ????
    2840:	00 00       	nop
    2842:	07 80       	ldd	r0, Z+7	; 0x07
	...
    2860:	00 1f       	adc	r16, r16
    2862:	ff ff       	.word	0xffff	; ????
    2864:	00 00       	nop
    2866:	00 00       	nop
    2868:	00 00       	nop
    286a:	00 7f       	andi	r16, 0xF0	; 240
    286c:	ff ff       	.word	0xffff	; ????
    286e:	ff ff       	.word	0xffff	; ????
    2870:	ff c0       	rjmp	.+510    	; 0x2a70 <__trampolines_end+0x269e>
    2872:	00 00       	nop
    2874:	07 80       	ldd	r0, Z+7	; 0x07
	...
    2892:	00 03       	mulsu	r16, r16
    2894:	ff ff       	.word	0xffff	; ????
    2896:	f8 00       	.word	0x00f8	; ????
    2898:	00 00       	nop
    289a:	00 00       	nop
    289c:	00 0f       	add	r16, r16
    289e:	ff ff       	.word	0xffff	; ????
    28a0:	ff ff       	.word	0xffff	; ????
    28a2:	fe 00       	.word	0x00fe	; ????
    28a4:	00 00       	nop
    28a6:	0f 80       	ldd	r0, Y+7	; 0x07
	...
    28c4:	00 00       	nop
    28c6:	3f ff       	.word	0xff3f	; ????
    28c8:	ff 80       	ldd	r15, Y+7	; 0x07
    28ca:	00 00       	nop
    28cc:	01 00       	.word	0x0001	; ????
    28ce:	00 00       	nop
    28d0:	3f ff       	.word	0xff3f	; ????
    28d2:	ff ff       	.word	0xffff	; ????
    28d4:	e0 00       	.word	0x00e0	; ????
    28d6:	00 00       	nop
    28d8:	0f 00       	.word	0x000f	; ????
	...
    28f6:	00 00       	nop
    28f8:	07 ff       	sbrs	r16, 7
    28fa:	ff ff       	.word	0xffff	; ????
    28fc:	00 00       	nop
    28fe:	01 00       	.word	0x0001	; ????
    2900:	00 00       	nop
    2902:	00 3f       	cpi	r16, 0xF0	; 240
    2904:	ff d1       	rcall	.+1022   	; 0x2d04 <__trampolines_end+0x2932>
    2906:	00 00       	nop
    2908:	00 00       	nop
    290a:	0f 00       	.word	0x000f	; ????
	...
    2928:	00 00       	nop
    292a:	00 7f       	andi	r16, 0xF0	; 240
    292c:	ff ff       	.word	0xffff	; ????
    292e:	fc 00       	.word	0x00fc	; ????
    2930:	01 00       	.word	0x0001	; ????
    2932:	00 00       	nop
    2934:	00 01       	movw	r0, r0
    2936:	ff fc       	.word	0xfcff	; ????
    2938:	00 00       	nop
    293a:	00 00       	nop
    293c:	1f 00       	.word	0x001f	; ????
	...
    295a:	00 00       	nop
    295c:	00 01       	movw	r0, r0
    295e:	ff ff       	.word	0xffff	; ????
    2960:	ff ff       	.word	0xffff	; ????
    2962:	01 00       	.word	0x0001	; ????
    2964:	00 00       	nop
    2966:	07 ff       	sbrs	r16, 7
    2968:	ff 00       	.word	0x00ff	; ????
    296a:	00 00       	nop
    296c:	00 00       	nop
    296e:	1f 00       	.word	0x001f	; ????
	...
    2990:	1f ff       	.word	0xff1f	; ????
    2992:	ff ff       	.word	0xffff	; ????
    2994:	ff ff       	.word	0xffff	; ????
    2996:	ff ff       	.word	0xffff	; ????
    2998:	ff ff       	.word	0xffff	; ????
    299a:	e0 00       	.word	0x00e0	; ????
    299c:	00 00       	nop
    299e:	00 00       	nop
    29a0:	1e 00       	.word	0x001e	; ????
	...
    29c2:	00 3f       	cpi	r16, 0xF0	; 240
    29c4:	ff ff       	.word	0xffff	; ????
    29c6:	ff ff       	.word	0xffff	; ????
    29c8:	ff ff       	.word	0xffff	; ????
    29ca:	ff f8       	.word	0xf8ff	; ????
    29cc:	00 00       	nop
    29ce:	00 00       	nop
    29d0:	00 00       	nop
    29d2:	3e 00       	.word	0x003e	; ????
	...
    29f4:	00 00       	nop
    29f6:	1f ff       	.word	0xff1f	; ????
    29f8:	ff ff       	.word	0xffff	; ????
    29fa:	ff ff       	.word	0xffff	; ????
    29fc:	f8 00       	.word	0x00f8	; ????
    29fe:	00 00       	nop
    2a00:	00 00       	nop
    2a02:	00 00       	nop
    2a04:	3c 00       	.word	0x003c	; ????
	...
    2a26:	00 00       	nop
    2a28:	00 01       	movw	r0, r0
    2a2a:	ff ff       	.word	0xffff	; ????
    2a2c:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    2a36:	7c 00       	.word	0x007c	; ????
	...
    2a5c:	01 00       	.word	0x0001	; ????
	...
    2a66:	00 00       	nop
    2a68:	7c 00       	.word	0x007c	; ????
	...
    2a8e:	01 00       	.word	0x0001	; ????
	...
    2a98:	00 00       	nop
    2a9a:	f8 00       	.word	0x00f8	; ????
	...
    2ac0:	02 00       	.word	0x0002	; ????
	...
    2aca:	00 00       	nop
    2acc:	f8 00       	.word	0x00f8	; ????
	...
    2af2:	01 00       	.word	0x0001	; ????
	...
    2afc:	00 01       	movw	r0, r0
    2afe:	f0 00       	.word	0x00f0	; ????
	...
    2b24:	03 00       	.word	0x0003	; ????
	...
    2b2e:	00 03       	mulsu	r16, r16
    2b30:	f0 00       	.word	0x00f0	; ????
	...
    2b56:	01 00       	.word	0x0001	; ????
	...
    2b60:	00 03       	mulsu	r16, r16
    2b62:	e0 00       	.word	0x00e0	; ????
	...
    2b88:	01 00       	.word	0x0001	; ????
	...
    2b92:	00 07       	cpc	r16, r16
    2b94:	e0 00       	.word	0x00e0	; ????
	...
    2bba:	01 00       	.word	0x0001	; ????
	...
    2bc4:	00 07       	cpc	r16, r16
    2bc6:	c0 00       	.word	0x00c0	; ????
	...
    2bec:	01 00       	.word	0x0001	; ????
	...
    2bf6:	00 0f       	add	r16, r16
    2bf8:	c0 00       	.word	0x00c0	; ????
	...
    2c1e:	01 80       	ldd	r0, Z+1	; 0x01
	...
    2c28:	00 1f       	adc	r16, r16
    2c2a:	80 00       	.word	0x0080	; ????
	...
    2c50:	01 80       	ldd	r0, Z+1	; 0x01
	...
    2c5a:	00 3f       	cpi	r16, 0xF0	; 240
	...
    2c80:	00 00       	nop
    2c82:	00 80       	ld	r0, Z
	...
    2c8c:	00 7f       	andi	r16, 0xF0	; 240
	...
    2cb2:	00 00       	nop
    2cb4:	00 c0       	rjmp	.+0      	; 0x2cb6 <__trampolines_end+0x28e4>
	...
    2cbe:	00 7e       	andi	r16, 0xE0	; 224
	...
    2ce4:	00 00       	nop
    2ce6:	00 c0       	rjmp	.+0      	; 0x2ce8 <__trampolines_end+0x2916>
	...
    2cf0:	00 fc       	sbrc	r0, 0
	...
    2d16:	00 00       	nop
    2d18:	00 c0       	rjmp	.+0      	; 0x2d1a <__trampolines_end+0x2948>
	...
    2d22:	01 fc       	sbrc	r0, 1
	...
    2d48:	00 00       	nop
    2d4a:	00 60       	ori	r16, 0x00	; 0
	...
    2d54:	03 f8       	bld	r0, 3
	...
    2d7a:	00 00       	nop
    2d7c:	00 60       	ori	r16, 0x00	; 0
	...
    2d86:	07 f0       	brie	.+0      	; 0x2d88 <__trampolines_end+0x29b6>
	...
    2dac:	00 00       	nop
    2dae:	00 70       	andi	r16, 0x00	; 0
	...
    2db8:	0f e0       	ldi	r16, 0x0F	; 15
	...
    2dde:	00 00       	nop
    2de0:	00 30       	cpi	r16, 0x00	; 0
	...
    2dea:	1f c0       	rjmp	.+62     	; 0x2e2a <__trampolines_end+0x2a58>
	...
    2e10:	00 00       	nop
    2e12:	00 38       	cpi	r16, 0x80	; 128
	...
    2e1c:	3f 80       	ldd	r3, Y+7	; 0x07
	...
    2e42:	00 00       	nop
    2e44:	00 18       	sub	r0, r0
	...
    2e4e:	7f 00       	.word	0x007f	; ????
	...
    2e74:	00 00       	nop
    2e76:	00 1c       	adc	r0, r0
	...
    2e80:	fe 00       	.word	0x00fe	; ????
	...
    2ea6:	00 00       	nop
    2ea8:	00 0e       	add	r0, r16
    2eaa:	00 00       	nop
    2eac:	00 00       	nop
    2eae:	00 00       	nop
    2eb0:	00 01       	movw	r0, r0
    2eb2:	fc 00       	.word	0x00fc	; ????
	...
    2ed8:	00 00       	nop
    2eda:	00 0f       	add	r16, r16
    2edc:	00 00       	nop
    2ede:	00 00       	nop
    2ee0:	00 00       	nop
    2ee2:	00 07       	cpc	r16, r16
    2ee4:	f8 00       	.word	0x00f8	; ????
	...
    2f0a:	00 00       	nop
    2f0c:	00 07       	cpc	r16, r16
    2f0e:	80 00       	.word	0x0080	; ????
    2f10:	00 00       	nop
    2f12:	00 00       	nop
    2f14:	00 0f       	add	r16, r16
    2f16:	f0 00       	.word	0x00f0	; ????
	...
    2f3c:	00 00       	nop
    2f3e:	00 03       	mulsu	r16, r16
    2f40:	c0 00       	.word	0x00c0	; ????
    2f42:	00 00       	nop
    2f44:	00 00       	nop
    2f46:	00 1f       	adc	r16, r16
    2f48:	e0 00       	.word	0x00e0	; ????
	...
    2f6e:	00 00       	nop
    2f70:	00 01       	movw	r0, r0
    2f72:	e0 00       	.word	0x00e0	; ????
    2f74:	00 00       	nop
    2f76:	00 00       	nop
    2f78:	00 7f       	andi	r16, 0xF0	; 240
    2f7a:	c0 00       	.word	0x00c0	; ????
	...
    2fa0:	00 00       	nop
    2fa2:	00 01       	movw	r0, r0
    2fa4:	f0 00       	.word	0x00f0	; ????
    2fa6:	00 00       	nop
    2fa8:	00 00       	nop
    2faa:	01 ff       	sbrs	r16, 1
    2fac:	80 00       	.word	0x0080	; ????
	...
    2fd6:	f8 00       	.word	0x00f8	; ????
    2fd8:	00 00       	nop
    2fda:	00 00       	nop
    2fdc:	03 fe       	sbrs	r0, 3
	...
    3006:	00 00       	nop
    3008:	7e 00       	.word	0x007e	; ????
    300a:	00 00       	nop
    300c:	00 00       	nop
    300e:	0f fc       	.word	0xfc0f	; ????
	...
    3038:	00 00       	nop
    303a:	3f 00       	.word	0x003f	; ????
    303c:	00 00       	nop
    303e:	00 00       	nop
    3040:	3f f0       	brie	.+14     	; 0x3050 <__trampolines_end+0x2c7e>
	...
    306a:	00 00       	nop
    306c:	1f c0       	rjmp	.+62     	; 0x30ac <__trampolines_end+0x2cda>
    306e:	00 00       	nop
    3070:	00 00       	nop
    3072:	ff e0       	ldi	r31, 0x0F	; 15
	...
    309c:	00 00       	nop
    309e:	07 f0       	brie	.+0      	; 0x30a0 <__trampolines_end+0x2cce>
    30a0:	00 00       	nop
    30a2:	00 07       	cpc	r16, r16
    30a4:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    30ce:	00 00       	nop
    30d0:	03 fc       	sbrc	r0, 3
    30d2:	00 00       	nop
    30d4:	00 3f       	cpi	r16, 0xF0	; 240
    30d6:	fe 00       	.word	0x00fe	; ????
	...
    3100:	00 00       	nop
    3102:	00 ff       	sbrs	r16, 0
    3104:	c0 00       	.word	0x00c0	; ????
    3106:	03 ff       	sbrs	r16, 3
    3108:	f8 00       	.word	0x00f8	; ????
	...
    3132:	00 00       	nop
    3134:	00 7f       	andi	r16, 0xF0	; 240
    3136:	ff c3       	rjmp	.+2046   	; 0x3936 <getDoubleAsString+0x54>
    3138:	ff ff       	.word	0xffff	; ????
    313a:	e0 00       	.word	0x00e0	; ????
	...
    3164:	00 00       	nop
    3166:	00 1f       	adc	r16, r16
    3168:	ff ff       	.word	0xffff	; ????
    316a:	ff ff       	.word	0xffff	; ????
	...
    3198:	00 03       	mulsu	r16, r16
    319a:	ff ff       	.word	0xffff	; ????
    319c:	ff fc       	.word	0xfcff	; ????
	...
    31ca:	00 00       	nop
    31cc:	ff ff       	.word	0xffff	; ????
    31ce:	ff c0       	rjmp	.+510    	; 0x33ce <__do_copy_data+0xa>
	...
    31fc:	00 00       	nop
    31fe:	07 ff       	sbrs	r16, 7
    3200:	f8 00       	.word	0x00f8	; ????
	...

000032b2 <__c.2161>:
    32b2:	6e 61 6e 00                                         nan.

000032b6 <__c.2159>:
    32b6:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
    32c6:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
    32d6:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
    32e6:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
    32f6:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
    3306:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
    3316:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
    3326:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
    3336:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
    3346:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
    3356:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
    3366:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
    3376:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
    3386:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
    3396:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
    33a6:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000033b4 <__ctors_end>:
    33b4:	11 24       	eor	r1, r1
    33b6:	1f be       	out	0x3f, r1	; 63
    33b8:	cf ef       	ldi	r28, 0xFF	; 255
    33ba:	cd bf       	out	0x3d, r28	; 61
    33bc:	df e9       	ldi	r29, 0x9F	; 159
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	00 e0       	ldi	r16, 0x00	; 0
    33c2:	0c bf       	out	0x3c, r16	; 60

000033c4 <__do_copy_data>:
    33c4:	12 e6       	ldi	r17, 0x62	; 98
    33c6:	a0 e0       	ldi	r26, 0x00	; 0
    33c8:	b0 e2       	ldi	r27, 0x20	; 32
    33ca:	e2 ec       	ldi	r30, 0xC2	; 194
    33cc:	f1 e8       	ldi	r31, 0x81	; 129
    33ce:	00 e0       	ldi	r16, 0x00	; 0
    33d0:	0b bf       	out	0x3b, r16	; 59
    33d2:	02 c0       	rjmp	.+4      	; 0x33d8 <__do_copy_data+0x14>
    33d4:	07 90       	elpm	r0, Z+
    33d6:	0d 92       	st	X+, r0
    33d8:	ae 32       	cpi	r26, 0x2E	; 46
    33da:	b1 07       	cpc	r27, r17
    33dc:	d9 f7       	brne	.-10     	; 0x33d4 <__do_copy_data+0x10>

000033de <__do_clear_bss>:
    33de:	22 e9       	ldi	r18, 0x92	; 146
    33e0:	ae e2       	ldi	r26, 0x2E	; 46
    33e2:	b2 e6       	ldi	r27, 0x62	; 98
    33e4:	01 c0       	rjmp	.+2      	; 0x33e8 <.do_clear_bss_start>

000033e6 <.do_clear_bss_loop>:
    33e6:	1d 92       	st	X+, r1

000033e8 <.do_clear_bss_start>:
    33e8:	a0 35       	cpi	r26, 0x50	; 80
    33ea:	b2 07       	cpc	r27, r18
    33ec:	e1 f7       	brne	.-8      	; 0x33e6 <.do_clear_bss_loop>
    33ee:	0e 94 95 35 	call	0x6b2a	; 0x6b2a <main>
    33f2:	0c 94 df 40 	jmp	0x81be	; 0x81be <_exit>

000033f6 <__bad_interrupt>:
    33f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000033fa <getLargeCharacterImage>:
    33fa:	99 27       	eor	r25, r25
    33fc:	87 fd       	sbrc	r24, 7
    33fe:	90 95       	com	r25
    3400:	a9 2f       	mov	r26, r25
    3402:	b9 2f       	mov	r27, r25
    3404:	fc 01       	movw	r30, r24
    3406:	b0 97       	sbiw	r30, 0x20	; 32
    3408:	ef 35       	cpi	r30, 0x5F	; 95
    340a:	f1 05       	cpc	r31, r1
    340c:	08 f0       	brcs	.+2      	; 0x3410 <getLargeCharacterImage+0x16>
    340e:	3e c2       	rjmp	.+1148   	; 0x388c <getLargeCharacterImage+0x492>
    3410:	e2 50       	subi	r30, 0x02	; 2
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	0c 94 3c 3d 	jmp	0x7a78	; 0x7a78 <__tablejump2__>
    3418:	82 e0       	ldi	r24, 0x02	; 2
    341a:	fb 01       	movw	r30, r22
    341c:	80 83       	st	Z, r24
    341e:	8f ee       	ldi	r24, 0xEF	; 239
    3420:	91 e5       	ldi	r25, 0x51	; 81
    3422:	08 95       	ret
    3424:	82 e0       	ldi	r24, 0x02	; 2
    3426:	fb 01       	movw	r30, r22
    3428:	80 83       	st	Z, r24
    342a:	89 e9       	ldi	r24, 0x99	; 153
    342c:	91 e5       	ldi	r25, 0x51	; 81
    342e:	08 95       	ret
    3430:	83 e0       	ldi	r24, 0x03	; 3
    3432:	fb 01       	movw	r30, r22
    3434:	80 83       	st	Z, r24
    3436:	88 e1       	ldi	r24, 0x18	; 24
    3438:	91 e5       	ldi	r25, 0x51	; 81
    343a:	08 95       	ret
    343c:	84 e0       	ldi	r24, 0x04	; 4
    343e:	fb 01       	movw	r30, r22
    3440:	80 83       	st	Z, r24
    3442:	8c e6       	ldi	r24, 0x6C	; 108
    3444:	90 e5       	ldi	r25, 0x50	; 80
    3446:	08 95       	ret
    3448:	83 e0       	ldi	r24, 0x03	; 3
    344a:	fb 01       	movw	r30, r22
    344c:	80 83       	st	Z, r24
    344e:	8b ee       	ldi	r24, 0xEB	; 235
    3450:	9f e4       	ldi	r25, 0x4F	; 79
    3452:	08 95       	ret
    3454:	86 e0       	ldi	r24, 0x06	; 6
    3456:	fb 01       	movw	r30, r22
    3458:	80 83       	st	Z, r24
    345a:	89 ee       	ldi	r24, 0xE9	; 233
    345c:	9e e4       	ldi	r25, 0x4E	; 78
    345e:	08 95       	ret
    3460:	84 e0       	ldi	r24, 0x04	; 4
    3462:	fb 01       	movw	r30, r22
    3464:	80 83       	st	Z, r24
    3466:	8d e3       	ldi	r24, 0x3D	; 61
    3468:	9e e4       	ldi	r25, 0x4E	; 78
    346a:	08 95       	ret
    346c:	82 e0       	ldi	r24, 0x02	; 2
    346e:	fb 01       	movw	r30, r22
    3470:	80 83       	st	Z, r24
    3472:	87 ee       	ldi	r24, 0xE7	; 231
    3474:	9d e4       	ldi	r25, 0x4D	; 77
    3476:	08 95       	ret
    3478:	82 e0       	ldi	r24, 0x02	; 2
    347a:	fb 01       	movw	r30, r22
    347c:	80 83       	st	Z, r24
    347e:	81 e9       	ldi	r24, 0x91	; 145
    3480:	9d e4       	ldi	r25, 0x4D	; 77
    3482:	08 95       	ret
    3484:	82 e0       	ldi	r24, 0x02	; 2
    3486:	fb 01       	movw	r30, r22
    3488:	80 83       	st	Z, r24
    348a:	8b e3       	ldi	r24, 0x3B	; 59
    348c:	9d e4       	ldi	r25, 0x4D	; 77
    348e:	08 95       	ret
    3490:	83 e0       	ldi	r24, 0x03	; 3
    3492:	fb 01       	movw	r30, r22
    3494:	80 83       	st	Z, r24
    3496:	8a eb       	ldi	r24, 0xBA	; 186
    3498:	9c e4       	ldi	r25, 0x4C	; 76
    349a:	08 95       	ret
    349c:	84 e0       	ldi	r24, 0x04	; 4
    349e:	fb 01       	movw	r30, r22
    34a0:	80 83       	st	Z, r24
    34a2:	8e e0       	ldi	r24, 0x0E	; 14
    34a4:	9c e4       	ldi	r25, 0x4C	; 76
    34a6:	08 95       	ret
    34a8:	82 e0       	ldi	r24, 0x02	; 2
    34aa:	fb 01       	movw	r30, r22
    34ac:	80 83       	st	Z, r24
    34ae:	88 eb       	ldi	r24, 0xB8	; 184
    34b0:	9b e4       	ldi	r25, 0x4B	; 75
    34b2:	08 95       	ret
    34b4:	82 e0       	ldi	r24, 0x02	; 2
    34b6:	fb 01       	movw	r30, r22
    34b8:	80 83       	st	Z, r24
    34ba:	82 e6       	ldi	r24, 0x62	; 98
    34bc:	9b e4       	ldi	r25, 0x4B	; 75
    34be:	08 95       	ret
    34c0:	82 e0       	ldi	r24, 0x02	; 2
    34c2:	fb 01       	movw	r30, r22
    34c4:	80 83       	st	Z, r24
    34c6:	8c e0       	ldi	r24, 0x0C	; 12
    34c8:	9b e4       	ldi	r25, 0x4B	; 75
    34ca:	08 95       	ret
    34cc:	83 e0       	ldi	r24, 0x03	; 3
    34ce:	fb 01       	movw	r30, r22
    34d0:	80 83       	st	Z, r24
    34d2:	8b e8       	ldi	r24, 0x8B	; 139
    34d4:	9a e4       	ldi	r25, 0x4A	; 74
    34d6:	08 95       	ret
    34d8:	83 e0       	ldi	r24, 0x03	; 3
    34da:	fb 01       	movw	r30, r22
    34dc:	80 83       	st	Z, r24
    34de:	8a e0       	ldi	r24, 0x0A	; 10
    34e0:	9a e4       	ldi	r25, 0x4A	; 74
    34e2:	08 95       	ret
    34e4:	83 e0       	ldi	r24, 0x03	; 3
    34e6:	fb 01       	movw	r30, r22
    34e8:	80 83       	st	Z, r24
    34ea:	89 e8       	ldi	r24, 0x89	; 137
    34ec:	99 e4       	ldi	r25, 0x49	; 73
    34ee:	08 95       	ret
    34f0:	83 e0       	ldi	r24, 0x03	; 3
    34f2:	fb 01       	movw	r30, r22
    34f4:	80 83       	st	Z, r24
    34f6:	88 e0       	ldi	r24, 0x08	; 8
    34f8:	99 e4       	ldi	r25, 0x49	; 73
    34fa:	08 95       	ret
    34fc:	83 e0       	ldi	r24, 0x03	; 3
    34fe:	fb 01       	movw	r30, r22
    3500:	80 83       	st	Z, r24
    3502:	87 e8       	ldi	r24, 0x87	; 135
    3504:	98 e4       	ldi	r25, 0x48	; 72
    3506:	08 95       	ret
    3508:	83 e0       	ldi	r24, 0x03	; 3
    350a:	fb 01       	movw	r30, r22
    350c:	80 83       	st	Z, r24
    350e:	86 e0       	ldi	r24, 0x06	; 6
    3510:	98 e4       	ldi	r25, 0x48	; 72
    3512:	08 95       	ret
    3514:	83 e0       	ldi	r24, 0x03	; 3
    3516:	fb 01       	movw	r30, r22
    3518:	80 83       	st	Z, r24
    351a:	85 e8       	ldi	r24, 0x85	; 133
    351c:	97 e4       	ldi	r25, 0x47	; 71
    351e:	08 95       	ret
    3520:	83 e0       	ldi	r24, 0x03	; 3
    3522:	fb 01       	movw	r30, r22
    3524:	80 83       	st	Z, r24
    3526:	84 e0       	ldi	r24, 0x04	; 4
    3528:	97 e4       	ldi	r25, 0x47	; 71
    352a:	08 95       	ret
    352c:	83 e0       	ldi	r24, 0x03	; 3
    352e:	fb 01       	movw	r30, r22
    3530:	80 83       	st	Z, r24
    3532:	83 e8       	ldi	r24, 0x83	; 131
    3534:	96 e4       	ldi	r25, 0x46	; 70
    3536:	08 95       	ret
    3538:	83 e0       	ldi	r24, 0x03	; 3
    353a:	fb 01       	movw	r30, r22
    353c:	80 83       	st	Z, r24
    353e:	82 e0       	ldi	r24, 0x02	; 2
    3540:	96 e4       	ldi	r25, 0x46	; 70
    3542:	08 95       	ret
    3544:	83 e0       	ldi	r24, 0x03	; 3
    3546:	fb 01       	movw	r30, r22
    3548:	80 83       	st	Z, r24
    354a:	81 e8       	ldi	r24, 0x81	; 129
    354c:	95 e4       	ldi	r25, 0x45	; 69
    354e:	08 95       	ret
    3550:	82 e0       	ldi	r24, 0x02	; 2
    3552:	fb 01       	movw	r30, r22
    3554:	80 83       	st	Z, r24
    3556:	8b e2       	ldi	r24, 0x2B	; 43
    3558:	95 e4       	ldi	r25, 0x45	; 69
    355a:	08 95       	ret
    355c:	82 e0       	ldi	r24, 0x02	; 2
    355e:	fb 01       	movw	r30, r22
    3560:	80 83       	st	Z, r24
    3562:	85 ed       	ldi	r24, 0xD5	; 213
    3564:	94 e4       	ldi	r25, 0x44	; 68
    3566:	08 95       	ret
    3568:	84 e0       	ldi	r24, 0x04	; 4
    356a:	fb 01       	movw	r30, r22
    356c:	80 83       	st	Z, r24
    356e:	89 e2       	ldi	r24, 0x29	; 41
    3570:	94 e4       	ldi	r25, 0x44	; 68
    3572:	08 95       	ret
    3574:	84 e0       	ldi	r24, 0x04	; 4
    3576:	fb 01       	movw	r30, r22
    3578:	80 83       	st	Z, r24
    357a:	8d e7       	ldi	r24, 0x7D	; 125
    357c:	93 e4       	ldi	r25, 0x43	; 67
    357e:	08 95       	ret
    3580:	84 e0       	ldi	r24, 0x04	; 4
    3582:	fb 01       	movw	r30, r22
    3584:	80 83       	st	Z, r24
    3586:	81 ed       	ldi	r24, 0xD1	; 209
    3588:	92 e4       	ldi	r25, 0x42	; 66
    358a:	08 95       	ret
    358c:	83 e0       	ldi	r24, 0x03	; 3
    358e:	fb 01       	movw	r30, r22
    3590:	80 83       	st	Z, r24
    3592:	80 e5       	ldi	r24, 0x50	; 80
    3594:	92 e4       	ldi	r25, 0x42	; 66
    3596:	08 95       	ret
    3598:	85 e0       	ldi	r24, 0x05	; 5
    359a:	fb 01       	movw	r30, r22
    359c:	80 83       	st	Z, r24
    359e:	89 e7       	ldi	r24, 0x79	; 121
    35a0:	91 e4       	ldi	r25, 0x41	; 65
    35a2:	08 95       	ret
    35a4:	84 e0       	ldi	r24, 0x04	; 4
    35a6:	fb 01       	movw	r30, r22
    35a8:	80 83       	st	Z, r24
    35aa:	8d ec       	ldi	r24, 0xCD	; 205
    35ac:	90 e4       	ldi	r25, 0x40	; 64
    35ae:	08 95       	ret
    35b0:	84 e0       	ldi	r24, 0x04	; 4
    35b2:	fb 01       	movw	r30, r22
    35b4:	80 83       	st	Z, r24
    35b6:	81 e2       	ldi	r24, 0x21	; 33
    35b8:	90 e4       	ldi	r25, 0x40	; 64
    35ba:	08 95       	ret
    35bc:	83 e0       	ldi	r24, 0x03	; 3
    35be:	fb 01       	movw	r30, r22
    35c0:	80 83       	st	Z, r24
    35c2:	80 ea       	ldi	r24, 0xA0	; 160
    35c4:	9f e3       	ldi	r25, 0x3F	; 63
    35c6:	08 95       	ret
    35c8:	84 e0       	ldi	r24, 0x04	; 4
    35ca:	fb 01       	movw	r30, r22
    35cc:	80 83       	st	Z, r24
    35ce:	84 ef       	ldi	r24, 0xF4	; 244
    35d0:	9e e3       	ldi	r25, 0x3E	; 62
    35d2:	08 95       	ret
    35d4:	83 e0       	ldi	r24, 0x03	; 3
    35d6:	fb 01       	movw	r30, r22
    35d8:	80 83       	st	Z, r24
    35da:	83 e7       	ldi	r24, 0x73	; 115
    35dc:	9e e3       	ldi	r25, 0x3E	; 62
    35de:	08 95       	ret
    35e0:	83 e0       	ldi	r24, 0x03	; 3
    35e2:	fb 01       	movw	r30, r22
    35e4:	80 83       	st	Z, r24
    35e6:	82 ef       	ldi	r24, 0xF2	; 242
    35e8:	9d e3       	ldi	r25, 0x3D	; 61
    35ea:	08 95       	ret
    35ec:	84 e0       	ldi	r24, 0x04	; 4
    35ee:	fb 01       	movw	r30, r22
    35f0:	80 83       	st	Z, r24
    35f2:	86 e4       	ldi	r24, 0x46	; 70
    35f4:	9d e3       	ldi	r25, 0x3D	; 61
    35f6:	08 95       	ret
    35f8:	84 e0       	ldi	r24, 0x04	; 4
    35fa:	fb 01       	movw	r30, r22
    35fc:	80 83       	st	Z, r24
    35fe:	8a e9       	ldi	r24, 0x9A	; 154
    3600:	9c e3       	ldi	r25, 0x3C	; 60
    3602:	08 95       	ret
    3604:	83 e0       	ldi	r24, 0x03	; 3
    3606:	fb 01       	movw	r30, r22
    3608:	80 83       	st	Z, r24
    360a:	89 e1       	ldi	r24, 0x19	; 25
    360c:	9c e3       	ldi	r25, 0x3C	; 60
    360e:	08 95       	ret
    3610:	83 e0       	ldi	r24, 0x03	; 3
    3612:	fb 01       	movw	r30, r22
    3614:	80 83       	st	Z, r24
    3616:	88 e9       	ldi	r24, 0x98	; 152
    3618:	9b e3       	ldi	r25, 0x3B	; 59
    361a:	08 95       	ret
    361c:	84 e0       	ldi	r24, 0x04	; 4
    361e:	fb 01       	movw	r30, r22
    3620:	80 83       	st	Z, r24
    3622:	8c ee       	ldi	r24, 0xEC	; 236
    3624:	9a e3       	ldi	r25, 0x3A	; 58
    3626:	08 95       	ret
    3628:	83 e0       	ldi	r24, 0x03	; 3
    362a:	fb 01       	movw	r30, r22
    362c:	80 83       	st	Z, r24
    362e:	8b e6       	ldi	r24, 0x6B	; 107
    3630:	9a e3       	ldi	r25, 0x3A	; 58
    3632:	08 95       	ret
    3634:	84 e0       	ldi	r24, 0x04	; 4
    3636:	fb 01       	movw	r30, r22
    3638:	80 83       	st	Z, r24
    363a:	8f eb       	ldi	r24, 0xBF	; 191
    363c:	99 e3       	ldi	r25, 0x39	; 57
    363e:	08 95       	ret
    3640:	84 e0       	ldi	r24, 0x04	; 4
    3642:	fb 01       	movw	r30, r22
    3644:	80 83       	st	Z, r24
    3646:	83 e1       	ldi	r24, 0x13	; 19
    3648:	99 e3       	ldi	r25, 0x39	; 57
    364a:	08 95       	ret
    364c:	84 e0       	ldi	r24, 0x04	; 4
    364e:	fb 01       	movw	r30, r22
    3650:	80 83       	st	Z, r24
    3652:	87 e6       	ldi	r24, 0x67	; 103
    3654:	98 e3       	ldi	r25, 0x38	; 56
    3656:	08 95       	ret
    3658:	83 e0       	ldi	r24, 0x03	; 3
    365a:	fb 01       	movw	r30, r22
    365c:	80 83       	st	Z, r24
    365e:	86 ee       	ldi	r24, 0xE6	; 230
    3660:	97 e3       	ldi	r25, 0x37	; 55
    3662:	08 95       	ret
    3664:	84 e0       	ldi	r24, 0x04	; 4
    3666:	fb 01       	movw	r30, r22
    3668:	80 83       	st	Z, r24
    366a:	8a e3       	ldi	r24, 0x3A	; 58
    366c:	97 e3       	ldi	r25, 0x37	; 55
    366e:	08 95       	ret
    3670:	84 e0       	ldi	r24, 0x04	; 4
    3672:	fb 01       	movw	r30, r22
    3674:	80 83       	st	Z, r24
    3676:	8e e8       	ldi	r24, 0x8E	; 142
    3678:	96 e3       	ldi	r25, 0x36	; 54
    367a:	08 95       	ret
    367c:	83 e0       	ldi	r24, 0x03	; 3
    367e:	fb 01       	movw	r30, r22
    3680:	80 83       	st	Z, r24
    3682:	8d e0       	ldi	r24, 0x0D	; 13
    3684:	96 e3       	ldi	r25, 0x36	; 54
    3686:	08 95       	ret
    3688:	83 e0       	ldi	r24, 0x03	; 3
    368a:	fb 01       	movw	r30, r22
    368c:	80 83       	st	Z, r24
    368e:	8c e8       	ldi	r24, 0x8C	; 140
    3690:	95 e3       	ldi	r25, 0x35	; 53
    3692:	08 95       	ret
    3694:	84 e0       	ldi	r24, 0x04	; 4
    3696:	fb 01       	movw	r30, r22
    3698:	80 83       	st	Z, r24
    369a:	80 ee       	ldi	r24, 0xE0	; 224
    369c:	94 e3       	ldi	r25, 0x34	; 52
    369e:	08 95       	ret
    36a0:	83 e0       	ldi	r24, 0x03	; 3
    36a2:	fb 01       	movw	r30, r22
    36a4:	80 83       	st	Z, r24
    36a6:	8f e5       	ldi	r24, 0x5F	; 95
    36a8:	94 e3       	ldi	r25, 0x34	; 52
    36aa:	08 95       	ret
    36ac:	85 e0       	ldi	r24, 0x05	; 5
    36ae:	fb 01       	movw	r30, r22
    36b0:	80 83       	st	Z, r24
    36b2:	88 e8       	ldi	r24, 0x88	; 136
    36b4:	93 e3       	ldi	r25, 0x33	; 51
    36b6:	08 95       	ret
    36b8:	84 e0       	ldi	r24, 0x04	; 4
    36ba:	fb 01       	movw	r30, r22
    36bc:	80 83       	st	Z, r24
    36be:	8c ed       	ldi	r24, 0xDC	; 220
    36c0:	92 e3       	ldi	r25, 0x32	; 50
    36c2:	08 95       	ret
    36c4:	84 e0       	ldi	r24, 0x04	; 4
    36c6:	fb 01       	movw	r30, r22
    36c8:	80 83       	st	Z, r24
    36ca:	80 e3       	ldi	r24, 0x30	; 48
    36cc:	92 e3       	ldi	r25, 0x32	; 50
    36ce:	08 95       	ret
    36d0:	83 e0       	ldi	r24, 0x03	; 3
    36d2:	fb 01       	movw	r30, r22
    36d4:	80 83       	st	Z, r24
    36d6:	8f ea       	ldi	r24, 0xAF	; 175
    36d8:	91 e3       	ldi	r25, 0x31	; 49
    36da:	08 95       	ret
    36dc:	82 e0       	ldi	r24, 0x02	; 2
    36de:	fb 01       	movw	r30, r22
    36e0:	80 83       	st	Z, r24
    36e2:	89 e5       	ldi	r24, 0x59	; 89
    36e4:	91 e3       	ldi	r25, 0x31	; 49
    36e6:	08 95       	ret
    36e8:	83 e0       	ldi	r24, 0x03	; 3
    36ea:	fb 01       	movw	r30, r22
    36ec:	80 83       	st	Z, r24
    36ee:	88 ed       	ldi	r24, 0xD8	; 216
    36f0:	90 e3       	ldi	r25, 0x30	; 48
    36f2:	08 95       	ret
    36f4:	82 e0       	ldi	r24, 0x02	; 2
    36f6:	fb 01       	movw	r30, r22
    36f8:	80 83       	st	Z, r24
    36fa:	82 e8       	ldi	r24, 0x82	; 130
    36fc:	90 e3       	ldi	r25, 0x30	; 48
    36fe:	08 95       	ret
    3700:	84 e0       	ldi	r24, 0x04	; 4
    3702:	fb 01       	movw	r30, r22
    3704:	80 83       	st	Z, r24
    3706:	86 ed       	ldi	r24, 0xD6	; 214
    3708:	9f e2       	ldi	r25, 0x2F	; 47
    370a:	08 95       	ret
    370c:	83 e0       	ldi	r24, 0x03	; 3
    370e:	fb 01       	movw	r30, r22
    3710:	80 83       	st	Z, r24
    3712:	85 e5       	ldi	r24, 0x55	; 85
    3714:	9f e2       	ldi	r25, 0x2F	; 47
    3716:	08 95       	ret
    3718:	83 e0       	ldi	r24, 0x03	; 3
    371a:	fb 01       	movw	r30, r22
    371c:	80 83       	st	Z, r24
    371e:	84 ed       	ldi	r24, 0xD4	; 212
    3720:	9e e2       	ldi	r25, 0x2E	; 46
    3722:	08 95       	ret
    3724:	83 e0       	ldi	r24, 0x03	; 3
    3726:	fb 01       	movw	r30, r22
    3728:	80 83       	st	Z, r24
    372a:	83 e5       	ldi	r24, 0x53	; 83
    372c:	9e e2       	ldi	r25, 0x2E	; 46
    372e:	08 95       	ret
    3730:	83 e0       	ldi	r24, 0x03	; 3
    3732:	fb 01       	movw	r30, r22
    3734:	80 83       	st	Z, r24
    3736:	82 ed       	ldi	r24, 0xD2	; 210
    3738:	9d e2       	ldi	r25, 0x2D	; 45
    373a:	08 95       	ret
    373c:	83 e0       	ldi	r24, 0x03	; 3
    373e:	fb 01       	movw	r30, r22
    3740:	80 83       	st	Z, r24
    3742:	81 e5       	ldi	r24, 0x51	; 81
    3744:	9d e2       	ldi	r25, 0x2D	; 45
    3746:	08 95       	ret
    3748:	83 e0       	ldi	r24, 0x03	; 3
    374a:	fb 01       	movw	r30, r22
    374c:	80 83       	st	Z, r24
    374e:	80 ed       	ldi	r24, 0xD0	; 208
    3750:	9c e2       	ldi	r25, 0x2C	; 44
    3752:	08 95       	ret
    3754:	83 e0       	ldi	r24, 0x03	; 3
    3756:	fb 01       	movw	r30, r22
    3758:	80 83       	st	Z, r24
    375a:	8f e4       	ldi	r24, 0x4F	; 79
    375c:	9c e2       	ldi	r25, 0x2C	; 44
    375e:	08 95       	ret
    3760:	82 e0       	ldi	r24, 0x02	; 2
    3762:	fb 01       	movw	r30, r22
    3764:	80 83       	st	Z, r24
    3766:	89 ef       	ldi	r24, 0xF9	; 249
    3768:	9b e2       	ldi	r25, 0x2B	; 43
    376a:	08 95       	ret
    376c:	83 e0       	ldi	r24, 0x03	; 3
    376e:	fb 01       	movw	r30, r22
    3770:	80 83       	st	Z, r24
    3772:	88 e7       	ldi	r24, 0x78	; 120
    3774:	9b e2       	ldi	r25, 0x2B	; 43
    3776:	08 95       	ret
    3778:	83 e0       	ldi	r24, 0x03	; 3
    377a:	fb 01       	movw	r30, r22
    377c:	80 83       	st	Z, r24
    377e:	87 ef       	ldi	r24, 0xF7	; 247
    3780:	9a e2       	ldi	r25, 0x2A	; 42
    3782:	08 95       	ret
    3784:	82 e0       	ldi	r24, 0x02	; 2
    3786:	fb 01       	movw	r30, r22
    3788:	80 83       	st	Z, r24
    378a:	81 ea       	ldi	r24, 0xA1	; 161
    378c:	9a e2       	ldi	r25, 0x2A	; 42
    378e:	08 95       	ret
    3790:	82 e0       	ldi	r24, 0x02	; 2
    3792:	fb 01       	movw	r30, r22
    3794:	80 83       	st	Z, r24
    3796:	8b e4       	ldi	r24, 0x4B	; 75
    3798:	9a e2       	ldi	r25, 0x2A	; 42
    379a:	08 95       	ret
    379c:	83 e0       	ldi	r24, 0x03	; 3
    379e:	fb 01       	movw	r30, r22
    37a0:	80 83       	st	Z, r24
    37a2:	8a ec       	ldi	r24, 0xCA	; 202
    37a4:	99 e2       	ldi	r25, 0x29	; 41
    37a6:	08 95       	ret
    37a8:	82 e0       	ldi	r24, 0x02	; 2
    37aa:	fb 01       	movw	r30, r22
    37ac:	80 83       	st	Z, r24
    37ae:	84 e7       	ldi	r24, 0x74	; 116
    37b0:	99 e2       	ldi	r25, 0x29	; 41
    37b2:	08 95       	ret
    37b4:	85 e0       	ldi	r24, 0x05	; 5
    37b6:	fb 01       	movw	r30, r22
    37b8:	80 83       	st	Z, r24
    37ba:	8d e9       	ldi	r24, 0x9D	; 157
    37bc:	98 e2       	ldi	r25, 0x28	; 40
    37be:	08 95       	ret
    37c0:	83 e0       	ldi	r24, 0x03	; 3
    37c2:	fb 01       	movw	r30, r22
    37c4:	80 83       	st	Z, r24
    37c6:	8c e1       	ldi	r24, 0x1C	; 28
    37c8:	98 e2       	ldi	r25, 0x28	; 40
    37ca:	08 95       	ret
    37cc:	83 e0       	ldi	r24, 0x03	; 3
    37ce:	fb 01       	movw	r30, r22
    37d0:	80 83       	st	Z, r24
    37d2:	8b e9       	ldi	r24, 0x9B	; 155
    37d4:	97 e2       	ldi	r25, 0x27	; 39
    37d6:	08 95       	ret
    37d8:	83 e0       	ldi	r24, 0x03	; 3
    37da:	fb 01       	movw	r30, r22
    37dc:	80 83       	st	Z, r24
    37de:	8a e1       	ldi	r24, 0x1A	; 26
    37e0:	97 e2       	ldi	r25, 0x27	; 39
    37e2:	08 95       	ret
    37e4:	83 e0       	ldi	r24, 0x03	; 3
    37e6:	fb 01       	movw	r30, r22
    37e8:	80 83       	st	Z, r24
    37ea:	89 e9       	ldi	r24, 0x99	; 153
    37ec:	96 e2       	ldi	r25, 0x26	; 38
    37ee:	08 95       	ret
    37f0:	82 e0       	ldi	r24, 0x02	; 2
    37f2:	fb 01       	movw	r30, r22
    37f4:	80 83       	st	Z, r24
    37f6:	83 e4       	ldi	r24, 0x43	; 67
    37f8:	96 e2       	ldi	r25, 0x26	; 38
    37fa:	08 95       	ret
    37fc:	83 e0       	ldi	r24, 0x03	; 3
    37fe:	fb 01       	movw	r30, r22
    3800:	80 83       	st	Z, r24
    3802:	82 ec       	ldi	r24, 0xC2	; 194
    3804:	95 e2       	ldi	r25, 0x25	; 37
    3806:	08 95       	ret
    3808:	82 e0       	ldi	r24, 0x02	; 2
    380a:	fb 01       	movw	r30, r22
    380c:	80 83       	st	Z, r24
    380e:	8c e6       	ldi	r24, 0x6C	; 108
    3810:	95 e2       	ldi	r25, 0x25	; 37
    3812:	08 95       	ret
    3814:	83 e0       	ldi	r24, 0x03	; 3
    3816:	fb 01       	movw	r30, r22
    3818:	80 83       	st	Z, r24
    381a:	8b ee       	ldi	r24, 0xEB	; 235
    381c:	94 e2       	ldi	r25, 0x24	; 36
    381e:	08 95       	ret
    3820:	83 e0       	ldi	r24, 0x03	; 3
    3822:	fb 01       	movw	r30, r22
    3824:	80 83       	st	Z, r24
    3826:	8a e6       	ldi	r24, 0x6A	; 106
    3828:	94 e2       	ldi	r25, 0x24	; 36
    382a:	08 95       	ret
    382c:	84 e0       	ldi	r24, 0x04	; 4
    382e:	fb 01       	movw	r30, r22
    3830:	80 83       	st	Z, r24
    3832:	8e eb       	ldi	r24, 0xBE	; 190
    3834:	93 e2       	ldi	r25, 0x23	; 35
    3836:	08 95       	ret
    3838:	83 e0       	ldi	r24, 0x03	; 3
    383a:	fb 01       	movw	r30, r22
    383c:	80 83       	st	Z, r24
    383e:	8d e3       	ldi	r24, 0x3D	; 61
    3840:	93 e2       	ldi	r25, 0x23	; 35
    3842:	08 95       	ret
    3844:	83 e0       	ldi	r24, 0x03	; 3
    3846:	fb 01       	movw	r30, r22
    3848:	80 83       	st	Z, r24
    384a:	8c eb       	ldi	r24, 0xBC	; 188
    384c:	92 e2       	ldi	r25, 0x22	; 34
    384e:	08 95       	ret
    3850:	83 e0       	ldi	r24, 0x03	; 3
    3852:	fb 01       	movw	r30, r22
    3854:	80 83       	st	Z, r24
    3856:	8b e3       	ldi	r24, 0x3B	; 59
    3858:	92 e2       	ldi	r25, 0x22	; 34
    385a:	08 95       	ret
    385c:	83 e0       	ldi	r24, 0x03	; 3
    385e:	fb 01       	movw	r30, r22
    3860:	80 83       	st	Z, r24
    3862:	8a eb       	ldi	r24, 0xBA	; 186
    3864:	91 e2       	ldi	r25, 0x21	; 33
    3866:	08 95       	ret
    3868:	83 e0       	ldi	r24, 0x03	; 3
    386a:	fb 01       	movw	r30, r22
    386c:	80 83       	st	Z, r24
    386e:	89 e3       	ldi	r24, 0x39	; 57
    3870:	91 e2       	ldi	r25, 0x21	; 33
    3872:	08 95       	ret
    3874:	83 e0       	ldi	r24, 0x03	; 3
    3876:	fb 01       	movw	r30, r22
    3878:	80 83       	st	Z, r24
    387a:	88 eb       	ldi	r24, 0xB8	; 184
    387c:	90 e2       	ldi	r25, 0x20	; 32
    387e:	08 95       	ret
    3880:	84 e0       	ldi	r24, 0x04	; 4
    3882:	fb 01       	movw	r30, r22
    3884:	80 83       	st	Z, r24
    3886:	8c e0       	ldi	r24, 0x0C	; 12
    3888:	90 e2       	ldi	r25, 0x20	; 32
    388a:	08 95       	ret
    388c:	82 e0       	ldi	r24, 0x02	; 2
    388e:	fb 01       	movw	r30, r22
    3890:	80 83       	st	Z, r24
    3892:	85 e4       	ldi	r24, 0x45	; 69
    3894:	92 e5       	ldi	r25, 0x52	; 82
    3896:	08 95       	ret

00003898 <getIntAsString>:
		return -1;
	}
	
}

char * getIntAsString(int num){
    3898:	0f 93       	push	r16
    389a:	1f 93       	push	r17
    389c:	cf 93       	push	r28
    389e:	df 93       	push	r29
    38a0:	18 2f       	mov	r17, r24
    38a2:	09 2f       	mov	r16, r25
	charArray[n] = '\0';
	
	char charArray[100];
	sprintf(charArray,"%u",num);
	*/
	char *charArray = calloc(64,sizeof(char)); //TODO Use charArray[64] and then memset(charArray, 0, sizeof(charArray[0]) * 64) to clear it so no need to free
    38a4:	61 e0       	ldi	r22, 0x01	; 1
    38a6:	70 e0       	ldi	r23, 0x00	; 0
    38a8:	80 e4       	ldi	r24, 0x40	; 64
    38aa:	90 e0       	ldi	r25, 0x00	; 0
    38ac:	0e 94 65 3d 	call	0x7aca	; 0x7aca <calloc>
    38b0:	d8 2f       	mov	r29, r24
    38b2:	c9 2f       	mov	r28, r25
	sprintf(charArray,"%d",num);
    38b4:	0f 93       	push	r16
    38b6:	1f 93       	push	r17
    38b8:	2b e9       	ldi	r18, 0x9B	; 155
    38ba:	32 e5       	ldi	r19, 0x52	; 82
    38bc:	3f 93       	push	r19
    38be:	2f 93       	push	r18
    38c0:	9f 93       	push	r25
    38c2:	8f 93       	push	r24
    38c4:	0e 94 2d 40 	call	0x805a	; 0x805a <sprintf>
	
	return charArray;
    38c8:	0f 90       	pop	r0
    38ca:	0f 90       	pop	r0
    38cc:	0f 90       	pop	r0
    38ce:	0f 90       	pop	r0
    38d0:	0f 90       	pop	r0
    38d2:	0f 90       	pop	r0
}
    38d4:	8d 2f       	mov	r24, r29
    38d6:	9c 2f       	mov	r25, r28
    38d8:	df 91       	pop	r29
    38da:	cf 91       	pop	r28
    38dc:	1f 91       	pop	r17
    38de:	0f 91       	pop	r16
    38e0:	08 95       	ret

000038e2 <getDoubleAsString>:
	
char * getDoubleAsString(double num){
    38e2:	ef 92       	push	r14
    38e4:	ff 92       	push	r15
    38e6:	0f 93       	push	r16
    38e8:	1f 93       	push	r17
    38ea:	cf 93       	push	r28
    38ec:	df 93       	push	r29
    38ee:	16 2f       	mov	r17, r22
    38f0:	07 2f       	mov	r16, r23
    38f2:	f8 2e       	mov	r15, r24
    38f4:	e9 2e       	mov	r14, r25
	
	charArray[n+4] = '\0';*/
	//uint8_t n = log10(num) + 1;
	//char *charArray = calloc(n+3+1+1+1, sizeof(char)); //decimal point + 3 floating point resolution + . + \0 + minus (-) in case
	
	char *charArray = calloc(64,sizeof(char)); //TODO Use charArray[64] and then memset(charArray, 0, sizeof(charArray[0]) * 64) to clear it so no need to free
    38f6:	61 e0       	ldi	r22, 0x01	; 1
    38f8:	70 e0       	ldi	r23, 0x00	; 0
    38fa:	80 e4       	ldi	r24, 0x40	; 64
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	0e 94 65 3d 	call	0x7aca	; 0x7aca <calloc>
    3902:	d8 2f       	mov	r29, r24
    3904:	c9 2f       	mov	r28, r25
	sprintf(charArray,"%4.2f",num);
    3906:	ef 92       	push	r14
    3908:	ff 92       	push	r15
    390a:	0f 93       	push	r16
    390c:	1f 93       	push	r17
    390e:	2e e9       	ldi	r18, 0x9E	; 158
    3910:	32 e5       	ldi	r19, 0x52	; 82
    3912:	3f 93       	push	r19
    3914:	2f 93       	push	r18
    3916:	9f 93       	push	r25
    3918:	8f 93       	push	r24
    391a:	0e 94 2d 40 	call	0x805a	; 0x805a <sprintf>
	
	return charArray;
    391e:	8d b7       	in	r24, 0x3d	; 61
    3920:	9e b7       	in	r25, 0x3e	; 62
    3922:	08 96       	adiw	r24, 0x08	; 8
    3924:	8d bf       	out	0x3d, r24	; 61
    3926:	9e bf       	out	0x3e, r25	; 62
}
    3928:	8d 2f       	mov	r24, r29
    392a:	9c 2f       	mov	r25, r28
    392c:	df 91       	pop	r29
    392e:	cf 91       	pop	r28
    3930:	1f 91       	pop	r17
    3932:	0f 91       	pop	r16
    3934:	ff 90       	pop	r15
    3936:	ef 90       	pop	r14
    3938:	08 95       	ret

0000393a <adc_handler>:
	return getPVVADCVoltage()*ADC_PVV_RATIO;
}

double getPVCVoltage(void){
	return getPVCADCVoltage();
}
    393a:	08 95       	ret

0000393c <adc_init>:
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	6b e7       	ldi	r22, 0x7B	; 123
    3942:	72 e6       	ldi	r23, 0x62	; 98
    3944:	80 e0       	ldi	r24, 0x00	; 0
    3946:	92 e0       	ldi	r25, 0x02	; 2
    3948:	0a d2       	rcall	.+1044   	; 0x3d5e <adc_read_configuration>
    394a:	41 e8       	ldi	r20, 0x81	; 129
    394c:	52 e6       	ldi	r21, 0x62	; 98
    394e:	61 e0       	ldi	r22, 0x01	; 1
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	92 e0       	ldi	r25, 0x02	; 2
    3954:	40 d2       	rcall	.+1152   	; 0x3dd6 <adcch_read_configuration>
    3956:	cb e7       	ldi	r28, 0x7B	; 123
    3958:	d2 e6       	ldi	r29, 0x62	; 98
    395a:	88 81       	ld	r24, Y
    395c:	ec e7       	ldi	r30, 0x7C	; 124
    395e:	f2 e6       	ldi	r31, 0x62	; 98
    3960:	90 81       	ld	r25, Z
    3962:	9f 78       	andi	r25, 0x8F	; 143
    3964:	90 83       	st	Z, r25
    3966:	81 7e       	andi	r24, 0xE1	; 225
    3968:	80 61       	ori	r24, 0x10	; 16
    396a:	88 83       	st	Y, r24
    396c:	10 92 7d 62 	sts	0x627D, r1
    3970:	85 e0       	ldi	r24, 0x05	; 5
    3972:	80 93 7e 62 	sts	0x627E, r24
    3976:	6d e9       	ldi	r22, 0x9D	; 157
    3978:	7c e1       	ldi	r23, 0x1C	; 28
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	92 e0       	ldi	r25, 0x02	; 2
    397e:	2a d1       	rcall	.+596    	; 0x3bd4 <adc_set_callback>
    3980:	e3 e8       	ldi	r30, 0x83	; 131
    3982:	f2 e6       	ldi	r31, 0x62	; 98
    3984:	80 81       	ld	r24, Z
    3986:	8c 7f       	andi	r24, 0xFC	; 252
    3988:	81 60       	ori	r24, 0x01	; 1
    398a:	80 83       	st	Z, r24
    398c:	88 81       	ld	r24, Y
    398e:	80 66       	ori	r24, 0x60	; 96
    3990:	88 83       	st	Y, r24
    3992:	be 01       	movw	r22, r28
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	92 e0       	ldi	r25, 0x02	; 2
    3998:	a3 d1       	rcall	.+838    	; 0x3ce0 <adc_write_configuration>
    399a:	41 e8       	ldi	r20, 0x81	; 129
    399c:	52 e6       	ldi	r21, 0x62	; 98
    399e:	61 e0       	ldi	r22, 0x01	; 1
    39a0:	80 e0       	ldi	r24, 0x00	; 0
    39a2:	92 e0       	ldi	r25, 0x02	; 2
    39a4:	fc d1       	rcall	.+1016   	; 0x3d9e <adcch_write_configuration>
    39a6:	43 e0       	ldi	r20, 0x03	; 3
    39a8:	50 e0       	ldi	r21, 0x00	; 0
    39aa:	61 e0       	ldi	r22, 0x01	; 1
    39ac:	80 ea       	ldi	r24, 0xA0	; 160
    39ae:	96 e0       	ldi	r25, 0x06	; 6
    39b0:	0e 94 16 2c 	call	0x582c	; 0x582c <ioport_configure_port_pin>
    39b4:	43 e0       	ldi	r20, 0x03	; 3
    39b6:	50 e0       	ldi	r21, 0x00	; 0
    39b8:	62 e0       	ldi	r22, 0x02	; 2
    39ba:	80 ea       	ldi	r24, 0xA0	; 160
    39bc:	96 e0       	ldi	r25, 0x06	; 6
    39be:	0e 94 16 2c 	call	0x582c	; 0x582c <ioport_configure_port_pin>
    39c2:	df 91       	pop	r29
    39c4:	cf 91       	pop	r28
    39c6:	08 95       	ret

000039c8 <getADCValue>:
    39c8:	4f 92       	push	r4
    39ca:	5f 92       	push	r5
    39cc:	6f 92       	push	r6
    39ce:	7f 92       	push	r7
    39d0:	af 92       	push	r10
    39d2:	bf 92       	push	r11
    39d4:	cf 92       	push	r12
    39d6:	df 92       	push	r13
    39d8:	ef 92       	push	r14
    39da:	ff 92       	push	r15
    39dc:	0f 93       	push	r16
    39de:	1f 93       	push	r17
    39e0:	cf 93       	push	r28
    39e2:	df 93       	push	r29
    39e4:	c8 2f       	mov	r28, r24
    39e6:	6a 01       	movw	r12, r20
    39e8:	7b 01       	movw	r14, r22
    39ea:	41 e8       	ldi	r20, 0x81	; 129
    39ec:	52 e6       	ldi	r21, 0x62	; 98
    39ee:	61 e0       	ldi	r22, 0x01	; 1
    39f0:	80 e0       	ldi	r24, 0x00	; 0
    39f2:	92 e0       	ldi	r25, 0x02	; 2
    39f4:	f0 d1       	rcall	.+992    	; 0x3dd6 <adcch_read_configuration>
    39f6:	c0 31       	cpi	r28, 0x10	; 16
    39f8:	48 f0       	brcs	.+18     	; 0x3a0c <getADCValue+0x44>
    39fa:	10 92 81 62 	sts	0x6281, r1
    39fe:	c0 51       	subi	r28, 0x10	; 16
    3a00:	cc 0f       	add	r28, r28
    3a02:	cc 0f       	add	r28, r28
    3a04:	cc 0f       	add	r28, r28
    3a06:	c0 93 82 62 	sts	0x6282, r28
    3a0a:	08 c0       	rjmp	.+16     	; 0x3a1c <getADCValue+0x54>
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
    3a0e:	80 93 81 62 	sts	0x6281, r24
    3a12:	cc 0f       	add	r28, r28
    3a14:	cc 0f       	add	r28, r28
    3a16:	cc 0f       	add	r28, r28
    3a18:	c0 93 82 62 	sts	0x6282, r28
    3a1c:	41 e8       	ldi	r20, 0x81	; 129
    3a1e:	52 e6       	ldi	r21, 0x62	; 98
    3a20:	61 e0       	ldi	r22, 0x01	; 1
    3a22:	80 e0       	ldi	r24, 0x00	; 0
    3a24:	92 e0       	ldi	r25, 0x02	; 2
    3a26:	bb d1       	rcall	.+886    	; 0x3d9e <adcch_write_configuration>
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	92 e0       	ldi	r25, 0x02	; 2
    3a2c:	fd d0       	rcall	.+506    	; 0x3c28 <adc_enable>
    3a2e:	e8 e4       	ldi	r30, 0x48	; 72
    3a30:	f0 e0       	ldi	r31, 0x00	; 0
    3a32:	80 81       	ld	r24, Z
    3a34:	81 7f       	andi	r24, 0xF1	; 241
    3a36:	80 83       	st	Z, r24
    3a38:	80 81       	ld	r24, Z
    3a3a:	81 60       	ori	r24, 0x01	; 1
    3a3c:	80 83       	st	Z, r24
    3a3e:	8f b7       	in	r24, 0x3f	; 63
    3a40:	f8 94       	cli
    3a42:	e0 e0       	ldi	r30, 0x00	; 0
    3a44:	f2 e0       	ldi	r31, 0x02	; 2
    3a46:	90 81       	ld	r25, Z
    3a48:	94 60       	ori	r25, 0x04	; 4
    3a4a:	90 83       	st	Z, r25
    3a4c:	8f bf       	out	0x3f, r24	; 63
    3a4e:	88 95       	sleep
    3a50:	e8 e4       	ldi	r30, 0x48	; 72
    3a52:	f0 e0       	ldi	r31, 0x00	; 0
    3a54:	80 81       	ld	r24, Z
    3a56:	8e 7f       	andi	r24, 0xFE	; 254
    3a58:	80 83       	st	Z, r24
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	a9 01       	movw	r20, r18
    3a60:	c7 01       	movw	r24, r14
    3a62:	b6 01       	movw	r22, r12
    3a64:	0e 94 a1 38 	call	0x7142	; 0x7142 <__gesf2>
    3a68:	18 16       	cp	r1, r24
    3a6a:	0c f0       	brlt	.+2      	; 0x3a6e <getADCValue+0xa6>
    3a6c:	3f c0       	rjmp	.+126    	; 0x3aec <getADCValue+0x124>
    3a6e:	41 2c       	mov	r4, r1
    3a70:	51 2c       	mov	r5, r1
    3a72:	32 01       	movw	r6, r4
    3a74:	00 e0       	ldi	r16, 0x00	; 0
    3a76:	10 e0       	ldi	r17, 0x00	; 0
    3a78:	c8 e4       	ldi	r28, 0x48	; 72
    3a7a:	d0 e0       	ldi	r29, 0x00	; 0
    3a7c:	a1 2c       	mov	r10, r1
    3a7e:	68 94       	set
    3a80:	bb 24       	eor	r11, r11
    3a82:	b1 f8       	bld	r11, 1
    3a84:	88 81       	ld	r24, Y
    3a86:	81 7f       	andi	r24, 0xF1	; 241
    3a88:	88 83       	st	Y, r24
    3a8a:	88 81       	ld	r24, Y
    3a8c:	81 60       	ori	r24, 0x01	; 1
    3a8e:	88 83       	st	Y, r24
    3a90:	8f b7       	in	r24, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	f5 01       	movw	r30, r10
    3a96:	90 81       	ld	r25, Z
    3a98:	94 60       	ori	r25, 0x04	; 4
    3a9a:	90 83       	st	Z, r25
    3a9c:	8f bf       	out	0x3f, r24	; 63
    3a9e:	88 95       	sleep
    3aa0:	88 81       	ld	r24, Y
    3aa2:	8e 7f       	andi	r24, 0xFE	; 254
    3aa4:	88 83       	st	Y, r24
    3aa6:	f5 01       	movw	r30, r10
    3aa8:	64 a1       	ldd	r22, Z+36	; 0x24
    3aaa:	75 a1       	ldd	r23, Z+37	; 0x25
    3aac:	88 27       	eor	r24, r24
    3aae:	77 fd       	sbrc	r23, 7
    3ab0:	80 95       	com	r24
    3ab2:	98 2f       	mov	r25, r24
    3ab4:	0e 94 f1 37 	call	0x6fe2	; 0x6fe2 <__floatsisf>
    3ab8:	a7 01       	movw	r20, r14
    3aba:	96 01       	movw	r18, r12
    3abc:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <__divsf3>
    3ac0:	9b 01       	movw	r18, r22
    3ac2:	ac 01       	movw	r20, r24
    3ac4:	c3 01       	movw	r24, r6
    3ac6:	b2 01       	movw	r22, r4
    3ac8:	0e 94 f3 36 	call	0x6de6	; 0x6de6 <__addsf3>
    3acc:	2b 01       	movw	r4, r22
    3ace:	3c 01       	movw	r6, r24
    3ad0:	0f 5f       	subi	r16, 0xFF	; 255
    3ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad4:	b8 01       	movw	r22, r16
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	90 e0       	ldi	r25, 0x00	; 0
    3ada:	0e 94 ef 37 	call	0x6fde	; 0x6fde <__floatunsisf>
    3ade:	a7 01       	movw	r20, r14
    3ae0:	96 01       	movw	r18, r12
    3ae2:	0e 94 57 37 	call	0x6eae	; 0x6eae <__cmpsf2>
    3ae6:	88 23       	and	r24, r24
    3ae8:	6c f2       	brlt	.-102    	; 0x3a84 <getADCValue+0xbc>
    3aea:	03 c0       	rjmp	.+6      	; 0x3af2 <getADCValue+0x12a>
    3aec:	41 2c       	mov	r4, r1
    3aee:	51 2c       	mov	r5, r1
    3af0:	32 01       	movw	r6, r4
    3af2:	80 e0       	ldi	r24, 0x00	; 0
    3af4:	92 e0       	ldi	r25, 0x02	; 2
    3af6:	af d0       	rcall	.+350    	; 0x3c56 <adc_disable>
    3af8:	c3 01       	movw	r24, r6
    3afa:	b2 01       	movw	r22, r4
    3afc:	df 91       	pop	r29
    3afe:	cf 91       	pop	r28
    3b00:	1f 91       	pop	r17
    3b02:	0f 91       	pop	r16
    3b04:	ff 90       	pop	r15
    3b06:	ef 90       	pop	r14
    3b08:	df 90       	pop	r13
    3b0a:	cf 90       	pop	r12
    3b0c:	bf 90       	pop	r11
    3b0e:	af 90       	pop	r10
    3b10:	7f 90       	pop	r7
    3b12:	6f 90       	pop	r6
    3b14:	5f 90       	pop	r5
    3b16:	4f 90       	pop	r4
    3b18:	08 95       	ret

00003b1a <getBatteryADCValue>:
    3b1a:	40 e0       	ldi	r20, 0x00	; 0
    3b1c:	50 e0       	ldi	r21, 0x00	; 0
    3b1e:	60 e0       	ldi	r22, 0x00	; 0
    3b20:	72 e4       	ldi	r23, 0x42	; 66
    3b22:	8e e0       	ldi	r24, 0x0E	; 14
    3b24:	51 cf       	rjmp	.-350    	; 0x39c8 <getADCValue>
    3b26:	08 95       	ret

00003b28 <getPVVADCValue>:
    3b28:	40 e0       	ldi	r20, 0x00	; 0
    3b2a:	50 e0       	ldi	r21, 0x00	; 0
    3b2c:	60 e0       	ldi	r22, 0x00	; 0
    3b2e:	71 e4       	ldi	r23, 0x41	; 65
    3b30:	8c e0       	ldi	r24, 0x0C	; 12
    3b32:	4a cf       	rjmp	.-364    	; 0x39c8 <getADCValue>
    3b34:	08 95       	ret

00003b36 <getPVCADCValue>:
    3b36:	40 e0       	ldi	r20, 0x00	; 0
    3b38:	50 e0       	ldi	r21, 0x00	; 0
    3b3a:	60 e0       	ldi	r22, 0x00	; 0
    3b3c:	72 e4       	ldi	r23, 0x42	; 66
    3b3e:	8d e0       	ldi	r24, 0x0D	; 13
    3b40:	43 cf       	rjmp	.-378    	; 0x39c8 <getADCValue>
    3b42:	08 95       	ret

00003b44 <getBatteryADCVoltage>:
    3b44:	ea df       	rcall	.-44     	; 0x3b1a <getBatteryADCValue>
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 ee       	ldi	r19, 0xE0	; 224
    3b4a:	4f ef       	ldi	r20, 0xFF	; 255
    3b4c:	54 e4       	ldi	r21, 0x44	; 68
    3b4e:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__divsf3>
    3b52:	08 95       	ret

00003b54 <getPVVADCVoltage>:
    3b54:	e9 df       	rcall	.-46     	; 0x3b28 <getPVVADCValue>
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	30 ee       	ldi	r19, 0xE0	; 224
    3b5a:	4f ef       	ldi	r20, 0xFF	; 255
    3b5c:	54 e4       	ldi	r21, 0x44	; 68
    3b5e:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__divsf3>
    3b62:	08 95       	ret

00003b64 <getPVCADCVoltage>:
    3b64:	e8 df       	rcall	.-48     	; 0x3b36 <getPVCADCValue>
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	30 ee       	ldi	r19, 0xE0	; 224
    3b6a:	4f ef       	ldi	r20, 0xFF	; 255
    3b6c:	54 e4       	ldi	r21, 0x44	; 68
    3b6e:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__divsf3>
    3b72:	08 95       	ret

00003b74 <getBatteryVoltage>:
    3b74:	e7 df       	rcall	.-50     	; 0x3b44 <getBatteryADCVoltage>
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	4b ef       	ldi	r20, 0xFB	; 251
    3b7c:	53 e4       	ldi	r21, 0x43	; 67
    3b7e:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <__mulsf3>
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	48 ec       	ldi	r20, 0xC8	; 200
    3b88:	52 e4       	ldi	r21, 0x42	; 66
    3b8a:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__divsf3>
    3b8e:	08 95       	ret

00003b90 <getPVVVoltage>:
    3b90:	e1 df       	rcall	.-62     	; 0x3b54 <getPVVADCVoltage>
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	45 e1       	ldi	r20, 0x15	; 21
    3b98:	54 e4       	ldi	r21, 0x44	; 68
    3b9a:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <__mulsf3>
    3b9e:	20 e0       	ldi	r18, 0x00	; 0
    3ba0:	30 e0       	ldi	r19, 0x00	; 0
    3ba2:	40 ea       	ldi	r20, 0xA0	; 160
    3ba4:	51 e4       	ldi	r21, 0x41	; 65
    3ba6:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__divsf3>
    3baa:	08 95       	ret

00003bac <getPVCCurrent>:

double getPVCCurrent(void){
	return (getPVCADCVoltage() * ADC_PVC_RATIO) / ADC_PVC_RSENSE;
    3bac:	db df       	rcall	.-74     	; 0x3b64 <getPVCADCVoltage>
    3bae:	20 e0       	ldi	r18, 0x00	; 0
    3bb0:	30 e0       	ldi	r19, 0x00	; 0
    3bb2:	48 ec       	ldi	r20, 0xC8	; 200
    3bb4:	52 e4       	ldi	r21, 0x42	; 66
    3bb6:	0e 94 f0 38 	call	0x71e0	; 0x71e0 <__mulsf3>
    3bba:	22 e5       	ldi	r18, 0x52	; 82
    3bbc:	38 eb       	ldi	r19, 0xB8	; 184
    3bbe:	4e e9       	ldi	r20, 0x9E	; 158
    3bc0:	5f e3       	ldi	r21, 0x3F	; 63
    3bc2:	0e 94 5b 37 	call	0x6eb6	; 0x6eb6 <__divsf3>
    3bc6:	2d ec       	ldi	r18, 0xCD	; 205
    3bc8:	3c ec       	ldi	r19, 0xCC	; 204
    3bca:	4c e4       	ldi	r20, 0x4C	; 76
    3bcc:	5f e3       	ldi	r21, 0x3F	; 63
    3bce:	0c 94 5b 37 	jmp	0x6eb6	; 0x6eb6 <__divsf3>
}
    3bd2:	08 95       	ret

00003bd4 <adc_set_callback>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3bd4:	2f b7       	in	r18, 0x3f	; 63
	cpu_irq_disable();
    3bd6:	f8 94       	cli
	Assert(callback);

	flags = cpu_irq_save();

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    3bd8:	81 15       	cp	r24, r1
    3bda:	92 40       	sbci	r25, 0x02	; 2
    3bdc:	21 f4       	brne	.+8      	; 0x3be6 <adc_set_callback+0x12>
		adca_callback = callback;
    3bde:	60 93 85 62 	sts	0x6285, r22
    3be2:	70 93 86 62 	sts	0x6286, r23
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3be6:	2f bf       	out	0x3f, r18	; 63
    3be8:	08 95       	ret

00003bea <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    3bea:	81 15       	cp	r24, r1
    3bec:	92 40       	sbci	r25, 0x02	; 2
    3bee:	61 f4       	brne	.+24     	; 0x3c08 <adc_enable_clock+0x1e>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    3bf0:	80 91 2e 62 	lds	r24, 0x622E
    3bf4:	91 e0       	ldi	r25, 0x01	; 1
    3bf6:	98 0f       	add	r25, r24
    3bf8:	90 93 2e 62 	sts	0x622E, r25
    3bfc:	81 11       	cpse	r24, r1
    3bfe:	04 c0       	rjmp	.+8      	; 0x3c08 <adc_enable_clock+0x1e>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3c00:	62 e0       	ldi	r22, 0x02	; 2
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	0c 94 ef 2b 	jmp	0x57de	; 0x57de <sysclk_enable_module>
    3c08:	08 95       	ret

00003c0a <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    3c0a:	81 15       	cp	r24, r1
    3c0c:	92 40       	sbci	r25, 0x02	; 2
    3c0e:	59 f4       	brne	.+22     	; 0x3c26 <adc_disable_clock+0x1c>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    3c10:	80 91 2e 62 	lds	r24, 0x622E
    3c14:	81 50       	subi	r24, 0x01	; 1
    3c16:	80 93 2e 62 	sts	0x622E, r24
    3c1a:	81 11       	cpse	r24, r1
    3c1c:	04 c0       	rjmp	.+8      	; 0x3c26 <adc_disable_clock+0x1c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3c1e:	62 e0       	ldi	r22, 0x02	; 2
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	0c 94 fb 2b 	jmp	0x57f6	; 0x57f6 <sysclk_disable_module>
    3c26:	08 95       	ret

00003c28 <adc_enable>:
 * a conversion. For most XMEGA devices the start-up time is specified
 * to be a maximum of 24 ADC clock cycles. Please verify the start-up time for
 * the device in use.
 */
void adc_enable(ADC_t *adc)
{
    3c28:	1f 93       	push	r17
    3c2a:	cf 93       	push	r28
    3c2c:	df 93       	push	r29
    3c2e:	ec 01       	movw	r28, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3c30:	1f b7       	in	r17, 0x3f	; 63
	cpu_irq_disable();
    3c32:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc_enable_clock(adc);
    3c34:	da df       	rcall	.-76     	; 0x3bea <adc_enable_clock>
	adc->CTRLA |= ADC_ENABLE_bm;
    3c36:	88 81       	ld	r24, Y
    3c38:	81 60       	ori	r24, 0x01	; 1
    3c3a:	88 83       	st	Y, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c3c:	1f bf       	out	0x3f, r17	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3c3e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    3c40:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    3c42:	e8 e8       	ldi	r30, 0x88	; 136
    3c44:	f2 e6       	ldi	r31, 0x62	; 98
    3c46:	90 81       	ld	r25, Z
    3c48:	9f 5f       	subi	r25, 0xFF	; 255
    3c4a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c4c:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_lock_mode(SLEEPMGR_IDLE);
}
    3c4e:	df 91       	pop	r29
    3c50:	cf 91       	pop	r28
    3c52:	1f 91       	pop	r17
    3c54:	08 95       	ret

00003c56 <adc_disable>:
 * Disables the ADC and unlocks IDLE mode for the sleep manager.
 *
 * \param adc Pointer to ADC module
 */
void adc_disable(ADC_t *adc)
{
    3c56:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3c58:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    3c5a:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();
	adc->CTRLA &= ~ADC_ENABLE_bm;
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	20 81       	ld	r18, Z
    3c60:	2e 7f       	andi	r18, 0xFE	; 254
    3c62:	20 83       	st	Z, r18
	adc_disable_clock(adc);
    3c64:	d2 df       	rcall	.-92     	; 0x3c0a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c66:	cf bf       	out	0x3f, r28	; 63

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3c68:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    3c6a:	f8 94       	cli
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
    3c6c:	e8 e8       	ldi	r30, 0x88	; 136
    3c6e:	f2 e6       	ldi	r31, 0x62	; 98
    3c70:	90 81       	ld	r25, Z
    3c72:	91 50       	subi	r25, 0x01	; 1
    3c74:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3c76:	8f bf       	out	0x3f, r24	; 63
	cpu_irq_restore(flags);

	sleepmgr_unlock_mode(SLEEPMGR_IDLE);
}
    3c78:	cf 91       	pop	r28
    3c7a:	08 95       	ret

00003c7c <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    3c7c:	1f 92       	push	r1
    3c7e:	0f 92       	push	r0
    3c80:	0f b6       	in	r0, 0x3f	; 63
    3c82:	0f 92       	push	r0
    3c84:	11 24       	eor	r1, r1
    3c86:	0b b6       	in	r0, 0x3b	; 59
    3c88:	0f 92       	push	r0
    3c8a:	2f 93       	push	r18
    3c8c:	3f 93       	push	r19
    3c8e:	4f 93       	push	r20
    3c90:	5f 93       	push	r21
    3c92:	6f 93       	push	r22
    3c94:	7f 93       	push	r23
    3c96:	8f 93       	push	r24
    3c98:	9f 93       	push	r25
    3c9a:	af 93       	push	r26
    3c9c:	bf 93       	push	r27
    3c9e:	ef 93       	push	r30
    3ca0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    3ca2:	e0 e0       	ldi	r30, 0x00	; 0
    3ca4:	f2 e0       	ldi	r31, 0x02	; 2
    3ca6:	44 a1       	ldd	r20, Z+36	; 0x24
    3ca8:	55 a1       	ldd	r21, Z+37	; 0x25
    3caa:	e0 91 85 62 	lds	r30, 0x6285
    3cae:	f0 91 86 62 	lds	r31, 0x6286
    3cb2:	61 e0       	ldi	r22, 0x01	; 1
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	92 e0       	ldi	r25, 0x02	; 2
    3cb8:	19 95       	eicall
}
    3cba:	ff 91       	pop	r31
    3cbc:	ef 91       	pop	r30
    3cbe:	bf 91       	pop	r27
    3cc0:	af 91       	pop	r26
    3cc2:	9f 91       	pop	r25
    3cc4:	8f 91       	pop	r24
    3cc6:	7f 91       	pop	r23
    3cc8:	6f 91       	pop	r22
    3cca:	5f 91       	pop	r21
    3ccc:	4f 91       	pop	r20
    3cce:	3f 91       	pop	r19
    3cd0:	2f 91       	pop	r18
    3cd2:	0f 90       	pop	r0
    3cd4:	0b be       	out	0x3b, r0	; 59
    3cd6:	0f 90       	pop	r0
    3cd8:	0f be       	out	0x3f, r0	; 63
    3cda:	0f 90       	pop	r0
    3cdc:	1f 90       	pop	r1
    3cde:	18 95       	reti

00003ce0 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    3ce0:	df 92       	push	r13
    3ce2:	ef 92       	push	r14
    3ce4:	ff 92       	push	r15
    3ce6:	0f 93       	push	r16
    3ce8:	1f 93       	push	r17
    3cea:	cf 93       	push	r28
    3cec:	df 93       	push	r29
    3cee:	ec 01       	movw	r28, r24
    3cf0:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    3cf2:	c1 15       	cp	r28, r1
    3cf4:	82 e0       	ldi	r24, 0x02	; 2
    3cf6:	d8 07       	cpc	r29, r24
    3cf8:	51 f5       	brne	.+84     	; 0x3d4e <adc_write_configuration+0x6e>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    3cfa:	61 e2       	ldi	r22, 0x21	; 33
    3cfc:	70 e0       	ldi	r23, 0x00	; 0
    3cfe:	82 e0       	ldi	r24, 0x02	; 2
    3d00:	0e 94 06 2c 	call	0x580c	; 0x580c <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    3d04:	e8 2e       	mov	r14, r24
    3d06:	f1 2c       	mov	r15, r1
    3d08:	60 e2       	ldi	r22, 0x20	; 32
    3d0a:	70 e0       	ldi	r23, 0x00	; 0
    3d0c:	82 e0       	ldi	r24, 0x02	; 2
    3d0e:	0e 94 06 2c 	call	0x580c	; 0x580c <nvm_read_byte>
		data <<= 8;
    3d12:	fe 2c       	mov	r15, r14
    3d14:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    3d16:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3d18:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    3d1a:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    3d1c:	ce 01       	movw	r24, r28
    3d1e:	65 df       	rcall	.-310    	; 0x3bea <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    3d20:	28 81       	ld	r18, Y
    3d22:	21 70       	andi	r18, 0x01	; 1

	adc->CTRLA = ADC_FLUSH_bm;
    3d24:	82 e0       	ldi	r24, 0x02	; 2
    3d26:	88 83       	st	Y, r24
	adc->CAL = cal;
    3d28:	ec 86       	std	Y+12, r14	; 0x0c
    3d2a:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    3d2c:	f8 01       	movw	r30, r16
    3d2e:	84 81       	ldd	r24, Z+4	; 0x04
    3d30:	95 81       	ldd	r25, Z+5	; 0x05
    3d32:	88 8f       	std	Y+24, r24	; 0x18
    3d34:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    3d36:	81 81       	ldd	r24, Z+1	; 0x01
    3d38:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    3d3a:	83 81       	ldd	r24, Z+3	; 0x03
    3d3c:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    3d3e:	82 81       	ldd	r24, Z+2	; 0x02
    3d40:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    3d42:	80 81       	ld	r24, Z
    3d44:	89 83       	std	Y+1, r24	; 0x01

	adc->CTRLA = enable;
    3d46:	28 83       	st	Y, r18

	adc_disable_clock(adc);
    3d48:	ce 01       	movw	r24, r28
    3d4a:	5f df       	rcall	.-322    	; 0x3c0a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3d4c:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    3d4e:	df 91       	pop	r29
    3d50:	cf 91       	pop	r28
    3d52:	1f 91       	pop	r17
    3d54:	0f 91       	pop	r16
    3d56:	ff 90       	pop	r15
    3d58:	ef 90       	pop	r14
    3d5a:	df 90       	pop	r13
    3d5c:	08 95       	ret

00003d5e <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    3d5e:	ff 92       	push	r15
    3d60:	0f 93       	push	r16
    3d62:	1f 93       	push	r17
    3d64:	cf 93       	push	r28
    3d66:	df 93       	push	r29
    3d68:	ec 01       	movw	r28, r24
    3d6a:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3d6c:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    3d6e:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    3d70:	3c df       	rcall	.-392    	; 0x3bea <adc_enable_clock>

	conf->cmp = adc->CMP;
    3d72:	88 8d       	ldd	r24, Y+24	; 0x18
    3d74:	99 8d       	ldd	r25, Y+25	; 0x19
    3d76:	f8 01       	movw	r30, r16
    3d78:	84 83       	std	Z+4, r24	; 0x04
    3d7a:	95 83       	std	Z+5, r25	; 0x05
	conf->refctrl = adc->REFCTRL;
    3d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d7e:	81 83       	std	Z+1, r24	; 0x01
	conf->prescaler = adc->PRESCALER;
    3d80:	8c 81       	ldd	r24, Y+4	; 0x04
    3d82:	83 83       	std	Z+3, r24	; 0x03
	conf->evctrl = adc->EVCTRL;
    3d84:	8b 81       	ldd	r24, Y+3	; 0x03
    3d86:	82 83       	std	Z+2, r24	; 0x02
	conf->ctrlb = adc->CTRLB;
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	80 83       	st	Z, r24

	adc_disable_clock(adc);
    3d8c:	ce 01       	movw	r24, r28
    3d8e:	3d df       	rcall	.-390    	; 0x3c0a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3d90:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3d92:	df 91       	pop	r29
    3d94:	cf 91       	pop	r28
    3d96:	1f 91       	pop	r17
    3d98:	0f 91       	pop	r16
    3d9a:	ff 90       	pop	r15
    3d9c:	08 95       	ret

00003d9e <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    3d9e:	ff 92       	push	r15
    3da0:	0f 93       	push	r16
    3da2:	1f 93       	push	r17
    3da4:	cf 93       	push	r28
    3da6:	df 93       	push	r29
    3da8:	ec 01       	movw	r28, r24
    3daa:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3dac:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    3dae:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    3db0:	1c df       	rcall	.-456    	; 0x3bea <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    3db2:	f8 01       	movw	r30, r16
    3db4:	80 81       	ld	r24, Z
    3db6:	88 a3       	std	Y+32, r24	; 0x20
	adc_ch->INTCTRL = ch_conf->intctrl;
    3db8:	82 81       	ldd	r24, Z+2	; 0x02
    3dba:	8a a3       	std	Y+34, r24	; 0x22
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    3dbc:	81 81       	ldd	r24, Z+1	; 0x01
    3dbe:	89 a3       	std	Y+33, r24	; 0x21
	adc_ch->SCAN = ch_conf->scan;
    3dc0:	83 81       	ldd	r24, Z+3	; 0x03
    3dc2:	8e a3       	std	Y+38, r24	; 0x26
	adc_disable_clock(adc);
    3dc4:	ce 01       	movw	r24, r28
    3dc6:	21 df       	rcall	.-446    	; 0x3c0a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3dc8:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3dca:	df 91       	pop	r29
    3dcc:	cf 91       	pop	r28
    3dce:	1f 91       	pop	r17
    3dd0:	0f 91       	pop	r16
    3dd2:	ff 90       	pop	r15
    3dd4:	08 95       	ret

00003dd6 <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    3dd6:	ff 92       	push	r15
    3dd8:	0f 93       	push	r16
    3dda:	1f 93       	push	r17
    3ddc:	cf 93       	push	r28
    3dde:	df 93       	push	r29
    3de0:	ec 01       	movw	r28, r24
    3de2:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3de4:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    3de6:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    3de8:	00 df       	rcall	.-512    	; 0x3bea <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    3dea:	88 a1       	ldd	r24, Y+32	; 0x20
    3dec:	f8 01       	movw	r30, r16
    3dee:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    3df0:	8a a1       	ldd	r24, Y+34	; 0x22
    3df2:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    3df4:	89 a1       	ldd	r24, Y+33	; 0x21
    3df6:	81 83       	std	Z+1, r24	; 0x01
	ch_conf->scan = adc_ch->SCAN;
    3df8:	8e a1       	ldd	r24, Y+38	; 0x26
    3dfa:	83 83       	std	Z+3, r24	; 0x03
	adc_disable_clock(adc);
    3dfc:	ce 01       	movw	r24, r28
    3dfe:	05 df       	rcall	.-502    	; 0x3c0a <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3e00:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3e02:	df 91       	pop	r29
    3e04:	cf 91       	pop	r28
    3e06:	1f 91       	pop	r17
    3e08:	0f 91       	pop	r16
    3e0a:	ff 90       	pop	r15
    3e0c:	08 95       	ret

00003e0e <getCharacterImage>:
#include <stdio.h>

#include "fonts.h"

const uint8_t * getCharacterImage(char c, uint8_t* nColumnsInBytes){
	switch (c){
    3e0e:	99 27       	eor	r25, r25
    3e10:	87 fd       	sbrc	r24, 7
    3e12:	90 95       	com	r25
    3e14:	a9 2f       	mov	r26, r25
    3e16:	b9 2f       	mov	r27, r25
    3e18:	fc 01       	movw	r30, r24
    3e1a:	b0 97       	sbiw	r30, 0x20	; 32
    3e1c:	ef 35       	cpi	r30, 0x5F	; 95
    3e1e:	f1 05       	cpc	r31, r1
    3e20:	08 f0       	brcs	.+2      	; 0x3e24 <getCharacterImage+0x16>
    3e22:	3e c2       	rjmp	.+1148   	; 0x42a0 <getCharacterImage+0x492>
    3e24:	e3 5a       	subi	r30, 0xA3	; 163
    3e26:	fe 4f       	sbci	r31, 0xFE	; 254
    3e28:	0c 94 3c 3d 	jmp	0x7a78	; 0x7a78 <__tablejump2__>
		case ' ':
		*nColumnsInBytes = sizeof(image_data_Font_0x20)/sizeof(image_data_Font_0x20[0])/FONT_SIZE_NORMAL;
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	fb 01       	movw	r30, r22
    3e30:	80 83       	st	Z, r24
		return image_data_Font_0x20;
    3e32:	86 e2       	ldi	r24, 0x26	; 38
    3e34:	9c e5       	ldi	r25, 0x5C	; 92
    3e36:	08 95       	ret
			break;
		case '!':
		*nColumnsInBytes = sizeof(image_data_Font_0x21)/sizeof(image_data_Font_0x21[0])/FONT_SIZE_NORMAL;
    3e38:	81 e0       	ldi	r24, 0x01	; 1
    3e3a:	fb 01       	movw	r30, r22
    3e3c:	80 83       	st	Z, r24
		return image_data_Font_0x21;
    3e3e:	85 e1       	ldi	r24, 0x15	; 21
    3e40:	9c e5       	ldi	r25, 0x5C	; 92
    3e42:	08 95       	ret
			break;
		case '\"':
		*nColumnsInBytes = sizeof(image_data_Font_0x22)/sizeof(image_data_Font_0x22[0])/FONT_SIZE_NORMAL;
    3e44:	81 e0       	ldi	r24, 0x01	; 1
    3e46:	fb 01       	movw	r30, r22
    3e48:	80 83       	st	Z, r24
		return image_data_Font_0x22;
    3e4a:	84 e0       	ldi	r24, 0x04	; 4
    3e4c:	9c e5       	ldi	r25, 0x5C	; 92
    3e4e:	08 95       	ret
			break;
		case '#':
		*nColumnsInBytes = sizeof(image_data_Font_0x23)/sizeof(image_data_Font_0x23[0])/FONT_SIZE_NORMAL;
    3e50:	82 e0       	ldi	r24, 0x02	; 2
    3e52:	fb 01       	movw	r30, r22
    3e54:	80 83       	st	Z, r24
		return image_data_Font_0x23;
    3e56:	82 ee       	ldi	r24, 0xE2	; 226
    3e58:	9b e5       	ldi	r25, 0x5B	; 91
    3e5a:	08 95       	ret
			break;
		case '$':
		*nColumnsInBytes = sizeof(image_data_Font_0x24)/sizeof(image_data_Font_0x24[0])/FONT_SIZE_NORMAL;
    3e5c:	82 e0       	ldi	r24, 0x02	; 2
    3e5e:	fb 01       	movw	r30, r22
    3e60:	80 83       	st	Z, r24
		return image_data_Font_0x24;
    3e62:	80 ec       	ldi	r24, 0xC0	; 192
    3e64:	9b e5       	ldi	r25, 0x5B	; 91
    3e66:	08 95       	ret
			break;
		case '%':
		*nColumnsInBytes = sizeof(image_data_Font_0x25)/sizeof(image_data_Font_0x25[0])/FONT_SIZE_NORMAL;
    3e68:	82 e0       	ldi	r24, 0x02	; 2
    3e6a:	fb 01       	movw	r30, r22
    3e6c:	80 83       	st	Z, r24
		return image_data_Font_0x25;
    3e6e:	8e e9       	ldi	r24, 0x9E	; 158
    3e70:	9b e5       	ldi	r25, 0x5B	; 91
    3e72:	08 95       	ret
			break;
		case '&':
		*nColumnsInBytes = sizeof(image_data_Font_0x26)/sizeof(image_data_Font_0x26[0])/FONT_SIZE_NORMAL;
    3e74:	82 e0       	ldi	r24, 0x02	; 2
    3e76:	fb 01       	movw	r30, r22
    3e78:	80 83       	st	Z, r24
		return image_data_Font_0x26;
    3e7a:	8c e7       	ldi	r24, 0x7C	; 124
    3e7c:	9b e5       	ldi	r25, 0x5B	; 91
    3e7e:	08 95       	ret
			break;
		case '\'':
		*nColumnsInBytes = sizeof(image_data_Font_0x27)/sizeof(image_data_Font_0x27[0])/FONT_SIZE_NORMAL;
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	fb 01       	movw	r30, r22
    3e84:	80 83       	st	Z, r24
		return image_data_Font_0x27;
    3e86:	8b e6       	ldi	r24, 0x6B	; 107
    3e88:	9b e5       	ldi	r25, 0x5B	; 91
    3e8a:	08 95       	ret
			break;
		case '(':
		*nColumnsInBytes = sizeof(image_data_Font_0x28)/sizeof(image_data_Font_0x28[0])/FONT_SIZE_NORMAL;
    3e8c:	81 e0       	ldi	r24, 0x01	; 1
    3e8e:	fb 01       	movw	r30, r22
    3e90:	80 83       	st	Z, r24
		return image_data_Font_0x28;
    3e92:	8a e5       	ldi	r24, 0x5A	; 90
    3e94:	9b e5       	ldi	r25, 0x5B	; 91
    3e96:	08 95       	ret
			break;
		case ')':
		*nColumnsInBytes = sizeof(image_data_Font_0x29)/sizeof(image_data_Font_0x29[0])/FONT_SIZE_NORMAL;
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	fb 01       	movw	r30, r22
    3e9c:	80 83       	st	Z, r24
		return image_data_Font_0x29;
    3e9e:	89 e4       	ldi	r24, 0x49	; 73
    3ea0:	9b e5       	ldi	r25, 0x5B	; 91
    3ea2:	08 95       	ret
			break;
		case '*':
		*nColumnsInBytes = sizeof(image_data_Font_0x2a)/sizeof(image_data_Font_0x2a[0])/FONT_SIZE_NORMAL;
    3ea4:	81 e0       	ldi	r24, 0x01	; 1
    3ea6:	fb 01       	movw	r30, r22
    3ea8:	80 83       	st	Z, r24
		return image_data_Font_0x2a;
    3eaa:	88 e3       	ldi	r24, 0x38	; 56
    3eac:	9b e5       	ldi	r25, 0x5B	; 91
    3eae:	08 95       	ret
			break;
		case '+':
		*nColumnsInBytes = sizeof(image_data_Font_0x2b)/sizeof(image_data_Font_0x2b[0])/FONT_SIZE_NORMAL;
    3eb0:	81 e0       	ldi	r24, 0x01	; 1
    3eb2:	fb 01       	movw	r30, r22
    3eb4:	80 83       	st	Z, r24
		return image_data_Font_0x2b;
    3eb6:	87 e2       	ldi	r24, 0x27	; 39
    3eb8:	9b e5       	ldi	r25, 0x5B	; 91
    3eba:	08 95       	ret
			break;
		case ',':
		*nColumnsInBytes = sizeof(image_data_Font_0x2c)/sizeof(image_data_Font_0x2c[0])/FONT_SIZE_NORMAL;
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	fb 01       	movw	r30, r22
    3ec0:	80 83       	st	Z, r24
		return image_data_Font_0x2c;
    3ec2:	86 e1       	ldi	r24, 0x16	; 22
    3ec4:	9b e5       	ldi	r25, 0x5B	; 91
    3ec6:	08 95       	ret
			break;
		case '-':
		*nColumnsInBytes = sizeof(image_data_Font_0x2d)/sizeof(image_data_Font_0x2d[0])/FONT_SIZE_NORMAL;
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	fb 01       	movw	r30, r22
    3ecc:	80 83       	st	Z, r24
		return image_data_Font_0x2d;
    3ece:	85 e0       	ldi	r24, 0x05	; 5
    3ed0:	9b e5       	ldi	r25, 0x5B	; 91
    3ed2:	08 95       	ret
			break;
		case '.':
		*nColumnsInBytes = sizeof(image_data_Font_0x2e)/sizeof(image_data_Font_0x2e[0])/FONT_SIZE_NORMAL;
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	fb 01       	movw	r30, r22
    3ed8:	80 83       	st	Z, r24
		return image_data_Font_0x2e;
    3eda:	84 ef       	ldi	r24, 0xF4	; 244
    3edc:	9a e5       	ldi	r25, 0x5A	; 90
    3ede:	08 95       	ret
			break;
		case '/':
		*nColumnsInBytes = sizeof(image_data_Font_0x2f)/sizeof(image_data_Font_0x2f[0])/FONT_SIZE_NORMAL;
    3ee0:	81 e0       	ldi	r24, 0x01	; 1
    3ee2:	fb 01       	movw	r30, r22
    3ee4:	80 83       	st	Z, r24
		return image_data_Font_0x2f;
    3ee6:	83 ee       	ldi	r24, 0xE3	; 227
    3ee8:	9a e5       	ldi	r25, 0x5A	; 90
    3eea:	08 95       	ret
			break;
		case '0':
		*nColumnsInBytes = sizeof(image_data_Font_0x30)/sizeof(image_data_Font_0x30[0])/FONT_SIZE_NORMAL;
    3eec:	82 e0       	ldi	r24, 0x02	; 2
    3eee:	fb 01       	movw	r30, r22
    3ef0:	80 83       	st	Z, r24
		return image_data_Font_0x30;
    3ef2:	81 ec       	ldi	r24, 0xC1	; 193
    3ef4:	9a e5       	ldi	r25, 0x5A	; 90
    3ef6:	08 95       	ret
			break;
		case '1':
		*nColumnsInBytes = sizeof(image_data_Font_0x31)/sizeof(image_data_Font_0x31[0])/FONT_SIZE_NORMAL;
    3ef8:	82 e0       	ldi	r24, 0x02	; 2
    3efa:	fb 01       	movw	r30, r22
    3efc:	80 83       	st	Z, r24
		return image_data_Font_0x31;
    3efe:	8f e9       	ldi	r24, 0x9F	; 159
    3f00:	9a e5       	ldi	r25, 0x5A	; 90
    3f02:	08 95       	ret
			break;
		case '2':
		*nColumnsInBytes = sizeof(image_data_Font_0x32)/sizeof(image_data_Font_0x32[0])/FONT_SIZE_NORMAL;
    3f04:	82 e0       	ldi	r24, 0x02	; 2
    3f06:	fb 01       	movw	r30, r22
    3f08:	80 83       	st	Z, r24
		return image_data_Font_0x32;
    3f0a:	8d e7       	ldi	r24, 0x7D	; 125
    3f0c:	9a e5       	ldi	r25, 0x5A	; 90
    3f0e:	08 95       	ret
			break;
		case '3':
		*nColumnsInBytes = sizeof(image_data_Font_0x33)/sizeof(image_data_Font_0x33[0])/FONT_SIZE_NORMAL;
    3f10:	82 e0       	ldi	r24, 0x02	; 2
    3f12:	fb 01       	movw	r30, r22
    3f14:	80 83       	st	Z, r24
		return image_data_Font_0x33;
    3f16:	8b e5       	ldi	r24, 0x5B	; 91
    3f18:	9a e5       	ldi	r25, 0x5A	; 90
    3f1a:	08 95       	ret
			break;
		case '4':
		*nColumnsInBytes = sizeof(image_data_Font_0x34)/sizeof(image_data_Font_0x34[0])/FONT_SIZE_NORMAL;
    3f1c:	82 e0       	ldi	r24, 0x02	; 2
    3f1e:	fb 01       	movw	r30, r22
    3f20:	80 83       	st	Z, r24
		return image_data_Font_0x34;
    3f22:	89 e3       	ldi	r24, 0x39	; 57
    3f24:	9a e5       	ldi	r25, 0x5A	; 90
    3f26:	08 95       	ret
			break;
		case '5':
		*nColumnsInBytes = sizeof(image_data_Font_0x35)/sizeof(image_data_Font_0x35[0])/FONT_SIZE_NORMAL;
    3f28:	82 e0       	ldi	r24, 0x02	; 2
    3f2a:	fb 01       	movw	r30, r22
    3f2c:	80 83       	st	Z, r24
		return image_data_Font_0x35;
    3f2e:	87 e1       	ldi	r24, 0x17	; 23
    3f30:	9a e5       	ldi	r25, 0x5A	; 90
    3f32:	08 95       	ret
			break;
		case '6':
		*nColumnsInBytes = sizeof(image_data_Font_0x36)/sizeof(image_data_Font_0x36[0])/FONT_SIZE_NORMAL;
    3f34:	82 e0       	ldi	r24, 0x02	; 2
    3f36:	fb 01       	movw	r30, r22
    3f38:	80 83       	st	Z, r24
		return image_data_Font_0x36;
    3f3a:	85 ef       	ldi	r24, 0xF5	; 245
    3f3c:	99 e5       	ldi	r25, 0x59	; 89
    3f3e:	08 95       	ret
			break;
		case '7':
		*nColumnsInBytes = sizeof(image_data_Font_0x37)/sizeof(image_data_Font_0x37[0])/FONT_SIZE_NORMAL;
    3f40:	82 e0       	ldi	r24, 0x02	; 2
    3f42:	fb 01       	movw	r30, r22
    3f44:	80 83       	st	Z, r24
		return image_data_Font_0x37;
    3f46:	83 ed       	ldi	r24, 0xD3	; 211
    3f48:	99 e5       	ldi	r25, 0x59	; 89
    3f4a:	08 95       	ret
			break;
		case '8':
		*nColumnsInBytes = sizeof(image_data_Font_0x38)/sizeof(image_data_Font_0x38[0])/FONT_SIZE_NORMAL;
    3f4c:	82 e0       	ldi	r24, 0x02	; 2
    3f4e:	fb 01       	movw	r30, r22
    3f50:	80 83       	st	Z, r24
		return image_data_Font_0x38;
    3f52:	81 eb       	ldi	r24, 0xB1	; 177
    3f54:	99 e5       	ldi	r25, 0x59	; 89
    3f56:	08 95       	ret
			break;
		case '9':
		*nColumnsInBytes = sizeof(image_data_Font_0x39)/sizeof(image_data_Font_0x39[0])/FONT_SIZE_NORMAL;
    3f58:	82 e0       	ldi	r24, 0x02	; 2
    3f5a:	fb 01       	movw	r30, r22
    3f5c:	80 83       	st	Z, r24
		return image_data_Font_0x39;
    3f5e:	8f e8       	ldi	r24, 0x8F	; 143
    3f60:	99 e5       	ldi	r25, 0x59	; 89
    3f62:	08 95       	ret
			break;
		case ':':
		*nColumnsInBytes = sizeof(image_data_Font_0x3a)/sizeof(image_data_Font_0x3a[0])/FONT_SIZE_NORMAL;
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	fb 01       	movw	r30, r22
    3f68:	80 83       	st	Z, r24
		return image_data_Font_0x3a;
    3f6a:	8e e7       	ldi	r24, 0x7E	; 126
    3f6c:	99 e5       	ldi	r25, 0x59	; 89
    3f6e:	08 95       	ret
			break;
		case ';':
		*nColumnsInBytes = sizeof(image_data_Font_0x3b)/sizeof(image_data_Font_0x3b[0])/FONT_SIZE_NORMAL;
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	fb 01       	movw	r30, r22
    3f74:	80 83       	st	Z, r24
		return image_data_Font_0x3b;
    3f76:	8d e6       	ldi	r24, 0x6D	; 109
    3f78:	99 e5       	ldi	r25, 0x59	; 89
    3f7a:	08 95       	ret
			break;
		case '<':
		*nColumnsInBytes = sizeof(image_data_Font_0x3c)/sizeof(image_data_Font_0x3c[0])/FONT_SIZE_NORMAL;
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	fb 01       	movw	r30, r22
    3f80:	80 83       	st	Z, r24
		return image_data_Font_0x3c;
    3f82:	8c e5       	ldi	r24, 0x5C	; 92
    3f84:	99 e5       	ldi	r25, 0x59	; 89
    3f86:	08 95       	ret
			break;
		case '=':
		*nColumnsInBytes = sizeof(image_data_Font_0x3d)/sizeof(image_data_Font_0x3d[0])/FONT_SIZE_NORMAL;
    3f88:	81 e0       	ldi	r24, 0x01	; 1
    3f8a:	fb 01       	movw	r30, r22
    3f8c:	80 83       	st	Z, r24
		return image_data_Font_0x3d;
    3f8e:	8b e4       	ldi	r24, 0x4B	; 75
    3f90:	99 e5       	ldi	r25, 0x59	; 89
    3f92:	08 95       	ret
			break;
		case '>':
		*nColumnsInBytes = sizeof(image_data_Font_0x3e)/sizeof(image_data_Font_0x3e[0])/FONT_SIZE_NORMAL;
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	fb 01       	movw	r30, r22
    3f98:	80 83       	st	Z, r24
		return image_data_Font_0x3e;
    3f9a:	8a e3       	ldi	r24, 0x3A	; 58
    3f9c:	99 e5       	ldi	r25, 0x59	; 89
    3f9e:	08 95       	ret
			break;
		case '?':
		*nColumnsInBytes = sizeof(image_data_Font_0x3f)/sizeof(image_data_Font_0x3f[0])/FONT_SIZE_NORMAL;
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	fb 01       	movw	r30, r22
    3fa4:	80 83       	st	Z, r24
		return image_data_Font_0x3f;
    3fa6:	89 e2       	ldi	r24, 0x29	; 41
    3fa8:	99 e5       	ldi	r25, 0x59	; 89
    3faa:	08 95       	ret
			break;
		case '@':
		*nColumnsInBytes = sizeof(image_data_Font_0x40)/sizeof(image_data_Font_0x40[0])/FONT_SIZE_NORMAL;
    3fac:	82 e0       	ldi	r24, 0x02	; 2
    3fae:	fb 01       	movw	r30, r22
    3fb0:	80 83       	st	Z, r24
		return image_data_Font_0x40;
    3fb2:	87 e0       	ldi	r24, 0x07	; 7
    3fb4:	99 e5       	ldi	r25, 0x59	; 89
    3fb6:	08 95       	ret
			break;
		case 'A':
		*nColumnsInBytes = sizeof(image_data_Font_0x41)/sizeof(image_data_Font_0x41[0])/FONT_SIZE_NORMAL;
    3fb8:	82 e0       	ldi	r24, 0x02	; 2
    3fba:	fb 01       	movw	r30, r22
    3fbc:	80 83       	st	Z, r24
		return image_data_Font_0x41;
    3fbe:	85 ee       	ldi	r24, 0xE5	; 229
    3fc0:	98 e5       	ldi	r25, 0x58	; 88
    3fc2:	08 95       	ret
			break;
		case 'B':
		*nColumnsInBytes = sizeof(image_data_Font_0x42)/sizeof(image_data_Font_0x42[0])/FONT_SIZE_NORMAL;
    3fc4:	82 e0       	ldi	r24, 0x02	; 2
    3fc6:	fb 01       	movw	r30, r22
    3fc8:	80 83       	st	Z, r24
		return image_data_Font_0x42;
    3fca:	83 ec       	ldi	r24, 0xC3	; 195
    3fcc:	98 e5       	ldi	r25, 0x58	; 88
    3fce:	08 95       	ret
			break;
		case 'C':
		*nColumnsInBytes = sizeof(image_data_Font_0x43)/sizeof(image_data_Font_0x43[0])/FONT_SIZE_NORMAL;
    3fd0:	82 e0       	ldi	r24, 0x02	; 2
    3fd2:	fb 01       	movw	r30, r22
    3fd4:	80 83       	st	Z, r24
		return image_data_Font_0x43;
    3fd6:	81 ea       	ldi	r24, 0xA1	; 161
    3fd8:	98 e5       	ldi	r25, 0x58	; 88
    3fda:	08 95       	ret
			break;
		case 'D':
		*nColumnsInBytes = sizeof(image_data_Font_0x44)/sizeof(image_data_Font_0x44[0])/FONT_SIZE_NORMAL;
    3fdc:	82 e0       	ldi	r24, 0x02	; 2
    3fde:	fb 01       	movw	r30, r22
    3fe0:	80 83       	st	Z, r24
		return image_data_Font_0x44;
    3fe2:	8f e7       	ldi	r24, 0x7F	; 127
    3fe4:	98 e5       	ldi	r25, 0x58	; 88
    3fe6:	08 95       	ret
			break;
		case 'E':
		*nColumnsInBytes = sizeof(image_data_Font_0x45)/sizeof(image_data_Font_0x45[0])/FONT_SIZE_NORMAL;
    3fe8:	82 e0       	ldi	r24, 0x02	; 2
    3fea:	fb 01       	movw	r30, r22
    3fec:	80 83       	st	Z, r24
		return image_data_Font_0x45;
    3fee:	8d e5       	ldi	r24, 0x5D	; 93
    3ff0:	98 e5       	ldi	r25, 0x58	; 88
    3ff2:	08 95       	ret
			break;
		case 'F':
		*nColumnsInBytes = sizeof(image_data_Font_0x46)/sizeof(image_data_Font_0x46[0])/FONT_SIZE_NORMAL;
    3ff4:	81 e0       	ldi	r24, 0x01	; 1
    3ff6:	fb 01       	movw	r30, r22
    3ff8:	80 83       	st	Z, r24
		return image_data_Font_0x46;
    3ffa:	8c e4       	ldi	r24, 0x4C	; 76
    3ffc:	98 e5       	ldi	r25, 0x58	; 88
    3ffe:	08 95       	ret
			break;
		case 'G':
		*nColumnsInBytes = sizeof(image_data_Font_0x47)/sizeof(image_data_Font_0x47[0])/FONT_SIZE_NORMAL;
    4000:	82 e0       	ldi	r24, 0x02	; 2
    4002:	fb 01       	movw	r30, r22
    4004:	80 83       	st	Z, r24
		return image_data_Font_0x47;
    4006:	8a e2       	ldi	r24, 0x2A	; 42
    4008:	98 e5       	ldi	r25, 0x58	; 88
    400a:	08 95       	ret
			break;
		case 'H':
		*nColumnsInBytes = sizeof(image_data_Font_0x48)/sizeof(image_data_Font_0x48[0])/FONT_SIZE_NORMAL;
    400c:	82 e0       	ldi	r24, 0x02	; 2
    400e:	fb 01       	movw	r30, r22
    4010:	80 83       	st	Z, r24
		return image_data_Font_0x48;
    4012:	88 e0       	ldi	r24, 0x08	; 8
    4014:	98 e5       	ldi	r25, 0x58	; 88
    4016:	08 95       	ret
			break;
		case 'I':
		*nColumnsInBytes = sizeof(image_data_Font_0x49)/sizeof(image_data_Font_0x49[0])/FONT_SIZE_NORMAL;
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	fb 01       	movw	r30, r22
    401c:	80 83       	st	Z, r24
		return image_data_Font_0x49;
    401e:	87 ef       	ldi	r24, 0xF7	; 247
    4020:	97 e5       	ldi	r25, 0x57	; 87
    4022:	08 95       	ret
			break;
		case 'J':
		*nColumnsInBytes = sizeof(image_data_Font_0x4a)/sizeof(image_data_Font_0x4a[0])/FONT_SIZE_NORMAL;
    4024:	81 e0       	ldi	r24, 0x01	; 1
    4026:	fb 01       	movw	r30, r22
    4028:	80 83       	st	Z, r24
		return image_data_Font_0x4a;
    402a:	86 ee       	ldi	r24, 0xE6	; 230
    402c:	97 e5       	ldi	r25, 0x57	; 87
    402e:	08 95       	ret
			break;
		case 'K':
		*nColumnsInBytes = sizeof(image_data_Font_0x4b)/sizeof(image_data_Font_0x4b[0])/FONT_SIZE_NORMAL;
    4030:	82 e0       	ldi	r24, 0x02	; 2
    4032:	fb 01       	movw	r30, r22
    4034:	80 83       	st	Z, r24
		return image_data_Font_0x4b;
    4036:	84 ec       	ldi	r24, 0xC4	; 196
    4038:	97 e5       	ldi	r25, 0x57	; 87
    403a:	08 95       	ret
			break;
		case 'L':
		*nColumnsInBytes = sizeof(image_data_Font_0x4c)/sizeof(image_data_Font_0x4c[0])/FONT_SIZE_NORMAL;
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	fb 01       	movw	r30, r22
    4040:	80 83       	st	Z, r24
		return image_data_Font_0x4c;
    4042:	83 eb       	ldi	r24, 0xB3	; 179
    4044:	97 e5       	ldi	r25, 0x57	; 87
    4046:	08 95       	ret
			break;
		case 'M':
		*nColumnsInBytes = sizeof(image_data_Font_0x4d)/sizeof(image_data_Font_0x4d[0])/FONT_SIZE_NORMAL;
    4048:	82 e0       	ldi	r24, 0x02	; 2
    404a:	fb 01       	movw	r30, r22
    404c:	80 83       	st	Z, r24
		return image_data_Font_0x4d;
    404e:	81 e9       	ldi	r24, 0x91	; 145
    4050:	97 e5       	ldi	r25, 0x57	; 87
    4052:	08 95       	ret
			break;
		case 'N':
		*nColumnsInBytes = sizeof(image_data_Font_0x4e)/sizeof(image_data_Font_0x4e[0])/FONT_SIZE_NORMAL;
    4054:	82 e0       	ldi	r24, 0x02	; 2
    4056:	fb 01       	movw	r30, r22
    4058:	80 83       	st	Z, r24
		return image_data_Font_0x4e;
    405a:	8f e6       	ldi	r24, 0x6F	; 111
    405c:	97 e5       	ldi	r25, 0x57	; 87
    405e:	08 95       	ret
			break;
		case 'O':
		*nColumnsInBytes = sizeof(image_data_Font_0x4f)/sizeof(image_data_Font_0x4f[0])/FONT_SIZE_NORMAL;
    4060:	82 e0       	ldi	r24, 0x02	; 2
    4062:	fb 01       	movw	r30, r22
    4064:	80 83       	st	Z, r24
		return image_data_Font_0x4f;
    4066:	8d e4       	ldi	r24, 0x4D	; 77
    4068:	97 e5       	ldi	r25, 0x57	; 87
    406a:	08 95       	ret
			break;
		case 'P':
		*nColumnsInBytes = sizeof(image_data_Font_0x50)/sizeof(image_data_Font_0x50[0])/FONT_SIZE_NORMAL;
    406c:	82 e0       	ldi	r24, 0x02	; 2
    406e:	fb 01       	movw	r30, r22
    4070:	80 83       	st	Z, r24
		return image_data_Font_0x50;
    4072:	8b e2       	ldi	r24, 0x2B	; 43
    4074:	97 e5       	ldi	r25, 0x57	; 87
    4076:	08 95       	ret
			break;
		case 'Q':
		*nColumnsInBytes = sizeof(image_data_Font_0x51)/sizeof(image_data_Font_0x51[0])/FONT_SIZE_NORMAL;
    4078:	82 e0       	ldi	r24, 0x02	; 2
    407a:	fb 01       	movw	r30, r22
    407c:	80 83       	st	Z, r24
		return image_data_Font_0x51;
    407e:	89 e0       	ldi	r24, 0x09	; 9
    4080:	97 e5       	ldi	r25, 0x57	; 87
    4082:	08 95       	ret
			break;
		case 'R':
		*nColumnsInBytes = sizeof(image_data_Font_0x52)/sizeof(image_data_Font_0x52[0])/FONT_SIZE_NORMAL;
    4084:	82 e0       	ldi	r24, 0x02	; 2
    4086:	fb 01       	movw	r30, r22
    4088:	80 83       	st	Z, r24
		return image_data_Font_0x52;
    408a:	87 ee       	ldi	r24, 0xE7	; 231
    408c:	96 e5       	ldi	r25, 0x56	; 86
    408e:	08 95       	ret
			break;
		case 'S':
		*nColumnsInBytes = sizeof(image_data_Font_0x53)/sizeof(image_data_Font_0x53[0])/FONT_SIZE_NORMAL;
    4090:	82 e0       	ldi	r24, 0x02	; 2
    4092:	fb 01       	movw	r30, r22
    4094:	80 83       	st	Z, r24
		return image_data_Font_0x53;
    4096:	85 ec       	ldi	r24, 0xC5	; 197
    4098:	96 e5       	ldi	r25, 0x56	; 86
    409a:	08 95       	ret
			break;
		case 'T':
		*nColumnsInBytes = sizeof(image_data_Font_0x54)/sizeof(image_data_Font_0x54[0])/FONT_SIZE_NORMAL;
    409c:	81 e0       	ldi	r24, 0x01	; 1
    409e:	fb 01       	movw	r30, r22
    40a0:	80 83       	st	Z, r24
		return image_data_Font_0x54;
    40a2:	84 eb       	ldi	r24, 0xB4	; 180
    40a4:	96 e5       	ldi	r25, 0x56	; 86
    40a6:	08 95       	ret
			break;
		case 'U':
		*nColumnsInBytes = sizeof(image_data_Font_0x55)/sizeof(image_data_Font_0x55[0])/FONT_SIZE_NORMAL;
    40a8:	82 e0       	ldi	r24, 0x02	; 2
    40aa:	fb 01       	movw	r30, r22
    40ac:	80 83       	st	Z, r24
		return image_data_Font_0x55;
    40ae:	82 e9       	ldi	r24, 0x92	; 146
    40b0:	96 e5       	ldi	r25, 0x56	; 86
    40b2:	08 95       	ret
			break;
		case 'V':
		*nColumnsInBytes = sizeof(image_data_Font_0x56)/sizeof(image_data_Font_0x56[0])/FONT_SIZE_NORMAL;
    40b4:	82 e0       	ldi	r24, 0x02	; 2
    40b6:	fb 01       	movw	r30, r22
    40b8:	80 83       	st	Z, r24
		return image_data_Font_0x56;
    40ba:	80 e7       	ldi	r24, 0x70	; 112
    40bc:	96 e5       	ldi	r25, 0x56	; 86
    40be:	08 95       	ret
			break;
		case 'W':
		*nColumnsInBytes = sizeof(image_data_Font_0x57)/sizeof(image_data_Font_0x57[0])/FONT_SIZE_NORMAL;
    40c0:	82 e0       	ldi	r24, 0x02	; 2
    40c2:	fb 01       	movw	r30, r22
    40c4:	80 83       	st	Z, r24
		return image_data_Font_0x57;
    40c6:	8e e4       	ldi	r24, 0x4E	; 78
    40c8:	96 e5       	ldi	r25, 0x56	; 86
    40ca:	08 95       	ret
			break;
		case 'X':
		*nColumnsInBytes = sizeof(image_data_Font_0x58)/sizeof(image_data_Font_0x58[0])/FONT_SIZE_NORMAL;
    40cc:	82 e0       	ldi	r24, 0x02	; 2
    40ce:	fb 01       	movw	r30, r22
    40d0:	80 83       	st	Z, r24
		return image_data_Font_0x58;
    40d2:	8c e2       	ldi	r24, 0x2C	; 44
    40d4:	96 e5       	ldi	r25, 0x56	; 86
    40d6:	08 95       	ret
			break;
		case 'Y':
		*nColumnsInBytes = sizeof(image_data_Font_0x59)/sizeof(image_data_Font_0x59[0])/FONT_SIZE_NORMAL;
    40d8:	82 e0       	ldi	r24, 0x02	; 2
    40da:	fb 01       	movw	r30, r22
    40dc:	80 83       	st	Z, r24
		return image_data_Font_0x59;
    40de:	8a e0       	ldi	r24, 0x0A	; 10
    40e0:	96 e5       	ldi	r25, 0x56	; 86
    40e2:	08 95       	ret
			break;
		case 'Z':
		*nColumnsInBytes = sizeof(image_data_Font_0x5a)/sizeof(image_data_Font_0x5a[0])/FONT_SIZE_NORMAL;
    40e4:	82 e0       	ldi	r24, 0x02	; 2
    40e6:	fb 01       	movw	r30, r22
    40e8:	80 83       	st	Z, r24
		return image_data_Font_0x5a;
    40ea:	88 ee       	ldi	r24, 0xE8	; 232
    40ec:	95 e5       	ldi	r25, 0x55	; 85
    40ee:	08 95       	ret
			break;
		case '[':
		*nColumnsInBytes = sizeof(image_data_Font_0x5b)/sizeof(image_data_Font_0x5b[0])/FONT_SIZE_NORMAL;
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	fb 01       	movw	r30, r22
    40f4:	80 83       	st	Z, r24
		return image_data_Font_0x5b;
    40f6:	87 ed       	ldi	r24, 0xD7	; 215
    40f8:	95 e5       	ldi	r25, 0x55	; 85
    40fa:	08 95       	ret
			break;
		case '\\':
		*nColumnsInBytes = sizeof(image_data_Font_0x5c)/sizeof(image_data_Font_0x5c[0])/FONT_SIZE_NORMAL;
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	fb 01       	movw	r30, r22
    4100:	80 83       	st	Z, r24
		return image_data_Font_0x5c;
    4102:	86 ec       	ldi	r24, 0xC6	; 198
    4104:	95 e5       	ldi	r25, 0x55	; 85
    4106:	08 95       	ret
			break;
		case ']':
		*nColumnsInBytes = sizeof(image_data_Font_0x5d)/sizeof(image_data_Font_0x5d[0])/FONT_SIZE_NORMAL;
    4108:	81 e0       	ldi	r24, 0x01	; 1
    410a:	fb 01       	movw	r30, r22
    410c:	80 83       	st	Z, r24
		return image_data_Font_0x5d;
    410e:	85 eb       	ldi	r24, 0xB5	; 181
    4110:	95 e5       	ldi	r25, 0x55	; 85
    4112:	08 95       	ret
			break;
		case '^':
		*nColumnsInBytes = sizeof(image_data_Font_0x5e)/sizeof(image_data_Font_0x5e[0])/FONT_SIZE_NORMAL;
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	fb 01       	movw	r30, r22
    4118:	80 83       	st	Z, r24
		return image_data_Font_0x5e;
    411a:	84 ea       	ldi	r24, 0xA4	; 164
    411c:	95 e5       	ldi	r25, 0x55	; 85
    411e:	08 95       	ret
			break;
		case '_':
		*nColumnsInBytes = sizeof(image_data_Font_0x5f)/sizeof(image_data_Font_0x5f[0])/FONT_SIZE_NORMAL;
    4120:	81 e0       	ldi	r24, 0x01	; 1
    4122:	fb 01       	movw	r30, r22
    4124:	80 83       	st	Z, r24
		return image_data_Font_0x5f;
    4126:	83 e9       	ldi	r24, 0x93	; 147
    4128:	95 e5       	ldi	r25, 0x55	; 85
    412a:	08 95       	ret
			break;
		case '`':
		*nColumnsInBytes = sizeof(image_data_Font_0x60)/sizeof(image_data_Font_0x60[0])/FONT_SIZE_NORMAL;
    412c:	81 e0       	ldi	r24, 0x01	; 1
    412e:	fb 01       	movw	r30, r22
    4130:	80 83       	st	Z, r24
		return image_data_Font_0x60;
    4132:	82 e8       	ldi	r24, 0x82	; 130
    4134:	95 e5       	ldi	r25, 0x55	; 85
    4136:	08 95       	ret
			break;
		case 'a':
		*nColumnsInBytes = sizeof(image_data_Font_0x61)/sizeof(image_data_Font_0x61[0])/FONT_SIZE_NORMAL;
    4138:	82 e0       	ldi	r24, 0x02	; 2
    413a:	fb 01       	movw	r30, r22
    413c:	80 83       	st	Z, r24
		return image_data_Font_0x61;
    413e:	80 e6       	ldi	r24, 0x60	; 96
    4140:	95 e5       	ldi	r25, 0x55	; 85
    4142:	08 95       	ret
			break;
		case 'b':
		*nColumnsInBytes = sizeof(image_data_Font_0x62)/sizeof(image_data_Font_0x62[0])/FONT_SIZE_NORMAL;
    4144:	82 e0       	ldi	r24, 0x02	; 2
    4146:	fb 01       	movw	r30, r22
    4148:	80 83       	st	Z, r24
		return image_data_Font_0x62;
    414a:	8e e3       	ldi	r24, 0x3E	; 62
    414c:	95 e5       	ldi	r25, 0x55	; 85
    414e:	08 95       	ret
			break;
		case 'c':
		*nColumnsInBytes = sizeof(image_data_Font_0x63)/sizeof(image_data_Font_0x63[0])/FONT_SIZE_NORMAL;
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	fb 01       	movw	r30, r22
    4154:	80 83       	st	Z, r24
		return image_data_Font_0x63;
    4156:	8d e2       	ldi	r24, 0x2D	; 45
    4158:	95 e5       	ldi	r25, 0x55	; 85
    415a:	08 95       	ret
			break;
		case 'd':
		*nColumnsInBytes = sizeof(image_data_Font_0x64)/sizeof(image_data_Font_0x64[0])/FONT_SIZE_NORMAL;
    415c:	82 e0       	ldi	r24, 0x02	; 2
    415e:	fb 01       	movw	r30, r22
    4160:	80 83       	st	Z, r24
		return image_data_Font_0x64;
    4162:	8b e0       	ldi	r24, 0x0B	; 11
    4164:	95 e5       	ldi	r25, 0x55	; 85
    4166:	08 95       	ret
			break;
		case 'e':
		*nColumnsInBytes = sizeof(image_data_Font_0x65)/sizeof(image_data_Font_0x65[0])/FONT_SIZE_NORMAL;
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	fb 01       	movw	r30, r22
    416c:	80 83       	st	Z, r24
		return image_data_Font_0x65;
    416e:	8a ef       	ldi	r24, 0xFA	; 250
    4170:	94 e5       	ldi	r25, 0x54	; 84
    4172:	08 95       	ret
			break;
		case 'f':
		*nColumnsInBytes = sizeof(image_data_Font_0x66)/sizeof(image_data_Font_0x66[0])/FONT_SIZE_NORMAL;
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	fb 01       	movw	r30, r22
    4178:	80 83       	st	Z, r24
		return image_data_Font_0x66;
    417a:	89 ee       	ldi	r24, 0xE9	; 233
    417c:	94 e5       	ldi	r25, 0x54	; 84
    417e:	08 95       	ret
			break;
		case 'g':
		*nColumnsInBytes = sizeof(image_data_Font_0x67)/sizeof(image_data_Font_0x67[0])/FONT_SIZE_NORMAL;
    4180:	82 e0       	ldi	r24, 0x02	; 2
    4182:	fb 01       	movw	r30, r22
    4184:	80 83       	st	Z, r24
		return image_data_Font_0x67;
    4186:	87 ec       	ldi	r24, 0xC7	; 199
    4188:	94 e5       	ldi	r25, 0x54	; 84
    418a:	08 95       	ret
			break;
		case 'h':
		*nColumnsInBytes = sizeof(image_data_Font_0x68)/sizeof(image_data_Font_0x68[0])/FONT_SIZE_NORMAL;
    418c:	82 e0       	ldi	r24, 0x02	; 2
    418e:	fb 01       	movw	r30, r22
    4190:	80 83       	st	Z, r24
		return image_data_Font_0x68;
    4192:	85 ea       	ldi	r24, 0xA5	; 165
    4194:	94 e5       	ldi	r25, 0x54	; 84
    4196:	08 95       	ret
			break;
		case 'i':
		*nColumnsInBytes = sizeof(image_data_Font_0x69)/sizeof(image_data_Font_0x69[0])/FONT_SIZE_NORMAL;
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	fb 01       	movw	r30, r22
    419c:	80 83       	st	Z, r24
		return image_data_Font_0x69;
    419e:	84 e9       	ldi	r24, 0x94	; 148
    41a0:	94 e5       	ldi	r25, 0x54	; 84
    41a2:	08 95       	ret
			break;
		case 'j':
		*nColumnsInBytes = sizeof(image_data_Font_0x6a)/sizeof(image_data_Font_0x6a[0])/FONT_SIZE_NORMAL;
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	fb 01       	movw	r30, r22
    41a8:	80 83       	st	Z, r24
		return image_data_Font_0x6a;
    41aa:	83 e8       	ldi	r24, 0x83	; 131
    41ac:	94 e5       	ldi	r25, 0x54	; 84
    41ae:	08 95       	ret
			break;
		case 'k':
		*nColumnsInBytes = sizeof(image_data_Font_0x6b)/sizeof(image_data_Font_0x6b[0])/FONT_SIZE_NORMAL;
    41b0:	82 e0       	ldi	r24, 0x02	; 2
    41b2:	fb 01       	movw	r30, r22
    41b4:	80 83       	st	Z, r24
		return image_data_Font_0x6b;
    41b6:	81 e6       	ldi	r24, 0x61	; 97
    41b8:	94 e5       	ldi	r25, 0x54	; 84
    41ba:	08 95       	ret
			break;
		case 'l':
		*nColumnsInBytes = sizeof(image_data_Font_0x6c)/sizeof(image_data_Font_0x6c[0])/FONT_SIZE_NORMAL;
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	fb 01       	movw	r30, r22
    41c0:	80 83       	st	Z, r24
		return image_data_Font_0x6c;
    41c2:	80 e5       	ldi	r24, 0x50	; 80
    41c4:	94 e5       	ldi	r25, 0x54	; 84
    41c6:	08 95       	ret
			break;
		case 'm':
		*nColumnsInBytes = sizeof(image_data_Font_0x6d)/sizeof(image_data_Font_0x6d[0])/FONT_SIZE_NORMAL;
    41c8:	82 e0       	ldi	r24, 0x02	; 2
    41ca:	fb 01       	movw	r30, r22
    41cc:	80 83       	st	Z, r24
		return image_data_Font_0x6d;
    41ce:	8e e2       	ldi	r24, 0x2E	; 46
    41d0:	94 e5       	ldi	r25, 0x54	; 84
    41d2:	08 95       	ret
			break;
		case 'n':
		*nColumnsInBytes = sizeof(image_data_Font_0x6e)/sizeof(image_data_Font_0x6e[0])/FONT_SIZE_NORMAL;
    41d4:	82 e0       	ldi	r24, 0x02	; 2
    41d6:	fb 01       	movw	r30, r22
    41d8:	80 83       	st	Z, r24
		return image_data_Font_0x6e;
    41da:	8c e0       	ldi	r24, 0x0C	; 12
    41dc:	94 e5       	ldi	r25, 0x54	; 84
    41de:	08 95       	ret
			break;
		case 'o':
		*nColumnsInBytes = sizeof(image_data_Font_0x6f)/sizeof(image_data_Font_0x6f[0])/FONT_SIZE_NORMAL;
    41e0:	82 e0       	ldi	r24, 0x02	; 2
    41e2:	fb 01       	movw	r30, r22
    41e4:	80 83       	st	Z, r24
		return image_data_Font_0x6f;
    41e6:	8a ee       	ldi	r24, 0xEA	; 234
    41e8:	93 e5       	ldi	r25, 0x53	; 83
    41ea:	08 95       	ret
			break;
		case 'p':
		*nColumnsInBytes = sizeof(image_data_Font_0x70)/sizeof(image_data_Font_0x70[0])/FONT_SIZE_NORMAL;
    41ec:	82 e0       	ldi	r24, 0x02	; 2
    41ee:	fb 01       	movw	r30, r22
    41f0:	80 83       	st	Z, r24
		return image_data_Font_0x70;
    41f2:	88 ec       	ldi	r24, 0xC8	; 200
    41f4:	93 e5       	ldi	r25, 0x53	; 83
    41f6:	08 95       	ret
			break;
		case 'q':
		*nColumnsInBytes = sizeof(image_data_Font_0x71)/sizeof(image_data_Font_0x71[0])/FONT_SIZE_NORMAL;
    41f8:	82 e0       	ldi	r24, 0x02	; 2
    41fa:	fb 01       	movw	r30, r22
    41fc:	80 83       	st	Z, r24
		return image_data_Font_0x71;
    41fe:	86 ea       	ldi	r24, 0xA6	; 166
    4200:	93 e5       	ldi	r25, 0x53	; 83
    4202:	08 95       	ret
			break;
		case 'r':
		*nColumnsInBytes = sizeof(image_data_Font_0x72)/sizeof(image_data_Font_0x72[0])/FONT_SIZE_NORMAL;
    4204:	81 e0       	ldi	r24, 0x01	; 1
    4206:	fb 01       	movw	r30, r22
    4208:	80 83       	st	Z, r24
		return image_data_Font_0x72;
    420a:	85 e9       	ldi	r24, 0x95	; 149
    420c:	93 e5       	ldi	r25, 0x53	; 83
    420e:	08 95       	ret
			break;
		case 's':
		*nColumnsInBytes = sizeof(image_data_Font_0x73)/sizeof(image_data_Font_0x73[0])/FONT_SIZE_NORMAL;
    4210:	81 e0       	ldi	r24, 0x01	; 1
    4212:	fb 01       	movw	r30, r22
    4214:	80 83       	st	Z, r24
		return image_data_Font_0x73;
    4216:	84 e8       	ldi	r24, 0x84	; 132
    4218:	93 e5       	ldi	r25, 0x53	; 83
    421a:	08 95       	ret
			break;
		case 't':
		*nColumnsInBytes = sizeof(image_data_Font_0x74)/sizeof(image_data_Font_0x74[0])/FONT_SIZE_NORMAL;
    421c:	81 e0       	ldi	r24, 0x01	; 1
    421e:	fb 01       	movw	r30, r22
    4220:	80 83       	st	Z, r24
		return image_data_Font_0x74;
    4222:	83 e7       	ldi	r24, 0x73	; 115
    4224:	93 e5       	ldi	r25, 0x53	; 83
    4226:	08 95       	ret
			break;
		case 'u':
		*nColumnsInBytes = sizeof(image_data_Font_0x75)/sizeof(image_data_Font_0x75[0])/FONT_SIZE_NORMAL;
    4228:	82 e0       	ldi	r24, 0x02	; 2
    422a:	fb 01       	movw	r30, r22
    422c:	80 83       	st	Z, r24
		return image_data_Font_0x75;
    422e:	81 e5       	ldi	r24, 0x51	; 81
    4230:	93 e5       	ldi	r25, 0x53	; 83
    4232:	08 95       	ret
			break;
		case 'v':
		*nColumnsInBytes = sizeof(image_data_Font_0x76)/sizeof(image_data_Font_0x76[0])/FONT_SIZE_NORMAL;
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	fb 01       	movw	r30, r22
    4238:	80 83       	st	Z, r24
		return image_data_Font_0x76;
    423a:	80 e4       	ldi	r24, 0x40	; 64
    423c:	93 e5       	ldi	r25, 0x53	; 83
    423e:	08 95       	ret
			break;
		case 'w':
		*nColumnsInBytes = sizeof(image_data_Font_0x77)/sizeof(image_data_Font_0x77[0])/FONT_SIZE_NORMAL;
    4240:	82 e0       	ldi	r24, 0x02	; 2
    4242:	fb 01       	movw	r30, r22
    4244:	80 83       	st	Z, r24
		return image_data_Font_0x77;
    4246:	8e e1       	ldi	r24, 0x1E	; 30
    4248:	93 e5       	ldi	r25, 0x53	; 83
    424a:	08 95       	ret
			break;
		case 'x':
		*nColumnsInBytes = sizeof(image_data_Font_0x78)/sizeof(image_data_Font_0x78[0])/FONT_SIZE_NORMAL;
    424c:	81 e0       	ldi	r24, 0x01	; 1
    424e:	fb 01       	movw	r30, r22
    4250:	80 83       	st	Z, r24
		return image_data_Font_0x78;
    4252:	8d e0       	ldi	r24, 0x0D	; 13
    4254:	93 e5       	ldi	r25, 0x53	; 83
    4256:	08 95       	ret
			break;
		case 'y':
		*nColumnsInBytes = sizeof(image_data_Font_0x79)/sizeof(image_data_Font_0x79[0])/FONT_SIZE_NORMAL;
    4258:	81 e0       	ldi	r24, 0x01	; 1
    425a:	fb 01       	movw	r30, r22
    425c:	80 83       	st	Z, r24
		return image_data_Font_0x79;
    425e:	8c ef       	ldi	r24, 0xFC	; 252
    4260:	92 e5       	ldi	r25, 0x52	; 82
    4262:	08 95       	ret
			break;
		case 'z':
		*nColumnsInBytes = sizeof(image_data_Font_0x7a)/sizeof(image_data_Font_0x7a[0])/FONT_SIZE_NORMAL;
    4264:	81 e0       	ldi	r24, 0x01	; 1
    4266:	fb 01       	movw	r30, r22
    4268:	80 83       	st	Z, r24
		return image_data_Font_0x7a;
    426a:	8b ee       	ldi	r24, 0xEB	; 235
    426c:	92 e5       	ldi	r25, 0x52	; 82
    426e:	08 95       	ret
			break;
		case '{':
		*nColumnsInBytes = sizeof(image_data_Font_0x7b)/sizeof(image_data_Font_0x7b[0])/FONT_SIZE_NORMAL;
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	fb 01       	movw	r30, r22
    4274:	80 83       	st	Z, r24
		return image_data_Font_0x7b;
    4276:	8a ed       	ldi	r24, 0xDA	; 218
    4278:	92 e5       	ldi	r25, 0x52	; 82
    427a:	08 95       	ret
			break;
		case '|':
		*nColumnsInBytes = sizeof(image_data_Font_0x7c)/sizeof(image_data_Font_0x7c[0])/FONT_SIZE_NORMAL;
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	fb 01       	movw	r30, r22
    4280:	80 83       	st	Z, r24
		return image_data_Font_0x7c;
    4282:	89 ec       	ldi	r24, 0xC9	; 201
    4284:	92 e5       	ldi	r25, 0x52	; 82
    4286:	08 95       	ret
			break;
		case '}':
		*nColumnsInBytes = sizeof(image_data_Font_0x7d)/sizeof(image_data_Font_0x7d[0])/FONT_SIZE_NORMAL;
    4288:	81 e0       	ldi	r24, 0x01	; 1
    428a:	fb 01       	movw	r30, r22
    428c:	80 83       	st	Z, r24
		return image_data_Font_0x7d;
    428e:	88 eb       	ldi	r24, 0xB8	; 184
    4290:	92 e5       	ldi	r25, 0x52	; 82
    4292:	08 95       	ret
			break;
		case '~':
		*nColumnsInBytes = sizeof(image_data_Font_0x7e)/sizeof(image_data_Font_0x7e[0])/FONT_SIZE_NORMAL;
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	fb 01       	movw	r30, r22
    4298:	80 83       	st	Z, r24
		return image_data_Font_0x7e;
    429a:	87 ea       	ldi	r24, 0xA7	; 167
    429c:	92 e5       	ldi	r25, 0x52	; 82
    429e:	08 95       	ret
			break;
		default:
		*nColumnsInBytes = sizeof(image_data_Font_error)/sizeof(image_data_Font_error[0])/FONT_SIZE_NORMAL;
    42a0:	82 e0       	ldi	r24, 0x02	; 2
    42a2:	fb 01       	movw	r30, r22
    42a4:	80 83       	st	Z, r24
		return image_data_Font_error;
    42a6:	87 e3       	ldi	r24, 0x37	; 55
    42a8:	9c e5       	ldi	r25, 0x5C	; 92
	}
	
}
    42aa:	08 95       	ret

000042ac <playSnake>:
#include "fonts.h"

int16_t i, j;
bool released = true;

void playSnake(void){
    42ac:	2f 92       	push	r2
    42ae:	3f 92       	push	r3
    42b0:	4f 92       	push	r4
    42b2:	5f 92       	push	r5
    42b4:	6f 92       	push	r6
    42b6:	7f 92       	push	r7
    42b8:	8f 92       	push	r8
    42ba:	9f 92       	push	r9
    42bc:	af 92       	push	r10
    42be:	bf 92       	push	r11
    42c0:	cf 92       	push	r12
    42c2:	df 92       	push	r13
    42c4:	ef 92       	push	r14
    42c6:	ff 92       	push	r15
    42c8:	0f 93       	push	r16
    42ca:	1f 93       	push	r17
    42cc:	cf 93       	push	r28
    42ce:	df 93       	push	r29
    42d0:	cd b7       	in	r28, 0x3d	; 61
    42d2:	de b7       	in	r29, 0x3e	; 62
    42d4:	c8 59       	subi	r28, 0x98	; 152
    42d6:	d1 40       	sbci	r29, 0x01	; 1
    42d8:	cd bf       	out	0x3d, r28	; 61
    42da:	de bf       	out	0x3e, r29	; 62
	bool newBait=true, lost = false;
	int16_t baitX =0, baitY =0, tailX,tailY;
	
	//ioport_configure_port_pin(&PORTF, PIN1_bm, IOPORT_DIR_INPUT);
	//ioport_configure_port_pin(&PORTF, PIN2_bm, IOPORT_DIR_INPUT);
	MLCDClearAll();
    42dc:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <MLCDClearAll>
	
	for(i=0;i<length;i++){
		positionX[i]=column;
    42e0:	89 e1       	ldi	r24, 0x19	; 25
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	89 83       	std	Y+1, r24	; 0x01
    42e6:	9a 83       	std	Y+2, r25	; 0x02
		positionY[i]=row;
    42e8:	89 e7       	ldi	r24, 0x79	; 121
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	c7 53       	subi	r28, 0x37	; 55
    42ee:	df 4f       	sbci	r29, 0xFF	; 255
    42f0:	88 83       	st	Y, r24
    42f2:	99 83       	std	Y+1, r25	; 0x01
    42f4:	c9 5c       	subi	r28, 0xC9	; 201
    42f6:	d0 40       	sbci	r29, 0x00	; 0
	//ioport_configure_port_pin(&PORTF, PIN1_bm, IOPORT_DIR_INPUT);
	//ioport_configure_port_pin(&PORTF, PIN2_bm, IOPORT_DIR_INPUT);
	MLCDClearAll();
	
	for(i=0;i<length;i++){
		positionX[i]=column;
    42f8:	2a e1       	ldi	r18, 0x1A	; 26
    42fa:	30 e0       	ldi	r19, 0x00	; 0
    42fc:	2b 83       	std	Y+3, r18	; 0x03
    42fe:	3c 83       	std	Y+4, r19	; 0x04
		positionY[i]=row;
    4300:	c5 53       	subi	r28, 0x35	; 53
    4302:	df 4f       	sbci	r29, 0xFF	; 255
    4304:	88 83       	st	Y, r24
    4306:	99 83       	std	Y+1, r25	; 0x01
    4308:	cb 5c       	subi	r28, 0xCB	; 203
    430a:	d0 40       	sbci	r29, 0x00	; 0
	//ioport_configure_port_pin(&PORTF, PIN1_bm, IOPORT_DIR_INPUT);
	//ioport_configure_port_pin(&PORTF, PIN2_bm, IOPORT_DIR_INPUT);
	MLCDClearAll();
	
	for(i=0;i<length;i++){
		positionX[i]=column;
    430c:	2b e1       	ldi	r18, 0x1B	; 27
    430e:	30 e0       	ldi	r19, 0x00	; 0
    4310:	2d 83       	std	Y+5, r18	; 0x05
    4312:	3e 83       	std	Y+6, r19	; 0x06
		positionY[i]=row;
    4314:	c3 53       	subi	r28, 0x33	; 51
    4316:	df 4f       	sbci	r29, 0xFF	; 255
    4318:	88 83       	st	Y, r24
    431a:	99 83       	std	Y+1, r25	; 0x01
    431c:	cd 5c       	subi	r28, 0xCD	; 205
    431e:	d0 40       	sbci	r29, 0x00	; 0
	//ioport_configure_port_pin(&PORTF, PIN1_bm, IOPORT_DIR_INPUT);
	//ioport_configure_port_pin(&PORTF, PIN2_bm, IOPORT_DIR_INPUT);
	MLCDClearAll();
	
	for(i=0;i<length;i++){
		positionX[i]=column;
    4320:	2c e1       	ldi	r18, 0x1C	; 28
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	2f 83       	std	Y+7, r18	; 0x07
    4326:	38 87       	std	Y+8, r19	; 0x08
		positionY[i]=row;
    4328:	c1 53       	subi	r28, 0x31	; 49
    432a:	df 4f       	sbci	r29, 0xFF	; 255
    432c:	88 83       	st	Y, r24
    432e:	99 83       	std	Y+1, r25	; 0x01
    4330:	cf 5c       	subi	r28, 0xCF	; 207
    4332:	d0 40       	sbci	r29, 0x00	; 0
    4334:	84 e0       	ldi	r24, 0x04	; 4
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	80 93 79 62 	sts	0x6279, r24
    433c:	90 93 7a 62 	sts	0x627A, r25
    4340:	cf 56       	subi	r28, 0x6F	; 111
    4342:	de 4f       	sbci	r29, 0xFE	; 254
    4344:	18 82       	st	Y, r1
    4346:	19 82       	std	Y+1, r1	; 0x01
    4348:	c1 59       	subi	r28, 0x91	; 145
    434a:	d1 40       	sbci	r29, 0x01	; 1
    434c:	c1 2c       	mov	r12, r1
    434e:	d1 2c       	mov	r13, r1
    4350:	bb 24       	eor	r11, r11
    4352:	b3 94       	inc	r11
    4354:	21 2c       	mov	r2, r1
    4356:	68 94       	set
    4358:	33 24       	eor	r3, r3
    435a:	32 f8       	bld	r3, 2
    435c:	9e 01       	movw	r18, r28
    435e:	2f 5f       	subi	r18, 0xFF	; 255
    4360:	3f 4f       	sbci	r19, 0xFF	; 255
    4362:	49 01       	movw	r8, r18
    4364:	3e 01       	movw	r6, r28
    4366:	39 ec       	ldi	r19, 0xC9	; 201
    4368:	63 0e       	add	r6, r19
    436a:	71 1c       	adc	r7, r1
    436c:	cb 56       	subi	r28, 0x6B	; 107
    436e:	de 4f       	sbci	r29, 0xFE	; 254
    4370:	88 82       	st	Y, r8
    4372:	c5 59       	subi	r28, 0x95	; 149
    4374:	d1 40       	sbci	r29, 0x01	; 1
    4376:	ca 56       	subi	r28, 0x6A	; 106
    4378:	de 4f       	sbci	r29, 0xFE	; 254
    437a:	98 82       	st	Y, r9
    437c:	c6 59       	subi	r28, 0x96	; 150
    437e:	d1 40       	sbci	r29, 0x01	; 1
    4380:	c9 56       	subi	r28, 0x69	; 105
    4382:	de 4f       	sbci	r29, 0xFE	; 254
    4384:	68 82       	st	Y, r6
    4386:	c7 59       	subi	r28, 0x97	; 151
    4388:	d1 40       	sbci	r29, 0x01	; 1
    438a:	c8 56       	subi	r28, 0x68	; 104
    438c:	de 4f       	sbci	r29, 0xFE	; 254
    438e:	78 82       	st	Y, r7
    4390:	c8 59       	subi	r28, 0x98	; 152
    4392:	d1 40       	sbci	r29, 0x01	; 1

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    4394:	0f 2e       	mov	r0, r31
    4396:	f0 ea       	ldi	r31, 0xA0	; 160
    4398:	4f 2e       	mov	r4, r31
    439a:	f6 e0       	ldi	r31, 0x06	; 6
    439c:	5f 2e       	mov	r5, r31
    439e:	f0 2d       	mov	r31, r0
		column++;
	}
	
	while(1){
		srand(positionX[0]);
    43a0:	e9 80       	ldd	r14, Y+1	; 0x01
    43a2:	fa 80       	ldd	r15, Y+2	; 0x02
    43a4:	c7 01       	movw	r24, r14
    43a6:	0e 94 f2 3e 	call	0x7de4	; 0x7de4 <srand>
		
		if(newBait){
    43aa:	bb 20       	and	r11, r11
    43ac:	09 f4       	brne	.+2      	; 0x43b0 <playSnake+0x104>
    43ae:	95 c0       	rjmp	.+298    	; 0x44da <playSnake+0x22e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    43b0:	82 e0       	ldi	r24, 0x02	; 2
    43b2:	80 93 e5 07 	sts	0x07E5, r24
    43b6:	03 2d       	mov	r16, r3
    43b8:	10 e0       	ldi	r17, 0x00	; 0
    43ba:	00 0f       	add	r16, r16
    43bc:	11 1f       	adc	r17, r17
    43be:	08 0d       	add	r16, r8
    43c0:	19 1d       	adc	r17, r9
			bool overlap = false;
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
				baitX = rand()%50+1;
				for(i=0;i<length;i++){
    43c2:	c3 2c       	mov	r12, r3
    43c4:	d1 2c       	mov	r13, r1
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    43c6:	68 94       	set
    43c8:	bb 24       	eor	r11, r11
    43ca:	b1 f8       	bld	r11, 1
    43cc:	a3 2c       	mov	r10, r3
    43ce:	cd 56       	subi	r28, 0x6D	; 109
    43d0:	de 4f       	sbci	r29, 0xFE	; 254
    43d2:	88 82       	st	Y, r8
    43d4:	99 82       	std	Y+1, r9	; 0x01
    43d6:	c3 59       	subi	r28, 0x93	; 147
    43d8:	d1 40       	sbci	r29, 0x01	; 1
    43da:	92 2c       	mov	r9, r2
    43dc:	16 01       	movw	r2, r12
		if(newBait){
			LED_Off(LED1);
			bool overlap = false;
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
    43de:	0e 94 ef 3e 	call	0x7dde	; 0x7dde <rand>
    43e2:	6e e1       	ldi	r22, 0x1E	; 30
    43e4:	70 e0       	ldi	r23, 0x00	; 0
    43e6:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <__divmodhi4>
    43ea:	6c 01       	movw	r12, r24
    43ec:	cc 0c       	add	r12, r12
    43ee:	dd 1c       	adc	r13, r13
    43f0:	cc 0c       	add	r12, r12
    43f2:	dd 1c       	adc	r13, r13
    43f4:	cc 0c       	add	r12, r12
    43f6:	dd 1c       	adc	r13, r13
    43f8:	4f ef       	ldi	r20, 0xFF	; 255
    43fa:	c4 1a       	sub	r12, r20
    43fc:	d4 0a       	sbc	r13, r20
				baitX = rand()%50+1;
    43fe:	0e 94 ef 3e 	call	0x7dde	; 0x7dde <rand>
    4402:	62 e3       	ldi	r22, 0x32	; 50
    4404:	70 e0       	ldi	r23, 0x00	; 0
    4406:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <__divmodhi4>
    440a:	01 96       	adiw	r24, 0x01	; 1
				for(i=0;i<length;i++){
    440c:	10 92 79 62 	sts	0x6279, r1
    4410:	10 92 7a 62 	sts	0x627A, r1
    4414:	12 14       	cp	r1, r2
    4416:	13 04       	cpc	r1, r3
    4418:	8c f5       	brge	.+98     	; 0x447c <playSnake+0x1d0>
    441a:	cb 56       	subi	r28, 0x6B	; 107
    441c:	de 4f       	sbci	r29, 0xFE	; 254
    441e:	e8 81       	ld	r30, Y
    4420:	c5 59       	subi	r28, 0x95	; 149
    4422:	d1 40       	sbci	r29, 0x01	; 1
    4424:	ca 56       	subi	r28, 0x6A	; 106
    4426:	de 4f       	sbci	r29, 0xFE	; 254
    4428:	f8 81       	ld	r31, Y
    442a:	c6 59       	subi	r28, 0x96	; 150
    442c:	d1 40       	sbci	r29, 0x01	; 1
    442e:	c9 56       	subi	r28, 0x69	; 105
    4430:	de 4f       	sbci	r29, 0xFE	; 254
    4432:	a8 81       	ld	r26, Y
    4434:	c7 59       	subi	r28, 0x97	; 151
    4436:	d1 40       	sbci	r29, 0x01	; 1
    4438:	c8 56       	subi	r28, 0x68	; 104
    443a:	de 4f       	sbci	r29, 0xFE	; 254
    443c:	b8 81       	ld	r27, Y
    443e:	c8 59       	subi	r28, 0x98	; 152
    4440:	d1 40       	sbci	r29, 0x01	; 1
		
		if(newBait){
			LED_Off(LED1);
			bool overlap = false;
			do{
				overlap = false;
    4442:	40 e0       	ldi	r20, 0x00	; 0
				baitY = (rand()%30)*8 + 1;
				baitX = rand()%50+1;
				for(i=0;i<length;i++){
					if(baitX == positionX[i] && baitY == positionY[i])	overlap = true;
    4444:	21 91       	ld	r18, Z+
    4446:	31 91       	ld	r19, Z+
    4448:	28 17       	cp	r18, r24
    444a:	39 07       	cpc	r19, r25
    444c:	31 f4       	brne	.+12     	; 0x445a <playSnake+0x1ae>
    444e:	2d 91       	ld	r18, X+
    4450:	3c 91       	ld	r19, X
    4452:	11 97       	sbiw	r26, 0x01	; 1
    4454:	2c 15       	cp	r18, r12
    4456:	3d 05       	cpc	r19, r13
    4458:	19 f0       	breq	.+6      	; 0x4460 <playSnake+0x1b4>
					//if(baitY == positionY[i])	overlap = true;
					if(overlap)	LED_On(LED1);
    445a:	44 23       	and	r20, r20
    445c:	21 f0       	breq	.+8      	; 0x4466 <playSnake+0x1ba>
    445e:	01 c0       	rjmp	.+2      	; 0x4462 <playSnake+0x1b6>
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
				baitX = rand()%50+1;
				for(i=0;i<length;i++){
					if(baitX == positionX[i] && baitY == positionY[i])	overlap = true;
    4460:	41 e0       	ldi	r20, 0x01	; 1
    4462:	b0 92 e6 07 	sts	0x07E6, r11
    4466:	12 96       	adiw	r26, 0x02	; 2
			bool overlap = false;
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
				baitX = rand()%50+1;
				for(i=0;i<length;i++){
    4468:	e0 17       	cp	r30, r16
    446a:	f1 07       	cpc	r31, r17
    446c:	59 f7       	brne	.-42     	; 0x4444 <playSnake+0x198>
    446e:	20 92 79 62 	sts	0x6279, r2
    4472:	30 92 7a 62 	sts	0x627A, r3
					if(baitX == positionX[i] && baitY == positionY[i])	overlap = true;
					//if(baitY == positionY[i])	overlap = true;
					if(overlap)	LED_On(LED1);
				}
			}while(overlap);
    4476:	41 11       	cpse	r20, r1
    4478:	b2 cf       	rjmp	.-156    	; 0x43de <playSnake+0x132>
    447a:	16 c0       	rjmp	.+44     	; 0x44a8 <playSnake+0x1fc>
    447c:	3a 2c       	mov	r3, r10
    447e:	29 2c       	mov	r2, r9
    4480:	cf 56       	subi	r28, 0x6F	; 111
    4482:	de 4f       	sbci	r29, 0xFE	; 254
    4484:	c8 82       	st	Y, r12
    4486:	d9 82       	std	Y+1, r13	; 0x01
    4488:	c1 59       	subi	r28, 0x91	; 145
    448a:	d1 40       	sbci	r29, 0x01	; 1
    448c:	6c 01       	movw	r12, r24
    448e:	cd 56       	subi	r28, 0x6D	; 109
    4490:	de 4f       	sbci	r29, 0xFE	; 254
    4492:	88 80       	ld	r8, Y
    4494:	99 80       	ldd	r9, Y+1	; 0x01
    4496:	c3 59       	subi	r28, 0x93	; 147
    4498:	d1 40       	sbci	r29, 0x01	; 1
			LED_Off(LED1);
			bool overlap = false;
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
				baitX = rand()%50+1;
    449a:	68 2f       	mov	r22, r24
		if(newBait){
			LED_Off(LED1);
			bool overlap = false;
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
    449c:	cf 56       	subi	r28, 0x6F	; 111
    449e:	de 4f       	sbci	r29, 0xFE	; 254
    44a0:	88 81       	ld	r24, Y
    44a2:	c1 59       	subi	r28, 0x91	; 145
    44a4:	d1 40       	sbci	r29, 0x01	; 1
    44a6:	15 c0       	rjmp	.+42     	; 0x44d2 <playSnake+0x226>
    44a8:	3a 2c       	mov	r3, r10
    44aa:	29 2c       	mov	r2, r9
    44ac:	cf 56       	subi	r28, 0x6F	; 111
    44ae:	de 4f       	sbci	r29, 0xFE	; 254
    44b0:	c8 82       	st	Y, r12
    44b2:	d9 82       	std	Y+1, r13	; 0x01
    44b4:	c1 59       	subi	r28, 0x91	; 145
    44b6:	d1 40       	sbci	r29, 0x01	; 1
    44b8:	6c 01       	movw	r12, r24
    44ba:	cd 56       	subi	r28, 0x6D	; 109
    44bc:	de 4f       	sbci	r29, 0xFE	; 254
    44be:	88 80       	ld	r8, Y
    44c0:	99 80       	ldd	r9, Y+1	; 0x01
    44c2:	c3 59       	subi	r28, 0x93	; 147
    44c4:	d1 40       	sbci	r29, 0x01	; 1
				baitX = rand()%50+1;
    44c6:	68 2f       	mov	r22, r24
		if(newBait){
			LED_Off(LED1);
			bool overlap = false;
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
    44c8:	cf 56       	subi	r28, 0x6F	; 111
    44ca:	de 4f       	sbci	r29, 0xFE	; 254
    44cc:	88 81       	ld	r24, Y
    44ce:	c1 59       	subi	r28, 0x91	; 145
    44d0:	d1 40       	sbci	r29, 0x01	; 1
					if(baitX == positionX[i] && baitY == positionY[i])	overlap = true;
					//if(baitY == positionY[i])	overlap = true;
					if(overlap)	LED_On(LED1);
				}
			}while(overlap);
			MLCDDrawSnakeBait(baitY, baitX, false);
    44d2:	40 e0       	ldi	r20, 0x00	; 0
    44d4:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <MLCDDrawSnakeBait>
			newBait = false;
    44d8:	b1 2c       	mov	r11, r1
		}
		
		for(i=0;i<length;i++){
    44da:	10 92 79 62 	sts	0x6279, r1
    44de:	10 92 7a 62 	sts	0x627A, r1
    44e2:	03 2d       	mov	r16, r3
    44e4:	10 e0       	ldi	r17, 0x00	; 0
    44e6:	10 16       	cp	r1, r16
    44e8:	11 06       	cpc	r1, r17
    44ea:	e4 f4       	brge	.+56     	; 0x4524 <playSnake+0x278>
    44ec:	80 e0       	ldi	r24, 0x00	; 0
    44ee:	90 e0       	ldi	r25, 0x00	; 0
			
			MLCDDrawSquare(1,positionY[i],positionX[i],true);
    44f0:	88 0f       	add	r24, r24
    44f2:	99 1f       	adc	r25, r25
    44f4:	f4 01       	movw	r30, r8
    44f6:	e8 0f       	add	r30, r24
    44f8:	f9 1f       	adc	r31, r25
    44fa:	d3 01       	movw	r26, r6
    44fc:	a8 0f       	add	r26, r24
    44fe:	b9 1f       	adc	r27, r25
    4500:	21 e0       	ldi	r18, 0x01	; 1
    4502:	40 81       	ld	r20, Z
    4504:	6c 91       	ld	r22, X
    4506:	81 e0       	ldi	r24, 0x01	; 1
    4508:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <MLCDDrawSquare>
			}while(overlap);
			MLCDDrawSnakeBait(baitY, baitX, false);
			newBait = false;
		}
		
		for(i=0;i<length;i++){
    450c:	80 91 79 62 	lds	r24, 0x6279
    4510:	90 91 7a 62 	lds	r25, 0x627A
    4514:	01 96       	adiw	r24, 0x01	; 1
    4516:	80 93 79 62 	sts	0x6279, r24
    451a:	90 93 7a 62 	sts	0x627A, r25
    451e:	80 17       	cp	r24, r16
    4520:	91 07       	cpc	r25, r17
    4522:	34 f3       	brlt	.-52     	; 0x44f0 <playSnake+0x244>
			
			MLCDDrawSquare(1,positionY[i],positionX[i],true);
		}
		tailX = positionX[0];
		tailY = positionY[0];
    4524:	d3 01       	movw	r26, r6
    4526:	0d 90       	ld	r0, X+
    4528:	bc 91       	ld	r27, X
    452a:	a0 2d       	mov	r26, r0
    452c:	cd 56       	subi	r28, 0x6D	; 109
    452e:	de 4f       	sbci	r29, 0xFE	; 254
    4530:	a8 83       	st	Y, r26
    4532:	b9 83       	std	Y+1, r27	; 0x01
    4534:	c3 59       	subi	r28, 0x93	; 147
    4536:	d1 40       	sbci	r29, 0x01	; 1
		
		for(i=0;i<length-1;i++){
    4538:	10 92 79 62 	sts	0x6279, r1
    453c:	10 92 7a 62 	sts	0x627A, r1
    4540:	a8 01       	movw	r20, r16
    4542:	41 50       	subi	r20, 0x01	; 1
    4544:	51 09       	sbc	r21, r1
    4546:	14 16       	cp	r1, r20
    4548:	15 06       	cpc	r1, r21
    454a:	04 f5       	brge	.+64     	; 0x458c <playSnake+0x2e0>
    454c:	f4 01       	movw	r30, r8
    454e:	d3 01       	movw	r26, r6
    4550:	63 2d       	mov	r22, r3
    4552:	70 e0       	ldi	r23, 0x00	; 0
    4554:	9b 01       	movw	r18, r22
    4556:	22 0f       	add	r18, r18
    4558:	33 1f       	adc	r19, r19
    455a:	8f ef       	ldi	r24, 0xFF	; 255
    455c:	9f ef       	ldi	r25, 0xFF	; 255
    455e:	8c 0f       	add	r24, r28
    4560:	9d 1f       	adc	r25, r29
    4562:	28 0f       	add	r18, r24
    4564:	39 1f       	adc	r19, r25
			
			positionX[i] = positionX[i+1];
    4566:	82 81       	ldd	r24, Z+2	; 0x02
    4568:	93 81       	ldd	r25, Z+3	; 0x03
    456a:	81 93       	st	Z+, r24
    456c:	91 93       	st	Z+, r25
			positionY[i] = positionY[i+1];
    456e:	12 96       	adiw	r26, 0x02	; 2
    4570:	8d 91       	ld	r24, X+
    4572:	9c 91       	ld	r25, X
    4574:	13 97       	sbiw	r26, 0x03	; 3
    4576:	8d 93       	st	X+, r24
    4578:	9d 93       	st	X+, r25
			MLCDDrawSquare(1,positionY[i],positionX[i],true);
		}
		tailX = positionX[0];
		tailY = positionY[0];
		
		for(i=0;i<length-1;i++){
    457a:	e2 17       	cp	r30, r18
    457c:	f3 07       	cpc	r31, r19
    457e:	99 f7       	brne	.-26     	; 0x4566 <playSnake+0x2ba>
    4580:	61 50       	subi	r22, 0x01	; 1
    4582:	71 09       	sbc	r23, r1
    4584:	60 93 79 62 	sts	0x6279, r22
    4588:	70 93 7a 62 	sts	0x627A, r23
			
			positionX[i] = positionX[i+1];
			positionY[i] = positionY[i+1];
		}
		
		if(positionY[length-1]==baitY && positionX[length-1]==baitX){
    458c:	fa 01       	movw	r30, r20
    458e:	ee 0f       	add	r30, r30
    4590:	ff 1f       	adc	r31, r31
    4592:	e6 0d       	add	r30, r6
    4594:	f7 1d       	adc	r31, r7
    4596:	80 81       	ld	r24, Z
    4598:	91 81       	ldd	r25, Z+1	; 0x01
    459a:	cf 56       	subi	r28, 0x6F	; 111
    459c:	de 4f       	sbci	r29, 0xFE	; 254
    459e:	a8 81       	ld	r26, Y
    45a0:	b9 81       	ldd	r27, Y+1	; 0x01
    45a2:	c1 59       	subi	r28, 0x91	; 145
    45a4:	d1 40       	sbci	r29, 0x01	; 1
    45a6:	8a 17       	cp	r24, r26
    45a8:	9b 07       	cpc	r25, r27
    45aa:	09 f0       	breq	.+2      	; 0x45ae <playSnake+0x302>
    45ac:	5f c0       	rjmp	.+190    	; 0x466c <playSnake+0x3c0>
    45ae:	fa 01       	movw	r30, r20
    45b0:	ee 0f       	add	r30, r30
    45b2:	ff 1f       	adc	r31, r31
    45b4:	e8 0d       	add	r30, r8
    45b6:	f9 1d       	adc	r31, r9
    45b8:	80 81       	ld	r24, Z
    45ba:	91 81       	ldd	r25, Z+1	; 0x01
    45bc:	8c 15       	cp	r24, r12
    45be:	9d 05       	cpc	r25, r13
    45c0:	09 f0       	breq	.+2      	; 0x45c4 <playSnake+0x318>
    45c2:	54 c0       	rjmp	.+168    	; 0x466c <playSnake+0x3c0>
			length++;
    45c4:	33 94       	inc	r3
			newBait=true;
			for(i=length-1;i>0;i--){
    45c6:	83 2d       	mov	r24, r3
    45c8:	90 e0       	ldi	r25, 0x00	; 0
    45ca:	01 97       	sbiw	r24, 0x01	; 1
    45cc:	80 93 79 62 	sts	0x6279, r24
    45d0:	90 93 7a 62 	sts	0x627A, r25
    45d4:	18 16       	cp	r1, r24
    45d6:	19 06       	cpc	r1, r25
    45d8:	e4 f5       	brge	.+120    	; 0x4652 <playSnake+0x3a6>
    45da:	23 2d       	mov	r18, r3
    45dc:	30 e0       	ldi	r19, 0x00	; 0
    45de:	bc 01       	movw	r22, r24
    45e0:	66 0f       	add	r22, r22
    45e2:	77 1f       	adc	r23, r23
    45e4:	f4 01       	movw	r30, r8
    45e6:	e6 0f       	add	r30, r22
    45e8:	f7 1f       	adc	r31, r23
    45ea:	22 0f       	add	r18, r18
    45ec:	33 1f       	adc	r19, r19
    45ee:	c4 01       	movw	r24, r8
    45f0:	82 0f       	add	r24, r18
    45f2:	93 1f       	adc	r25, r19
    45f4:	66 0d       	add	r22, r6
    45f6:	77 1d       	adc	r23, r7
    45f8:	a9 01       	movw	r20, r18
    45fa:	5e 01       	movw	r10, r28
    45fc:	b3 e0       	ldi	r27, 0x03	; 3
    45fe:	ab 0e       	add	r10, r27
    4600:	b1 1c       	adc	r11, r1
    4602:	31 95       	neg	r19
    4604:	21 95       	neg	r18
    4606:	31 09       	sbc	r19, r1
    4608:	32 97       	sbiw	r30, 0x02	; 2
    460a:	d9 01       	movw	r26, r18
    460c:	ae 0f       	add	r26, r30
    460e:	bf 1f       	adc	r27, r31
    4610:	a4 0f       	add	r26, r20
    4612:	b5 1f       	adc	r27, r21
				
				positionX[i] = positionX[i-1];
    4614:	0d 91       	ld	r16, X+
    4616:	1c 91       	ld	r17, X
    4618:	02 97       	sbiw	r24, 0x02	; 2
    461a:	dc 01       	movw	r26, r24
    461c:	a2 0f       	add	r26, r18
    461e:	b3 1f       	adc	r27, r19
    4620:	a4 0f       	add	r26, r20
    4622:	b5 1f       	adc	r27, r21
    4624:	0d 93       	st	X+, r16
    4626:	1c 93       	st	X, r17
    4628:	62 50       	subi	r22, 0x02	; 2
    462a:	71 09       	sbc	r23, r1
    462c:	db 01       	movw	r26, r22
    462e:	a2 0f       	add	r26, r18
    4630:	b3 1f       	adc	r27, r19
    4632:	a4 0f       	add	r26, r20
    4634:	b5 1f       	adc	r27, r21
				positionY[i] = positionY[i-1];
    4636:	0d 91       	ld	r16, X+
    4638:	1c 91       	ld	r17, X
    463a:	11 97       	sbiw	r26, 0x01	; 1
    463c:	12 96       	adiw	r26, 0x02	; 2
    463e:	0d 93       	st	X+, r16
    4640:	1c 93       	st	X, r17
    4642:	13 97       	sbiw	r26, 0x03	; 3
		}
		
		if(positionY[length-1]==baitY && positionX[length-1]==baitX){
			length++;
			newBait=true;
			for(i=length-1;i>0;i--){
    4644:	8a 15       	cp	r24, r10
    4646:	9b 05       	cpc	r25, r11
    4648:	f9 f6       	brne	.-66     	; 0x4608 <playSnake+0x35c>
    464a:	10 92 79 62 	sts	0x6279, r1
    464e:	10 92 7a 62 	sts	0x627A, r1
				
				positionX[i] = positionX[i-1];
				positionY[i] = positionY[i-1];
			}
			positionX[0] = tailX;
    4652:	e9 82       	std	Y+1, r14	; 0x01
    4654:	fa 82       	std	Y+2, r15	; 0x02
			positionY[0] = tailY;
    4656:	cd 56       	subi	r28, 0x6D	; 109
    4658:	de 4f       	sbci	r29, 0xFE	; 254
    465a:	28 81       	ld	r18, Y
    465c:	39 81       	ldd	r19, Y+1	; 0x01
    465e:	c3 59       	subi	r28, 0x93	; 147
    4660:	d1 40       	sbci	r29, 0x01	; 1
    4662:	f3 01       	movw	r30, r6
    4664:	20 83       	st	Z, r18
    4666:	31 83       	std	Z+1, r19	; 0x01
			positionY[i] = positionY[i+1];
		}
		
		if(positionY[length-1]==baitY && positionX[length-1]==baitX){
			length++;
			newBait=true;
    4668:	bb 24       	eor	r11, r11
    466a:	b3 94       	inc	r11
			}
			positionX[0] = tailX;
			positionY[0] = tailY;
		}
		
		switch(direction){
    466c:	31 e0       	ldi	r19, 0x01	; 1
    466e:	23 16       	cp	r2, r19
    4670:	09 f4       	brne	.+2      	; 0x4674 <playSnake+0x3c8>
    4672:	85 c0       	rjmp	.+266    	; 0x477e <playSnake+0x4d2>
    4674:	23 16       	cp	r2, r19
    4676:	48 f0       	brcs	.+18     	; 0x468a <playSnake+0x3de>
    4678:	42 e0       	ldi	r20, 0x02	; 2
    467a:	24 16       	cp	r2, r20
    467c:	09 f4       	brne	.+2      	; 0x4680 <playSnake+0x3d4>
    467e:	f5 c0       	rjmp	.+490    	; 0x486a <playSnake+0x5be>
    4680:	53 e0       	ldi	r21, 0x03	; 3
    4682:	25 16       	cp	r2, r21
    4684:	09 f4       	brne	.+2      	; 0x4688 <playSnake+0x3dc>
    4686:	66 c1       	rjmp	.+716    	; 0x4954 <playSnake+0x6a8>
    4688:	df c1       	rjmp	.+958    	; 0x4a48 <playSnake+0x79c>
			case DIR_RIGHT:
			
			positionX[length-1]++;
    468a:	03 2d       	mov	r16, r3
    468c:	10 e0       	ldi	r17, 0x00	; 0
    468e:	01 50       	subi	r16, 0x01	; 1
    4690:	11 09       	sbc	r17, r1
    4692:	f8 01       	movw	r30, r16
    4694:	ee 0f       	add	r30, r30
    4696:	ff 1f       	adc	r31, r31
    4698:	e8 0d       	add	r30, r8
    469a:	f9 1d       	adc	r31, r9
    469c:	20 81       	ld	r18, Z
    469e:	31 81       	ldd	r19, Z+1	; 0x01
    46a0:	2f 5f       	subi	r18, 0xFF	; 255
    46a2:	3f 4f       	sbci	r19, 0xFF	; 255
			if(positionX[length-1]%(MLCD_BYTES_LINE+1) == 0)	positionX[length-1] = 1;
    46a4:	c9 01       	movw	r24, r18
    46a6:	63 e3       	ldi	r22, 0x33	; 51
    46a8:	70 e0       	ldi	r23, 0x00	; 0
    46aa:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <__divmodhi4>
    46ae:	89 2b       	or	r24, r25
    46b0:	41 f0       	breq	.+16     	; 0x46c2 <playSnake+0x416>
		}
		
		switch(direction){
			case DIR_RIGHT:
			
			positionX[length-1]++;
    46b2:	f8 01       	movw	r30, r16
    46b4:	ee 0f       	add	r30, r30
    46b6:	ff 1f       	adc	r31, r31
    46b8:	e8 0d       	add	r30, r8
    46ba:	f9 1d       	adc	r31, r9
    46bc:	20 83       	st	Z, r18
    46be:	31 83       	std	Z+1, r19	; 0x01
    46c0:	09 c0       	rjmp	.+18     	; 0x46d4 <playSnake+0x428>
			if(positionX[length-1]%(MLCD_BYTES_LINE+1) == 0)	positionX[length-1] = 1;
    46c2:	f8 01       	movw	r30, r16
    46c4:	ee 0f       	add	r30, r30
    46c6:	ff 1f       	adc	r31, r31
    46c8:	e8 0d       	add	r30, r8
    46ca:	f9 1d       	adc	r31, r9
    46cc:	81 e0       	ldi	r24, 0x01	; 1
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	80 83       	st	Z, r24
    46d2:	91 83       	std	Z+1, r25	; 0x01
			
			for(i=0;i<length-1;i++){
    46d4:	10 92 79 62 	sts	0x6279, r1
    46d8:	10 92 7a 62 	sts	0x627A, r1
    46dc:	10 16       	cp	r1, r16
    46de:	11 06       	cpc	r1, r17
    46e0:	0c f0       	brlt	.+2      	; 0x46e4 <playSnake+0x438>
    46e2:	b4 c1       	rjmp	.+872    	; 0x4a4c <playSnake+0x7a0>
				if(positionX[length-1] == positionX[i] && positionY[length-1] == positionY[i])	lost = true;
    46e4:	f8 01       	movw	r30, r16
    46e6:	ee 0f       	add	r30, r30
    46e8:	ff 1f       	adc	r31, r31
    46ea:	e8 0d       	add	r30, r8
    46ec:	f9 1d       	adc	r31, r9
    46ee:	20 81       	ld	r18, Z
    46f0:	31 81       	ldd	r19, Z+1	; 0x01
    46f2:	cb 56       	subi	r28, 0x6B	; 107
    46f4:	de 4f       	sbci	r29, 0xFE	; 254
    46f6:	e8 81       	ld	r30, Y
    46f8:	c5 59       	subi	r28, 0x95	; 149
    46fa:	d1 40       	sbci	r29, 0x01	; 1
    46fc:	ca 56       	subi	r28, 0x6A	; 106
    46fe:	de 4f       	sbci	r29, 0xFE	; 254
    4700:	f8 81       	ld	r31, Y
    4702:	c6 59       	subi	r28, 0x96	; 150
    4704:	d1 40       	sbci	r29, 0x01	; 1
    4706:	83 2d       	mov	r24, r3
    4708:	90 e0       	ldi	r25, 0x00	; 0
    470a:	88 0f       	add	r24, r24
    470c:	99 1f       	adc	r25, r25
    470e:	6f ef       	ldi	r22, 0xFF	; 255
    4710:	7f ef       	ldi	r23, 0xFF	; 255
    4712:	6c 0f       	add	r22, r28
    4714:	7d 1f       	adc	r23, r29
    4716:	86 0f       	add	r24, r22
    4718:	97 1f       	adc	r25, r23
    471a:	f1 2c       	mov	r15, r1
    471c:	00 0f       	add	r16, r16
    471e:	11 1f       	adc	r17, r17
    4720:	06 0d       	add	r16, r6
    4722:	17 1d       	adc	r17, r7
    4724:	cd 56       	subi	r28, 0x6D	; 109
    4726:	de 4f       	sbci	r29, 0xFE	; 254
    4728:	68 82       	st	Y, r6
    472a:	79 82       	std	Y+1, r7	; 0x01
    472c:	c3 59       	subi	r28, 0x93	; 147
    472e:	d1 40       	sbci	r29, 0x01	; 1
    4730:	41 91       	ld	r20, Z+
    4732:	51 91       	ld	r21, Z+
    4734:	24 17       	cp	r18, r20
    4736:	35 07       	cpc	r19, r21
    4738:	81 f4       	brne	.+32     	; 0x475a <playSnake+0x4ae>
    473a:	d8 01       	movw	r26, r16
    473c:	6d 91       	ld	r22, X+
    473e:	7c 91       	ld	r23, X
    4740:	cd 56       	subi	r28, 0x6D	; 109
    4742:	de 4f       	sbci	r29, 0xFE	; 254
    4744:	a8 81       	ld	r26, Y
    4746:	b9 81       	ldd	r27, Y+1	; 0x01
    4748:	c3 59       	subi	r28, 0x93	; 147
    474a:	d1 40       	sbci	r29, 0x01	; 1
    474c:	4d 91       	ld	r20, X+
    474e:	5c 91       	ld	r21, X
    4750:	64 17       	cp	r22, r20
    4752:	75 07       	cpc	r23, r21
    4754:	11 f4       	brne	.+4      	; 0x475a <playSnake+0x4ae>
    4756:	ff 24       	eor	r15, r15
    4758:	f3 94       	inc	r15
    475a:	cd 56       	subi	r28, 0x6D	; 109
    475c:	de 4f       	sbci	r29, 0xFE	; 254
    475e:	48 81       	ld	r20, Y
    4760:	59 81       	ldd	r21, Y+1	; 0x01
    4762:	c3 59       	subi	r28, 0x93	; 147
    4764:	d1 40       	sbci	r29, 0x01	; 1
    4766:	4e 5f       	subi	r20, 0xFE	; 254
    4768:	5f 4f       	sbci	r21, 0xFF	; 255
    476a:	cd 56       	subi	r28, 0x6D	; 109
    476c:	de 4f       	sbci	r29, 0xFE	; 254
    476e:	48 83       	st	Y, r20
    4770:	59 83       	std	Y+1, r21	; 0x01
    4772:	c3 59       	subi	r28, 0x93	; 147
    4774:	d1 40       	sbci	r29, 0x01	; 1
			case DIR_RIGHT:
			
			positionX[length-1]++;
			if(positionX[length-1]%(MLCD_BYTES_LINE+1) == 0)	positionX[length-1] = 1;
			
			for(i=0;i<length-1;i++){
    4776:	e8 17       	cp	r30, r24
    4778:	f9 07       	cpc	r31, r25
    477a:	d1 f6       	brne	.-76     	; 0x4730 <playSnake+0x484>
    477c:	6e c1       	rjmp	.+732    	; 0x4a5a <playSnake+0x7ae>
			}
			
			break;
			case DIR_UP:
			
			positionY[length-1]=positionY[length-1]-8;
    477e:	43 2d       	mov	r20, r3
    4780:	50 e0       	ldi	r21, 0x00	; 0
    4782:	41 50       	subi	r20, 0x01	; 1
    4784:	51 09       	sbc	r21, r1
    4786:	fa 01       	movw	r30, r20
    4788:	ee 0f       	add	r30, r30
    478a:	ff 1f       	adc	r31, r31
    478c:	e6 0d       	add	r30, r6
    478e:	f7 1d       	adc	r31, r7
    4790:	80 81       	ld	r24, Z
    4792:	91 81       	ldd	r25, Z+1	; 0x01
    4794:	08 97       	sbiw	r24, 0x08	; 8
			if(positionY[length-1] < 1)	positionY[length-1] = MLCD_YRES-7;
    4796:	18 16       	cp	r1, r24
    4798:	19 06       	cpc	r1, r25
    479a:	44 f4       	brge	.+16     	; 0x47ac <playSnake+0x500>
			}
			
			break;
			case DIR_UP:
			
			positionY[length-1]=positionY[length-1]-8;
    479c:	fa 01       	movw	r30, r20
    479e:	ee 0f       	add	r30, r30
    47a0:	ff 1f       	adc	r31, r31
    47a2:	e6 0d       	add	r30, r6
    47a4:	f7 1d       	adc	r31, r7
    47a6:	80 83       	st	Z, r24
    47a8:	91 83       	std	Z+1, r25	; 0x01
    47aa:	09 c0       	rjmp	.+18     	; 0x47be <playSnake+0x512>
			if(positionY[length-1] < 1)	positionY[length-1] = MLCD_YRES-7;
    47ac:	fa 01       	movw	r30, r20
    47ae:	ee 0f       	add	r30, r30
    47b0:	ff 1f       	adc	r31, r31
    47b2:	e6 0d       	add	r30, r6
    47b4:	f7 1d       	adc	r31, r7
    47b6:	89 ee       	ldi	r24, 0xE9	; 233
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	80 83       	st	Z, r24
    47bc:	91 83       	std	Z+1, r25	; 0x01
			
			for(i=0;i<length-1;i++){
    47be:	10 92 79 62 	sts	0x6279, r1
    47c2:	10 92 7a 62 	sts	0x627A, r1
    47c6:	14 16       	cp	r1, r20
    47c8:	15 06       	cpc	r1, r21
    47ca:	0c f0       	brlt	.+2      	; 0x47ce <playSnake+0x522>
    47cc:	41 c1       	rjmp	.+642    	; 0x4a50 <playSnake+0x7a4>
				if(positionX[length-1] == positionX[i] && positionY[length-1] == positionY[i])	lost = true;
    47ce:	fa 01       	movw	r30, r20
    47d0:	ee 0f       	add	r30, r30
    47d2:	ff 1f       	adc	r31, r31
    47d4:	e8 0d       	add	r30, r8
    47d6:	f9 1d       	adc	r31, r9
    47d8:	20 81       	ld	r18, Z
    47da:	31 81       	ldd	r19, Z+1	; 0x01
    47dc:	cb 56       	subi	r28, 0x6B	; 107
    47de:	de 4f       	sbci	r29, 0xFE	; 254
    47e0:	e8 81       	ld	r30, Y
    47e2:	c5 59       	subi	r28, 0x95	; 149
    47e4:	d1 40       	sbci	r29, 0x01	; 1
    47e6:	ca 56       	subi	r28, 0x6A	; 106
    47e8:	de 4f       	sbci	r29, 0xFE	; 254
    47ea:	f8 81       	ld	r31, Y
    47ec:	c6 59       	subi	r28, 0x96	; 150
    47ee:	d1 40       	sbci	r29, 0x01	; 1
    47f0:	83 2d       	mov	r24, r3
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	88 0f       	add	r24, r24
    47f6:	99 1f       	adc	r25, r25
    47f8:	6f ef       	ldi	r22, 0xFF	; 255
    47fa:	7f ef       	ldi	r23, 0xFF	; 255
    47fc:	6c 0f       	add	r22, r28
    47fe:	7d 1f       	adc	r23, r29
    4800:	86 0f       	add	r24, r22
    4802:	97 1f       	adc	r25, r23
    4804:	f1 2c       	mov	r15, r1
    4806:	8a 01       	movw	r16, r20
    4808:	00 0f       	add	r16, r16
    480a:	11 1f       	adc	r17, r17
    480c:	06 0d       	add	r16, r6
    480e:	17 1d       	adc	r17, r7
    4810:	cd 56       	subi	r28, 0x6D	; 109
    4812:	de 4f       	sbci	r29, 0xFE	; 254
    4814:	68 82       	st	Y, r6
    4816:	79 82       	std	Y+1, r7	; 0x01
    4818:	c3 59       	subi	r28, 0x93	; 147
    481a:	d1 40       	sbci	r29, 0x01	; 1
    481c:	41 91       	ld	r20, Z+
    481e:	51 91       	ld	r21, Z+
    4820:	24 17       	cp	r18, r20
    4822:	35 07       	cpc	r19, r21
    4824:	81 f4       	brne	.+32     	; 0x4846 <playSnake+0x59a>
    4826:	d8 01       	movw	r26, r16
    4828:	6d 91       	ld	r22, X+
    482a:	7c 91       	ld	r23, X
    482c:	cd 56       	subi	r28, 0x6D	; 109
    482e:	de 4f       	sbci	r29, 0xFE	; 254
    4830:	a8 81       	ld	r26, Y
    4832:	b9 81       	ldd	r27, Y+1	; 0x01
    4834:	c3 59       	subi	r28, 0x93	; 147
    4836:	d1 40       	sbci	r29, 0x01	; 1
    4838:	4d 91       	ld	r20, X+
    483a:	5c 91       	ld	r21, X
    483c:	64 17       	cp	r22, r20
    483e:	75 07       	cpc	r23, r21
    4840:	11 f4       	brne	.+4      	; 0x4846 <playSnake+0x59a>
    4842:	ff 24       	eor	r15, r15
    4844:	f3 94       	inc	r15
    4846:	cd 56       	subi	r28, 0x6D	; 109
    4848:	de 4f       	sbci	r29, 0xFE	; 254
    484a:	48 81       	ld	r20, Y
    484c:	59 81       	ldd	r21, Y+1	; 0x01
    484e:	c3 59       	subi	r28, 0x93	; 147
    4850:	d1 40       	sbci	r29, 0x01	; 1
    4852:	4e 5f       	subi	r20, 0xFE	; 254
    4854:	5f 4f       	sbci	r21, 0xFF	; 255
    4856:	cd 56       	subi	r28, 0x6D	; 109
    4858:	de 4f       	sbci	r29, 0xFE	; 254
    485a:	48 83       	st	Y, r20
    485c:	59 83       	std	Y+1, r21	; 0x01
    485e:	c3 59       	subi	r28, 0x93	; 147
    4860:	d1 40       	sbci	r29, 0x01	; 1
			case DIR_UP:
			
			positionY[length-1]=positionY[length-1]-8;
			if(positionY[length-1] < 1)	positionY[length-1] = MLCD_YRES-7;
			
			for(i=0;i<length-1;i++){
    4862:	e8 17       	cp	r30, r24
    4864:	f9 07       	cpc	r31, r25
    4866:	d1 f6       	brne	.-76     	; 0x481c <playSnake+0x570>
    4868:	f8 c0       	rjmp	.+496    	; 0x4a5a <playSnake+0x7ae>
			}
			
			break;
			case DIR_LEFT:
			
			positionX[length-1]--;
    486a:	43 2d       	mov	r20, r3
    486c:	50 e0       	ldi	r21, 0x00	; 0
    486e:	41 50       	subi	r20, 0x01	; 1
    4870:	51 09       	sbc	r21, r1
    4872:	fa 01       	movw	r30, r20
    4874:	ee 0f       	add	r30, r30
    4876:	ff 1f       	adc	r31, r31
    4878:	e8 0d       	add	r30, r8
    487a:	f9 1d       	adc	r31, r9
    487c:	80 81       	ld	r24, Z
    487e:	91 81       	ldd	r25, Z+1	; 0x01
    4880:	01 97       	sbiw	r24, 0x01	; 1
			if(positionX[length-1] == 0)	positionX[length-1] = MLCD_BYTES_LINE;
    4882:	00 97       	sbiw	r24, 0x00	; 0
    4884:	41 f0       	breq	.+16     	; 0x4896 <playSnake+0x5ea>
			}
			
			break;
			case DIR_LEFT:
			
			positionX[length-1]--;
    4886:	fa 01       	movw	r30, r20
    4888:	ee 0f       	add	r30, r30
    488a:	ff 1f       	adc	r31, r31
    488c:	e8 0d       	add	r30, r8
    488e:	f9 1d       	adc	r31, r9
    4890:	80 83       	st	Z, r24
    4892:	91 83       	std	Z+1, r25	; 0x01
    4894:	09 c0       	rjmp	.+18     	; 0x48a8 <playSnake+0x5fc>
			if(positionX[length-1] == 0)	positionX[length-1] = MLCD_BYTES_LINE;
    4896:	fa 01       	movw	r30, r20
    4898:	ee 0f       	add	r30, r30
    489a:	ff 1f       	adc	r31, r31
    489c:	e8 0d       	add	r30, r8
    489e:	f9 1d       	adc	r31, r9
    48a0:	62 e3       	ldi	r22, 0x32	; 50
    48a2:	70 e0       	ldi	r23, 0x00	; 0
    48a4:	60 83       	st	Z, r22
    48a6:	71 83       	std	Z+1, r23	; 0x01
			
			for(i=0;i<length-1;i++){
    48a8:	10 92 79 62 	sts	0x6279, r1
    48ac:	10 92 7a 62 	sts	0x627A, r1
    48b0:	14 16       	cp	r1, r20
    48b2:	15 06       	cpc	r1, r21
    48b4:	0c f0       	brlt	.+2      	; 0x48b8 <playSnake+0x60c>
    48b6:	ce c0       	rjmp	.+412    	; 0x4a54 <playSnake+0x7a8>
				if(positionX[length-1] == positionX[i] && positionY[length-1] == positionY[i])	lost = true;
    48b8:	fa 01       	movw	r30, r20
    48ba:	ee 0f       	add	r30, r30
    48bc:	ff 1f       	adc	r31, r31
    48be:	e8 0d       	add	r30, r8
    48c0:	f9 1d       	adc	r31, r9
    48c2:	20 81       	ld	r18, Z
    48c4:	31 81       	ldd	r19, Z+1	; 0x01
    48c6:	cb 56       	subi	r28, 0x6B	; 107
    48c8:	de 4f       	sbci	r29, 0xFE	; 254
    48ca:	e8 81       	ld	r30, Y
    48cc:	c5 59       	subi	r28, 0x95	; 149
    48ce:	d1 40       	sbci	r29, 0x01	; 1
    48d0:	ca 56       	subi	r28, 0x6A	; 106
    48d2:	de 4f       	sbci	r29, 0xFE	; 254
    48d4:	f8 81       	ld	r31, Y
    48d6:	c6 59       	subi	r28, 0x96	; 150
    48d8:	d1 40       	sbci	r29, 0x01	; 1
    48da:	83 2d       	mov	r24, r3
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	88 0f       	add	r24, r24
    48e0:	99 1f       	adc	r25, r25
    48e2:	6f ef       	ldi	r22, 0xFF	; 255
    48e4:	7f ef       	ldi	r23, 0xFF	; 255
    48e6:	6c 0f       	add	r22, r28
    48e8:	7d 1f       	adc	r23, r29
    48ea:	86 0f       	add	r24, r22
    48ec:	97 1f       	adc	r25, r23
    48ee:	f1 2c       	mov	r15, r1
    48f0:	8a 01       	movw	r16, r20
    48f2:	00 0f       	add	r16, r16
    48f4:	11 1f       	adc	r17, r17
    48f6:	06 0d       	add	r16, r6
    48f8:	17 1d       	adc	r17, r7
    48fa:	cd 56       	subi	r28, 0x6D	; 109
    48fc:	de 4f       	sbci	r29, 0xFE	; 254
    48fe:	68 82       	st	Y, r6
    4900:	79 82       	std	Y+1, r7	; 0x01
    4902:	c3 59       	subi	r28, 0x93	; 147
    4904:	d1 40       	sbci	r29, 0x01	; 1
    4906:	41 91       	ld	r20, Z+
    4908:	51 91       	ld	r21, Z+
    490a:	24 17       	cp	r18, r20
    490c:	35 07       	cpc	r19, r21
    490e:	81 f4       	brne	.+32     	; 0x4930 <playSnake+0x684>
    4910:	d8 01       	movw	r26, r16
    4912:	6d 91       	ld	r22, X+
    4914:	7c 91       	ld	r23, X
    4916:	cd 56       	subi	r28, 0x6D	; 109
    4918:	de 4f       	sbci	r29, 0xFE	; 254
    491a:	a8 81       	ld	r26, Y
    491c:	b9 81       	ldd	r27, Y+1	; 0x01
    491e:	c3 59       	subi	r28, 0x93	; 147
    4920:	d1 40       	sbci	r29, 0x01	; 1
    4922:	4d 91       	ld	r20, X+
    4924:	5c 91       	ld	r21, X
    4926:	64 17       	cp	r22, r20
    4928:	75 07       	cpc	r23, r21
    492a:	11 f4       	brne	.+4      	; 0x4930 <playSnake+0x684>
    492c:	ff 24       	eor	r15, r15
    492e:	f3 94       	inc	r15
    4930:	cd 56       	subi	r28, 0x6D	; 109
    4932:	de 4f       	sbci	r29, 0xFE	; 254
    4934:	48 81       	ld	r20, Y
    4936:	59 81       	ldd	r21, Y+1	; 0x01
    4938:	c3 59       	subi	r28, 0x93	; 147
    493a:	d1 40       	sbci	r29, 0x01	; 1
    493c:	4e 5f       	subi	r20, 0xFE	; 254
    493e:	5f 4f       	sbci	r21, 0xFF	; 255
    4940:	cd 56       	subi	r28, 0x6D	; 109
    4942:	de 4f       	sbci	r29, 0xFE	; 254
    4944:	48 83       	st	Y, r20
    4946:	59 83       	std	Y+1, r21	; 0x01
    4948:	c3 59       	subi	r28, 0x93	; 147
    494a:	d1 40       	sbci	r29, 0x01	; 1
			case DIR_LEFT:
			
			positionX[length-1]--;
			if(positionX[length-1] == 0)	positionX[length-1] = MLCD_BYTES_LINE;
			
			for(i=0;i<length-1;i++){
    494c:	e8 17       	cp	r30, r24
    494e:	f9 07       	cpc	r31, r25
    4950:	d1 f6       	brne	.-76     	; 0x4906 <playSnake+0x65a>
    4952:	83 c0       	rjmp	.+262    	; 0x4a5a <playSnake+0x7ae>
			}
			
			break;
			case DIR_DOWN:
			
			positionY[length-1]=positionY[length-1]+8;
    4954:	03 2d       	mov	r16, r3
    4956:	10 e0       	ldi	r17, 0x00	; 0
    4958:	01 50       	subi	r16, 0x01	; 1
    495a:	11 09       	sbc	r17, r1
    495c:	f8 01       	movw	r30, r16
    495e:	ee 0f       	add	r30, r30
    4960:	ff 1f       	adc	r31, r31
    4962:	e6 0d       	add	r30, r6
    4964:	f7 1d       	adc	r31, r7
    4966:	20 81       	ld	r18, Z
    4968:	31 81       	ldd	r19, Z+1	; 0x01
    496a:	28 5f       	subi	r18, 0xF8	; 248
    496c:	3f 4f       	sbci	r19, 0xFF	; 255
			if(positionY[length-1]%(MLCD_YRES+1) == 0)	positionY[length-1] = 1;
    496e:	c9 01       	movw	r24, r18
    4970:	61 ef       	ldi	r22, 0xF1	; 241
    4972:	70 e0       	ldi	r23, 0x00	; 0
    4974:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <__divmodhi4>
    4978:	89 2b       	or	r24, r25
    497a:	41 f0       	breq	.+16     	; 0x498c <playSnake+0x6e0>
			}
			
			break;
			case DIR_DOWN:
			
			positionY[length-1]=positionY[length-1]+8;
    497c:	f8 01       	movw	r30, r16
    497e:	ee 0f       	add	r30, r30
    4980:	ff 1f       	adc	r31, r31
    4982:	e6 0d       	add	r30, r6
    4984:	f7 1d       	adc	r31, r7
    4986:	20 83       	st	Z, r18
    4988:	31 83       	std	Z+1, r19	; 0x01
    498a:	09 c0       	rjmp	.+18     	; 0x499e <playSnake+0x6f2>
			if(positionY[length-1]%(MLCD_YRES+1) == 0)	positionY[length-1] = 1;
    498c:	f8 01       	movw	r30, r16
    498e:	ee 0f       	add	r30, r30
    4990:	ff 1f       	adc	r31, r31
    4992:	e6 0d       	add	r30, r6
    4994:	f7 1d       	adc	r31, r7
    4996:	81 e0       	ldi	r24, 0x01	; 1
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	80 83       	st	Z, r24
    499c:	91 83       	std	Z+1, r25	; 0x01
			
			for(i=0;i<length-1;i++){
    499e:	10 92 79 62 	sts	0x6279, r1
    49a2:	10 92 7a 62 	sts	0x627A, r1
    49a6:	10 16       	cp	r1, r16
    49a8:	11 06       	cpc	r1, r17
    49aa:	0c f0       	brlt	.+2      	; 0x49ae <playSnake+0x702>
    49ac:	55 c0       	rjmp	.+170    	; 0x4a58 <playSnake+0x7ac>
				if(positionX[length-1] == positionX[i] && positionY[length-1] == positionY[i])	lost = true;
    49ae:	f8 01       	movw	r30, r16
    49b0:	ee 0f       	add	r30, r30
    49b2:	ff 1f       	adc	r31, r31
    49b4:	e8 0d       	add	r30, r8
    49b6:	f9 1d       	adc	r31, r9
    49b8:	20 81       	ld	r18, Z
    49ba:	31 81       	ldd	r19, Z+1	; 0x01
    49bc:	cb 56       	subi	r28, 0x6B	; 107
    49be:	de 4f       	sbci	r29, 0xFE	; 254
    49c0:	e8 81       	ld	r30, Y
    49c2:	c5 59       	subi	r28, 0x95	; 149
    49c4:	d1 40       	sbci	r29, 0x01	; 1
    49c6:	ca 56       	subi	r28, 0x6A	; 106
    49c8:	de 4f       	sbci	r29, 0xFE	; 254
    49ca:	f8 81       	ld	r31, Y
    49cc:	c6 59       	subi	r28, 0x96	; 150
    49ce:	d1 40       	sbci	r29, 0x01	; 1
    49d0:	83 2d       	mov	r24, r3
    49d2:	90 e0       	ldi	r25, 0x00	; 0
    49d4:	88 0f       	add	r24, r24
    49d6:	99 1f       	adc	r25, r25
    49d8:	6f ef       	ldi	r22, 0xFF	; 255
    49da:	7f ef       	ldi	r23, 0xFF	; 255
    49dc:	6c 0f       	add	r22, r28
    49de:	7d 1f       	adc	r23, r29
    49e0:	86 0f       	add	r24, r22
    49e2:	97 1f       	adc	r25, r23
    49e4:	f1 2c       	mov	r15, r1
    49e6:	00 0f       	add	r16, r16
    49e8:	11 1f       	adc	r17, r17
    49ea:	06 0d       	add	r16, r6
    49ec:	17 1d       	adc	r17, r7
    49ee:	cd 56       	subi	r28, 0x6D	; 109
    49f0:	de 4f       	sbci	r29, 0xFE	; 254
    49f2:	68 82       	st	Y, r6
    49f4:	79 82       	std	Y+1, r7	; 0x01
    49f6:	c3 59       	subi	r28, 0x93	; 147
    49f8:	d1 40       	sbci	r29, 0x01	; 1
    49fa:	41 91       	ld	r20, Z+
    49fc:	51 91       	ld	r21, Z+
    49fe:	24 17       	cp	r18, r20
    4a00:	35 07       	cpc	r19, r21
    4a02:	81 f4       	brne	.+32     	; 0x4a24 <playSnake+0x778>
    4a04:	d8 01       	movw	r26, r16
    4a06:	6d 91       	ld	r22, X+
    4a08:	7c 91       	ld	r23, X
    4a0a:	cd 56       	subi	r28, 0x6D	; 109
    4a0c:	de 4f       	sbci	r29, 0xFE	; 254
    4a0e:	a8 81       	ld	r26, Y
    4a10:	b9 81       	ldd	r27, Y+1	; 0x01
    4a12:	c3 59       	subi	r28, 0x93	; 147
    4a14:	d1 40       	sbci	r29, 0x01	; 1
    4a16:	4d 91       	ld	r20, X+
    4a18:	5c 91       	ld	r21, X
    4a1a:	64 17       	cp	r22, r20
    4a1c:	75 07       	cpc	r23, r21
    4a1e:	11 f4       	brne	.+4      	; 0x4a24 <playSnake+0x778>
    4a20:	ff 24       	eor	r15, r15
    4a22:	f3 94       	inc	r15
    4a24:	cd 56       	subi	r28, 0x6D	; 109
    4a26:	de 4f       	sbci	r29, 0xFE	; 254
    4a28:	48 81       	ld	r20, Y
    4a2a:	59 81       	ldd	r21, Y+1	; 0x01
    4a2c:	c3 59       	subi	r28, 0x93	; 147
    4a2e:	d1 40       	sbci	r29, 0x01	; 1
    4a30:	4e 5f       	subi	r20, 0xFE	; 254
    4a32:	5f 4f       	sbci	r21, 0xFF	; 255
    4a34:	cd 56       	subi	r28, 0x6D	; 109
    4a36:	de 4f       	sbci	r29, 0xFE	; 254
    4a38:	48 83       	st	Y, r20
    4a3a:	59 83       	std	Y+1, r21	; 0x01
    4a3c:	c3 59       	subi	r28, 0x93	; 147
    4a3e:	d1 40       	sbci	r29, 0x01	; 1
			case DIR_DOWN:
			
			positionY[length-1]=positionY[length-1]+8;
			if(positionY[length-1]%(MLCD_YRES+1) == 0)	positionY[length-1] = 1;
			
			for(i=0;i<length-1;i++){
    4a40:	e8 17       	cp	r30, r24
    4a42:	f9 07       	cpc	r31, r25
    4a44:	d1 f6       	brne	.-76     	; 0x49fa <playSnake+0x74e>
    4a46:	09 c0       	rjmp	.+18     	; 0x4a5a <playSnake+0x7ae>
			}
			positionX[0] = tailX;
			positionY[0] = tailY;
		}
		
		switch(direction){
    4a48:	f1 2c       	mov	r15, r1
    4a4a:	07 c0       	rjmp	.+14     	; 0x4a5a <playSnake+0x7ae>
			case DIR_RIGHT:
			
			positionX[length-1]++;
			if(positionX[length-1]%(MLCD_BYTES_LINE+1) == 0)	positionX[length-1] = 1;
			
			for(i=0;i<length-1;i++){
    4a4c:	f1 2c       	mov	r15, r1
    4a4e:	05 c0       	rjmp	.+10     	; 0x4a5a <playSnake+0x7ae>
			case DIR_UP:
			
			positionY[length-1]=positionY[length-1]-8;
			if(positionY[length-1] < 1)	positionY[length-1] = MLCD_YRES-7;
			
			for(i=0;i<length-1;i++){
    4a50:	f1 2c       	mov	r15, r1
    4a52:	03 c0       	rjmp	.+6      	; 0x4a5a <playSnake+0x7ae>
			case DIR_LEFT:
			
			positionX[length-1]--;
			if(positionX[length-1] == 0)	positionX[length-1] = MLCD_BYTES_LINE;
			
			for(i=0;i<length-1;i++){
    4a54:	f1 2c       	mov	r15, r1
    4a56:	01 c0       	rjmp	.+2      	; 0x4a5a <playSnake+0x7ae>
			case DIR_DOWN:
			
			positionY[length-1]=positionY[length-1]+8;
			if(positionY[length-1]%(MLCD_YRES+1) == 0)	positionY[length-1] = 1;
			
			for(i=0;i<length-1;i++){
    4a58:	f1 2c       	mov	r15, r1
			default:
			
			break;
		}
		
		for(i=0;i<length;i++){
    4a5a:	10 92 79 62 	sts	0x6279, r1
    4a5e:	10 92 7a 62 	sts	0x627A, r1
    4a62:	03 2d       	mov	r16, r3
    4a64:	10 e0       	ldi	r17, 0x00	; 0
    4a66:	10 16       	cp	r1, r16
    4a68:	11 06       	cpc	r1, r17
    4a6a:	dc f4       	brge	.+54     	; 0x4aa2 <playSnake+0x7f6>
    4a6c:	e0 e0       	ldi	r30, 0x00	; 0
    4a6e:	f0 e0       	ldi	r31, 0x00	; 0
			
			MLCDDrawSquare(1,positionY[i],positionX[i],false);
    4a70:	ee 0f       	add	r30, r30
    4a72:	ff 1f       	adc	r31, r31
    4a74:	d4 01       	movw	r26, r8
    4a76:	ae 0f       	add	r26, r30
    4a78:	bf 1f       	adc	r27, r31
    4a7a:	e6 0d       	add	r30, r6
    4a7c:	f7 1d       	adc	r31, r7
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	4c 91       	ld	r20, X
    4a82:	60 81       	ld	r22, Z
    4a84:	81 e0       	ldi	r24, 0x01	; 1
    4a86:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <MLCDDrawSquare>
			default:
			
			break;
		}
		
		for(i=0;i<length;i++){
    4a8a:	e0 91 79 62 	lds	r30, 0x6279
    4a8e:	f0 91 7a 62 	lds	r31, 0x627A
    4a92:	31 96       	adiw	r30, 0x01	; 1
    4a94:	e0 93 79 62 	sts	0x6279, r30
    4a98:	f0 93 7a 62 	sts	0x627A, r31
    4a9c:	e0 17       	cp	r30, r16
    4a9e:	f1 07       	cpc	r31, r17
    4aa0:	3c f3       	brlt	.-50     	; 0x4a70 <playSnake+0x7c4>
			
			MLCDDrawSquare(1,positionY[i],positionX[i],false);
		}
		
		MLCDRefreshFrame();
    4aa2:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <MLCDRefreshFrame>
		
		if(lost){
    4aa6:	ff 20       	and	r15, r15
    4aa8:	01 f1       	breq	.+64     	; 0x4aea <playSnake+0x83e>
			
			MLCDWriteString("You Lost!",FONT_SIZE_NORMAL,20,19,false);
    4aaa:	00 e0       	ldi	r16, 0x00	; 0
    4aac:	23 e1       	ldi	r18, 0x13	; 19
    4aae:	44 e1       	ldi	r20, 0x14	; 20
    4ab0:	61 e1       	ldi	r22, 0x11	; 17
    4ab2:	89 e5       	ldi	r24, 0x59	; 89
    4ab4:	9c e5       	ldi	r25, 0x5C	; 92
    4ab6:	0e 94 e5 2f 	call	0x5fca	; 0x5fca <MLCDWriteString>
			//MLCDWriteString("Score: ",37,19,false);
			//MLCDWriteString((char)length,37,26,false);
			MLCDRefreshFrame();
    4aba:	0e 94 8b 2f 	call	0x5f16	; 0x5f16 <MLCDRefreshFrame>
    4abe:	85 e1       	ldi	r24, 0x15	; 21
    4ac0:	96 e1       	ldi	r25, 0x16	; 22
    4ac2:	a5 e0       	ldi	r26, 0x05	; 5
    4ac4:	b0 e0       	ldi	r27, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    4ac6:	01 97       	sbiw	r24, 0x01	; 1
    4ac8:	a1 09       	sbc	r26, r1
    4aca:	b1 09       	sbc	r27, r1
    4acc:	00 97       	sbiw	r24, 0x00	; 0
    4ace:	a1 05       	cpc	r26, r1
    4ad0:	b1 05       	cpc	r27, r1
    4ad2:	c9 f7       	brne	.-14     	; 0x4ac6 <playSnake+0x81a>
			delay_ms(2000);
			MLCDClearAll();
    4ad4:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <MLCDClearAll>
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint8_t src)
{
	ccp_write_io((uint8_t *)&CLK.CTRL, src);
    4ad8:	60 e0       	ldi	r22, 0x00	; 0
    4ada:	80 e4       	ldi	r24, 0x40	; 64
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	a0 d6       	rcall	.+3392   	; 0x5820 <ccp_write_io>
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    4ae0:	61 e0       	ldi	r22, 0x01	; 1
    4ae2:	81 e4       	ldi	r24, 0x41	; 65
    4ae4:	90 e0       	ldi	r25, 0x00	; 0
    4ae6:	9c d6       	rcall	.+3384   	; 0x5820 <ccp_write_io>
    4ae8:	52 c0       	rjmp	.+164    	; 0x4b8e <playSnake+0x8e2>
			sysclk_set_source(CONFIG_SYSCLK_SOURCE);
			sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV, CONFIG_SYSCLK_PSBCDIV);
			return;
		}
		
		for(i=1;i>0;i++){
    4aea:	81 e0       	ldi	r24, 0x01	; 1
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	80 93 79 62 	sts	0x6279, r24
    4af2:	90 93 7a 62 	sts	0x627A, r25
    4af6:	30 91 0a 20 	lds	r19, 0x200A

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    4afa:	d2 01       	movw	r26, r4
    4afc:	18 96       	adiw	r26, 0x08	; 8
    4afe:	2c 91       	ld	r18, X
    4b00:	18 97       	sbiw	r26, 0x08	; 8
			if(gpio_pin_is_high(MLCD_PB0) && gpio_pin_is_high(MLCD_PB2)){
    4b02:	22 ff       	sbrs	r18, 2
    4b04:	04 c0       	rjmp	.+8      	; 0x4b0e <playSnake+0x862>
    4b06:	18 96       	adiw	r26, 0x08	; 8
    4b08:	2c 91       	ld	r18, X
    4b0a:	24 fd       	sbrc	r18, 4
    4b0c:	03 c0       	rjmp	.+6      	; 0x4b14 <playSnake+0x868>
				released = true;
			}
			if(released && gpio_pin_is_low(MLCD_PB2)){
    4b0e:	33 23       	and	r19, r19
    4b10:	91 f1       	breq	.+100    	; 0x4b76 <playSnake+0x8ca>
    4b12:	01 c0       	rjmp	.+2      	; 0x4b16 <playSnake+0x86a>
			return;
		}
		
		for(i=1;i>0;i++){
			if(gpio_pin_is_high(MLCD_PB0) && gpio_pin_is_high(MLCD_PB2)){
				released = true;
    4b14:	31 e0       	ldi	r19, 0x01	; 1
    4b16:	f2 01       	movw	r30, r4
    4b18:	20 85       	ldd	r18, Z+8	; 0x08
			}
			if(released && gpio_pin_is_low(MLCD_PB2)){
    4b1a:	24 fd       	sbrc	r18, 4
    4b1c:	13 c0       	rjmp	.+38     	; 0x4b44 <playSnake+0x898>
    4b1e:	80 93 79 62 	sts	0x6279, r24
    4b22:	90 93 7a 62 	sts	0x627A, r25
    4b26:	30 93 0a 20 	sts	0x200A, r19
				direction++;
    4b2a:	23 94       	inc	r2
				if(direction%4 == 0) direction = 0;
    4b2c:	82 2d       	mov	r24, r2
    4b2e:	83 70       	andi	r24, 0x03	; 3
    4b30:	09 f4       	brne	.+2      	; 0x4b34 <playSnake+0x888>
    4b32:	21 2c       	mov	r2, r1
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	01 96       	adiw	r24, 0x01	; 1
    4b3a:	8d 38       	cpi	r24, 0x8D	; 141
    4b3c:	f0 e2       	ldi	r31, 0x20	; 32
    4b3e:	9f 07       	cpc	r25, r31
    4b40:	d9 f7       	brne	.-10     	; 0x4b38 <playSnake+0x88c>
    4b42:	2e cc       	rjmp	.-1956   	; 0x43a0 <playSnake+0xf4>
    4b44:	20 85       	ldd	r18, Z+8	; 0x08
					}
				}*/
				delay_ms(50);
				break;
			}
			if(released && gpio_pin_is_low(MLCD_PB0)){
    4b46:	22 fd       	sbrc	r18, 2
    4b48:	16 c0       	rjmp	.+44     	; 0x4b76 <playSnake+0x8ca>
    4b4a:	80 93 79 62 	sts	0x6279, r24
    4b4e:	90 93 7a 62 	sts	0x627A, r25
    4b52:	30 93 0a 20 	sts	0x200A, r19
				
				direction--;
    4b56:	2a 94       	dec	r2
    4b58:	b3 e0       	ldi	r27, 0x03	; 3
    4b5a:	b2 15       	cp	r27, r2
    4b5c:	20 f4       	brcc	.+8      	; 0x4b66 <playSnake+0x8ba>
    4b5e:	0f 2e       	mov	r0, r31
    4b60:	f3 e0       	ldi	r31, 0x03	; 3
    4b62:	2f 2e       	mov	r2, r31
    4b64:	f0 2d       	mov	r31, r0
    4b66:	80 e0       	ldi	r24, 0x00	; 0
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	01 96       	adiw	r24, 0x01	; 1
    4b6c:	8d 38       	cpi	r24, 0x8D	; 141
    4b6e:	e0 e2       	ldi	r30, 0x20	; 32
    4b70:	9e 07       	cpc	r25, r30
    4b72:	d9 f7       	brne	.-10     	; 0x4b6a <playSnake+0x8be>
    4b74:	15 cc       	rjmp	.-2006   	; 0x43a0 <playSnake+0xf4>
			sysclk_set_source(CONFIG_SYSCLK_SOURCE);
			sysclk_set_prescalers(CONFIG_SYSCLK_PSADIV, CONFIG_SYSCLK_PSBCDIV);
			return;
		}
		
		for(i=1;i>0;i++){
    4b76:	01 96       	adiw	r24, 0x01	; 1
    4b78:	18 16       	cp	r1, r24
    4b7a:	19 06       	cpc	r1, r25
    4b7c:	0c f4       	brge	.+2      	; 0x4b80 <playSnake+0x8d4>
    4b7e:	bd cf       	rjmp	.-134    	; 0x4afa <playSnake+0x84e>
    4b80:	80 93 79 62 	sts	0x6279, r24
    4b84:	90 93 7a 62 	sts	0x627A, r25
    4b88:	30 93 0a 20 	sts	0x200A, r19
    4b8c:	09 cc       	rjmp	.-2030   	; 0x43a0 <playSnake+0xf4>
			}
		}
		
	}
	
    4b8e:	c8 56       	subi	r28, 0x68	; 104
    4b90:	de 4f       	sbci	r29, 0xFE	; 254
    4b92:	cd bf       	out	0x3d, r28	; 61
    4b94:	de bf       	out	0x3e, r29	; 62
    4b96:	df 91       	pop	r29
    4b98:	cf 91       	pop	r28
    4b9a:	1f 91       	pop	r17
    4b9c:	0f 91       	pop	r16
    4b9e:	ff 90       	pop	r15
    4ba0:	ef 90       	pop	r14
    4ba2:	df 90       	pop	r13
    4ba4:	cf 90       	pop	r12
    4ba6:	bf 90       	pop	r11
    4ba8:	af 90       	pop	r10
    4baa:	9f 90       	pop	r9
    4bac:	8f 90       	pop	r8
    4bae:	7f 90       	pop	r7
    4bb0:	6f 90       	pop	r6
    4bb2:	5f 90       	pop	r5
    4bb4:	4f 90       	pop	r4
    4bb6:	3f 90       	pop	r3
    4bb8:	2f 90       	pop	r2
    4bba:	08 95       	ret

00004bbc <reverseByte>:
    4bbc:	98 2f       	mov	r25, r24
    4bbe:	99 0f       	add	r25, r25
    4bc0:	9a 7a       	andi	r25, 0xAA	; 170
    4bc2:	86 95       	lsr	r24
    4bc4:	85 75       	andi	r24, 0x55	; 85
    4bc6:	98 2b       	or	r25, r24
    4bc8:	89 2f       	mov	r24, r25
    4bca:	88 0f       	add	r24, r24
    4bcc:	88 0f       	add	r24, r24
    4bce:	8c 7c       	andi	r24, 0xCC	; 204
    4bd0:	96 95       	lsr	r25
    4bd2:	96 95       	lsr	r25
    4bd4:	93 73       	andi	r25, 0x33	; 51
    4bd6:	89 2b       	or	r24, r25
    4bd8:	82 95       	swap	r24
    4bda:	08 95       	ret

00004bdc <spi_master_init>:
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
    4bdc:	cf 93       	push	r28
    4bde:	df 93       	push	r29
    4be0:	ec 01       	movw	r28, r24
    4be2:	c0 3c       	cpi	r28, 0xC0	; 192
    4be4:	28 e0       	ldi	r18, 0x08	; 8
    4be6:	d2 07       	cpc	r29, r18
    4be8:	21 f4       	brne	.+8      	; 0x4bf2 <spi_master_init+0x16>
    4bea:	68 e0       	ldi	r22, 0x08	; 8
    4bec:	83 e0       	ldi	r24, 0x03	; 3
    4bee:	f7 d5       	rcall	.+3054   	; 0x57de <sysclk_enable_module>
    4bf0:	06 c0       	rjmp	.+12     	; 0x4bfe <spi_master_init+0x22>
    4bf2:	80 3c       	cpi	r24, 0xC0	; 192
    4bf4:	99 40       	sbci	r25, 0x09	; 9
    4bf6:	19 f4       	brne	.+6      	; 0x4bfe <spi_master_init+0x22>
    4bf8:	68 e0       	ldi	r22, 0x08	; 8
    4bfa:	84 e0       	ldi	r24, 0x04	; 4
    4bfc:	f0 d5       	rcall	.+3040   	; 0x57de <sysclk_enable_module>
    4bfe:	88 81       	ld	r24, Y
    4c00:	80 61       	ori	r24, 0x10	; 16
    4c02:	88 83       	st	Y, r24
    4c04:	df 91       	pop	r29
    4c06:	cf 91       	pop	r28
    4c08:	08 95       	ret

00004c0a <spi_master_setup_device>:
    4c0a:	ff 92       	push	r15
    4c0c:	0f 93       	push	r16
    4c0e:	1f 93       	push	r17
    4c10:	cf 93       	push	r28
    4c12:	df 93       	push	r29
    4c14:	ec 01       	movw	r28, r24
    4c16:	f4 2e       	mov	r15, r20
    4c18:	b9 01       	movw	r22, r18
    4c1a:	a8 01       	movw	r20, r16
    4c1c:	00 e4       	ldi	r16, 0x40	; 64
    4c1e:	12 e4       	ldi	r17, 0x42	; 66
    4c20:	2f e0       	ldi	r18, 0x0F	; 15
    4c22:	30 e0       	ldi	r19, 0x00	; 0
    4c24:	4c d0       	rcall	.+152    	; 0x4cbe <spi_xmega_set_baud_div>
    4c26:	88 23       	and	r24, r24
    4c28:	4c f0       	brlt	.+18     	; 0x4c3c <spi_master_setup_device+0x32>
    4c2a:	88 81       	ld	r24, Y
    4c2c:	9f 2d       	mov	r25, r15
    4c2e:	99 0f       	add	r25, r25
    4c30:	99 0f       	add	r25, r25
    4c32:	9c 70       	andi	r25, 0x0C	; 12
    4c34:	83 7f       	andi	r24, 0xF3	; 243
    4c36:	f9 2e       	mov	r15, r25
    4c38:	f8 2a       	or	r15, r24
    4c3a:	f8 82       	st	Y, r15
    4c3c:	df 91       	pop	r29
    4c3e:	cf 91       	pop	r28
    4c40:	1f 91       	pop	r17
    4c42:	0f 91       	pop	r16
    4c44:	ff 90       	pop	r15
    4c46:	08 95       	ret

00004c48 <spi_write_packet>:
    4c48:	fc 01       	movw	r30, r24
    4c4a:	db 01       	movw	r26, r22
    4c4c:	46 0f       	add	r20, r22
    4c4e:	57 1f       	adc	r21, r23
    4c50:	05 c0       	rjmp	.+10     	; 0x4c5c <spi_write_packet+0x14>
    4c52:	8d 91       	ld	r24, X+
    4c54:	83 83       	std	Z+3, r24	; 0x03
    4c56:	82 81       	ldd	r24, Z+2	; 0x02
    4c58:	88 23       	and	r24, r24
    4c5a:	ec f7       	brge	.-6      	; 0x4c56 <spi_write_packet+0xe>
    4c5c:	a4 17       	cp	r26, r20
    4c5e:	b5 07       	cpc	r27, r21
    4c60:	c1 f7       	brne	.-16     	; 0x4c52 <spi_write_packet+0xa>
    4c62:	80 e0       	ldi	r24, 0x00	; 0
    4c64:	08 95       	ret

00004c66 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
    4c66:	fb 01       	movw	r30, r22
    4c68:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    4c6a:	e8 2f       	mov	r30, r24
    4c6c:	e6 95       	lsr	r30
    4c6e:	e6 95       	lsr	r30
    4c70:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    4c72:	40 e2       	ldi	r20, 0x20	; 32
    4c74:	e4 9f       	mul	r30, r20
    4c76:	f0 01       	movw	r30, r0
    4c78:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    4c7a:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    4c7c:	87 70       	andi	r24, 0x07	; 7
    4c7e:	21 e0       	ldi	r18, 0x01	; 1
    4c80:	30 e0       	ldi	r19, 0x00	; 0
    4c82:	a9 01       	movw	r20, r18
    4c84:	02 c0       	rjmp	.+4      	; 0x4c8a <spi_select_device+0x24>
    4c86:	44 0f       	add	r20, r20
    4c88:	55 1f       	adc	r21, r21
    4c8a:	8a 95       	dec	r24
    4c8c:	e2 f7       	brpl	.-8      	; 0x4c86 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    4c8e:	46 83       	std	Z+6, r20	; 0x06
    4c90:	08 95       	ret

00004c92 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
    4c92:	fb 01       	movw	r30, r22
    4c94:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    4c96:	e8 2f       	mov	r30, r24
    4c98:	e6 95       	lsr	r30
    4c9a:	e6 95       	lsr	r30
    4c9c:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    4c9e:	40 e2       	ldi	r20, 0x20	; 32
    4ca0:	e4 9f       	mul	r30, r20
    4ca2:	f0 01       	movw	r30, r0
    4ca4:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    4ca6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    4ca8:	87 70       	andi	r24, 0x07	; 7
    4caa:	21 e0       	ldi	r18, 0x01	; 1
    4cac:	30 e0       	ldi	r19, 0x00	; 0
    4cae:	a9 01       	movw	r20, r18
    4cb0:	02 c0       	rjmp	.+4      	; 0x4cb6 <spi_deselect_device+0x24>
    4cb2:	44 0f       	add	r20, r20
    4cb4:	55 1f       	adc	r21, r21
    4cb6:	8a 95       	dec	r24
    4cb8:	e2 f7       	brpl	.-8      	; 0x4cb2 <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4cba:	45 83       	std	Z+5, r20	; 0x05
    4cbc:	08 95       	ret

00004cbe <spi_xmega_set_baud_div>:
    4cbe:	cf 92       	push	r12
    4cc0:	df 92       	push	r13
    4cc2:	ef 92       	push	r14
    4cc4:	ff 92       	push	r15
    4cc6:	0f 93       	push	r16
    4cc8:	1f 93       	push	r17
    4cca:	cf 93       	push	r28
    4ccc:	df 93       	push	r29
    4cce:	ec 01       	movw	r28, r24
    4cd0:	6a 01       	movw	r12, r20
    4cd2:	7b 01       	movw	r14, r22
    4cd4:	db 01       	movw	r26, r22
    4cd6:	ca 01       	movw	r24, r20
    4cd8:	01 97       	sbiw	r24, 0x01	; 1
    4cda:	a1 09       	sbc	r26, r1
    4cdc:	b1 09       	sbc	r27, r1
    4cde:	bc 01       	movw	r22, r24
    4ce0:	cd 01       	movw	r24, r26
    4ce2:	60 0f       	add	r22, r16
    4ce4:	71 1f       	adc	r23, r17
    4ce6:	82 1f       	adc	r24, r18
    4ce8:	93 1f       	adc	r25, r19
    4cea:	a7 01       	movw	r20, r14
    4cec:	96 01       	movw	r18, r12
    4cee:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <__udivmodsi4>
    4cf2:	21 38       	cpi	r18, 0x81	; 129
    4cf4:	31 05       	cpc	r19, r1
    4cf6:	41 05       	cpc	r20, r1
    4cf8:	51 05       	cpc	r21, r1
    4cfa:	f8 f4       	brcc	.+62     	; 0x4d3a <spi_xmega_set_baud_div+0x7c>
    4cfc:	21 34       	cpi	r18, 0x41	; 65
    4cfe:	60 f4       	brcc	.+24     	; 0x4d18 <spi_xmega_set_baud_div+0x5a>
    4d00:	21 32       	cpi	r18, 0x21	; 33
    4d02:	60 f4       	brcc	.+24     	; 0x4d1c <spi_xmega_set_baud_div+0x5e>
    4d04:	21 31       	cpi	r18, 0x11	; 17
    4d06:	60 f4       	brcc	.+24     	; 0x4d20 <spi_xmega_set_baud_div+0x62>
    4d08:	29 30       	cpi	r18, 0x09	; 9
    4d0a:	60 f4       	brcc	.+24     	; 0x4d24 <spi_xmega_set_baud_div+0x66>
    4d0c:	25 30       	cpi	r18, 0x05	; 5
    4d0e:	60 f4       	brcc	.+24     	; 0x4d28 <spi_xmega_set_baud_div+0x6a>
    4d10:	23 30       	cpi	r18, 0x03	; 3
    4d12:	60 f0       	brcs	.+24     	; 0x4d2c <spi_xmega_set_baud_div+0x6e>
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	0b c0       	rjmp	.+22     	; 0x4d2e <spi_xmega_set_baud_div+0x70>
    4d18:	93 e0       	ldi	r25, 0x03	; 3
    4d1a:	09 c0       	rjmp	.+18     	; 0x4d2e <spi_xmega_set_baud_div+0x70>
    4d1c:	92 e0       	ldi	r25, 0x02	; 2
    4d1e:	07 c0       	rjmp	.+14     	; 0x4d2e <spi_xmega_set_baud_div+0x70>
    4d20:	92 e8       	ldi	r25, 0x82	; 130
    4d22:	05 c0       	rjmp	.+10     	; 0x4d2e <spi_xmega_set_baud_div+0x70>
    4d24:	91 e0       	ldi	r25, 0x01	; 1
    4d26:	03 c0       	rjmp	.+6      	; 0x4d2e <spi_xmega_set_baud_div+0x70>
    4d28:	91 e8       	ldi	r25, 0x81	; 129
    4d2a:	01 c0       	rjmp	.+2      	; 0x4d2e <spi_xmega_set_baud_div+0x70>
    4d2c:	90 e8       	ldi	r25, 0x80	; 128
    4d2e:	88 81       	ld	r24, Y
    4d30:	8c 77       	andi	r24, 0x7C	; 124
    4d32:	89 2b       	or	r24, r25
    4d34:	88 83       	st	Y, r24
    4d36:	81 e0       	ldi	r24, 0x01	; 1
    4d38:	01 c0       	rjmp	.+2      	; 0x4d3c <spi_xmega_set_baud_div+0x7e>
    4d3a:	8f ef       	ldi	r24, 0xFF	; 255
    4d3c:	df 91       	pop	r29
    4d3e:	cf 91       	pop	r28
    4d40:	1f 91       	pop	r17
    4d42:	0f 91       	pop	r16
    4d44:	ff 90       	pop	r15
    4d46:	ef 90       	pop	r14
    4d48:	df 90       	pop	r13
    4d4a:	cf 90       	pop	r12
    4d4c:	08 95       	ret

00004d4e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    4d4e:	1f 92       	push	r1
    4d50:	0f 92       	push	r0
    4d52:	0f b6       	in	r0, 0x3f	; 63
    4d54:	0f 92       	push	r0
    4d56:	11 24       	eor	r1, r1
    4d58:	0b b6       	in	r0, 0x3b	; 59
    4d5a:	0f 92       	push	r0
    4d5c:	2f 93       	push	r18
    4d5e:	3f 93       	push	r19
    4d60:	4f 93       	push	r20
    4d62:	5f 93       	push	r21
    4d64:	6f 93       	push	r22
    4d66:	7f 93       	push	r23
    4d68:	8f 93       	push	r24
    4d6a:	9f 93       	push	r25
    4d6c:	af 93       	push	r26
    4d6e:	bf 93       	push	r27
    4d70:	ef 93       	push	r30
    4d72:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    4d74:	e0 91 65 62 	lds	r30, 0x6265
    4d78:	f0 91 66 62 	lds	r31, 0x6266
    4d7c:	30 97       	sbiw	r30, 0x00	; 0
    4d7e:	09 f0       	breq	.+2      	; 0x4d82 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
    4d80:	19 95       	eicall
	}
}
    4d82:	ff 91       	pop	r31
    4d84:	ef 91       	pop	r30
    4d86:	bf 91       	pop	r27
    4d88:	af 91       	pop	r26
    4d8a:	9f 91       	pop	r25
    4d8c:	8f 91       	pop	r24
    4d8e:	7f 91       	pop	r23
    4d90:	6f 91       	pop	r22
    4d92:	5f 91       	pop	r21
    4d94:	4f 91       	pop	r20
    4d96:	3f 91       	pop	r19
    4d98:	2f 91       	pop	r18
    4d9a:	0f 90       	pop	r0
    4d9c:	0b be       	out	0x3b, r0	; 59
    4d9e:	0f 90       	pop	r0
    4da0:	0f be       	out	0x3f, r0	; 63
    4da2:	0f 90       	pop	r0
    4da4:	1f 90       	pop	r1
    4da6:	18 95       	reti

00004da8 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    4da8:	1f 92       	push	r1
    4daa:	0f 92       	push	r0
    4dac:	0f b6       	in	r0, 0x3f	; 63
    4dae:	0f 92       	push	r0
    4db0:	11 24       	eor	r1, r1
    4db2:	0b b6       	in	r0, 0x3b	; 59
    4db4:	0f 92       	push	r0
    4db6:	2f 93       	push	r18
    4db8:	3f 93       	push	r19
    4dba:	4f 93       	push	r20
    4dbc:	5f 93       	push	r21
    4dbe:	6f 93       	push	r22
    4dc0:	7f 93       	push	r23
    4dc2:	8f 93       	push	r24
    4dc4:	9f 93       	push	r25
    4dc6:	af 93       	push	r26
    4dc8:	bf 93       	push	r27
    4dca:	ef 93       	push	r30
    4dcc:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    4dce:	e0 91 63 62 	lds	r30, 0x6263
    4dd2:	f0 91 64 62 	lds	r31, 0x6264
    4dd6:	30 97       	sbiw	r30, 0x00	; 0
    4dd8:	09 f0       	breq	.+2      	; 0x4ddc <__vector_15+0x34>
		tc_tcc0_err_callback();
    4dda:	19 95       	eicall
	}
}
    4ddc:	ff 91       	pop	r31
    4dde:	ef 91       	pop	r30
    4de0:	bf 91       	pop	r27
    4de2:	af 91       	pop	r26
    4de4:	9f 91       	pop	r25
    4de6:	8f 91       	pop	r24
    4de8:	7f 91       	pop	r23
    4dea:	6f 91       	pop	r22
    4dec:	5f 91       	pop	r21
    4dee:	4f 91       	pop	r20
    4df0:	3f 91       	pop	r19
    4df2:	2f 91       	pop	r18
    4df4:	0f 90       	pop	r0
    4df6:	0b be       	out	0x3b, r0	; 59
    4df8:	0f 90       	pop	r0
    4dfa:	0f be       	out	0x3f, r0	; 63
    4dfc:	0f 90       	pop	r0
    4dfe:	1f 90       	pop	r1
    4e00:	18 95       	reti

00004e02 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    4e02:	1f 92       	push	r1
    4e04:	0f 92       	push	r0
    4e06:	0f b6       	in	r0, 0x3f	; 63
    4e08:	0f 92       	push	r0
    4e0a:	11 24       	eor	r1, r1
    4e0c:	0b b6       	in	r0, 0x3b	; 59
    4e0e:	0f 92       	push	r0
    4e10:	2f 93       	push	r18
    4e12:	3f 93       	push	r19
    4e14:	4f 93       	push	r20
    4e16:	5f 93       	push	r21
    4e18:	6f 93       	push	r22
    4e1a:	7f 93       	push	r23
    4e1c:	8f 93       	push	r24
    4e1e:	9f 93       	push	r25
    4e20:	af 93       	push	r26
    4e22:	bf 93       	push	r27
    4e24:	ef 93       	push	r30
    4e26:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    4e28:	e0 91 61 62 	lds	r30, 0x6261
    4e2c:	f0 91 62 62 	lds	r31, 0x6262
    4e30:	30 97       	sbiw	r30, 0x00	; 0
    4e32:	09 f0       	breq	.+2      	; 0x4e36 <__vector_16+0x34>
		tc_tcc0_cca_callback();
    4e34:	19 95       	eicall
	}
}
    4e36:	ff 91       	pop	r31
    4e38:	ef 91       	pop	r30
    4e3a:	bf 91       	pop	r27
    4e3c:	af 91       	pop	r26
    4e3e:	9f 91       	pop	r25
    4e40:	8f 91       	pop	r24
    4e42:	7f 91       	pop	r23
    4e44:	6f 91       	pop	r22
    4e46:	5f 91       	pop	r21
    4e48:	4f 91       	pop	r20
    4e4a:	3f 91       	pop	r19
    4e4c:	2f 91       	pop	r18
    4e4e:	0f 90       	pop	r0
    4e50:	0b be       	out	0x3b, r0	; 59
    4e52:	0f 90       	pop	r0
    4e54:	0f be       	out	0x3f, r0	; 63
    4e56:	0f 90       	pop	r0
    4e58:	1f 90       	pop	r1
    4e5a:	18 95       	reti

00004e5c <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    4e5c:	1f 92       	push	r1
    4e5e:	0f 92       	push	r0
    4e60:	0f b6       	in	r0, 0x3f	; 63
    4e62:	0f 92       	push	r0
    4e64:	11 24       	eor	r1, r1
    4e66:	0b b6       	in	r0, 0x3b	; 59
    4e68:	0f 92       	push	r0
    4e6a:	2f 93       	push	r18
    4e6c:	3f 93       	push	r19
    4e6e:	4f 93       	push	r20
    4e70:	5f 93       	push	r21
    4e72:	6f 93       	push	r22
    4e74:	7f 93       	push	r23
    4e76:	8f 93       	push	r24
    4e78:	9f 93       	push	r25
    4e7a:	af 93       	push	r26
    4e7c:	bf 93       	push	r27
    4e7e:	ef 93       	push	r30
    4e80:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    4e82:	e0 91 5f 62 	lds	r30, 0x625F
    4e86:	f0 91 60 62 	lds	r31, 0x6260
    4e8a:	30 97       	sbiw	r30, 0x00	; 0
    4e8c:	09 f0       	breq	.+2      	; 0x4e90 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
    4e8e:	19 95       	eicall
	}
}
    4e90:	ff 91       	pop	r31
    4e92:	ef 91       	pop	r30
    4e94:	bf 91       	pop	r27
    4e96:	af 91       	pop	r26
    4e98:	9f 91       	pop	r25
    4e9a:	8f 91       	pop	r24
    4e9c:	7f 91       	pop	r23
    4e9e:	6f 91       	pop	r22
    4ea0:	5f 91       	pop	r21
    4ea2:	4f 91       	pop	r20
    4ea4:	3f 91       	pop	r19
    4ea6:	2f 91       	pop	r18
    4ea8:	0f 90       	pop	r0
    4eaa:	0b be       	out	0x3b, r0	; 59
    4eac:	0f 90       	pop	r0
    4eae:	0f be       	out	0x3f, r0	; 63
    4eb0:	0f 90       	pop	r0
    4eb2:	1f 90       	pop	r1
    4eb4:	18 95       	reti

00004eb6 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    4eb6:	1f 92       	push	r1
    4eb8:	0f 92       	push	r0
    4eba:	0f b6       	in	r0, 0x3f	; 63
    4ebc:	0f 92       	push	r0
    4ebe:	11 24       	eor	r1, r1
    4ec0:	0b b6       	in	r0, 0x3b	; 59
    4ec2:	0f 92       	push	r0
    4ec4:	2f 93       	push	r18
    4ec6:	3f 93       	push	r19
    4ec8:	4f 93       	push	r20
    4eca:	5f 93       	push	r21
    4ecc:	6f 93       	push	r22
    4ece:	7f 93       	push	r23
    4ed0:	8f 93       	push	r24
    4ed2:	9f 93       	push	r25
    4ed4:	af 93       	push	r26
    4ed6:	bf 93       	push	r27
    4ed8:	ef 93       	push	r30
    4eda:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    4edc:	e0 91 5d 62 	lds	r30, 0x625D
    4ee0:	f0 91 5e 62 	lds	r31, 0x625E
    4ee4:	30 97       	sbiw	r30, 0x00	; 0
    4ee6:	09 f0       	breq	.+2      	; 0x4eea <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    4ee8:	19 95       	eicall
	}
}
    4eea:	ff 91       	pop	r31
    4eec:	ef 91       	pop	r30
    4eee:	bf 91       	pop	r27
    4ef0:	af 91       	pop	r26
    4ef2:	9f 91       	pop	r25
    4ef4:	8f 91       	pop	r24
    4ef6:	7f 91       	pop	r23
    4ef8:	6f 91       	pop	r22
    4efa:	5f 91       	pop	r21
    4efc:	4f 91       	pop	r20
    4efe:	3f 91       	pop	r19
    4f00:	2f 91       	pop	r18
    4f02:	0f 90       	pop	r0
    4f04:	0b be       	out	0x3b, r0	; 59
    4f06:	0f 90       	pop	r0
    4f08:	0f be       	out	0x3f, r0	; 63
    4f0a:	0f 90       	pop	r0
    4f0c:	1f 90       	pop	r1
    4f0e:	18 95       	reti

00004f10 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    4f10:	1f 92       	push	r1
    4f12:	0f 92       	push	r0
    4f14:	0f b6       	in	r0, 0x3f	; 63
    4f16:	0f 92       	push	r0
    4f18:	11 24       	eor	r1, r1
    4f1a:	0b b6       	in	r0, 0x3b	; 59
    4f1c:	0f 92       	push	r0
    4f1e:	2f 93       	push	r18
    4f20:	3f 93       	push	r19
    4f22:	4f 93       	push	r20
    4f24:	5f 93       	push	r21
    4f26:	6f 93       	push	r22
    4f28:	7f 93       	push	r23
    4f2a:	8f 93       	push	r24
    4f2c:	9f 93       	push	r25
    4f2e:	af 93       	push	r26
    4f30:	bf 93       	push	r27
    4f32:	ef 93       	push	r30
    4f34:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    4f36:	e0 91 5b 62 	lds	r30, 0x625B
    4f3a:	f0 91 5c 62 	lds	r31, 0x625C
    4f3e:	30 97       	sbiw	r30, 0x00	; 0
    4f40:	09 f0       	breq	.+2      	; 0x4f44 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    4f42:	19 95       	eicall
	}
}
    4f44:	ff 91       	pop	r31
    4f46:	ef 91       	pop	r30
    4f48:	bf 91       	pop	r27
    4f4a:	af 91       	pop	r26
    4f4c:	9f 91       	pop	r25
    4f4e:	8f 91       	pop	r24
    4f50:	7f 91       	pop	r23
    4f52:	6f 91       	pop	r22
    4f54:	5f 91       	pop	r21
    4f56:	4f 91       	pop	r20
    4f58:	3f 91       	pop	r19
    4f5a:	2f 91       	pop	r18
    4f5c:	0f 90       	pop	r0
    4f5e:	0b be       	out	0x3b, r0	; 59
    4f60:	0f 90       	pop	r0
    4f62:	0f be       	out	0x3f, r0	; 63
    4f64:	0f 90       	pop	r0
    4f66:	1f 90       	pop	r1
    4f68:	18 95       	reti

00004f6a <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    4f6a:	1f 92       	push	r1
    4f6c:	0f 92       	push	r0
    4f6e:	0f b6       	in	r0, 0x3f	; 63
    4f70:	0f 92       	push	r0
    4f72:	11 24       	eor	r1, r1
    4f74:	0b b6       	in	r0, 0x3b	; 59
    4f76:	0f 92       	push	r0
    4f78:	2f 93       	push	r18
    4f7a:	3f 93       	push	r19
    4f7c:	4f 93       	push	r20
    4f7e:	5f 93       	push	r21
    4f80:	6f 93       	push	r22
    4f82:	7f 93       	push	r23
    4f84:	8f 93       	push	r24
    4f86:	9f 93       	push	r25
    4f88:	af 93       	push	r26
    4f8a:	bf 93       	push	r27
    4f8c:	ef 93       	push	r30
    4f8e:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    4f90:	e0 91 59 62 	lds	r30, 0x6259
    4f94:	f0 91 5a 62 	lds	r31, 0x625A
    4f98:	30 97       	sbiw	r30, 0x00	; 0
    4f9a:	09 f0       	breq	.+2      	; 0x4f9e <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    4f9c:	19 95       	eicall
	}
}
    4f9e:	ff 91       	pop	r31
    4fa0:	ef 91       	pop	r30
    4fa2:	bf 91       	pop	r27
    4fa4:	af 91       	pop	r26
    4fa6:	9f 91       	pop	r25
    4fa8:	8f 91       	pop	r24
    4faa:	7f 91       	pop	r23
    4fac:	6f 91       	pop	r22
    4fae:	5f 91       	pop	r21
    4fb0:	4f 91       	pop	r20
    4fb2:	3f 91       	pop	r19
    4fb4:	2f 91       	pop	r18
    4fb6:	0f 90       	pop	r0
    4fb8:	0b be       	out	0x3b, r0	; 59
    4fba:	0f 90       	pop	r0
    4fbc:	0f be       	out	0x3f, r0	; 63
    4fbe:	0f 90       	pop	r0
    4fc0:	1f 90       	pop	r1
    4fc2:	18 95       	reti

00004fc4 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    4fc4:	1f 92       	push	r1
    4fc6:	0f 92       	push	r0
    4fc8:	0f b6       	in	r0, 0x3f	; 63
    4fca:	0f 92       	push	r0
    4fcc:	11 24       	eor	r1, r1
    4fce:	0b b6       	in	r0, 0x3b	; 59
    4fd0:	0f 92       	push	r0
    4fd2:	2f 93       	push	r18
    4fd4:	3f 93       	push	r19
    4fd6:	4f 93       	push	r20
    4fd8:	5f 93       	push	r21
    4fda:	6f 93       	push	r22
    4fdc:	7f 93       	push	r23
    4fde:	8f 93       	push	r24
    4fe0:	9f 93       	push	r25
    4fe2:	af 93       	push	r26
    4fe4:	bf 93       	push	r27
    4fe6:	ef 93       	push	r30
    4fe8:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    4fea:	e0 91 57 62 	lds	r30, 0x6257
    4fee:	f0 91 58 62 	lds	r31, 0x6258
    4ff2:	30 97       	sbiw	r30, 0x00	; 0
    4ff4:	09 f0       	breq	.+2      	; 0x4ff8 <__vector_21+0x34>
		tc_tcc1_err_callback();
    4ff6:	19 95       	eicall
	}
}
    4ff8:	ff 91       	pop	r31
    4ffa:	ef 91       	pop	r30
    4ffc:	bf 91       	pop	r27
    4ffe:	af 91       	pop	r26
    5000:	9f 91       	pop	r25
    5002:	8f 91       	pop	r24
    5004:	7f 91       	pop	r23
    5006:	6f 91       	pop	r22
    5008:	5f 91       	pop	r21
    500a:	4f 91       	pop	r20
    500c:	3f 91       	pop	r19
    500e:	2f 91       	pop	r18
    5010:	0f 90       	pop	r0
    5012:	0b be       	out	0x3b, r0	; 59
    5014:	0f 90       	pop	r0
    5016:	0f be       	out	0x3f, r0	; 63
    5018:	0f 90       	pop	r0
    501a:	1f 90       	pop	r1
    501c:	18 95       	reti

0000501e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    501e:	1f 92       	push	r1
    5020:	0f 92       	push	r0
    5022:	0f b6       	in	r0, 0x3f	; 63
    5024:	0f 92       	push	r0
    5026:	11 24       	eor	r1, r1
    5028:	0b b6       	in	r0, 0x3b	; 59
    502a:	0f 92       	push	r0
    502c:	2f 93       	push	r18
    502e:	3f 93       	push	r19
    5030:	4f 93       	push	r20
    5032:	5f 93       	push	r21
    5034:	6f 93       	push	r22
    5036:	7f 93       	push	r23
    5038:	8f 93       	push	r24
    503a:	9f 93       	push	r25
    503c:	af 93       	push	r26
    503e:	bf 93       	push	r27
    5040:	ef 93       	push	r30
    5042:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    5044:	e0 91 55 62 	lds	r30, 0x6255
    5048:	f0 91 56 62 	lds	r31, 0x6256
    504c:	30 97       	sbiw	r30, 0x00	; 0
    504e:	09 f0       	breq	.+2      	; 0x5052 <__vector_22+0x34>
		tc_tcc1_cca_callback();
    5050:	19 95       	eicall
	}
}
    5052:	ff 91       	pop	r31
    5054:	ef 91       	pop	r30
    5056:	bf 91       	pop	r27
    5058:	af 91       	pop	r26
    505a:	9f 91       	pop	r25
    505c:	8f 91       	pop	r24
    505e:	7f 91       	pop	r23
    5060:	6f 91       	pop	r22
    5062:	5f 91       	pop	r21
    5064:	4f 91       	pop	r20
    5066:	3f 91       	pop	r19
    5068:	2f 91       	pop	r18
    506a:	0f 90       	pop	r0
    506c:	0b be       	out	0x3b, r0	; 59
    506e:	0f 90       	pop	r0
    5070:	0f be       	out	0x3f, r0	; 63
    5072:	0f 90       	pop	r0
    5074:	1f 90       	pop	r1
    5076:	18 95       	reti

00005078 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    5078:	1f 92       	push	r1
    507a:	0f 92       	push	r0
    507c:	0f b6       	in	r0, 0x3f	; 63
    507e:	0f 92       	push	r0
    5080:	11 24       	eor	r1, r1
    5082:	0b b6       	in	r0, 0x3b	; 59
    5084:	0f 92       	push	r0
    5086:	2f 93       	push	r18
    5088:	3f 93       	push	r19
    508a:	4f 93       	push	r20
    508c:	5f 93       	push	r21
    508e:	6f 93       	push	r22
    5090:	7f 93       	push	r23
    5092:	8f 93       	push	r24
    5094:	9f 93       	push	r25
    5096:	af 93       	push	r26
    5098:	bf 93       	push	r27
    509a:	ef 93       	push	r30
    509c:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    509e:	e0 91 53 62 	lds	r30, 0x6253
    50a2:	f0 91 54 62 	lds	r31, 0x6254
    50a6:	30 97       	sbiw	r30, 0x00	; 0
    50a8:	09 f0       	breq	.+2      	; 0x50ac <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    50aa:	19 95       	eicall
	}
}
    50ac:	ff 91       	pop	r31
    50ae:	ef 91       	pop	r30
    50b0:	bf 91       	pop	r27
    50b2:	af 91       	pop	r26
    50b4:	9f 91       	pop	r25
    50b6:	8f 91       	pop	r24
    50b8:	7f 91       	pop	r23
    50ba:	6f 91       	pop	r22
    50bc:	5f 91       	pop	r21
    50be:	4f 91       	pop	r20
    50c0:	3f 91       	pop	r19
    50c2:	2f 91       	pop	r18
    50c4:	0f 90       	pop	r0
    50c6:	0b be       	out	0x3b, r0	; 59
    50c8:	0f 90       	pop	r0
    50ca:	0f be       	out	0x3f, r0	; 63
    50cc:	0f 90       	pop	r0
    50ce:	1f 90       	pop	r1
    50d0:	18 95       	reti

000050d2 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    50d2:	1f 92       	push	r1
    50d4:	0f 92       	push	r0
    50d6:	0f b6       	in	r0, 0x3f	; 63
    50d8:	0f 92       	push	r0
    50da:	11 24       	eor	r1, r1
    50dc:	0b b6       	in	r0, 0x3b	; 59
    50de:	0f 92       	push	r0
    50e0:	2f 93       	push	r18
    50e2:	3f 93       	push	r19
    50e4:	4f 93       	push	r20
    50e6:	5f 93       	push	r21
    50e8:	6f 93       	push	r22
    50ea:	7f 93       	push	r23
    50ec:	8f 93       	push	r24
    50ee:	9f 93       	push	r25
    50f0:	af 93       	push	r26
    50f2:	bf 93       	push	r27
    50f4:	ef 93       	push	r30
    50f6:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    50f8:	e0 91 51 62 	lds	r30, 0x6251
    50fc:	f0 91 52 62 	lds	r31, 0x6252
    5100:	30 97       	sbiw	r30, 0x00	; 0
    5102:	09 f0       	breq	.+2      	; 0x5106 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    5104:	19 95       	eicall
	}
}
    5106:	ff 91       	pop	r31
    5108:	ef 91       	pop	r30
    510a:	bf 91       	pop	r27
    510c:	af 91       	pop	r26
    510e:	9f 91       	pop	r25
    5110:	8f 91       	pop	r24
    5112:	7f 91       	pop	r23
    5114:	6f 91       	pop	r22
    5116:	5f 91       	pop	r21
    5118:	4f 91       	pop	r20
    511a:	3f 91       	pop	r19
    511c:	2f 91       	pop	r18
    511e:	0f 90       	pop	r0
    5120:	0b be       	out	0x3b, r0	; 59
    5122:	0f 90       	pop	r0
    5124:	0f be       	out	0x3f, r0	; 63
    5126:	0f 90       	pop	r0
    5128:	1f 90       	pop	r1
    512a:	18 95       	reti

0000512c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    512c:	1f 92       	push	r1
    512e:	0f 92       	push	r0
    5130:	0f b6       	in	r0, 0x3f	; 63
    5132:	0f 92       	push	r0
    5134:	11 24       	eor	r1, r1
    5136:	0b b6       	in	r0, 0x3b	; 59
    5138:	0f 92       	push	r0
    513a:	2f 93       	push	r18
    513c:	3f 93       	push	r19
    513e:	4f 93       	push	r20
    5140:	5f 93       	push	r21
    5142:	6f 93       	push	r22
    5144:	7f 93       	push	r23
    5146:	8f 93       	push	r24
    5148:	9f 93       	push	r25
    514a:	af 93       	push	r26
    514c:	bf 93       	push	r27
    514e:	ef 93       	push	r30
    5150:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    5152:	e0 91 4f 62 	lds	r30, 0x624F
    5156:	f0 91 50 62 	lds	r31, 0x6250
    515a:	30 97       	sbiw	r30, 0x00	; 0
    515c:	09 f0       	breq	.+2      	; 0x5160 <__vector_78+0x34>
		tc_tcd0_err_callback();
    515e:	19 95       	eicall
	}
}
    5160:	ff 91       	pop	r31
    5162:	ef 91       	pop	r30
    5164:	bf 91       	pop	r27
    5166:	af 91       	pop	r26
    5168:	9f 91       	pop	r25
    516a:	8f 91       	pop	r24
    516c:	7f 91       	pop	r23
    516e:	6f 91       	pop	r22
    5170:	5f 91       	pop	r21
    5172:	4f 91       	pop	r20
    5174:	3f 91       	pop	r19
    5176:	2f 91       	pop	r18
    5178:	0f 90       	pop	r0
    517a:	0b be       	out	0x3b, r0	; 59
    517c:	0f 90       	pop	r0
    517e:	0f be       	out	0x3f, r0	; 63
    5180:	0f 90       	pop	r0
    5182:	1f 90       	pop	r1
    5184:	18 95       	reti

00005186 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    5186:	1f 92       	push	r1
    5188:	0f 92       	push	r0
    518a:	0f b6       	in	r0, 0x3f	; 63
    518c:	0f 92       	push	r0
    518e:	11 24       	eor	r1, r1
    5190:	0b b6       	in	r0, 0x3b	; 59
    5192:	0f 92       	push	r0
    5194:	2f 93       	push	r18
    5196:	3f 93       	push	r19
    5198:	4f 93       	push	r20
    519a:	5f 93       	push	r21
    519c:	6f 93       	push	r22
    519e:	7f 93       	push	r23
    51a0:	8f 93       	push	r24
    51a2:	9f 93       	push	r25
    51a4:	af 93       	push	r26
    51a6:	bf 93       	push	r27
    51a8:	ef 93       	push	r30
    51aa:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    51ac:	e0 91 4d 62 	lds	r30, 0x624D
    51b0:	f0 91 4e 62 	lds	r31, 0x624E
    51b4:	30 97       	sbiw	r30, 0x00	; 0
    51b6:	09 f0       	breq	.+2      	; 0x51ba <__vector_79+0x34>
		tc_tcd0_cca_callback();
    51b8:	19 95       	eicall
	}
}
    51ba:	ff 91       	pop	r31
    51bc:	ef 91       	pop	r30
    51be:	bf 91       	pop	r27
    51c0:	af 91       	pop	r26
    51c2:	9f 91       	pop	r25
    51c4:	8f 91       	pop	r24
    51c6:	7f 91       	pop	r23
    51c8:	6f 91       	pop	r22
    51ca:	5f 91       	pop	r21
    51cc:	4f 91       	pop	r20
    51ce:	3f 91       	pop	r19
    51d0:	2f 91       	pop	r18
    51d2:	0f 90       	pop	r0
    51d4:	0b be       	out	0x3b, r0	; 59
    51d6:	0f 90       	pop	r0
    51d8:	0f be       	out	0x3f, r0	; 63
    51da:	0f 90       	pop	r0
    51dc:	1f 90       	pop	r1
    51de:	18 95       	reti

000051e0 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    51e0:	1f 92       	push	r1
    51e2:	0f 92       	push	r0
    51e4:	0f b6       	in	r0, 0x3f	; 63
    51e6:	0f 92       	push	r0
    51e8:	11 24       	eor	r1, r1
    51ea:	0b b6       	in	r0, 0x3b	; 59
    51ec:	0f 92       	push	r0
    51ee:	2f 93       	push	r18
    51f0:	3f 93       	push	r19
    51f2:	4f 93       	push	r20
    51f4:	5f 93       	push	r21
    51f6:	6f 93       	push	r22
    51f8:	7f 93       	push	r23
    51fa:	8f 93       	push	r24
    51fc:	9f 93       	push	r25
    51fe:	af 93       	push	r26
    5200:	bf 93       	push	r27
    5202:	ef 93       	push	r30
    5204:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    5206:	e0 91 4b 62 	lds	r30, 0x624B
    520a:	f0 91 4c 62 	lds	r31, 0x624C
    520e:	30 97       	sbiw	r30, 0x00	; 0
    5210:	09 f0       	breq	.+2      	; 0x5214 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    5212:	19 95       	eicall
	}
}
    5214:	ff 91       	pop	r31
    5216:	ef 91       	pop	r30
    5218:	bf 91       	pop	r27
    521a:	af 91       	pop	r26
    521c:	9f 91       	pop	r25
    521e:	8f 91       	pop	r24
    5220:	7f 91       	pop	r23
    5222:	6f 91       	pop	r22
    5224:	5f 91       	pop	r21
    5226:	4f 91       	pop	r20
    5228:	3f 91       	pop	r19
    522a:	2f 91       	pop	r18
    522c:	0f 90       	pop	r0
    522e:	0b be       	out	0x3b, r0	; 59
    5230:	0f 90       	pop	r0
    5232:	0f be       	out	0x3f, r0	; 63
    5234:	0f 90       	pop	r0
    5236:	1f 90       	pop	r1
    5238:	18 95       	reti

0000523a <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    523a:	1f 92       	push	r1
    523c:	0f 92       	push	r0
    523e:	0f b6       	in	r0, 0x3f	; 63
    5240:	0f 92       	push	r0
    5242:	11 24       	eor	r1, r1
    5244:	0b b6       	in	r0, 0x3b	; 59
    5246:	0f 92       	push	r0
    5248:	2f 93       	push	r18
    524a:	3f 93       	push	r19
    524c:	4f 93       	push	r20
    524e:	5f 93       	push	r21
    5250:	6f 93       	push	r22
    5252:	7f 93       	push	r23
    5254:	8f 93       	push	r24
    5256:	9f 93       	push	r25
    5258:	af 93       	push	r26
    525a:	bf 93       	push	r27
    525c:	ef 93       	push	r30
    525e:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    5260:	e0 91 49 62 	lds	r30, 0x6249
    5264:	f0 91 4a 62 	lds	r31, 0x624A
    5268:	30 97       	sbiw	r30, 0x00	; 0
    526a:	09 f0       	breq	.+2      	; 0x526e <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    526c:	19 95       	eicall
	}
}
    526e:	ff 91       	pop	r31
    5270:	ef 91       	pop	r30
    5272:	bf 91       	pop	r27
    5274:	af 91       	pop	r26
    5276:	9f 91       	pop	r25
    5278:	8f 91       	pop	r24
    527a:	7f 91       	pop	r23
    527c:	6f 91       	pop	r22
    527e:	5f 91       	pop	r21
    5280:	4f 91       	pop	r20
    5282:	3f 91       	pop	r19
    5284:	2f 91       	pop	r18
    5286:	0f 90       	pop	r0
    5288:	0b be       	out	0x3b, r0	; 59
    528a:	0f 90       	pop	r0
    528c:	0f be       	out	0x3f, r0	; 63
    528e:	0f 90       	pop	r0
    5290:	1f 90       	pop	r1
    5292:	18 95       	reti

00005294 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    5294:	1f 92       	push	r1
    5296:	0f 92       	push	r0
    5298:	0f b6       	in	r0, 0x3f	; 63
    529a:	0f 92       	push	r0
    529c:	11 24       	eor	r1, r1
    529e:	0b b6       	in	r0, 0x3b	; 59
    52a0:	0f 92       	push	r0
    52a2:	2f 93       	push	r18
    52a4:	3f 93       	push	r19
    52a6:	4f 93       	push	r20
    52a8:	5f 93       	push	r21
    52aa:	6f 93       	push	r22
    52ac:	7f 93       	push	r23
    52ae:	8f 93       	push	r24
    52b0:	9f 93       	push	r25
    52b2:	af 93       	push	r26
    52b4:	bf 93       	push	r27
    52b6:	ef 93       	push	r30
    52b8:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    52ba:	e0 91 47 62 	lds	r30, 0x6247
    52be:	f0 91 48 62 	lds	r31, 0x6248
    52c2:	30 97       	sbiw	r30, 0x00	; 0
    52c4:	09 f0       	breq	.+2      	; 0x52c8 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    52c6:	19 95       	eicall
	}
}
    52c8:	ff 91       	pop	r31
    52ca:	ef 91       	pop	r30
    52cc:	bf 91       	pop	r27
    52ce:	af 91       	pop	r26
    52d0:	9f 91       	pop	r25
    52d2:	8f 91       	pop	r24
    52d4:	7f 91       	pop	r23
    52d6:	6f 91       	pop	r22
    52d8:	5f 91       	pop	r21
    52da:	4f 91       	pop	r20
    52dc:	3f 91       	pop	r19
    52de:	2f 91       	pop	r18
    52e0:	0f 90       	pop	r0
    52e2:	0b be       	out	0x3b, r0	; 59
    52e4:	0f 90       	pop	r0
    52e6:	0f be       	out	0x3f, r0	; 63
    52e8:	0f 90       	pop	r0
    52ea:	1f 90       	pop	r1
    52ec:	18 95       	reti

000052ee <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    52ee:	1f 92       	push	r1
    52f0:	0f 92       	push	r0
    52f2:	0f b6       	in	r0, 0x3f	; 63
    52f4:	0f 92       	push	r0
    52f6:	11 24       	eor	r1, r1
    52f8:	0b b6       	in	r0, 0x3b	; 59
    52fa:	0f 92       	push	r0
    52fc:	2f 93       	push	r18
    52fe:	3f 93       	push	r19
    5300:	4f 93       	push	r20
    5302:	5f 93       	push	r21
    5304:	6f 93       	push	r22
    5306:	7f 93       	push	r23
    5308:	8f 93       	push	r24
    530a:	9f 93       	push	r25
    530c:	af 93       	push	r26
    530e:	bf 93       	push	r27
    5310:	ef 93       	push	r30
    5312:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    5314:	e0 91 45 62 	lds	r30, 0x6245
    5318:	f0 91 46 62 	lds	r31, 0x6246
    531c:	30 97       	sbiw	r30, 0x00	; 0
    531e:	09 f0       	breq	.+2      	; 0x5322 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    5320:	19 95       	eicall
	}
}
    5322:	ff 91       	pop	r31
    5324:	ef 91       	pop	r30
    5326:	bf 91       	pop	r27
    5328:	af 91       	pop	r26
    532a:	9f 91       	pop	r25
    532c:	8f 91       	pop	r24
    532e:	7f 91       	pop	r23
    5330:	6f 91       	pop	r22
    5332:	5f 91       	pop	r21
    5334:	4f 91       	pop	r20
    5336:	3f 91       	pop	r19
    5338:	2f 91       	pop	r18
    533a:	0f 90       	pop	r0
    533c:	0b be       	out	0x3b, r0	; 59
    533e:	0f 90       	pop	r0
    5340:	0f be       	out	0x3f, r0	; 63
    5342:	0f 90       	pop	r0
    5344:	1f 90       	pop	r1
    5346:	18 95       	reti

00005348 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    5348:	1f 92       	push	r1
    534a:	0f 92       	push	r0
    534c:	0f b6       	in	r0, 0x3f	; 63
    534e:	0f 92       	push	r0
    5350:	11 24       	eor	r1, r1
    5352:	0b b6       	in	r0, 0x3b	; 59
    5354:	0f 92       	push	r0
    5356:	2f 93       	push	r18
    5358:	3f 93       	push	r19
    535a:	4f 93       	push	r20
    535c:	5f 93       	push	r21
    535e:	6f 93       	push	r22
    5360:	7f 93       	push	r23
    5362:	8f 93       	push	r24
    5364:	9f 93       	push	r25
    5366:	af 93       	push	r26
    5368:	bf 93       	push	r27
    536a:	ef 93       	push	r30
    536c:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    536e:	e0 91 43 62 	lds	r30, 0x6243
    5372:	f0 91 44 62 	lds	r31, 0x6244
    5376:	30 97       	sbiw	r30, 0x00	; 0
    5378:	09 f0       	breq	.+2      	; 0x537c <__vector_48+0x34>
		tc_tce0_err_callback();
    537a:	19 95       	eicall
	}
}
    537c:	ff 91       	pop	r31
    537e:	ef 91       	pop	r30
    5380:	bf 91       	pop	r27
    5382:	af 91       	pop	r26
    5384:	9f 91       	pop	r25
    5386:	8f 91       	pop	r24
    5388:	7f 91       	pop	r23
    538a:	6f 91       	pop	r22
    538c:	5f 91       	pop	r21
    538e:	4f 91       	pop	r20
    5390:	3f 91       	pop	r19
    5392:	2f 91       	pop	r18
    5394:	0f 90       	pop	r0
    5396:	0b be       	out	0x3b, r0	; 59
    5398:	0f 90       	pop	r0
    539a:	0f be       	out	0x3f, r0	; 63
    539c:	0f 90       	pop	r0
    539e:	1f 90       	pop	r1
    53a0:	18 95       	reti

000053a2 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    53a2:	1f 92       	push	r1
    53a4:	0f 92       	push	r0
    53a6:	0f b6       	in	r0, 0x3f	; 63
    53a8:	0f 92       	push	r0
    53aa:	11 24       	eor	r1, r1
    53ac:	0b b6       	in	r0, 0x3b	; 59
    53ae:	0f 92       	push	r0
    53b0:	2f 93       	push	r18
    53b2:	3f 93       	push	r19
    53b4:	4f 93       	push	r20
    53b6:	5f 93       	push	r21
    53b8:	6f 93       	push	r22
    53ba:	7f 93       	push	r23
    53bc:	8f 93       	push	r24
    53be:	9f 93       	push	r25
    53c0:	af 93       	push	r26
    53c2:	bf 93       	push	r27
    53c4:	ef 93       	push	r30
    53c6:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    53c8:	e0 91 41 62 	lds	r30, 0x6241
    53cc:	f0 91 42 62 	lds	r31, 0x6242
    53d0:	30 97       	sbiw	r30, 0x00	; 0
    53d2:	09 f0       	breq	.+2      	; 0x53d6 <__vector_49+0x34>
		tc_tce0_cca_callback();
    53d4:	19 95       	eicall
	}
}
    53d6:	ff 91       	pop	r31
    53d8:	ef 91       	pop	r30
    53da:	bf 91       	pop	r27
    53dc:	af 91       	pop	r26
    53de:	9f 91       	pop	r25
    53e0:	8f 91       	pop	r24
    53e2:	7f 91       	pop	r23
    53e4:	6f 91       	pop	r22
    53e6:	5f 91       	pop	r21
    53e8:	4f 91       	pop	r20
    53ea:	3f 91       	pop	r19
    53ec:	2f 91       	pop	r18
    53ee:	0f 90       	pop	r0
    53f0:	0b be       	out	0x3b, r0	; 59
    53f2:	0f 90       	pop	r0
    53f4:	0f be       	out	0x3f, r0	; 63
    53f6:	0f 90       	pop	r0
    53f8:	1f 90       	pop	r1
    53fa:	18 95       	reti

000053fc <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    53fc:	1f 92       	push	r1
    53fe:	0f 92       	push	r0
    5400:	0f b6       	in	r0, 0x3f	; 63
    5402:	0f 92       	push	r0
    5404:	11 24       	eor	r1, r1
    5406:	0b b6       	in	r0, 0x3b	; 59
    5408:	0f 92       	push	r0
    540a:	2f 93       	push	r18
    540c:	3f 93       	push	r19
    540e:	4f 93       	push	r20
    5410:	5f 93       	push	r21
    5412:	6f 93       	push	r22
    5414:	7f 93       	push	r23
    5416:	8f 93       	push	r24
    5418:	9f 93       	push	r25
    541a:	af 93       	push	r26
    541c:	bf 93       	push	r27
    541e:	ef 93       	push	r30
    5420:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    5422:	e0 91 3f 62 	lds	r30, 0x623F
    5426:	f0 91 40 62 	lds	r31, 0x6240
    542a:	30 97       	sbiw	r30, 0x00	; 0
    542c:	09 f0       	breq	.+2      	; 0x5430 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    542e:	19 95       	eicall
	}
}
    5430:	ff 91       	pop	r31
    5432:	ef 91       	pop	r30
    5434:	bf 91       	pop	r27
    5436:	af 91       	pop	r26
    5438:	9f 91       	pop	r25
    543a:	8f 91       	pop	r24
    543c:	7f 91       	pop	r23
    543e:	6f 91       	pop	r22
    5440:	5f 91       	pop	r21
    5442:	4f 91       	pop	r20
    5444:	3f 91       	pop	r19
    5446:	2f 91       	pop	r18
    5448:	0f 90       	pop	r0
    544a:	0b be       	out	0x3b, r0	; 59
    544c:	0f 90       	pop	r0
    544e:	0f be       	out	0x3f, r0	; 63
    5450:	0f 90       	pop	r0
    5452:	1f 90       	pop	r1
    5454:	18 95       	reti

00005456 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    5456:	1f 92       	push	r1
    5458:	0f 92       	push	r0
    545a:	0f b6       	in	r0, 0x3f	; 63
    545c:	0f 92       	push	r0
    545e:	11 24       	eor	r1, r1
    5460:	0b b6       	in	r0, 0x3b	; 59
    5462:	0f 92       	push	r0
    5464:	2f 93       	push	r18
    5466:	3f 93       	push	r19
    5468:	4f 93       	push	r20
    546a:	5f 93       	push	r21
    546c:	6f 93       	push	r22
    546e:	7f 93       	push	r23
    5470:	8f 93       	push	r24
    5472:	9f 93       	push	r25
    5474:	af 93       	push	r26
    5476:	bf 93       	push	r27
    5478:	ef 93       	push	r30
    547a:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    547c:	e0 91 3d 62 	lds	r30, 0x623D
    5480:	f0 91 3e 62 	lds	r31, 0x623E
    5484:	30 97       	sbiw	r30, 0x00	; 0
    5486:	09 f0       	breq	.+2      	; 0x548a <__vector_51+0x34>
		tc_tce0_ccc_callback();
    5488:	19 95       	eicall
	}
}
    548a:	ff 91       	pop	r31
    548c:	ef 91       	pop	r30
    548e:	bf 91       	pop	r27
    5490:	af 91       	pop	r26
    5492:	9f 91       	pop	r25
    5494:	8f 91       	pop	r24
    5496:	7f 91       	pop	r23
    5498:	6f 91       	pop	r22
    549a:	5f 91       	pop	r21
    549c:	4f 91       	pop	r20
    549e:	3f 91       	pop	r19
    54a0:	2f 91       	pop	r18
    54a2:	0f 90       	pop	r0
    54a4:	0b be       	out	0x3b, r0	; 59
    54a6:	0f 90       	pop	r0
    54a8:	0f be       	out	0x3f, r0	; 63
    54aa:	0f 90       	pop	r0
    54ac:	1f 90       	pop	r1
    54ae:	18 95       	reti

000054b0 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    54b0:	1f 92       	push	r1
    54b2:	0f 92       	push	r0
    54b4:	0f b6       	in	r0, 0x3f	; 63
    54b6:	0f 92       	push	r0
    54b8:	11 24       	eor	r1, r1
    54ba:	0b b6       	in	r0, 0x3b	; 59
    54bc:	0f 92       	push	r0
    54be:	2f 93       	push	r18
    54c0:	3f 93       	push	r19
    54c2:	4f 93       	push	r20
    54c4:	5f 93       	push	r21
    54c6:	6f 93       	push	r22
    54c8:	7f 93       	push	r23
    54ca:	8f 93       	push	r24
    54cc:	9f 93       	push	r25
    54ce:	af 93       	push	r26
    54d0:	bf 93       	push	r27
    54d2:	ef 93       	push	r30
    54d4:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    54d6:	e0 91 3b 62 	lds	r30, 0x623B
    54da:	f0 91 3c 62 	lds	r31, 0x623C
    54de:	30 97       	sbiw	r30, 0x00	; 0
    54e0:	09 f0       	breq	.+2      	; 0x54e4 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    54e2:	19 95       	eicall
	}
}
    54e4:	ff 91       	pop	r31
    54e6:	ef 91       	pop	r30
    54e8:	bf 91       	pop	r27
    54ea:	af 91       	pop	r26
    54ec:	9f 91       	pop	r25
    54ee:	8f 91       	pop	r24
    54f0:	7f 91       	pop	r23
    54f2:	6f 91       	pop	r22
    54f4:	5f 91       	pop	r21
    54f6:	4f 91       	pop	r20
    54f8:	3f 91       	pop	r19
    54fa:	2f 91       	pop	r18
    54fc:	0f 90       	pop	r0
    54fe:	0b be       	out	0x3b, r0	; 59
    5500:	0f 90       	pop	r0
    5502:	0f be       	out	0x3f, r0	; 63
    5504:	0f 90       	pop	r0
    5506:	1f 90       	pop	r1
    5508:	18 95       	reti

0000550a <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    550a:	1f 92       	push	r1
    550c:	0f 92       	push	r0
    550e:	0f b6       	in	r0, 0x3f	; 63
    5510:	0f 92       	push	r0
    5512:	11 24       	eor	r1, r1
    5514:	0b b6       	in	r0, 0x3b	; 59
    5516:	0f 92       	push	r0
    5518:	2f 93       	push	r18
    551a:	3f 93       	push	r19
    551c:	4f 93       	push	r20
    551e:	5f 93       	push	r21
    5520:	6f 93       	push	r22
    5522:	7f 93       	push	r23
    5524:	8f 93       	push	r24
    5526:	9f 93       	push	r25
    5528:	af 93       	push	r26
    552a:	bf 93       	push	r27
    552c:	ef 93       	push	r30
    552e:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    5530:	e0 91 39 62 	lds	r30, 0x6239
    5534:	f0 91 3a 62 	lds	r31, 0x623A
    5538:	30 97       	sbiw	r30, 0x00	; 0
    553a:	09 f0       	breq	.+2      	; 0x553e <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    553c:	19 95       	eicall
	}
}
    553e:	ff 91       	pop	r31
    5540:	ef 91       	pop	r30
    5542:	bf 91       	pop	r27
    5544:	af 91       	pop	r26
    5546:	9f 91       	pop	r25
    5548:	8f 91       	pop	r24
    554a:	7f 91       	pop	r23
    554c:	6f 91       	pop	r22
    554e:	5f 91       	pop	r21
    5550:	4f 91       	pop	r20
    5552:	3f 91       	pop	r19
    5554:	2f 91       	pop	r18
    5556:	0f 90       	pop	r0
    5558:	0b be       	out	0x3b, r0	; 59
    555a:	0f 90       	pop	r0
    555c:	0f be       	out	0x3f, r0	; 63
    555e:	0f 90       	pop	r0
    5560:	1f 90       	pop	r1
    5562:	18 95       	reti

00005564 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    5564:	1f 92       	push	r1
    5566:	0f 92       	push	r0
    5568:	0f b6       	in	r0, 0x3f	; 63
    556a:	0f 92       	push	r0
    556c:	11 24       	eor	r1, r1
    556e:	0b b6       	in	r0, 0x3b	; 59
    5570:	0f 92       	push	r0
    5572:	2f 93       	push	r18
    5574:	3f 93       	push	r19
    5576:	4f 93       	push	r20
    5578:	5f 93       	push	r21
    557a:	6f 93       	push	r22
    557c:	7f 93       	push	r23
    557e:	8f 93       	push	r24
    5580:	9f 93       	push	r25
    5582:	af 93       	push	r26
    5584:	bf 93       	push	r27
    5586:	ef 93       	push	r30
    5588:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    558a:	e0 91 37 62 	lds	r30, 0x6237
    558e:	f0 91 38 62 	lds	r31, 0x6238
    5592:	30 97       	sbiw	r30, 0x00	; 0
    5594:	09 f0       	breq	.+2      	; 0x5598 <__vector_109+0x34>
		tc_tcf0_err_callback();
    5596:	19 95       	eicall
	}
}
    5598:	ff 91       	pop	r31
    559a:	ef 91       	pop	r30
    559c:	bf 91       	pop	r27
    559e:	af 91       	pop	r26
    55a0:	9f 91       	pop	r25
    55a2:	8f 91       	pop	r24
    55a4:	7f 91       	pop	r23
    55a6:	6f 91       	pop	r22
    55a8:	5f 91       	pop	r21
    55aa:	4f 91       	pop	r20
    55ac:	3f 91       	pop	r19
    55ae:	2f 91       	pop	r18
    55b0:	0f 90       	pop	r0
    55b2:	0b be       	out	0x3b, r0	; 59
    55b4:	0f 90       	pop	r0
    55b6:	0f be       	out	0x3f, r0	; 63
    55b8:	0f 90       	pop	r0
    55ba:	1f 90       	pop	r1
    55bc:	18 95       	reti

000055be <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    55be:	1f 92       	push	r1
    55c0:	0f 92       	push	r0
    55c2:	0f b6       	in	r0, 0x3f	; 63
    55c4:	0f 92       	push	r0
    55c6:	11 24       	eor	r1, r1
    55c8:	0b b6       	in	r0, 0x3b	; 59
    55ca:	0f 92       	push	r0
    55cc:	2f 93       	push	r18
    55ce:	3f 93       	push	r19
    55d0:	4f 93       	push	r20
    55d2:	5f 93       	push	r21
    55d4:	6f 93       	push	r22
    55d6:	7f 93       	push	r23
    55d8:	8f 93       	push	r24
    55da:	9f 93       	push	r25
    55dc:	af 93       	push	r26
    55de:	bf 93       	push	r27
    55e0:	ef 93       	push	r30
    55e2:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    55e4:	e0 91 35 62 	lds	r30, 0x6235
    55e8:	f0 91 36 62 	lds	r31, 0x6236
    55ec:	30 97       	sbiw	r30, 0x00	; 0
    55ee:	09 f0       	breq	.+2      	; 0x55f2 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    55f0:	19 95       	eicall
	}
}
    55f2:	ff 91       	pop	r31
    55f4:	ef 91       	pop	r30
    55f6:	bf 91       	pop	r27
    55f8:	af 91       	pop	r26
    55fa:	9f 91       	pop	r25
    55fc:	8f 91       	pop	r24
    55fe:	7f 91       	pop	r23
    5600:	6f 91       	pop	r22
    5602:	5f 91       	pop	r21
    5604:	4f 91       	pop	r20
    5606:	3f 91       	pop	r19
    5608:	2f 91       	pop	r18
    560a:	0f 90       	pop	r0
    560c:	0b be       	out	0x3b, r0	; 59
    560e:	0f 90       	pop	r0
    5610:	0f be       	out	0x3f, r0	; 63
    5612:	0f 90       	pop	r0
    5614:	1f 90       	pop	r1
    5616:	18 95       	reti

00005618 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    5618:	1f 92       	push	r1
    561a:	0f 92       	push	r0
    561c:	0f b6       	in	r0, 0x3f	; 63
    561e:	0f 92       	push	r0
    5620:	11 24       	eor	r1, r1
    5622:	0b b6       	in	r0, 0x3b	; 59
    5624:	0f 92       	push	r0
    5626:	2f 93       	push	r18
    5628:	3f 93       	push	r19
    562a:	4f 93       	push	r20
    562c:	5f 93       	push	r21
    562e:	6f 93       	push	r22
    5630:	7f 93       	push	r23
    5632:	8f 93       	push	r24
    5634:	9f 93       	push	r25
    5636:	af 93       	push	r26
    5638:	bf 93       	push	r27
    563a:	ef 93       	push	r30
    563c:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    563e:	e0 91 33 62 	lds	r30, 0x6233
    5642:	f0 91 34 62 	lds	r31, 0x6234
    5646:	30 97       	sbiw	r30, 0x00	; 0
    5648:	09 f0       	breq	.+2      	; 0x564c <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    564a:	19 95       	eicall
	}
}
    564c:	ff 91       	pop	r31
    564e:	ef 91       	pop	r30
    5650:	bf 91       	pop	r27
    5652:	af 91       	pop	r26
    5654:	9f 91       	pop	r25
    5656:	8f 91       	pop	r24
    5658:	7f 91       	pop	r23
    565a:	6f 91       	pop	r22
    565c:	5f 91       	pop	r21
    565e:	4f 91       	pop	r20
    5660:	3f 91       	pop	r19
    5662:	2f 91       	pop	r18
    5664:	0f 90       	pop	r0
    5666:	0b be       	out	0x3b, r0	; 59
    5668:	0f 90       	pop	r0
    566a:	0f be       	out	0x3f, r0	; 63
    566c:	0f 90       	pop	r0
    566e:	1f 90       	pop	r1
    5670:	18 95       	reti

00005672 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    5672:	1f 92       	push	r1
    5674:	0f 92       	push	r0
    5676:	0f b6       	in	r0, 0x3f	; 63
    5678:	0f 92       	push	r0
    567a:	11 24       	eor	r1, r1
    567c:	0b b6       	in	r0, 0x3b	; 59
    567e:	0f 92       	push	r0
    5680:	2f 93       	push	r18
    5682:	3f 93       	push	r19
    5684:	4f 93       	push	r20
    5686:	5f 93       	push	r21
    5688:	6f 93       	push	r22
    568a:	7f 93       	push	r23
    568c:	8f 93       	push	r24
    568e:	9f 93       	push	r25
    5690:	af 93       	push	r26
    5692:	bf 93       	push	r27
    5694:	ef 93       	push	r30
    5696:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    5698:	e0 91 31 62 	lds	r30, 0x6231
    569c:	f0 91 32 62 	lds	r31, 0x6232
    56a0:	30 97       	sbiw	r30, 0x00	; 0
    56a2:	09 f0       	breq	.+2      	; 0x56a6 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    56a4:	19 95       	eicall
	}
}
    56a6:	ff 91       	pop	r31
    56a8:	ef 91       	pop	r30
    56aa:	bf 91       	pop	r27
    56ac:	af 91       	pop	r26
    56ae:	9f 91       	pop	r25
    56b0:	8f 91       	pop	r24
    56b2:	7f 91       	pop	r23
    56b4:	6f 91       	pop	r22
    56b6:	5f 91       	pop	r21
    56b8:	4f 91       	pop	r20
    56ba:	3f 91       	pop	r19
    56bc:	2f 91       	pop	r18
    56be:	0f 90       	pop	r0
    56c0:	0b be       	out	0x3b, r0	; 59
    56c2:	0f 90       	pop	r0
    56c4:	0f be       	out	0x3f, r0	; 63
    56c6:	0f 90       	pop	r0
    56c8:	1f 90       	pop	r1
    56ca:	18 95       	reti

000056cc <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    56cc:	1f 92       	push	r1
    56ce:	0f 92       	push	r0
    56d0:	0f b6       	in	r0, 0x3f	; 63
    56d2:	0f 92       	push	r0
    56d4:	11 24       	eor	r1, r1
    56d6:	0b b6       	in	r0, 0x3b	; 59
    56d8:	0f 92       	push	r0
    56da:	2f 93       	push	r18
    56dc:	3f 93       	push	r19
    56de:	4f 93       	push	r20
    56e0:	5f 93       	push	r21
    56e2:	6f 93       	push	r22
    56e4:	7f 93       	push	r23
    56e6:	8f 93       	push	r24
    56e8:	9f 93       	push	r25
    56ea:	af 93       	push	r26
    56ec:	bf 93       	push	r27
    56ee:	ef 93       	push	r30
    56f0:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    56f2:	e0 91 2f 62 	lds	r30, 0x622F
    56f6:	f0 91 30 62 	lds	r31, 0x6230
    56fa:	30 97       	sbiw	r30, 0x00	; 0
    56fc:	09 f0       	breq	.+2      	; 0x5700 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    56fe:	19 95       	eicall
	}
}
    5700:	ff 91       	pop	r31
    5702:	ef 91       	pop	r30
    5704:	bf 91       	pop	r27
    5706:	af 91       	pop	r26
    5708:	9f 91       	pop	r25
    570a:	8f 91       	pop	r24
    570c:	7f 91       	pop	r23
    570e:	6f 91       	pop	r22
    5710:	5f 91       	pop	r21
    5712:	4f 91       	pop	r20
    5714:	3f 91       	pop	r19
    5716:	2f 91       	pop	r18
    5718:	0f 90       	pop	r0
    571a:	0b be       	out	0x3b, r0	; 59
    571c:	0f 90       	pop	r0
    571e:	0f be       	out	0x3f, r0	; 63
    5720:	0f 90       	pop	r0
    5722:	1f 90       	pop	r1
    5724:	18 95       	reti

00005726 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    5726:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    5728:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    572a:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    572c:	28 2f       	mov	r18, r24
    572e:	39 2f       	mov	r19, r25
    5730:	21 15       	cp	r18, r1
    5732:	88 e0       	ldi	r24, 0x08	; 8
    5734:	38 07       	cpc	r19, r24
    5736:	39 f4       	brne	.+14     	; 0x5746 <tc_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    5738:	61 e0       	ldi	r22, 0x01	; 1
    573a:	83 e0       	ldi	r24, 0x03	; 3
    573c:	50 d0       	rcall	.+160    	; 0x57de <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    573e:	64 e0       	ldi	r22, 0x04	; 4
    5740:	83 e0       	ldi	r24, 0x03	; 3
    5742:	4d d0       	rcall	.+154    	; 0x57de <sysclk_enable_module>
    5744:	2d c0       	rjmp	.+90     	; 0x57a0 <tc_enable+0x7a>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    5746:	20 34       	cpi	r18, 0x40	; 64
    5748:	88 e0       	ldi	r24, 0x08	; 8
    574a:	38 07       	cpc	r19, r24
    574c:	39 f4       	brne	.+14     	; 0x575c <tc_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    574e:	62 e0       	ldi	r22, 0x02	; 2
    5750:	83 e0       	ldi	r24, 0x03	; 3
    5752:	45 d0       	rcall	.+138    	; 0x57de <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    5754:	64 e0       	ldi	r22, 0x04	; 4
    5756:	83 e0       	ldi	r24, 0x03	; 3
    5758:	42 d0       	rcall	.+132    	; 0x57de <sysclk_enable_module>
    575a:	22 c0       	rjmp	.+68     	; 0x57a0 <tc_enable+0x7a>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    575c:	21 15       	cp	r18, r1
    575e:	89 e0       	ldi	r24, 0x09	; 9
    5760:	38 07       	cpc	r19, r24
    5762:	39 f4       	brne	.+14     	; 0x5772 <tc_enable+0x4c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    5764:	61 e0       	ldi	r22, 0x01	; 1
    5766:	84 e0       	ldi	r24, 0x04	; 4
    5768:	3a d0       	rcall	.+116    	; 0x57de <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    576a:	64 e0       	ldi	r22, 0x04	; 4
    576c:	84 e0       	ldi	r24, 0x04	; 4
    576e:	37 d0       	rcall	.+110    	; 0x57de <sysclk_enable_module>
    5770:	17 c0       	rjmp	.+46     	; 0x57a0 <tc_enable+0x7a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    5772:	21 15       	cp	r18, r1
    5774:	8a e0       	ldi	r24, 0x0A	; 10
    5776:	38 07       	cpc	r19, r24
    5778:	39 f4       	brne	.+14     	; 0x5788 <tc_enable+0x62>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    577a:	61 e0       	ldi	r22, 0x01	; 1
    577c:	85 e0       	ldi	r24, 0x05	; 5
    577e:	2f d0       	rcall	.+94     	; 0x57de <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    5780:	64 e0       	ldi	r22, 0x04	; 4
    5782:	85 e0       	ldi	r24, 0x05	; 5
    5784:	2c d0       	rcall	.+88     	; 0x57de <sysclk_enable_module>
    5786:	0c c0       	rjmp	.+24     	; 0x57a0 <tc_enable+0x7a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    5788:	21 15       	cp	r18, r1
    578a:	3b 40       	sbci	r19, 0x0B	; 11
    578c:	39 f4       	brne	.+14     	; 0x579c <tc_enable+0x76>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    578e:	61 e0       	ldi	r22, 0x01	; 1
    5790:	86 e0       	ldi	r24, 0x06	; 6
    5792:	25 d0       	rcall	.+74     	; 0x57de <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    5794:	64 e0       	ldi	r22, 0x04	; 4
    5796:	86 e0       	ldi	r24, 0x06	; 6
    5798:	22 d0       	rcall	.+68     	; 0x57de <sysclk_enable_module>
    579a:	02 c0       	rjmp	.+4      	; 0x57a0 <tc_enable+0x7a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    579c:	cf bf       	out	0x3f, r28	; 63
    579e:	09 c0       	rjmp	.+18     	; 0x57b2 <tc_enable+0x8c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    57a0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    57a2:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    57a4:	e8 e8       	ldi	r30, 0x88	; 136
    57a6:	f2 e6       	ldi	r31, 0x62	; 98
    57a8:	90 81       	ld	r25, Z
    57aa:	9f 5f       	subi	r25, 0xFF	; 255
    57ac:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    57ae:	8f bf       	out	0x3f, r24	; 63
    57b0:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    57b2:	cf 91       	pop	r28
    57b4:	08 95       	ret

000057b6 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    57b6:	8f ef       	ldi	r24, 0xFF	; 255
    57b8:	80 93 70 00 	sts	0x0070, r24
    57bc:	80 93 71 00 	sts	0x0071, r24
    57c0:	80 93 72 00 	sts	0x0072, r24
    57c4:	80 93 73 00 	sts	0x0073, r24
    57c8:	80 93 74 00 	sts	0x0074, r24
    57cc:	80 93 75 00 	sts	0x0075, r24
    57d0:	80 93 76 00 	sts	0x0076, r24
    57d4:	61 e0       	ldi	r22, 0x01	; 1
    57d6:	81 e4       	ldi	r24, 0x41	; 65
    57d8:	90 e0       	ldi	r25, 0x00	; 0
    57da:	22 c0       	rjmp	.+68     	; 0x5820 <ccp_write_io>
    57dc:	08 95       	ret

000057de <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    57de:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    57e0:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    57e2:	e8 2f       	mov	r30, r24
    57e4:	f0 e0       	ldi	r31, 0x00	; 0
    57e6:	e0 59       	subi	r30, 0x90	; 144
    57e8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ea:	60 95       	com	r22
    57ec:	80 81       	ld	r24, Z
    57ee:	68 23       	and	r22, r24
    57f0:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    57f2:	9f bf       	out	0x3f, r25	; 63
    57f4:	08 95       	ret

000057f6 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    57f6:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    57f8:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    57fa:	e8 2f       	mov	r30, r24
    57fc:	f0 e0       	ldi	r31, 0x00	; 0
    57fe:	e0 59       	subi	r30, 0x90	; 144
    5800:	ff 4f       	sbci	r31, 0xFF	; 255
    5802:	80 81       	ld	r24, Z
    5804:	68 2b       	or	r22, r24
    5806:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5808:	9f bf       	out	0x3f, r25	; 63
    580a:	08 95       	ret

0000580c <nvm_read_byte>:
    580c:	40 91 ca 01 	lds	r20, 0x01CA
    5810:	e6 2f       	mov	r30, r22
    5812:	f7 2f       	mov	r31, r23
    5814:	80 93 ca 01 	sts	0x01CA, r24
    5818:	84 91       	lpm	r24, Z
    581a:	40 93 ca 01 	sts	0x01CA, r20
    581e:	08 95       	ret

00005820 <ccp_write_io>:
    5820:	1b be       	out	0x3b, r1	; 59
    5822:	fc 01       	movw	r30, r24
    5824:	28 ed       	ldi	r18, 0xD8	; 216
    5826:	24 bf       	out	0x34, r18	; 52
    5828:	60 83       	st	Z, r22
    582a:	08 95       	ret

0000582c <ioport_configure_port_pin>:
    582c:	cf 93       	push	r28
    582e:	df 93       	push	r29
    5830:	fc 01       	movw	r30, r24
    5832:	70 96       	adiw	r30, 0x10	; 16
    5834:	20 e0       	ldi	r18, 0x00	; 0
    5836:	30 e0       	ldi	r19, 0x00	; 0
    5838:	c6 2f       	mov	r28, r22
    583a:	d0 e0       	ldi	r29, 0x00	; 0
    583c:	de 01       	movw	r26, r28
    583e:	02 2e       	mov	r0, r18
    5840:	02 c0       	rjmp	.+4      	; 0x5846 <ioport_configure_port_pin+0x1a>
    5842:	b5 95       	asr	r27
    5844:	a7 95       	ror	r26
    5846:	0a 94       	dec	r0
    5848:	e2 f7       	brpl	.-8      	; 0x5842 <ioport_configure_port_pin+0x16>
    584a:	a0 fd       	sbrc	r26, 0
    584c:	50 83       	st	Z, r21
    584e:	2f 5f       	subi	r18, 0xFF	; 255
    5850:	3f 4f       	sbci	r19, 0xFF	; 255
    5852:	31 96       	adiw	r30, 0x01	; 1
    5854:	28 30       	cpi	r18, 0x08	; 8
    5856:	31 05       	cpc	r19, r1
    5858:	89 f7       	brne	.-30     	; 0x583c <ioport_configure_port_pin+0x10>
    585a:	40 ff       	sbrs	r20, 0
    585c:	0a c0       	rjmp	.+20     	; 0x5872 <ioport_configure_port_pin+0x46>
    585e:	41 ff       	sbrs	r20, 1
    5860:	03 c0       	rjmp	.+6      	; 0x5868 <ioport_configure_port_pin+0x3c>
    5862:	fc 01       	movw	r30, r24
    5864:	65 83       	std	Z+5, r22	; 0x05
    5866:	02 c0       	rjmp	.+4      	; 0x586c <ioport_configure_port_pin+0x40>
    5868:	fc 01       	movw	r30, r24
    586a:	66 83       	std	Z+6, r22	; 0x06
    586c:	fc 01       	movw	r30, r24
    586e:	61 83       	std	Z+1, r22	; 0x01
    5870:	02 c0       	rjmp	.+4      	; 0x5876 <ioport_configure_port_pin+0x4a>
    5872:	fc 01       	movw	r30, r24
    5874:	62 83       	std	Z+2, r22	; 0x02
    5876:	df 91       	pop	r29
    5878:	cf 91       	pop	r28
    587a:	08 95       	ret

0000587c <board_init>:
    587c:	43 e0       	ldi	r20, 0x03	; 3
    587e:	50 e0       	ldi	r21, 0x00	; 0
    5880:	61 e0       	ldi	r22, 0x01	; 1
    5882:	80 ee       	ldi	r24, 0xE0	; 224
    5884:	97 e0       	ldi	r25, 0x07	; 7
    5886:	d2 df       	rcall	.-92     	; 0x582c <ioport_configure_port_pin>
    5888:	43 e0       	ldi	r20, 0x03	; 3
    588a:	50 e0       	ldi	r21, 0x00	; 0
    588c:	62 e0       	ldi	r22, 0x02	; 2
    588e:	80 ee       	ldi	r24, 0xE0	; 224
    5890:	97 e0       	ldi	r25, 0x07	; 7
    5892:	cc df       	rcall	.-104    	; 0x582c <ioport_configure_port_pin>
    5894:	43 e0       	ldi	r20, 0x03	; 3
    5896:	50 e0       	ldi	r21, 0x00	; 0
    5898:	60 e1       	ldi	r22, 0x10	; 16
    589a:	80 e6       	ldi	r24, 0x60	; 96
    589c:	96 e0       	ldi	r25, 0x06	; 6
    589e:	c6 df       	rcall	.-116    	; 0x582c <ioport_configure_port_pin>
    58a0:	41 e0       	ldi	r20, 0x01	; 1
    58a2:	50 e4       	ldi	r21, 0x40	; 64
    58a4:	60 e2       	ldi	r22, 0x20	; 32
    58a6:	80 e6       	ldi	r24, 0x60	; 96
    58a8:	96 e0       	ldi	r25, 0x06	; 6
    58aa:	c0 df       	rcall	.-128    	; 0x582c <ioport_configure_port_pin>
    58ac:	40 e0       	ldi	r20, 0x00	; 0
    58ae:	5b e1       	ldi	r21, 0x1B	; 27
    58b0:	62 e0       	ldi	r22, 0x02	; 2
    58b2:	80 ea       	ldi	r24, 0xA0	; 160
    58b4:	96 e0       	ldi	r25, 0x06	; 6
    58b6:	ba df       	rcall	.-140    	; 0x582c <ioport_configure_port_pin>
    58b8:	40 e0       	ldi	r20, 0x00	; 0
    58ba:	5b e1       	ldi	r21, 0x1B	; 27
    58bc:	64 e0       	ldi	r22, 0x04	; 4
    58be:	80 ea       	ldi	r24, 0xA0	; 160
    58c0:	96 e0       	ldi	r25, 0x06	; 6
    58c2:	b4 df       	rcall	.-152    	; 0x582c <ioport_configure_port_pin>
    58c4:	43 e0       	ldi	r20, 0x03	; 3
    58c6:	50 e0       	ldi	r21, 0x00	; 0
    58c8:	68 e0       	ldi	r22, 0x08	; 8
    58ca:	80 ea       	ldi	r24, 0xA0	; 160
    58cc:	96 e0       	ldi	r25, 0x06	; 6
    58ce:	ae df       	rcall	.-164    	; 0x582c <ioport_configure_port_pin>
    58d0:	43 e0       	ldi	r20, 0x03	; 3
    58d2:	50 e0       	ldi	r21, 0x00	; 0
    58d4:	61 e0       	ldi	r22, 0x01	; 1
    58d6:	80 e6       	ldi	r24, 0x60	; 96
    58d8:	96 e0       	ldi	r25, 0x06	; 6
    58da:	a8 df       	rcall	.-176    	; 0x582c <ioport_configure_port_pin>
    58dc:	43 e0       	ldi	r20, 0x03	; 3
    58de:	50 e0       	ldi	r21, 0x00	; 0
    58e0:	68 e0       	ldi	r22, 0x08	; 8
    58e2:	80 e0       	ldi	r24, 0x00	; 0
    58e4:	96 e0       	ldi	r25, 0x06	; 6
    58e6:	a2 df       	rcall	.-188    	; 0x582c <ioport_configure_port_pin>
    58e8:	43 e0       	ldi	r20, 0x03	; 3
    58ea:	50 e0       	ldi	r21, 0x00	; 0
    58ec:	60 e2       	ldi	r22, 0x20	; 32
    58ee:	80 e8       	ldi	r24, 0x80	; 128
    58f0:	96 e0       	ldi	r25, 0x06	; 6
    58f2:	9c df       	rcall	.-200    	; 0x582c <ioport_configure_port_pin>
    58f4:	40 e0       	ldi	r20, 0x00	; 0
    58f6:	5b e1       	ldi	r21, 0x1B	; 27
    58f8:	60 e1       	ldi	r22, 0x10	; 16
    58fa:	80 e8       	ldi	r24, 0x80	; 128
    58fc:	96 e0       	ldi	r25, 0x06	; 6
    58fe:	96 df       	rcall	.-212    	; 0x582c <ioport_configure_port_pin>
    5900:	43 e0       	ldi	r20, 0x03	; 3
    5902:	50 e0       	ldi	r21, 0x00	; 0
    5904:	62 e0       	ldi	r22, 0x02	; 2
    5906:	80 e6       	ldi	r24, 0x60	; 96
    5908:	96 e0       	ldi	r25, 0x06	; 6
    590a:	90 df       	rcall	.-224    	; 0x582c <ioport_configure_port_pin>
    590c:	43 e0       	ldi	r20, 0x03	; 3
    590e:	50 e0       	ldi	r21, 0x00	; 0
    5910:	68 e0       	ldi	r22, 0x08	; 8
    5912:	80 e6       	ldi	r24, 0x60	; 96
    5914:	96 e0       	ldi	r25, 0x06	; 6
    5916:	8a df       	rcall	.-236    	; 0x582c <ioport_configure_port_pin>
    5918:	40 e0       	ldi	r20, 0x00	; 0
    591a:	50 e0       	ldi	r21, 0x00	; 0
    591c:	64 e0       	ldi	r22, 0x04	; 4
    591e:	80 e6       	ldi	r24, 0x60	; 96
    5920:	96 e0       	ldi	r25, 0x06	; 6
    5922:	84 df       	rcall	.-248    	; 0x582c <ioport_configure_port_pin>
    5924:	40 e0       	ldi	r20, 0x00	; 0
    5926:	50 e0       	ldi	r21, 0x00	; 0
    5928:	61 e0       	ldi	r22, 0x01	; 1
    592a:	80 e0       	ldi	r24, 0x00	; 0
    592c:	96 e0       	ldi	r25, 0x06	; 6
    592e:	7e df       	rcall	.-260    	; 0x582c <ioport_configure_port_pin>
    5930:	40 e0       	ldi	r20, 0x00	; 0
    5932:	50 e0       	ldi	r21, 0x00	; 0
    5934:	62 e0       	ldi	r22, 0x02	; 2
    5936:	80 e0       	ldi	r24, 0x00	; 0
    5938:	96 e0       	ldi	r25, 0x06	; 6
    593a:	78 df       	rcall	.-272    	; 0x582c <ioport_configure_port_pin>
    593c:	40 e0       	ldi	r20, 0x00	; 0
    593e:	50 e0       	ldi	r21, 0x00	; 0
    5940:	64 e0       	ldi	r22, 0x04	; 4
    5942:	80 e0       	ldi	r24, 0x00	; 0
    5944:	96 e0       	ldi	r25, 0x06	; 6
    5946:	72 df       	rcall	.-284    	; 0x582c <ioport_configure_port_pin>
    5948:	41 e0       	ldi	r20, 0x01	; 1
    594a:	50 e0       	ldi	r21, 0x00	; 0
    594c:	61 e0       	ldi	r22, 0x01	; 1
    594e:	80 ea       	ldi	r24, 0xA0	; 160
    5950:	96 e0       	ldi	r25, 0x06	; 6
    5952:	6c df       	rcall	.-296    	; 0x582c <ioport_configure_port_pin>
    5954:	43 e0       	ldi	r20, 0x03	; 3
    5956:	50 e0       	ldi	r21, 0x00	; 0
    5958:	68 e0       	ldi	r22, 0x08	; 8
    595a:	80 e4       	ldi	r24, 0x40	; 64
    595c:	96 e0       	ldi	r25, 0x06	; 6
    595e:	66 df       	rcall	.-308    	; 0x582c <ioport_configure_port_pin>
    5960:	40 e0       	ldi	r20, 0x00	; 0
    5962:	50 e0       	ldi	r21, 0x00	; 0
    5964:	64 e0       	ldi	r22, 0x04	; 4
    5966:	80 e4       	ldi	r24, 0x40	; 64
    5968:	96 e0       	ldi	r25, 0x06	; 6
    596a:	60 df       	rcall	.-320    	; 0x582c <ioport_configure_port_pin>
    596c:	43 e0       	ldi	r20, 0x03	; 3
    596e:	50 e0       	ldi	r21, 0x00	; 0
    5970:	68 e0       	ldi	r22, 0x08	; 8
    5972:	80 e6       	ldi	r24, 0x60	; 96
    5974:	96 e0       	ldi	r25, 0x06	; 6
    5976:	5a df       	rcall	.-332    	; 0x582c <ioport_configure_port_pin>
    5978:	40 e0       	ldi	r20, 0x00	; 0
    597a:	50 e0       	ldi	r21, 0x00	; 0
    597c:	64 e0       	ldi	r22, 0x04	; 4
    597e:	80 e6       	ldi	r24, 0x60	; 96
    5980:	96 e0       	ldi	r25, 0x06	; 6
    5982:	54 df       	rcall	.-344    	; 0x582c <ioport_configure_port_pin>
    5984:	43 e0       	ldi	r20, 0x03	; 3
    5986:	50 e0       	ldi	r21, 0x00	; 0
    5988:	68 e0       	ldi	r22, 0x08	; 8
    598a:	80 e8       	ldi	r24, 0x80	; 128
    598c:	96 e0       	ldi	r25, 0x06	; 6
    598e:	4e df       	rcall	.-356    	; 0x582c <ioport_configure_port_pin>
    5990:	40 e0       	ldi	r20, 0x00	; 0
    5992:	50 e0       	ldi	r21, 0x00	; 0
    5994:	64 e0       	ldi	r22, 0x04	; 4
    5996:	80 e8       	ldi	r24, 0x80	; 128
    5998:	96 e0       	ldi	r25, 0x06	; 6
    599a:	48 cf       	rjmp	.-368    	; 0x582c <ioport_configure_port_pin>
    599c:	08 95       	ret

0000599e <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    599e:	cf 92       	push	r12
    59a0:	df 92       	push	r13
    59a2:	ef 92       	push	r14
    59a4:	ff 92       	push	r15
    59a6:	cf 93       	push	r28
    59a8:	df 93       	push	r29
    59aa:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    59ac:	6b 01       	movw	r12, r22
    59ae:	e1 2c       	mov	r14, r1
    59b0:	f1 2c       	mov	r15, r1
    59b2:	60 e4       	ldi	r22, 0x40	; 64
    59b4:	72 e4       	ldi	r23, 0x42	; 66
    59b6:	8f e0       	ldi	r24, 0x0F	; 15
    59b8:	90 e0       	ldi	r25, 0x00	; 0
    59ba:	a7 01       	movw	r20, r14
    59bc:	96 01       	movw	r18, r12
    59be:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <__udivmodsi4>
    59c2:	ca 01       	movw	r24, r20
    59c4:	b9 01       	movw	r22, r18
    59c6:	2f ef       	ldi	r18, 0xFF	; 255
    59c8:	3f ef       	ldi	r19, 0xFF	; 255
    59ca:	40 e0       	ldi	r20, 0x00	; 0
    59cc:	50 e0       	ldi	r21, 0x00	; 0
    59ce:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <__udivmodsi4>
	if (smallest_div < 1) {
    59d2:	21 15       	cp	r18, r1
    59d4:	31 05       	cpc	r19, r1
    59d6:	29 f4       	brne	.+10     	; 0x59e2 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    59d8:	81 e0       	ldi	r24, 0x01	; 1
    59da:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    59dc:	21 e0       	ldi	r18, 0x01	; 1
    59de:	30 e0       	ldi	r19, 0x00	; 0
    59e0:	2d c0       	rjmp	.+90     	; 0x5a3c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    59e2:	22 30       	cpi	r18, 0x02	; 2
    59e4:	31 05       	cpc	r19, r1
    59e6:	28 f4       	brcc	.+10     	; 0x59f2 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    59e8:	82 e0       	ldi	r24, 0x02	; 2
    59ea:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    59ec:	22 e0       	ldi	r18, 0x02	; 2
    59ee:	30 e0       	ldi	r19, 0x00	; 0
    59f0:	25 c0       	rjmp	.+74     	; 0x5a3c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    59f2:	24 30       	cpi	r18, 0x04	; 4
    59f4:	31 05       	cpc	r19, r1
    59f6:	28 f4       	brcc	.+10     	; 0x5a02 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    59f8:	83 e0       	ldi	r24, 0x03	; 3
    59fa:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    59fc:	24 e0       	ldi	r18, 0x04	; 4
    59fe:	30 e0       	ldi	r19, 0x00	; 0
    5a00:	1d c0       	rjmp	.+58     	; 0x5a3c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    5a02:	28 30       	cpi	r18, 0x08	; 8
    5a04:	31 05       	cpc	r19, r1
    5a06:	28 f4       	brcc	.+10     	; 0x5a12 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    5a08:	84 e0       	ldi	r24, 0x04	; 4
    5a0a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    5a0c:	28 e0       	ldi	r18, 0x08	; 8
    5a0e:	30 e0       	ldi	r19, 0x00	; 0
    5a10:	15 c0       	rjmp	.+42     	; 0x5a3c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    5a12:	20 34       	cpi	r18, 0x40	; 64
    5a14:	31 05       	cpc	r19, r1
    5a16:	28 f4       	brcc	.+10     	; 0x5a22 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    5a18:	85 e0       	ldi	r24, 0x05	; 5
    5a1a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    5a1c:	20 e4       	ldi	r18, 0x40	; 64
    5a1e:	30 e0       	ldi	r19, 0x00	; 0
    5a20:	0d c0       	rjmp	.+26     	; 0x5a3c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    5a22:	2f 3f       	cpi	r18, 0xFF	; 255
    5a24:	31 05       	cpc	r19, r1
    5a26:	09 f0       	breq	.+2      	; 0x5a2a <pwm_set_frequency+0x8c>
    5a28:	28 f4       	brcc	.+10     	; 0x5a34 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    5a2a:	86 e0       	ldi	r24, 0x06	; 6
    5a2c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    5a2e:	20 e0       	ldi	r18, 0x00	; 0
    5a30:	31 e0       	ldi	r19, 0x01	; 1
    5a32:	04 c0       	rjmp	.+8      	; 0x5a3c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    5a34:	87 e0       	ldi	r24, 0x07	; 7
    5a36:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    5a38:	20 e0       	ldi	r18, 0x00	; 0
    5a3a:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    5a3c:	40 e0       	ldi	r20, 0x00	; 0
    5a3e:	50 e0       	ldi	r21, 0x00	; 0
    5a40:	60 e4       	ldi	r22, 0x40	; 64
    5a42:	72 e4       	ldi	r23, 0x42	; 66
    5a44:	8f e0       	ldi	r24, 0x0F	; 15
    5a46:	90 e0       	ldi	r25, 0x00	; 0
    5a48:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <__udivmodsi4>
    5a4c:	ca 01       	movw	r24, r20
    5a4e:	b9 01       	movw	r22, r18
    5a50:	a7 01       	movw	r20, r14
    5a52:	96 01       	movw	r18, r12
    5a54:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <__udivmodsi4>
    5a58:	2d 83       	std	Y+5, r18	; 0x05
    5a5a:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    5a5c:	24 36       	cpi	r18, 0x64	; 100
    5a5e:	31 05       	cpc	r19, r1
    5a60:	18 f4       	brcc	.+6      	; 0x5a68 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    5a62:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    5a64:	1d 82       	std	Y+5, r1	; 0x05
    5a66:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    5a68:	df 91       	pop	r29
    5a6a:	cf 91       	pop	r28
    5a6c:	ff 90       	pop	r15
    5a6e:	ef 90       	pop	r14
    5a70:	df 90       	pop	r13
    5a72:	cf 90       	pop	r12
    5a74:	08 95       	ret

00005a76 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    5a76:	0f 93       	push	r16
    5a78:	1f 93       	push	r17
    5a7a:	cf 93       	push	r28
    5a7c:	df 93       	push	r29
    5a7e:	ec 01       	movw	r28, r24
    5a80:	89 01       	movw	r16, r18
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
	UNUSED(num_chan);

	/* Set TC and correct I/O pin to output */
	switch (tc) {
    5a82:	62 30       	cpi	r22, 0x02	; 2
    5a84:	b9 f1       	breq	.+110    	; 0x5af4 <pwm_init+0x7e>
    5a86:	28 f4       	brcc	.+10     	; 0x5a92 <pwm_init+0x1c>
    5a88:	66 23       	and	r22, r22
    5a8a:	51 f0       	breq	.+20     	; 0x5aa0 <pwm_init+0x2a>
    5a8c:	61 30       	cpi	r22, 0x01	; 1
    5a8e:	e9 f0       	breq	.+58     	; 0x5aca <pwm_init+0x54>
    5a90:	6f c0       	rjmp	.+222    	; 0x5b70 <pwm_init+0xfa>
    5a92:	64 30       	cpi	r22, 0x04	; 4
    5a94:	09 f4       	brne	.+2      	; 0x5a98 <pwm_init+0x22>
    5a96:	43 c0       	rjmp	.+134    	; 0x5b1e <pwm_init+0xa8>
    5a98:	66 30       	cpi	r22, 0x06	; 6
    5a9a:	09 f4       	brne	.+2      	; 0x5a9e <pwm_init+0x28>
    5a9c:	55 c0       	rjmp	.+170    	; 0x5b48 <pwm_init+0xd2>
    5a9e:	68 c0       	rjmp	.+208    	; 0x5b70 <pwm_init+0xfa>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    5aa0:	80 e0       	ldi	r24, 0x00	; 0
    5aa2:	98 e0       	ldi	r25, 0x08	; 8
    5aa4:	88 83       	st	Y, r24
    5aa6:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    5aa8:	e0 e4       	ldi	r30, 0x40	; 64
    5aaa:	f6 e0       	ldi	r31, 0x06	; 6
    5aac:	50 81       	ld	r21, Z
    5aae:	21 e0       	ldi	r18, 0x01	; 1
    5ab0:	30 e0       	ldi	r19, 0x00	; 0
    5ab2:	8f ef       	ldi	r24, 0xFF	; 255
    5ab4:	84 0f       	add	r24, r20
    5ab6:	b9 01       	movw	r22, r18
    5ab8:	02 c0       	rjmp	.+4      	; 0x5abe <pwm_init+0x48>
    5aba:	66 0f       	add	r22, r22
    5abc:	77 1f       	adc	r23, r23
    5abe:	8a 95       	dec	r24
    5ac0:	e2 f7       	brpl	.-8      	; 0x5aba <pwm_init+0x44>
    5ac2:	cb 01       	movw	r24, r22
    5ac4:	85 2b       	or	r24, r21
    5ac6:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    5ac8:	53 c0       	rjmp	.+166    	; 0x5b70 <pwm_init+0xfa>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    5aca:	80 e4       	ldi	r24, 0x40	; 64
    5acc:	98 e0       	ldi	r25, 0x08	; 8
    5ace:	88 83       	st	Y, r24
    5ad0:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    5ad2:	e0 e4       	ldi	r30, 0x40	; 64
    5ad4:	f6 e0       	ldi	r31, 0x06	; 6
    5ad6:	50 81       	ld	r21, Z
    5ad8:	21 e0       	ldi	r18, 0x01	; 1
    5ada:	30 e0       	ldi	r19, 0x00	; 0
    5adc:	83 e0       	ldi	r24, 0x03	; 3
    5ade:	84 0f       	add	r24, r20
    5ae0:	b9 01       	movw	r22, r18
    5ae2:	02 c0       	rjmp	.+4      	; 0x5ae8 <pwm_init+0x72>
    5ae4:	66 0f       	add	r22, r22
    5ae6:	77 1f       	adc	r23, r23
    5ae8:	8a 95       	dec	r24
    5aea:	e2 f7       	brpl	.-8      	; 0x5ae4 <pwm_init+0x6e>
    5aec:	cb 01       	movw	r24, r22
    5aee:	85 2b       	or	r24, r21
    5af0:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    5af2:	3e c0       	rjmp	.+124    	; 0x5b70 <pwm_init+0xfa>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    5af4:	80 e0       	ldi	r24, 0x00	; 0
    5af6:	99 e0       	ldi	r25, 0x09	; 9
    5af8:	88 83       	st	Y, r24
    5afa:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    5afc:	e0 e6       	ldi	r30, 0x60	; 96
    5afe:	f6 e0       	ldi	r31, 0x06	; 6
    5b00:	50 81       	ld	r21, Z
    5b02:	21 e0       	ldi	r18, 0x01	; 1
    5b04:	30 e0       	ldi	r19, 0x00	; 0
    5b06:	8f ef       	ldi	r24, 0xFF	; 255
    5b08:	84 0f       	add	r24, r20
    5b0a:	b9 01       	movw	r22, r18
    5b0c:	02 c0       	rjmp	.+4      	; 0x5b12 <pwm_init+0x9c>
    5b0e:	66 0f       	add	r22, r22
    5b10:	77 1f       	adc	r23, r23
    5b12:	8a 95       	dec	r24
    5b14:	e2 f7       	brpl	.-8      	; 0x5b0e <pwm_init+0x98>
    5b16:	cb 01       	movw	r24, r22
    5b18:	85 2b       	or	r24, r21
    5b1a:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    5b1c:	29 c0       	rjmp	.+82     	; 0x5b70 <pwm_init+0xfa>
		break;
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    5b1e:	80 e0       	ldi	r24, 0x00	; 0
    5b20:	9a e0       	ldi	r25, 0x0A	; 10
    5b22:	88 83       	st	Y, r24
    5b24:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    5b26:	e0 e8       	ldi	r30, 0x80	; 128
    5b28:	f6 e0       	ldi	r31, 0x06	; 6
    5b2a:	50 81       	ld	r21, Z
    5b2c:	21 e0       	ldi	r18, 0x01	; 1
    5b2e:	30 e0       	ldi	r19, 0x00	; 0
    5b30:	8f ef       	ldi	r24, 0xFF	; 255
    5b32:	84 0f       	add	r24, r20
    5b34:	b9 01       	movw	r22, r18
    5b36:	02 c0       	rjmp	.+4      	; 0x5b3c <pwm_init+0xc6>
    5b38:	66 0f       	add	r22, r22
    5b3a:	77 1f       	adc	r23, r23
    5b3c:	8a 95       	dec	r24
    5b3e:	e2 f7       	brpl	.-8      	; 0x5b38 <pwm_init+0xc2>
    5b40:	cb 01       	movw	r24, r22
    5b42:	85 2b       	or	r24, r21
    5b44:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    5b46:	14 c0       	rjmp	.+40     	; 0x5b70 <pwm_init+0xfa>
		break;
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    5b48:	80 e0       	ldi	r24, 0x00	; 0
    5b4a:	9b e0       	ldi	r25, 0x0B	; 11
    5b4c:	88 83       	st	Y, r24
    5b4e:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    5b50:	e0 ea       	ldi	r30, 0xA0	; 160
    5b52:	f6 e0       	ldi	r31, 0x06	; 6
    5b54:	50 81       	ld	r21, Z
    5b56:	21 e0       	ldi	r18, 0x01	; 1
    5b58:	30 e0       	ldi	r19, 0x00	; 0
    5b5a:	8f ef       	ldi	r24, 0xFF	; 255
    5b5c:	84 0f       	add	r24, r20
    5b5e:	b9 01       	movw	r22, r18
    5b60:	02 c0       	rjmp	.+4      	; 0x5b66 <pwm_init+0xf0>
    5b62:	66 0f       	add	r22, r22
    5b64:	77 1f       	adc	r23, r23
    5b66:	8a 95       	dec	r24
    5b68:	e2 f7       	brpl	.-8      	; 0x5b62 <pwm_init+0xec>
    5b6a:	cb 01       	movw	r24, r22
    5b6c:	85 2b       	or	r24, r21
    5b6e:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    5b70:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    5b72:	42 30       	cpi	r20, 0x02	; 2
    5b74:	61 f0       	breq	.+24     	; 0x5b8e <pwm_init+0x118>
    5b76:	18 f4       	brcc	.+6      	; 0x5b7e <pwm_init+0x108>
    5b78:	41 30       	cpi	r20, 0x01	; 1
    5b7a:	31 f0       	breq	.+12     	; 0x5b88 <pwm_init+0x112>
    5b7c:	10 c0       	rjmp	.+32     	; 0x5b9e <pwm_init+0x128>
    5b7e:	43 30       	cpi	r20, 0x03	; 3
    5b80:	49 f0       	breq	.+18     	; 0x5b94 <pwm_init+0x11e>
    5b82:	44 30       	cpi	r20, 0x04	; 4
    5b84:	51 f0       	breq	.+20     	; 0x5b9a <pwm_init+0x124>
    5b86:	0b c0       	rjmp	.+22     	; 0x5b9e <pwm_init+0x128>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    5b88:	80 e1       	ldi	r24, 0x10	; 16
    5b8a:	8b 83       	std	Y+3, r24	; 0x03
		break;
    5b8c:	08 c0       	rjmp	.+16     	; 0x5b9e <pwm_init+0x128>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    5b8e:	80 e2       	ldi	r24, 0x20	; 32
    5b90:	8b 83       	std	Y+3, r24	; 0x03
		break;
    5b92:	05 c0       	rjmp	.+10     	; 0x5b9e <pwm_init+0x128>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    5b94:	80 e4       	ldi	r24, 0x40	; 64
    5b96:	8b 83       	std	Y+3, r24	; 0x03
		break;
    5b98:	02 c0       	rjmp	.+4      	; 0x5b9e <pwm_init+0x128>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    5b9a:	80 e8       	ldi	r24, 0x80	; 128
    5b9c:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    5b9e:	88 81       	ld	r24, Y
    5ba0:	99 81       	ldd	r25, Y+1	; 0x01
    5ba2:	c1 dd       	rcall	.-1150   	; 0x5726 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    5ba4:	e8 81       	ld	r30, Y
    5ba6:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    5ba8:	81 81       	ldd	r24, Z+1	; 0x01
    5baa:	88 7f       	andi	r24, 0xF8	; 248
    5bac:	83 60       	ori	r24, 0x03	; 3
    5bae:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    5bb0:	1d 82       	std	Y+5, r1	; 0x05
    5bb2:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    5bb4:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    5bb6:	e8 81       	ld	r30, Y
    5bb8:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    5bba:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    5bbc:	80 7f       	andi	r24, 0xF0	; 240
    5bbe:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    5bc0:	b8 01       	movw	r22, r16
    5bc2:	ce 01       	movw	r24, r28
    5bc4:	ec de       	rcall	.-552    	; 0x599e <pwm_set_frequency>
}
    5bc6:	df 91       	pop	r29
    5bc8:	cf 91       	pop	r28
    5bca:	1f 91       	pop	r17
    5bcc:	0f 91       	pop	r16
    5bce:	08 95       	ret

00005bd0 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    5bd0:	cf 93       	push	r28
    5bd2:	df 93       	push	r29
    5bd4:	ec 01       	movw	r28, r24
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
    5bd6:	ad 81       	ldd	r26, Y+5	; 0x05
    5bd8:	be 81       	ldd	r27, Y+6	; 0x06
    5bda:	26 2f       	mov	r18, r22
    5bdc:	30 e0       	ldi	r19, 0x00	; 0
    5bde:	0e 94 42 3d 	call	0x7a84	; 0x7a84 <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    5be2:	24 e6       	ldi	r18, 0x64	; 100
    5be4:	30 e0       	ldi	r19, 0x00	; 0
    5be6:	40 e0       	ldi	r20, 0x00	; 0
    5be8:	50 e0       	ldi	r21, 0x00	; 0
    5bea:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    5bee:	8a 81       	ldd	r24, Y+2	; 0x02
    5bf0:	e8 81       	ld	r30, Y
    5bf2:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    5bf4:	e6 fd       	sbrc	r30, 6
    5bf6:	17 c0       	rjmp	.+46     	; 0x5c26 <pwm_start+0x56>
		switch (channel_index) {
    5bf8:	82 30       	cpi	r24, 0x02	; 2
    5bfa:	61 f0       	breq	.+24     	; 0x5c14 <pwm_start+0x44>
    5bfc:	18 f4       	brcc	.+6      	; 0x5c04 <pwm_start+0x34>
    5bfe:	81 30       	cpi	r24, 0x01	; 1
    5c00:	31 f0       	breq	.+12     	; 0x5c0e <pwm_start+0x3e>
    5c02:	1b c0       	rjmp	.+54     	; 0x5c3a <pwm_start+0x6a>
    5c04:	83 30       	cpi	r24, 0x03	; 3
    5c06:	49 f0       	breq	.+18     	; 0x5c1a <pwm_start+0x4a>
    5c08:	84 30       	cpi	r24, 0x04	; 4
    5c0a:	51 f0       	breq	.+20     	; 0x5c20 <pwm_start+0x50>
    5c0c:	16 c0       	rjmp	.+44     	; 0x5c3a <pwm_start+0x6a>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    5c0e:	20 af       	std	Z+56, r18	; 0x38
    5c10:	31 af       	std	Z+57, r19	; 0x39
    5c12:	13 c0       	rjmp	.+38     	; 0x5c3a <pwm_start+0x6a>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    5c14:	22 af       	std	Z+58, r18	; 0x3a
    5c16:	33 af       	std	Z+59, r19	; 0x3b
    5c18:	10 c0       	rjmp	.+32     	; 0x5c3a <pwm_start+0x6a>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    5c1a:	24 af       	std	Z+60, r18	; 0x3c
    5c1c:	35 af       	std	Z+61, r19	; 0x3d
    5c1e:	0d c0       	rjmp	.+26     	; 0x5c3a <pwm_start+0x6a>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    5c20:	26 af       	std	Z+62, r18	; 0x3e
    5c22:	37 af       	std	Z+63, r19	; 0x3f
    5c24:	0a c0       	rjmp	.+20     	; 0x5c3a <pwm_start+0x6a>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    5c26:	81 30       	cpi	r24, 0x01	; 1
    5c28:	19 f0       	breq	.+6      	; 0x5c30 <pwm_start+0x60>
    5c2a:	82 30       	cpi	r24, 0x02	; 2
    5c2c:	21 f0       	breq	.+8      	; 0x5c36 <pwm_start+0x66>
    5c2e:	05 c0       	rjmp	.+10     	; 0x5c3a <pwm_start+0x6a>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    5c30:	20 af       	std	Z+56, r18	; 0x38
    5c32:	31 af       	std	Z+57, r19	; 0x39
    5c34:	02 c0       	rjmp	.+4      	; 0x5c3a <pwm_start+0x6a>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    5c36:	22 af       	std	Z+58, r18	; 0x3a
    5c38:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    5c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    5c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    5c3e:	e8 81       	ld	r30, Y
    5c40:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    5c42:	86 a3       	std	Z+38, r24	; 0x26
    5c44:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    5c46:	8b 81       	ldd	r24, Y+3	; 0x03
    5c48:	e8 81       	ld	r30, Y
    5c4a:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    5c4c:	e6 fd       	sbrc	r30, 6
    5c4e:	04 c0       	rjmp	.+8      	; 0x5c58 <pwm_start+0x88>
		((TC0_t *)tc)->CTRLB |= enablemask;
    5c50:	91 81       	ldd	r25, Z+1	; 0x01
    5c52:	89 2b       	or	r24, r25
    5c54:	81 83       	std	Z+1, r24	; 0x01
    5c56:	04 c0       	rjmp	.+8      	; 0x5c60 <pwm_start+0x90>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    5c58:	91 81       	ldd	r25, Z+1	; 0x01
    5c5a:	80 73       	andi	r24, 0x30	; 48
    5c5c:	89 2b       	or	r24, r25
    5c5e:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    5c60:	e8 81       	ld	r30, Y
    5c62:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    5c64:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    5c66:	80 7f       	andi	r24, 0xF0	; 240
    5c68:	9c 81       	ldd	r25, Y+4	; 0x04
    5c6a:	89 2b       	or	r24, r25
    5c6c:	80 83       	st	Z, r24
}
    5c6e:	df 91       	pop	r29
    5c70:	cf 91       	pop	r28
    5c72:	08 95       	ret

00005c74 <spi_init_pins>:
		
		tempColumn++;
		if (tempColumn%(MLCD_BYTES_LINE+1) == 0)	tempColumn = 1;
		tempRow = row;
	}
}
    5c74:	43 e0       	ldi	r20, 0x03	; 3
    5c76:	50 e0       	ldi	r21, 0x00	; 0
    5c78:	61 e0       	ldi	r22, 0x01	; 1
    5c7a:	80 e4       	ldi	r24, 0x40	; 64
    5c7c:	96 e0       	ldi	r25, 0x06	; 6
    5c7e:	d6 dd       	rcall	.-1108   	; 0x582c <ioport_configure_port_pin>
    5c80:	43 e0       	ldi	r20, 0x03	; 3
    5c82:	50 e0       	ldi	r21, 0x00	; 0
    5c84:	62 e0       	ldi	r22, 0x02	; 2
    5c86:	80 e4       	ldi	r24, 0x40	; 64
    5c88:	96 e0       	ldi	r25, 0x06	; 6
    5c8a:	d0 dd       	rcall	.-1120   	; 0x582c <ioport_configure_port_pin>
    5c8c:	40 e0       	ldi	r20, 0x00	; 0
    5c8e:	58 e1       	ldi	r21, 0x18	; 24
    5c90:	64 e0       	ldi	r22, 0x04	; 4
    5c92:	80 ea       	ldi	r24, 0xA0	; 160
    5c94:	96 e0       	ldi	r25, 0x06	; 6
    5c96:	ca dd       	rcall	.-1132   	; 0x582c <ioport_configure_port_pin>
    5c98:	40 e0       	ldi	r20, 0x00	; 0
    5c9a:	58 e1       	ldi	r21, 0x18	; 24
    5c9c:	68 e0       	ldi	r22, 0x08	; 8
    5c9e:	80 ea       	ldi	r24, 0xA0	; 160
    5ca0:	96 e0       	ldi	r25, 0x06	; 6
    5ca2:	c4 dd       	rcall	.-1144   	; 0x582c <ioport_configure_port_pin>
    5ca4:	40 e0       	ldi	r20, 0x00	; 0
    5ca6:	58 e1       	ldi	r21, 0x18	; 24
    5ca8:	60 e1       	ldi	r22, 0x10	; 16
    5caa:	80 ea       	ldi	r24, 0xA0	; 160
    5cac:	96 e0       	ldi	r25, 0x06	; 6
    5cae:	be dd       	rcall	.-1156   	; 0x582c <ioport_configure_port_pin>
    5cb0:	40 e0       	ldi	r20, 0x00	; 0
    5cb2:	58 e1       	ldi	r21, 0x18	; 24
    5cb4:	60 e2       	ldi	r22, 0x20	; 32
    5cb6:	80 ea       	ldi	r24, 0xA0	; 160
    5cb8:	96 e0       	ldi	r25, 0x06	; 6
    5cba:	b8 dd       	rcall	.-1168   	; 0x582c <ioport_configure_port_pin>
    5cbc:	43 e0       	ldi	r20, 0x03	; 3
    5cbe:	50 e0       	ldi	r21, 0x00	; 0
    5cc0:	60 e1       	ldi	r22, 0x10	; 16
    5cc2:	80 e4       	ldi	r24, 0x40	; 64
    5cc4:	96 e0       	ldi	r25, 0x06	; 6
    5cc6:	b2 dd       	rcall	.-1180   	; 0x582c <ioport_configure_port_pin>
    5cc8:	43 e0       	ldi	r20, 0x03	; 3
    5cca:	50 e0       	ldi	r21, 0x00	; 0
    5ccc:	60 e2       	ldi	r22, 0x20	; 32
    5cce:	80 e4       	ldi	r24, 0x40	; 64
    5cd0:	96 e0       	ldi	r25, 0x06	; 6
    5cd2:	ac dd       	rcall	.-1192   	; 0x582c <ioport_configure_port_pin>
    5cd4:	40 e0       	ldi	r20, 0x00	; 0
    5cd6:	50 e0       	ldi	r21, 0x00	; 0
    5cd8:	60 e4       	ldi	r22, 0x40	; 64
    5cda:	80 e4       	ldi	r24, 0x40	; 64
    5cdc:	96 e0       	ldi	r25, 0x06	; 6
    5cde:	a6 dd       	rcall	.-1204   	; 0x582c <ioport_configure_port_pin>
    5ce0:	43 e0       	ldi	r20, 0x03	; 3
    5ce2:	50 e0       	ldi	r21, 0x00	; 0
    5ce4:	60 e8       	ldi	r22, 0x80	; 128
    5ce6:	80 e4       	ldi	r24, 0x40	; 64
    5ce8:	96 e0       	ldi	r25, 0x06	; 6
    5cea:	a0 cd       	rjmp	.-1216   	; 0x582c <ioport_configure_port_pin>
    5cec:	08 95       	ret

00005cee <spi_init_module>:
    5cee:	cf 92       	push	r12
    5cf0:	df 92       	push	r13
    5cf2:	ef 92       	push	r14
    5cf4:	ff 92       	push	r15
    5cf6:	0f 93       	push	r16
    5cf8:	1f 93       	push	r17
    5cfa:	80 ec       	ldi	r24, 0xC0	; 192
    5cfc:	98 e0       	ldi	r25, 0x08	; 8
    5cfe:	0e 94 ee 25 	call	0x4bdc	; 0x4bdc <spi_master_init>
    5d02:	c1 2c       	mov	r12, r1
    5d04:	d1 2c       	mov	r13, r1
    5d06:	76 01       	movw	r14, r12
    5d08:	00 e8       	ldi	r16, 0x80	; 128
    5d0a:	14 e8       	ldi	r17, 0x84	; 132
    5d0c:	2e e1       	ldi	r18, 0x1E	; 30
    5d0e:	30 e0       	ldi	r19, 0x00	; 0
    5d10:	40 e0       	ldi	r20, 0x00	; 0
    5d12:	6b e0       	ldi	r22, 0x0B	; 11
    5d14:	70 e2       	ldi	r23, 0x20	; 32
    5d16:	80 ec       	ldi	r24, 0xC0	; 192
    5d18:	98 e0       	ldi	r25, 0x08	; 8
    5d1a:	0e 94 05 26 	call	0x4c0a	; 0x4c0a <spi_master_setup_device>
    5d1e:	e0 ec       	ldi	r30, 0xC0	; 192
    5d20:	f8 e0       	ldi	r31, 0x08	; 8
    5d22:	80 81       	ld	r24, Z
    5d24:	80 64       	ori	r24, 0x40	; 64
    5d26:	80 83       	st	Z, r24
    5d28:	1f 91       	pop	r17
    5d2a:	0f 91       	pop	r16
    5d2c:	ff 90       	pop	r15
    5d2e:	ef 90       	pop	r14
    5d30:	df 90       	pop	r13
    5d32:	cf 90       	pop	r12
    5d34:	08 95       	ret

00005d36 <MLCDInit>:
    5d36:	9e df       	rcall	.-196    	; 0x5c74 <spi_init_pins>
    5d38:	21 e0       	ldi	r18, 0x01	; 1
    5d3a:	30 e0       	ldi	r19, 0x00	; 0
    5d3c:	43 e0       	ldi	r20, 0x03	; 3
    5d3e:	60 e0       	ldi	r22, 0x00	; 0
    5d40:	8d e6       	ldi	r24, 0x6D	; 109
    5d42:	91 e9       	ldi	r25, 0x91	; 145
    5d44:	98 de       	rcall	.-720    	; 0x5a76 <pwm_init>
    5d46:	62 e3       	ldi	r22, 0x32	; 50
    5d48:	8d e6       	ldi	r24, 0x6D	; 109
    5d4a:	91 e9       	ldi	r25, 0x91	; 145
    5d4c:	41 df       	rcall	.-382    	; 0x5bd0 <pwm_start>
    5d4e:	cf cf       	rjmp	.-98     	; 0x5cee <spi_init_module>
    5d50:	08 95       	ret

00005d52 <MLCDTurnOn>:
    5d52:	81 e0       	ldi	r24, 0x01	; 1
    5d54:	e0 e4       	ldi	r30, 0x40	; 64
    5d56:	f6 e0       	ldi	r31, 0x06	; 6
    5d58:	85 83       	std	Z+5, r24	; 0x05
    5d5a:	08 95       	ret

00005d5c <MLCDSelect>:
    5d5c:	6b e0       	ldi	r22, 0x0B	; 11
    5d5e:	70 e2       	ldi	r23, 0x20	; 32
    5d60:	80 ec       	ldi	r24, 0xC0	; 192
    5d62:	98 e0       	ldi	r25, 0x08	; 8
    5d64:	0c 94 49 26 	jmp	0x4c92	; 0x4c92 <spi_deselect_device>
    5d68:	08 95       	ret

00005d6a <MLCDDeselect>:
    5d6a:	6b e0       	ldi	r22, 0x0B	; 11
    5d6c:	70 e2       	ldi	r23, 0x20	; 32
    5d6e:	80 ec       	ldi	r24, 0xC0	; 192
    5d70:	98 e0       	ldi	r25, 0x08	; 8
    5d72:	0c 94 33 26 	jmp	0x4c66	; 0x4c66 <spi_select_device>
    5d76:	08 95       	ret

00005d78 <MLCDClearAll>:
    5d78:	cf 93       	push	r28
    5d7a:	df 93       	push	r29
    5d7c:	1f 92       	push	r1
    5d7e:	1f 92       	push	r1
    5d80:	cd b7       	in	r28, 0x3d	; 61
    5d82:	de b7       	in	r29, 0x3e	; 62
    5d84:	80 e2       	ldi	r24, 0x20	; 32
    5d86:	89 83       	std	Y+1, r24	; 0x01
    5d88:	1a 82       	std	Y+2, r1	; 0x02
    5d8a:	e8 df       	rcall	.-48     	; 0x5d5c <MLCDSelect>
    5d8c:	42 e0       	ldi	r20, 0x02	; 2
    5d8e:	50 e0       	ldi	r21, 0x00	; 0
    5d90:	be 01       	movw	r22, r28
    5d92:	6f 5f       	subi	r22, 0xFF	; 255
    5d94:	7f 4f       	sbci	r23, 0xFF	; 255
    5d96:	80 ec       	ldi	r24, 0xC0	; 192
    5d98:	98 e0       	ldi	r25, 0x08	; 8
    5d9a:	0e 94 24 26 	call	0x4c48	; 0x4c48 <spi_write_packet>
    5d9e:	e0 ec       	ldi	r30, 0xC0	; 192
    5da0:	f8 e0       	ldi	r31, 0x08	; 8
    5da2:	82 81       	ldd	r24, Z+2	; 0x02
    5da4:	88 23       	and	r24, r24
    5da6:	ec f7       	brge	.-6      	; 0x5da2 <MLCDClearAll+0x2a>
    5da8:	e0 df       	rcall	.-64     	; 0x5d6a <MLCDDeselect>
    5daa:	40 ee       	ldi	r20, 0xE0	; 224
    5dac:	5e e2       	ldi	r21, 0x2E	; 46
    5dae:	6f ef       	ldi	r22, 0xFF	; 255
    5db0:	70 e0       	ldi	r23, 0x00	; 0
    5db2:	8d e8       	ldi	r24, 0x8D	; 141
    5db4:	92 e6       	ldi	r25, 0x62	; 98
    5db6:	0e 94 e9 3f 	call	0x7fd2	; 0x7fd2 <memset>
    5dba:	0f 90       	pop	r0
    5dbc:	0f 90       	pop	r0
    5dbe:	df 91       	pop	r29
    5dc0:	cf 91       	pop	r28
    5dc2:	08 95       	ret

00005dc4 <MLCDClearFrame>:
    5dc4:	40 ee       	ldi	r20, 0xE0	; 224
    5dc6:	5e e2       	ldi	r21, 0x2E	; 46
    5dc8:	6f ef       	ldi	r22, 0xFF	; 255
    5dca:	70 e0       	ldi	r23, 0x00	; 0
    5dcc:	8d e8       	ldi	r24, 0x8D	; 141
    5dce:	92 e6       	ldi	r25, 0x62	; 98
    5dd0:	0c 94 e9 3f 	jmp	0x7fd2	; 0x7fd2 <memset>
    5dd4:	08 95       	ret

00005dd6 <MLCDAddLine>:
    5dd6:	1f 93       	push	r17
    5dd8:	cf 93       	push	r28
    5dda:	df 93       	push	r29
    5ddc:	ec 01       	movw	r28, r24
    5dde:	16 2f       	mov	r17, r22
    5de0:	86 2f       	mov	r24, r22
    5de2:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <reverseByte>
    5de6:	e0 ec       	ldi	r30, 0xC0	; 192
    5de8:	f8 e0       	ldi	r31, 0x08	; 8
    5dea:	83 83       	std	Z+3, r24	; 0x03
    5dec:	a0 ec       	ldi	r26, 0xC0	; 192
    5dee:	b8 e0       	ldi	r27, 0x08	; 8
    5df0:	12 96       	adiw	r26, 0x02	; 2
    5df2:	9c 91       	ld	r25, X
    5df4:	12 97       	sbiw	r26, 0x02	; 2
    5df6:	99 23       	and	r25, r25
    5df8:	dc f7       	brge	.-10     	; 0x5df0 <MLCDAddLine+0x1a>
    5dfa:	42 e3       	ldi	r20, 0x32	; 50
    5dfc:	50 e0       	ldi	r21, 0x00	; 0
    5dfe:	be 01       	movw	r22, r28
    5e00:	80 ec       	ldi	r24, 0xC0	; 192
    5e02:	98 e0       	ldi	r25, 0x08	; 8
    5e04:	0e 94 24 26 	call	0x4c48	; 0x4c48 <spi_write_packet>
    5e08:	81 2f       	mov	r24, r17
    5e0a:	90 e0       	ldi	r25, 0x00	; 0
    5e0c:	01 97       	sbiw	r24, 0x01	; 1
    5e0e:	22 e3       	ldi	r18, 0x32	; 50
    5e10:	28 9f       	mul	r18, r24
    5e12:	d0 01       	movw	r26, r0
    5e14:	29 9f       	mul	r18, r25
    5e16:	b0 0d       	add	r27, r0
    5e18:	11 24       	eor	r1, r1
    5e1a:	a3 57       	subi	r26, 0x73	; 115
    5e1c:	bd 49       	sbci	r27, 0x9D	; 157
    5e1e:	82 e3       	ldi	r24, 0x32	; 50
    5e20:	fe 01       	movw	r30, r28
    5e22:	01 90       	ld	r0, Z+
    5e24:	0d 92       	st	X+, r0
    5e26:	8a 95       	dec	r24
    5e28:	e1 f7       	brne	.-8      	; 0x5e22 <MLCDAddLine+0x4c>
    5e2a:	e0 ec       	ldi	r30, 0xC0	; 192
    5e2c:	f8 e0       	ldi	r31, 0x08	; 8
    5e2e:	82 81       	ldd	r24, Z+2	; 0x02
    5e30:	88 23       	and	r24, r24
    5e32:	ec f7       	brge	.-6      	; 0x5e2e <MLCDAddLine+0x58>
    5e34:	e0 ec       	ldi	r30, 0xC0	; 192
    5e36:	f8 e0       	ldi	r31, 0x08	; 8
    5e38:	13 82       	std	Z+3, r1	; 0x03
    5e3a:	82 81       	ldd	r24, Z+2	; 0x02
    5e3c:	88 23       	and	r24, r24
    5e3e:	ec f7       	brge	.-6      	; 0x5e3a <MLCDAddLine+0x64>
    5e40:	df 91       	pop	r29
    5e42:	cf 91       	pop	r28
    5e44:	1f 91       	pop	r17
    5e46:	08 95       	ret

00005e48 <MLCDWriteLine>:
    5e48:	1f 93       	push	r17
    5e4a:	cf 93       	push	r28
    5e4c:	df 93       	push	r29
    5e4e:	ec 01       	movw	r28, r24
    5e50:	16 2f       	mov	r17, r22
    5e52:	84 df       	rcall	.-248    	; 0x5d5c <MLCDSelect>
    5e54:	80 e8       	ldi	r24, 0x80	; 128
    5e56:	e0 ec       	ldi	r30, 0xC0	; 192
    5e58:	f8 e0       	ldi	r31, 0x08	; 8
    5e5a:	83 83       	std	Z+3, r24	; 0x03
    5e5c:	82 81       	ldd	r24, Z+2	; 0x02
    5e5e:	88 23       	and	r24, r24
    5e60:	ec f7       	brge	.-6      	; 0x5e5c <MLCDWriteLine+0x14>
    5e62:	61 2f       	mov	r22, r17
    5e64:	ce 01       	movw	r24, r28
    5e66:	b7 df       	rcall	.-146    	; 0x5dd6 <MLCDAddLine>
    5e68:	e0 ec       	ldi	r30, 0xC0	; 192
    5e6a:	f8 e0       	ldi	r31, 0x08	; 8
    5e6c:	13 82       	std	Z+3, r1	; 0x03
    5e6e:	82 81       	ldd	r24, Z+2	; 0x02
    5e70:	88 23       	and	r24, r24
    5e72:	ec f7       	brge	.-6      	; 0x5e6e <MLCDWriteLine+0x26>
    5e74:	7a df       	rcall	.-268    	; 0x5d6a <MLCDDeselect>
    5e76:	df 91       	pop	r29
    5e78:	cf 91       	pop	r28
    5e7a:	1f 91       	pop	r17
    5e7c:	08 95       	ret

00005e7e <MLCDWriteFrame>:
    5e7e:	0f 93       	push	r16
    5e80:	1f 93       	push	r17
    5e82:	cf 93       	push	r28
    5e84:	df 93       	push	r29
    5e86:	08 2f       	mov	r16, r24
    5e88:	19 2f       	mov	r17, r25
    5e8a:	68 df       	rcall	.-304    	; 0x5d5c <MLCDSelect>
    5e8c:	80 e8       	ldi	r24, 0x80	; 128
    5e8e:	e0 ec       	ldi	r30, 0xC0	; 192
    5e90:	f8 e0       	ldi	r31, 0x08	; 8
    5e92:	83 83       	std	Z+3, r24	; 0x03
    5e94:	22 81       	ldd	r18, Z+2	; 0x02
    5e96:	22 23       	and	r18, r18
    5e98:	ec f7       	brge	.-6      	; 0x5e94 <MLCDWriteFrame+0x16>
    5e9a:	c0 2f       	mov	r28, r16
    5e9c:	d1 2f       	mov	r29, r17
    5e9e:	11 e0       	ldi	r17, 0x01	; 1
    5ea0:	61 2f       	mov	r22, r17
    5ea2:	ce 01       	movw	r24, r28
    5ea4:	98 df       	rcall	.-208    	; 0x5dd6 <MLCDAddLine>
    5ea6:	1f 5f       	subi	r17, 0xFF	; 255
    5ea8:	e2 96       	adiw	r28, 0x32	; 50
    5eaa:	11 3f       	cpi	r17, 0xF1	; 241
    5eac:	c9 f7       	brne	.-14     	; 0x5ea0 <MLCDWriteFrame+0x22>
    5eae:	e0 ec       	ldi	r30, 0xC0	; 192
    5eb0:	f8 e0       	ldi	r31, 0x08	; 8
    5eb2:	13 82       	std	Z+3, r1	; 0x03
    5eb4:	82 81       	ldd	r24, Z+2	; 0x02
    5eb6:	88 23       	and	r24, r24
    5eb8:	ec f7       	brge	.-6      	; 0x5eb4 <MLCDWriteFrame+0x36>
    5eba:	57 df       	rcall	.-338    	; 0x5d6a <MLCDDeselect>
    5ebc:	df 91       	pop	r29
    5ebe:	cf 91       	pop	r28
    5ec0:	1f 91       	pop	r17
    5ec2:	0f 91       	pop	r16
    5ec4:	08 95       	ret

00005ec6 <MLCDShowImecLogo>:
    5ec6:	ff 92       	push	r15
    5ec8:	0f 93       	push	r16
    5eca:	1f 93       	push	r17
    5ecc:	cf 93       	push	r28
    5ece:	df 93       	push	r29
    5ed0:	cd b7       	in	r28, 0x3d	; 61
    5ed2:	de b7       	in	r29, 0x3e	; 62
    5ed4:	e2 97       	sbiw	r28, 0x32	; 50
    5ed6:	cd bf       	out	0x3d, r28	; 61
    5ed8:	de bf       	out	0x3e, r29	; 62
    5eda:	02 ed       	ldi	r16, 0xD2	; 210
    5edc:	13 e0       	ldi	r17, 0x03	; 3
    5ede:	ff 24       	eor	r15, r15
    5ee0:	f3 94       	inc	r15
    5ee2:	42 e3       	ldi	r20, 0x32	; 50
    5ee4:	50 e0       	ldi	r21, 0x00	; 0
    5ee6:	b8 01       	movw	r22, r16
    5ee8:	ce 01       	movw	r24, r28
    5eea:	01 96       	adiw	r24, 0x01	; 1
    5eec:	0e 94 d5 3f 	call	0x7faa	; 0x7faa <memcpy_P>
    5ef0:	6f 2d       	mov	r22, r15
    5ef2:	ce 01       	movw	r24, r28
    5ef4:	01 96       	adiw	r24, 0x01	; 1
    5ef6:	a8 df       	rcall	.-176    	; 0x5e48 <MLCDWriteLine>
    5ef8:	0e 5c       	subi	r16, 0xCE	; 206
    5efa:	1f 4f       	sbci	r17, 0xFF	; 255
    5efc:	f3 94       	inc	r15
    5efe:	81 ef       	ldi	r24, 0xF1	; 241
    5f00:	f8 12       	cpse	r15, r24
    5f02:	ef cf       	rjmp	.-34     	; 0x5ee2 <MLCDShowImecLogo+0x1c>
    5f04:	e2 96       	adiw	r28, 0x32	; 50
    5f06:	cd bf       	out	0x3d, r28	; 61
    5f08:	de bf       	out	0x3e, r29	; 62
    5f0a:	df 91       	pop	r29
    5f0c:	cf 91       	pop	r28
    5f0e:	1f 91       	pop	r17
    5f10:	0f 91       	pop	r16
    5f12:	ff 90       	pop	r15
    5f14:	08 95       	ret

00005f16 <MLCDRefreshFrame>:
    5f16:	8d e8       	ldi	r24, 0x8D	; 141
    5f18:	92 e6       	ldi	r25, 0x62	; 98
    5f1a:	b1 cf       	rjmp	.-158    	; 0x5e7e <MLCDWriteFrame>
    5f1c:	08 95       	ret

00005f1e <MLCDWriteCharacter>:
    5f1e:	af 92       	push	r10
    5f20:	bf 92       	push	r11
    5f22:	cf 92       	push	r12
    5f24:	df 92       	push	r13
    5f26:	ef 92       	push	r14
    5f28:	0f 93       	push	r16
    5f2a:	1f 93       	push	r17
    5f2c:	cf 93       	push	r28
    5f2e:	df 93       	push	r29
    5f30:	a4 2e       	mov	r10, r20
    5f32:	b1 2c       	mov	r11, r1
    5f34:	6a 9d       	mul	r22, r10
    5f36:	60 01       	movw	r12, r0
    5f38:	6b 9d       	mul	r22, r11
    5f3a:	d0 0c       	add	r13, r0
    5f3c:	11 24       	eor	r1, r1
    5f3e:	c1 14       	cp	r12, r1
    5f40:	d1 04       	cpc	r13, r1
    5f42:	c9 f1       	breq	.+114    	; 0x5fb6 <MLCDWriteCharacter+0x98>
    5f44:	e8 2f       	mov	r30, r24
    5f46:	f9 2f       	mov	r31, r25
    5f48:	30 2f       	mov	r19, r16
    5f4a:	c0 e0       	ldi	r28, 0x00	; 0
    5f4c:	d0 e0       	ldi	r29, 0x00	; 0
    5f4e:	12 e3       	ldi	r17, 0x32	; 50
    5f50:	a0 0e       	add	r10, r16
    5f52:	b1 1c       	adc	r11, r1
    5f54:	ee 20       	and	r14, r14
    5f56:	89 f0       	breq	.+34     	; 0x5f7a <MLCDWriteCharacter+0x5c>
    5f58:	82 2f       	mov	r24, r18
    5f5a:	90 e0       	ldi	r25, 0x00	; 0
    5f5c:	01 97       	sbiw	r24, 0x01	; 1
    5f5e:	18 9f       	mul	r17, r24
    5f60:	d0 01       	movw	r26, r0
    5f62:	19 9f       	mul	r17, r25
    5f64:	b0 0d       	add	r27, r0
    5f66:	11 24       	eor	r1, r1
    5f68:	a3 57       	subi	r26, 0x73	; 115
    5f6a:	bd 49       	sbci	r27, 0x9D	; 157
    5f6c:	a3 0f       	add	r26, r19
    5f6e:	b1 1d       	adc	r27, r1
    5f70:	11 97       	sbiw	r26, 0x01	; 1
    5f72:	80 81       	ld	r24, Z
    5f74:	80 95       	com	r24
    5f76:	8c 93       	st	X, r24
    5f78:	0f c0       	rjmp	.+30     	; 0x5f98 <MLCDWriteCharacter+0x7a>
    5f7a:	40 81       	ld	r20, Z
    5f7c:	82 2f       	mov	r24, r18
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	01 97       	sbiw	r24, 0x01	; 1
    5f82:	18 9f       	mul	r17, r24
    5f84:	d0 01       	movw	r26, r0
    5f86:	19 9f       	mul	r17, r25
    5f88:	b0 0d       	add	r27, r0
    5f8a:	11 24       	eor	r1, r1
    5f8c:	a3 57       	subi	r26, 0x73	; 115
    5f8e:	bd 49       	sbci	r27, 0x9D	; 157
    5f90:	a3 0f       	add	r26, r19
    5f92:	b1 1d       	adc	r27, r1
    5f94:	11 97       	sbiw	r26, 0x01	; 1
    5f96:	4c 93       	st	X, r20
    5f98:	3f 5f       	subi	r19, 0xFF	; 255
    5f9a:	83 2f       	mov	r24, r19
    5f9c:	90 e0       	ldi	r25, 0x00	; 0
    5f9e:	b5 01       	movw	r22, r10
    5fa0:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <__divmodhi4>
    5fa4:	89 2b       	or	r24, r25
    5fa6:	11 f4       	brne	.+4      	; 0x5fac <MLCDWriteCharacter+0x8e>
    5fa8:	2f 5f       	subi	r18, 0xFF	; 255
    5faa:	30 2f       	mov	r19, r16
    5fac:	21 96       	adiw	r28, 0x01	; 1
    5fae:	31 96       	adiw	r30, 0x01	; 1
    5fb0:	cc 15       	cp	r28, r12
    5fb2:	dd 05       	cpc	r29, r13
    5fb4:	79 f6       	brne	.-98     	; 0x5f54 <MLCDWriteCharacter+0x36>
    5fb6:	df 91       	pop	r29
    5fb8:	cf 91       	pop	r28
    5fba:	1f 91       	pop	r17
    5fbc:	0f 91       	pop	r16
    5fbe:	ef 90       	pop	r14
    5fc0:	df 90       	pop	r13
    5fc2:	cf 90       	pop	r12
    5fc4:	bf 90       	pop	r11
    5fc6:	af 90       	pop	r10
    5fc8:	08 95       	ret

00005fca <MLCDWriteString>:
    5fca:	8f 92       	push	r8
    5fcc:	9f 92       	push	r9
    5fce:	af 92       	push	r10
    5fd0:	bf 92       	push	r11
    5fd2:	cf 92       	push	r12
    5fd4:	df 92       	push	r13
    5fd6:	ef 92       	push	r14
    5fd8:	ff 92       	push	r15
    5fda:	0f 93       	push	r16
    5fdc:	1f 93       	push	r17
    5fde:	cf 93       	push	r28
    5fe0:	df 93       	push	r29
    5fe2:	1f 92       	push	r1
    5fe4:	cd b7       	in	r28, 0x3d	; 61
    5fe6:	de b7       	in	r29, 0x3e	; 62
    5fe8:	fc 01       	movw	r30, r24
    5fea:	f6 2e       	mov	r15, r22
    5fec:	94 2e       	mov	r9, r20
    5fee:	12 2f       	mov	r17, r18
    5ff0:	80 2e       	mov	r8, r16
    5ff2:	80 81       	ld	r24, Z
    5ff4:	88 23       	and	r24, r24
    5ff6:	c1 f1       	breq	.+112    	; 0x6068 <MLCDWriteString+0x9e>
    5ff8:	6f 01       	movw	r12, r30
    5ffa:	2f ef       	ldi	r18, 0xFF	; 255
    5ffc:	c2 1a       	sub	r12, r18
    5ffe:	d2 0a       	sbc	r13, r18
    6000:	0f 2e       	mov	r0, r31
    6002:	f3 e3       	ldi	r31, 0x33	; 51
    6004:	af 2e       	mov	r10, r31
    6006:	b1 2c       	mov	r11, r1
    6008:	f0 2d       	mov	r31, r0
    600a:	19 82       	std	Y+1, r1	; 0x01
    600c:	31 e1       	ldi	r19, 0x11	; 17
    600e:	f3 12       	cpse	r15, r19
    6010:	0c c0       	rjmp	.+24     	; 0x602a <MLCDWriteString+0x60>
    6012:	be 01       	movw	r22, r28
    6014:	6f 5f       	subi	r22, 0xFF	; 255
    6016:	7f 4f       	sbci	r23, 0xFF	; 255
    6018:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <getCharacterImage>
    601c:	e8 2c       	mov	r14, r8
    601e:	01 2f       	mov	r16, r17
    6020:	29 2d       	mov	r18, r9
    6022:	49 81       	ldd	r20, Y+1	; 0x01
    6024:	61 e1       	ldi	r22, 0x11	; 17
    6026:	7b df       	rcall	.-266    	; 0x5f1e <MLCDWriteCharacter>
    6028:	0e c0       	rjmp	.+28     	; 0x6046 <MLCDWriteString+0x7c>
    602a:	9b e2       	ldi	r25, 0x2B	; 43
    602c:	f9 12       	cpse	r15, r25
    602e:	0b c0       	rjmp	.+22     	; 0x6046 <MLCDWriteString+0x7c>
    6030:	be 01       	movw	r22, r28
    6032:	6f 5f       	subi	r22, 0xFF	; 255
    6034:	7f 4f       	sbci	r23, 0xFF	; 255
    6036:	0e 94 fd 19 	call	0x33fa	; 0x33fa <getLargeCharacterImage>
    603a:	e8 2c       	mov	r14, r8
    603c:	01 2f       	mov	r16, r17
    603e:	29 2d       	mov	r18, r9
    6040:	49 81       	ldd	r20, Y+1	; 0x01
    6042:	6b e2       	ldi	r22, 0x2B	; 43
    6044:	6c df       	rcall	.-296    	; 0x5f1e <MLCDWriteCharacter>
    6046:	89 81       	ldd	r24, Y+1	; 0x01
    6048:	18 0f       	add	r17, r24
    604a:	e1 2f       	mov	r30, r17
    604c:	f0 e0       	ldi	r31, 0x00	; 0
    604e:	95 01       	movw	r18, r10
    6050:	28 1b       	sub	r18, r24
    6052:	31 09       	sbc	r19, r1
    6054:	2e 17       	cp	r18, r30
    6056:	3f 07       	cpc	r19, r31
    6058:	14 f4       	brge	.+4      	; 0x605e <MLCDWriteString+0x94>
    605a:	9f 0c       	add	r9, r15
    605c:	11 e0       	ldi	r17, 0x01	; 1
    605e:	f6 01       	movw	r30, r12
    6060:	81 91       	ld	r24, Z+
    6062:	6f 01       	movw	r12, r30
    6064:	81 11       	cpse	r24, r1
    6066:	d1 cf       	rjmp	.-94     	; 0x600a <MLCDWriteString+0x40>
    6068:	0f 90       	pop	r0
    606a:	df 91       	pop	r29
    606c:	cf 91       	pop	r28
    606e:	1f 91       	pop	r17
    6070:	0f 91       	pop	r16
    6072:	ff 90       	pop	r15
    6074:	ef 90       	pop	r14
    6076:	df 90       	pop	r13
    6078:	cf 90       	pop	r12
    607a:	bf 90       	pop	r11
    607c:	af 90       	pop	r10
    607e:	9f 90       	pop	r9
    6080:	8f 90       	pop	r8
    6082:	08 95       	ret

00006084 <MLCDWriteInt>:
    6084:	af 92       	push	r10
    6086:	cf 92       	push	r12
    6088:	ef 92       	push	r14
    608a:	0f 93       	push	r16
    608c:	1f 93       	push	r17
    608e:	cf 93       	push	r28
    6090:	df 93       	push	r29
    6092:	10 2f       	mov	r17, r16
    6094:	0a 2d       	mov	r16, r10
    6096:	82 2f       	mov	r24, r18
    6098:	93 2f       	mov	r25, r19
    609a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <getIntAsString>
    609e:	ec 01       	movw	r28, r24
    60a0:	2c 2d       	mov	r18, r12
    60a2:	4e 2d       	mov	r20, r14
    60a4:	61 2f       	mov	r22, r17
    60a6:	91 df       	rcall	.-222    	; 0x5fca <MLCDWriteString>
    60a8:	ce 01       	movw	r24, r28
    60aa:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <free>
    60ae:	df 91       	pop	r29
    60b0:	cf 91       	pop	r28
    60b2:	1f 91       	pop	r17
    60b4:	0f 91       	pop	r16
    60b6:	ef 90       	pop	r14
    60b8:	cf 90       	pop	r12
    60ba:	af 90       	pop	r10
    60bc:	08 95       	ret

000060be <MLCDWriteDouble>:
    60be:	df 92       	push	r13
    60c0:	ef 92       	push	r14
    60c2:	ff 92       	push	r15
    60c4:	0f 93       	push	r16
    60c6:	1f 93       	push	r17
    60c8:	cf 93       	push	r28
    60ca:	df 93       	push	r29
    60cc:	14 2f       	mov	r17, r20
    60ce:	f2 2e       	mov	r15, r18
    60d0:	d0 2e       	mov	r13, r16
    60d2:	0e 2d       	mov	r16, r14
    60d4:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <getDoubleAsString>
    60d8:	ec 01       	movw	r28, r24
    60da:	2d 2d       	mov	r18, r13
    60dc:	4f 2d       	mov	r20, r15
    60de:	61 2f       	mov	r22, r17
    60e0:	74 df       	rcall	.-280    	; 0x5fca <MLCDWriteString>
    60e2:	ce 01       	movw	r24, r28
    60e4:	0e 94 17 3e 	call	0x7c2e	; 0x7c2e <free>
    60e8:	df 91       	pop	r29
    60ea:	cf 91       	pop	r28
    60ec:	1f 91       	pop	r17
    60ee:	0f 91       	pop	r16
    60f0:	ff 90       	pop	r15
    60f2:	ef 90       	pop	r14
    60f4:	df 90       	pop	r13
    60f6:	08 95       	ret

000060f8 <MLCDDrawSquare>:
    60f8:	9f 92       	push	r9
    60fa:	af 92       	push	r10
    60fc:	bf 92       	push	r11
    60fe:	cf 92       	push	r12
    6100:	df 92       	push	r13
    6102:	ef 92       	push	r14
    6104:	ff 92       	push	r15
    6106:	0f 93       	push	r16
    6108:	1f 93       	push	r17
    610a:	cf 93       	push	r28
    610c:	df 93       	push	r29
    610e:	e8 2e       	mov	r14, r24
    6110:	f1 2c       	mov	r15, r1
    6112:	e1 14       	cp	r14, r1
    6114:	f1 04       	cpc	r15, r1
    6116:	09 f4       	brne	.+2      	; 0x611a <MLCDDrawSquare+0x22>
    6118:	62 c0       	rjmp	.+196    	; 0x61de <MLCDDrawSquare+0xe6>
    611a:	f7 01       	movw	r30, r14
    611c:	ee 0f       	add	r30, r30
    611e:	ff 1f       	adc	r31, r31
    6120:	ee 0f       	add	r30, r30
    6122:	ff 1f       	adc	r31, r31
    6124:	ee 0f       	add	r30, r30
    6126:	ff 1f       	adc	r31, r31
    6128:	00 e0       	ldi	r16, 0x00	; 0
    612a:	10 e0       	ldi	r17, 0x00	; 0
    612c:	96 2e       	mov	r9, r22
    612e:	0f 2e       	mov	r0, r31
    6130:	f2 e3       	ldi	r31, 0x32	; 50
    6132:	df 2e       	mov	r13, r31
    6134:	f0 2d       	mov	r31, r0
    6136:	cc 24       	eor	r12, r12
    6138:	ca 94       	dec	r12
    613a:	51 ef       	ldi	r21, 0xF1	; 241
    613c:	0f 2e       	mov	r0, r31
    613e:	f1 ea       	ldi	r31, 0xA1	; 161
    6140:	af 2e       	mov	r10, r31
    6142:	f0 2d       	mov	r31, r0
    6144:	0f 2e       	mov	r0, r31
    6146:	f3 e3       	ldi	r31, 0x33	; 51
    6148:	bf 2e       	mov	r11, r31
    614a:	f0 2d       	mov	r31, r0
    614c:	40 c0       	rjmp	.+128    	; 0x61ce <MLCDDrawSquare+0xd6>
    614e:	22 23       	and	r18, r18
    6150:	71 f0       	breq	.+28     	; 0x616e <MLCDDrawSquare+0x76>
    6152:	c3 2f       	mov	r28, r19
    6154:	d0 e0       	ldi	r29, 0x00	; 0
    6156:	21 97       	sbiw	r28, 0x01	; 1
    6158:	dc 9e       	mul	r13, r28
    615a:	d0 01       	movw	r26, r0
    615c:	dd 9e       	mul	r13, r29
    615e:	b0 0d       	add	r27, r0
    6160:	11 24       	eor	r1, r1
    6162:	a6 0f       	add	r26, r22
    6164:	b7 1f       	adc	r27, r23
    6166:	a4 57       	subi	r26, 0x74	; 116
    6168:	bd 49       	sbci	r27, 0x9D	; 157
    616a:	cc 92       	st	X, r12
    616c:	0d c0       	rjmp	.+26     	; 0x6188 <MLCDDrawSquare+0x90>
    616e:	c3 2f       	mov	r28, r19
    6170:	d0 e0       	ldi	r29, 0x00	; 0
    6172:	21 97       	sbiw	r28, 0x01	; 1
    6174:	dc 9e       	mul	r13, r28
    6176:	d0 01       	movw	r26, r0
    6178:	dd 9e       	mul	r13, r29
    617a:	b0 0d       	add	r27, r0
    617c:	11 24       	eor	r1, r1
    617e:	a6 0f       	add	r26, r22
    6180:	b7 1f       	adc	r27, r23
    6182:	a4 57       	subi	r26, 0x74	; 116
    6184:	bd 49       	sbci	r27, 0x9D	; 157
    6186:	1c 92       	st	X, r1
    6188:	3f 5f       	subi	r19, 0xFF	; 255
    618a:	a1 e0       	ldi	r26, 0x01	; 1
    618c:	31 3f       	cpi	r19, 0xF1	; 241
    618e:	08 f4       	brcc	.+2      	; 0x6192 <MLCDDrawSquare+0x9a>
    6190:	a0 e0       	ldi	r26, 0x00	; 0
    6192:	b3 2f       	mov	r27, r19
    6194:	a5 9f       	mul	r26, r21
    6196:	b0 19       	sub	r27, r0
    6198:	11 24       	eor	r1, r1
    619a:	b1 11       	cpse	r27, r1
    619c:	01 c0       	rjmp	.+2      	; 0x61a0 <MLCDDrawSquare+0xa8>
    619e:	31 e0       	ldi	r19, 0x01	; 1
    61a0:	01 96       	adiw	r24, 0x01	; 1
    61a2:	8e 17       	cp	r24, r30
    61a4:	9f 07       	cpc	r25, r31
    61a6:	99 f6       	brne	.-90     	; 0x614e <MLCDDrawSquare+0x56>
    61a8:	4f 5f       	subi	r20, 0xFF	; 255
    61aa:	4a 9d       	mul	r20, r10
    61ac:	81 2d       	mov	r24, r1
    61ae:	11 24       	eor	r1, r1
    61b0:	82 95       	swap	r24
    61b2:	86 95       	lsr	r24
    61b4:	87 70       	andi	r24, 0x07	; 7
    61b6:	94 2f       	mov	r25, r20
    61b8:	8b 9d       	mul	r24, r11
    61ba:	90 19       	sub	r25, r0
    61bc:	11 24       	eor	r1, r1
    61be:	91 11       	cpse	r25, r1
    61c0:	01 c0       	rjmp	.+2      	; 0x61c4 <MLCDDrawSquare+0xcc>
    61c2:	41 e0       	ldi	r20, 0x01	; 1
    61c4:	0f 5f       	subi	r16, 0xFF	; 255
    61c6:	1f 4f       	sbci	r17, 0xFF	; 255
    61c8:	0e 15       	cp	r16, r14
    61ca:	1f 05       	cpc	r17, r15
    61cc:	40 f4       	brcc	.+16     	; 0x61de <MLCDDrawSquare+0xe6>
    61ce:	30 97       	sbiw	r30, 0x00	; 0
    61d0:	59 f3       	breq	.-42     	; 0x61a8 <MLCDDrawSquare+0xb0>
    61d2:	39 2d       	mov	r19, r9
    61d4:	80 e0       	ldi	r24, 0x00	; 0
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	64 2f       	mov	r22, r20
    61da:	70 e0       	ldi	r23, 0x00	; 0
    61dc:	b8 cf       	rjmp	.-144    	; 0x614e <MLCDDrawSquare+0x56>
    61de:	df 91       	pop	r29
    61e0:	cf 91       	pop	r28
    61e2:	1f 91       	pop	r17
    61e4:	0f 91       	pop	r16
    61e6:	ff 90       	pop	r15
    61e8:	ef 90       	pop	r14
    61ea:	df 90       	pop	r13
    61ec:	cf 90       	pop	r12
    61ee:	bf 90       	pop	r11
    61f0:	af 90       	pop	r10
    61f2:	9f 90       	pop	r9
    61f4:	08 95       	ret

000061f6 <MLCDDrawColumn>:
    61f6:	9f 92       	push	r9
    61f8:	af 92       	push	r10
    61fa:	bf 92       	push	r11
    61fc:	cf 92       	push	r12
    61fe:	df 92       	push	r13
    6200:	ef 92       	push	r14
    6202:	ff 92       	push	r15
    6204:	0f 93       	push	r16
    6206:	1f 93       	push	r17
    6208:	cf 93       	push	r28
    620a:	df 93       	push	r29
    620c:	e4 2e       	mov	r14, r20
    620e:	f1 2c       	mov	r15, r1
    6210:	e1 14       	cp	r14, r1
    6212:	f1 04       	cpc	r15, r1
    6214:	09 f4       	brne	.+2      	; 0x6218 <MLCDDrawColumn+0x22>
    6216:	53 c0       	rjmp	.+166    	; 0x62be <MLCDDrawColumn+0xc8>
    6218:	c0 e0       	ldi	r28, 0x00	; 0
    621a:	d0 e0       	ldi	r29, 0x00	; 0
    621c:	30 e0       	ldi	r19, 0x00	; 0
    621e:	98 2e       	mov	r9, r24
    6220:	12 e3       	ldi	r17, 0x32	; 50
    6222:	cc 24       	eor	r12, r12
    6224:	ca 94       	dec	r12
    6226:	0f 2e       	mov	r0, r31
    6228:	f0 ef       	ldi	r31, 0xF0	; 240
    622a:	df 2e       	mov	r13, r31
    622c:	f0 2d       	mov	r31, r0
    622e:	0f 2e       	mov	r0, r31
    6230:	f1 ea       	ldi	r31, 0xA1	; 161
    6232:	af 2e       	mov	r10, r31
    6234:	f0 2d       	mov	r31, r0
    6236:	0f 2e       	mov	r0, r31
    6238:	f3 e3       	ldi	r31, 0x33	; 51
    623a:	bf 2e       	mov	r11, r31
    623c:	f0 2d       	mov	r31, r0
    623e:	36 c0       	rjmp	.+108    	; 0x62ac <MLCDDrawColumn+0xb6>
    6240:	00 23       	and	r16, r16
    6242:	71 f0       	breq	.+28     	; 0x6260 <MLCDDrawColumn+0x6a>
    6244:	a7 2f       	mov	r26, r23
    6246:	b0 e0       	ldi	r27, 0x00	; 0
    6248:	11 97       	sbiw	r26, 0x01	; 1
    624a:	1a 9f       	mul	r17, r26
    624c:	f0 01       	movw	r30, r0
    624e:	1b 9f       	mul	r17, r27
    6250:	f0 0d       	add	r31, r0
    6252:	11 24       	eor	r1, r1
    6254:	e4 0f       	add	r30, r20
    6256:	f5 1f       	adc	r31, r21
    6258:	e4 57       	subi	r30, 0x74	; 116
    625a:	fd 49       	sbci	r31, 0x9D	; 157
    625c:	c0 82       	st	Z, r12
    625e:	0d c0       	rjmp	.+26     	; 0x627a <MLCDDrawColumn+0x84>
    6260:	a7 2f       	mov	r26, r23
    6262:	b0 e0       	ldi	r27, 0x00	; 0
    6264:	11 97       	sbiw	r26, 0x01	; 1
    6266:	1a 9f       	mul	r17, r26
    6268:	f0 01       	movw	r30, r0
    626a:	1b 9f       	mul	r17, r27
    626c:	f0 0d       	add	r31, r0
    626e:	11 24       	eor	r1, r1
    6270:	e4 0f       	add	r30, r20
    6272:	f5 1f       	adc	r31, r21
    6274:	e4 57       	subi	r30, 0x74	; 116
    6276:	fd 49       	sbci	r31, 0x9D	; 157
    6278:	10 82       	st	Z, r1
    627a:	71 50       	subi	r23, 0x01	; 1
    627c:	09 f4       	brne	.+2      	; 0x6280 <MLCDDrawColumn+0x8a>
    627e:	7d 2d       	mov	r23, r13
    6280:	01 96       	adiw	r24, 0x01	; 1
    6282:	82 17       	cp	r24, r18
    6284:	93 07       	cpc	r25, r19
    6286:	e0 f2       	brcs	.-72     	; 0x6240 <MLCDDrawColumn+0x4a>
    6288:	6f 5f       	subi	r22, 0xFF	; 255
    628a:	6a 9d       	mul	r22, r10
    628c:	81 2d       	mov	r24, r1
    628e:	11 24       	eor	r1, r1
    6290:	82 95       	swap	r24
    6292:	86 95       	lsr	r24
    6294:	87 70       	andi	r24, 0x07	; 7
    6296:	96 2f       	mov	r25, r22
    6298:	8b 9d       	mul	r24, r11
    629a:	90 19       	sub	r25, r0
    629c:	11 24       	eor	r1, r1
    629e:	91 11       	cpse	r25, r1
    62a0:	01 c0       	rjmp	.+2      	; 0x62a4 <MLCDDrawColumn+0xae>
    62a2:	61 e0       	ldi	r22, 0x01	; 1
    62a4:	21 96       	adiw	r28, 0x01	; 1
    62a6:	ce 15       	cp	r28, r14
    62a8:	df 05       	cpc	r29, r15
    62aa:	48 f4       	brcc	.+18     	; 0x62be <MLCDDrawColumn+0xc8>
    62ac:	21 15       	cp	r18, r1
    62ae:	31 05       	cpc	r19, r1
    62b0:	59 f3       	breq	.-42     	; 0x6288 <MLCDDrawColumn+0x92>
    62b2:	79 2d       	mov	r23, r9
    62b4:	80 e0       	ldi	r24, 0x00	; 0
    62b6:	90 e0       	ldi	r25, 0x00	; 0
    62b8:	46 2f       	mov	r20, r22
    62ba:	50 e0       	ldi	r21, 0x00	; 0
    62bc:	c1 cf       	rjmp	.-126    	; 0x6240 <MLCDDrawColumn+0x4a>
    62be:	df 91       	pop	r29
    62c0:	cf 91       	pop	r28
    62c2:	1f 91       	pop	r17
    62c4:	0f 91       	pop	r16
    62c6:	ff 90       	pop	r15
    62c8:	ef 90       	pop	r14
    62ca:	df 90       	pop	r13
    62cc:	cf 90       	pop	r12
    62ce:	bf 90       	pop	r11
    62d0:	af 90       	pop	r10
    62d2:	9f 90       	pop	r9
    62d4:	08 95       	ret

000062d6 <MLCDDrawSnakeBait>:

void MLCDDrawSnakeBait(uint8_t row, uint8_t column, bool white){
    62d6:	cf 93       	push	r28
    62d8:	df 93       	push	r29
    62da:	e7 ef       	ldi	r30, 0xF7	; 247
    62dc:	f1 e6       	ldi	r31, 0x61	; 97
    62de:	2f ef       	ldi	r18, 0xFF	; 255
    62e0:	31 e6       	ldi	r19, 0x61	; 97
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    62e2:	70 e0       	ldi	r23, 0x00	; 0
    62e4:	92 e3       	ldi	r25, 0x32	; 50
}

void MLCDDrawSnakeBait(uint8_t row, uint8_t column, bool white){
	uint16_t i;
	for(i=0;i<8;i++){
		if(white)
    62e6:	44 23       	and	r20, r20
    62e8:	81 f0       	breq	.+32     	; 0x630a <MLCDDrawSnakeBait+0x34>
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    62ea:	c8 2f       	mov	r28, r24
    62ec:	d0 e0       	ldi	r29, 0x00	; 0
    62ee:	21 97       	sbiw	r28, 0x01	; 1
    62f0:	9c 9f       	mul	r25, r28
    62f2:	d0 01       	movw	r26, r0
    62f4:	9d 9f       	mul	r25, r29
    62f6:	b0 0d       	add	r27, r0
    62f8:	11 24       	eor	r1, r1
    62fa:	a6 0f       	add	r26, r22
    62fc:	b7 1f       	adc	r27, r23
    62fe:	a4 57       	subi	r26, 0x74	; 116
    6300:	bd 49       	sbci	r27, 0x9D	; 157

void MLCDDrawSnakeBait(uint8_t row, uint8_t column, bool white){
	uint16_t i;
	for(i=0;i<8;i++){
		if(white)
			MLCDUpdateByte(~snake_bait[i], row, column);
    6302:	50 81       	ld	r21, Z
    6304:	50 95       	com	r21
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    6306:	5c 93       	st	X, r21
    6308:	0e c0       	rjmp	.+28     	; 0x6326 <MLCDDrawSnakeBait+0x50>
    630a:	c8 2f       	mov	r28, r24
    630c:	d0 e0       	ldi	r29, 0x00	; 0
    630e:	21 97       	sbiw	r28, 0x01	; 1
    6310:	9c 9f       	mul	r25, r28
    6312:	d0 01       	movw	r26, r0
    6314:	9d 9f       	mul	r25, r29
    6316:	b0 0d       	add	r27, r0
    6318:	11 24       	eor	r1, r1
    631a:	a6 0f       	add	r26, r22
    631c:	b7 1f       	adc	r27, r23
    631e:	a4 57       	subi	r26, 0x74	; 116
    6320:	bd 49       	sbci	r27, 0x9D	; 157
    6322:	50 81       	ld	r21, Z
    6324:	5c 93       	st	X, r21
		if(white)
			MLCDUpdateByte(~snake_bait[i], row, column);
		else
			MLCDUpdateByte(snake_bait[i], row, column);
			
		row++;
    6326:	8f 5f       	subi	r24, 0xFF	; 255
    6328:	31 96       	adiw	r30, 0x01	; 1
	}
}

void MLCDDrawSnakeBait(uint8_t row, uint8_t column, bool white){
	uint16_t i;
	for(i=0;i<8;i++){
    632a:	e2 17       	cp	r30, r18
    632c:	f3 07       	cpc	r31, r19
    632e:	d9 f6       	brne	.-74     	; 0x62e6 <MLCDDrawSnakeBait+0x10>
		else
			MLCDUpdateByte(snake_bait[i], row, column);
			
		row++;
	}
}
    6330:	df 91       	pop	r29
    6332:	cf 91       	pop	r28
    6334:	08 95       	ret

00006336 <MLCDDrawBattery>:

void MLCDDrawBattery(uint8_t row, uint8_t column,uint8_t percentage, bool white){
    6336:	4f 92       	push	r4
    6338:	5f 92       	push	r5
    633a:	7f 92       	push	r7
    633c:	8f 92       	push	r8
    633e:	9f 92       	push	r9
    6340:	af 92       	push	r10
    6342:	bf 92       	push	r11
    6344:	cf 92       	push	r12
    6346:	df 92       	push	r13
    6348:	ef 92       	push	r14
    634a:	ff 92       	push	r15
    634c:	0f 93       	push	r16
    634e:	1f 93       	push	r17
    6350:	cf 93       	push	r28
    6352:	df 93       	push	r29
    6354:	92 2f       	mov	r25, r18
	uint16_t i;
	const uint8_t *battery;
	if(percentage<5)		battery = battery_5;
    6356:	45 30       	cpi	r20, 0x05	; 5
    6358:	38 f1       	brcs	.+78     	; 0x63a8 <MLCDDrawBattery+0x72>
	else if (percentage<10)	battery = battery_10;
    635a:	4a 30       	cpi	r20, 0x0A	; 10
    635c:	40 f1       	brcs	.+80     	; 0x63ae <MLCDDrawBattery+0x78>
	else if (percentage<15)	battery = battery_15;
    635e:	4f 30       	cpi	r20, 0x0F	; 15
    6360:	48 f1       	brcs	.+82     	; 0x63b4 <MLCDDrawBattery+0x7e>
	else if (percentage<20)	battery = battery_20;
    6362:	44 31       	cpi	r20, 0x14	; 20
    6364:	50 f1       	brcs	.+84     	; 0x63ba <MLCDDrawBattery+0x84>
	else if (percentage<25)	battery = battery_25;
    6366:	49 31       	cpi	r20, 0x19	; 25
    6368:	58 f1       	brcs	.+86     	; 0x63c0 <MLCDDrawBattery+0x8a>
	else if (percentage<30)	battery = battery_30;
    636a:	4e 31       	cpi	r20, 0x1E	; 30
    636c:	60 f1       	brcs	.+88     	; 0x63c6 <MLCDDrawBattery+0x90>
	else if (percentage<35)	battery = battery_35;
    636e:	43 32       	cpi	r20, 0x23	; 35
    6370:	68 f1       	brcs	.+90     	; 0x63cc <MLCDDrawBattery+0x96>
	else if (percentage<40)	battery = battery_40;
    6372:	48 32       	cpi	r20, 0x28	; 40
    6374:	70 f1       	brcs	.+92     	; 0x63d2 <MLCDDrawBattery+0x9c>
	else if (percentage<45)	battery = battery_45;
    6376:	4d 32       	cpi	r20, 0x2D	; 45
    6378:	78 f1       	brcs	.+94     	; 0x63d8 <MLCDDrawBattery+0xa2>
	else if (percentage<50)	battery = battery_50;
    637a:	42 33       	cpi	r20, 0x32	; 50
    637c:	80 f1       	brcs	.+96     	; 0x63de <MLCDDrawBattery+0xa8>
	else if (percentage<55)	battery = battery_55;
    637e:	47 33       	cpi	r20, 0x37	; 55
    6380:	88 f1       	brcs	.+98     	; 0x63e4 <MLCDDrawBattery+0xae>
	else if (percentage<60)	battery = battery_60;
    6382:	4c 33       	cpi	r20, 0x3C	; 60
    6384:	90 f1       	brcs	.+100    	; 0x63ea <MLCDDrawBattery+0xb4>
	else if (percentage<65)	battery = battery_65;
    6386:	41 34       	cpi	r20, 0x41	; 65
    6388:	98 f1       	brcs	.+102    	; 0x63f0 <MLCDDrawBattery+0xba>
	else if (percentage<70)	battery = battery_70;
    638a:	46 34       	cpi	r20, 0x46	; 70
    638c:	a0 f1       	brcs	.+104    	; 0x63f6 <MLCDDrawBattery+0xc0>
	else if (percentage<75)	battery = battery_75;
    638e:	4b 34       	cpi	r20, 0x4B	; 75
    6390:	a8 f1       	brcs	.+106    	; 0x63fc <MLCDDrawBattery+0xc6>
	else if (percentage<80)	battery = battery_80;
    6392:	40 35       	cpi	r20, 0x50	; 80
    6394:	b0 f1       	brcs	.+108    	; 0x6402 <MLCDDrawBattery+0xcc>
	else if (percentage<85)	battery = battery_85;
    6396:	45 35       	cpi	r20, 0x55	; 85
    6398:	b8 f1       	brcs	.+110    	; 0x6408 <MLCDDrawBattery+0xd2>
	else if (percentage<90)	battery = battery_90;
    639a:	4a 35       	cpi	r20, 0x5A	; 90
    639c:	c0 f1       	brcs	.+112    	; 0x640e <MLCDDrawBattery+0xd8>
	else if (percentage<95)	battery = battery_95;
    639e:	4f 35       	cpi	r20, 0x5F	; 95
    63a0:	c8 f5       	brcc	.+114    	; 0x6414 <MLCDDrawBattery+0xde>
    63a2:	e7 ea       	ldi	r30, 0xA7	; 167
    63a4:	fc e5       	ldi	r31, 0x5C	; 92
    63a6:	38 c0       	rjmp	.+112    	; 0x6418 <MLCDDrawBattery+0xe2>
}

void MLCDDrawBattery(uint8_t row, uint8_t column,uint8_t percentage, bool white){
	uint16_t i;
	const uint8_t *battery;
	if(percentage<5)		battery = battery_5;
    63a8:	ef e6       	ldi	r30, 0x6F	; 111
    63aa:	f1 e6       	ldi	r31, 0x61	; 97
    63ac:	35 c0       	rjmp	.+106    	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<10)	battery = battery_10;
    63ae:	eb e2       	ldi	r30, 0x2B	; 43
    63b0:	f1 e6       	ldi	r31, 0x61	; 97
    63b2:	32 c0       	rjmp	.+100    	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<15)	battery = battery_15;
    63b4:	e7 ee       	ldi	r30, 0xE7	; 231
    63b6:	f0 e6       	ldi	r31, 0x60	; 96
    63b8:	2f c0       	rjmp	.+94     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<20)	battery = battery_20;
    63ba:	e3 ea       	ldi	r30, 0xA3	; 163
    63bc:	f0 e6       	ldi	r31, 0x60	; 96
    63be:	2c c0       	rjmp	.+88     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<25)	battery = battery_25;
    63c0:	ef e5       	ldi	r30, 0x5F	; 95
    63c2:	f0 e6       	ldi	r31, 0x60	; 96
    63c4:	29 c0       	rjmp	.+82     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<30)	battery = battery_30;
    63c6:	eb e1       	ldi	r30, 0x1B	; 27
    63c8:	f0 e6       	ldi	r31, 0x60	; 96
    63ca:	26 c0       	rjmp	.+76     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<35)	battery = battery_35;
    63cc:	e7 ed       	ldi	r30, 0xD7	; 215
    63ce:	ff e5       	ldi	r31, 0x5F	; 95
    63d0:	23 c0       	rjmp	.+70     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<40)	battery = battery_40;
    63d2:	e3 e9       	ldi	r30, 0x93	; 147
    63d4:	ff e5       	ldi	r31, 0x5F	; 95
    63d6:	20 c0       	rjmp	.+64     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<45)	battery = battery_45;
    63d8:	ef e4       	ldi	r30, 0x4F	; 79
    63da:	ff e5       	ldi	r31, 0x5F	; 95
    63dc:	1d c0       	rjmp	.+58     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<50)	battery = battery_50;
    63de:	eb e0       	ldi	r30, 0x0B	; 11
    63e0:	ff e5       	ldi	r31, 0x5F	; 95
    63e2:	1a c0       	rjmp	.+52     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<55)	battery = battery_55;
    63e4:	e7 ec       	ldi	r30, 0xC7	; 199
    63e6:	fe e5       	ldi	r31, 0x5E	; 94
    63e8:	17 c0       	rjmp	.+46     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<60)	battery = battery_60;
    63ea:	e3 e8       	ldi	r30, 0x83	; 131
    63ec:	fe e5       	ldi	r31, 0x5E	; 94
    63ee:	14 c0       	rjmp	.+40     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<65)	battery = battery_65;
    63f0:	ef e3       	ldi	r30, 0x3F	; 63
    63f2:	fe e5       	ldi	r31, 0x5E	; 94
    63f4:	11 c0       	rjmp	.+34     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<70)	battery = battery_70;
    63f6:	eb ef       	ldi	r30, 0xFB	; 251
    63f8:	fd e5       	ldi	r31, 0x5D	; 93
    63fa:	0e c0       	rjmp	.+28     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<75)	battery = battery_75;
    63fc:	e7 eb       	ldi	r30, 0xB7	; 183
    63fe:	fd e5       	ldi	r31, 0x5D	; 93
    6400:	0b c0       	rjmp	.+22     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<80)	battery = battery_80;
    6402:	e3 e7       	ldi	r30, 0x73	; 115
    6404:	fd e5       	ldi	r31, 0x5D	; 93
    6406:	08 c0       	rjmp	.+16     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<85)	battery = battery_85;
    6408:	ef e2       	ldi	r30, 0x2F	; 47
    640a:	fd e5       	ldi	r31, 0x5D	; 93
    640c:	05 c0       	rjmp	.+10     	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<90)	battery = battery_90;
    640e:	eb ee       	ldi	r30, 0xEB	; 235
    6410:	fc e5       	ldi	r31, 0x5C	; 92
    6412:	02 c0       	rjmp	.+4      	; 0x6418 <MLCDDrawBattery+0xe2>
	else if (percentage<95)	battery = battery_95;
	else					battery = battery_100;
    6414:	e3 e6       	ldi	r30, 0x63	; 99
    6416:	fc e5       	ldi	r31, 0x5C	; 92
    6418:	9f 01       	movw	r18, r30
    641a:	ef 01       	movw	r28, r30
    641c:	21 96       	adiw	r28, 0x01	; 1
    641e:	df 01       	movw	r26, r30
    6420:	12 96       	adiw	r26, 0x02	; 2
    6422:	2f 01       	movw	r4, r30
    6424:	43 e0       	ldi	r20, 0x03	; 3
    6426:	44 0e       	add	r4, r20
    6428:	51 1c       	adc	r5, r1
    642a:	0f 2e       	mov	r0, r31
    642c:	f1 e1       	ldi	r31, 0x11	; 17
    642e:	9f 2e       	mov	r9, r31
    6430:	f0 2d       	mov	r31, r0
    6432:	98 0e       	add	r9, r24
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    6434:	c6 2e       	mov	r12, r22
    6436:	d1 2c       	mov	r13, r1
    6438:	0f 2e       	mov	r0, r31
    643a:	f2 e3       	ldi	r31, 0x32	; 50
    643c:	8f 2e       	mov	r8, r31
    643e:	f0 2d       	mov	r31, r0
			MLCDUpdateByte(~battery[i*4 + 2], row, column + 2);
			MLCDUpdateByte(~battery[i*4 + 3], row, column + 3);
		}
		else{
			MLCDUpdateByte(battery[i*4], row, column);
			MLCDUpdateByte(battery[i*4 + 1], row, column + 1);
    6440:	ee 24       	eor	r14, r14
    6442:	e3 94       	inc	r14
    6444:	e6 0e       	add	r14, r22
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    6446:	f1 2c       	mov	r15, r1
			MLCDUpdateByte(~battery[i*4 + 3], row, column + 3);
		}
		else{
			MLCDUpdateByte(battery[i*4], row, column);
			MLCDUpdateByte(battery[i*4 + 1], row, column + 1);
			MLCDUpdateByte(battery[i*4 + 2], row, column + 2);
    6448:	02 e0       	ldi	r16, 0x02	; 2
    644a:	06 0f       	add	r16, r22
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    644c:	10 e0       	ldi	r17, 0x00	; 0
		}
		else{
			MLCDUpdateByte(battery[i*4], row, column);
			MLCDUpdateByte(battery[i*4 + 1], row, column + 1);
			MLCDUpdateByte(battery[i*4 + 2], row, column + 2);
			MLCDUpdateByte(battery[i*4 + 3], row, column + 3);
    644e:	6d 5f       	subi	r22, 0xFD	; 253
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    6450:	a6 2e       	mov	r10, r22
    6452:	b1 2c       	mov	r11, r1
	else if (percentage<85)	battery = battery_85;
	else if (percentage<90)	battery = battery_90;
	else if (percentage<95)	battery = battery_95;
	else					battery = battery_100;
	for(i=0; i<17; i++){
		if(white){
    6454:	99 23       	and	r25, r25
    6456:	89 f1       	breq	.+98     	; 0x64ba <MLCDDrawBattery+0x184>
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    6458:	68 2f       	mov	r22, r24
    645a:	70 e0       	ldi	r23, 0x00	; 0
    645c:	61 50       	subi	r22, 0x01	; 1
    645e:	71 09       	sbc	r23, r1
    6460:	86 9e       	mul	r8, r22
    6462:	a0 01       	movw	r20, r0
    6464:	87 9e       	mul	r8, r23
    6466:	50 0d       	add	r21, r0
    6468:	11 24       	eor	r1, r1
    646a:	43 57       	subi	r20, 0x73	; 115
    646c:	5d 49       	sbci	r21, 0x9D	; 157
    646e:	ba 01       	movw	r22, r20
    6470:	6c 0d       	add	r22, r12
    6472:	7d 1d       	adc	r23, r13
    6474:	61 50       	subi	r22, 0x01	; 1
    6476:	71 09       	sbc	r23, r1
	else if (percentage<90)	battery = battery_90;
	else if (percentage<95)	battery = battery_95;
	else					battery = battery_100;
	for(i=0; i<17; i++){
		if(white){
			MLCDUpdateByte(~battery[i*4], row, column);
    6478:	f9 01       	movw	r30, r18
    647a:	70 80       	ld	r7, Z
    647c:	70 94       	com	r7
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    647e:	fb 01       	movw	r30, r22
    6480:	70 82       	st	Z, r7
    6482:	ba 01       	movw	r22, r20
    6484:	6e 0d       	add	r22, r14
    6486:	7f 1d       	adc	r23, r15
    6488:	61 50       	subi	r22, 0x01	; 1
    648a:	71 09       	sbc	r23, r1
	else if (percentage<95)	battery = battery_95;
	else					battery = battery_100;
	for(i=0; i<17; i++){
		if(white){
			MLCDUpdateByte(~battery[i*4], row, column);
			MLCDUpdateByte(~battery[i*4 + 1], row, column + 1);
    648c:	78 80       	ld	r7, Y
    648e:	70 94       	com	r7
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    6490:	fb 01       	movw	r30, r22
    6492:	70 82       	st	Z, r7
    6494:	ba 01       	movw	r22, r20
    6496:	60 0f       	add	r22, r16
    6498:	71 1f       	adc	r23, r17
    649a:	61 50       	subi	r22, 0x01	; 1
    649c:	71 09       	sbc	r23, r1
	else					battery = battery_100;
	for(i=0; i<17; i++){
		if(white){
			MLCDUpdateByte(~battery[i*4], row, column);
			MLCDUpdateByte(~battery[i*4 + 1], row, column + 1);
			MLCDUpdateByte(~battery[i*4 + 2], row, column + 2);
    649e:	7c 90       	ld	r7, X
    64a0:	70 94       	com	r7
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    64a2:	fb 01       	movw	r30, r22
    64a4:	70 82       	st	Z, r7
    64a6:	4a 0d       	add	r20, r10
    64a8:	5b 1d       	adc	r21, r11
    64aa:	41 50       	subi	r20, 0x01	; 1
    64ac:	51 09       	sbc	r21, r1
	for(i=0; i<17; i++){
		if(white){
			MLCDUpdateByte(~battery[i*4], row, column);
			MLCDUpdateByte(~battery[i*4 + 1], row, column + 1);
			MLCDUpdateByte(~battery[i*4 + 2], row, column + 2);
			MLCDUpdateByte(~battery[i*4 + 3], row, column + 3);
    64ae:	f2 01       	movw	r30, r4
    64b0:	60 81       	ld	r22, Z
    64b2:	60 95       	com	r22
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    64b4:	fa 01       	movw	r30, r20
    64b6:	60 83       	st	Z, r22
    64b8:	2c c0       	rjmp	.+88     	; 0x6512 <MLCDDrawBattery+0x1dc>
    64ba:	68 2f       	mov	r22, r24
    64bc:	70 e0       	ldi	r23, 0x00	; 0
    64be:	61 50       	subi	r22, 0x01	; 1
    64c0:	71 09       	sbc	r23, r1
    64c2:	86 9e       	mul	r8, r22
    64c4:	a0 01       	movw	r20, r0
    64c6:	87 9e       	mul	r8, r23
    64c8:	50 0d       	add	r21, r0
    64ca:	11 24       	eor	r1, r1
    64cc:	43 57       	subi	r20, 0x73	; 115
    64ce:	5d 49       	sbci	r21, 0x9D	; 157
    64d0:	ba 01       	movw	r22, r20
    64d2:	6c 0d       	add	r22, r12
    64d4:	7d 1d       	adc	r23, r13
    64d6:	61 50       	subi	r22, 0x01	; 1
    64d8:	71 09       	sbc	r23, r1
    64da:	f9 01       	movw	r30, r18
    64dc:	70 80       	ld	r7, Z
    64de:	fb 01       	movw	r30, r22
    64e0:	70 82       	st	Z, r7
    64e2:	ba 01       	movw	r22, r20
    64e4:	6e 0d       	add	r22, r14
    64e6:	7f 1d       	adc	r23, r15
    64e8:	61 50       	subi	r22, 0x01	; 1
    64ea:	71 09       	sbc	r23, r1
    64ec:	78 80       	ld	r7, Y
    64ee:	fb 01       	movw	r30, r22
    64f0:	70 82       	st	Z, r7
    64f2:	ba 01       	movw	r22, r20
    64f4:	60 0f       	add	r22, r16
    64f6:	71 1f       	adc	r23, r17
    64f8:	61 50       	subi	r22, 0x01	; 1
    64fa:	71 09       	sbc	r23, r1
    64fc:	7c 90       	ld	r7, X
    64fe:	fb 01       	movw	r30, r22
    6500:	70 82       	st	Z, r7
    6502:	4a 0d       	add	r20, r10
    6504:	5b 1d       	adc	r21, r11
    6506:	41 50       	subi	r20, 0x01	; 1
    6508:	51 09       	sbc	r21, r1
    650a:	f2 01       	movw	r30, r4
    650c:	60 81       	ld	r22, Z
    650e:	fa 01       	movw	r30, r20
    6510:	60 83       	st	Z, r22
			MLCDUpdateByte(battery[i*4], row, column);
			MLCDUpdateByte(battery[i*4 + 1], row, column + 1);
			MLCDUpdateByte(battery[i*4 + 2], row, column + 2);
			MLCDUpdateByte(battery[i*4 + 3], row, column + 3);
		}
		row++;
    6512:	8f 5f       	subi	r24, 0xFF	; 255
    6514:	2c 5f       	subi	r18, 0xFC	; 252
    6516:	3f 4f       	sbci	r19, 0xFF	; 255
    6518:	24 96       	adiw	r28, 0x04	; 4
    651a:	14 96       	adiw	r26, 0x04	; 4
    651c:	f4 e0       	ldi	r31, 0x04	; 4
    651e:	4f 0e       	add	r4, r31
    6520:	51 1c       	adc	r5, r1
	else if (percentage<80)	battery = battery_80;
	else if (percentage<85)	battery = battery_85;
	else if (percentage<90)	battery = battery_90;
	else if (percentage<95)	battery = battery_95;
	else					battery = battery_100;
	for(i=0; i<17; i++){
    6522:	89 11       	cpse	r24, r9
    6524:	97 cf       	rjmp	.-210    	; 0x6454 <MLCDDrawBattery+0x11e>
			MLCDUpdateByte(battery[i*4 + 2], row, column + 2);
			MLCDUpdateByte(battery[i*4 + 3], row, column + 3);
		}
		row++;
	}
}
    6526:	df 91       	pop	r29
    6528:	cf 91       	pop	r28
    652a:	1f 91       	pop	r17
    652c:	0f 91       	pop	r16
    652e:	ff 90       	pop	r15
    6530:	ef 90       	pop	r14
    6532:	df 90       	pop	r13
    6534:	cf 90       	pop	r12
    6536:	bf 90       	pop	r11
    6538:	af 90       	pop	r10
    653a:	9f 90       	pop	r9
    653c:	8f 90       	pop	r8
    653e:	7f 90       	pop	r7
    6540:	5f 90       	pop	r5
    6542:	4f 90       	pop	r4
    6544:	08 95       	ret

00006546 <MLCDDrawRLArrow>:

void MLCDDrawRLArrow(uint8_t row, uint8_t column,uint8_t direction, bool white){
    6546:	cf 92       	push	r12
    6548:	df 92       	push	r13
    654a:	ff 92       	push	r15
    654c:	0f 93       	push	r16
    654e:	1f 93       	push	r17
    6550:	cf 93       	push	r28
    6552:	df 93       	push	r29
	uint16_t i;
	const uint8_t *arrow;
	switch(direction){
    6554:	42 30       	cpi	r20, 0x02	; 2
    6556:	19 f0       	breq	.+6      	; 0x655e <MLCDDrawRLArrow+0x18>
    6558:	43 30       	cpi	r20, 0x03	; 3
    655a:	21 f0       	breq	.+8      	; 0x6564 <MLCDDrawRLArrow+0x1e>
    655c:	4c c0       	rjmp	.+152    	; 0x65f6 <MLCDDrawRLArrow+0xb0>
		case MLCD_ARROW_LEFT:
			arrow = arrow_left;
    655e:	e5 ed       	ldi	r30, 0xD5	; 213
    6560:	f1 e6       	ldi	r31, 0x61	; 97
    6562:	02 c0       	rjmp	.+4      	; 0x6568 <MLCDDrawRLArrow+0x22>
			break;
		case MLCD_ARROW_RIGHT:
			arrow = arrow_right;
    6564:	e3 eb       	ldi	r30, 0xB3	; 179
    6566:	f1 e6       	ldi	r31, 0x61	; 97
    6568:	df 01       	movw	r26, r30
    656a:	31 96       	adiw	r30, 0x01	; 1
    656c:	31 e1       	ldi	r19, 0x11	; 17
    656e:	38 0f       	add	r19, r24
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    6570:	c6 2e       	mov	r12, r22
    6572:	d1 2c       	mov	r13, r1
    6574:	92 e3       	ldi	r25, 0x32	; 50
			MLCDUpdateByte(~arrow[i*2], row, column);
			MLCDUpdateByte(~arrow[i*2 + 1], row, column + 1);
		}
		else{
			MLCDUpdateByte(arrow[i*2], row, column);
			MLCDUpdateByte(arrow[i*2 + 1], row, column + 1);
    6576:	6f 5f       	subi	r22, 0xFF	; 255
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    6578:	70 e0       	ldi	r23, 0x00	; 0
			return;
	
	}
	
	for(i=0; i<17; i++){
		if(white){
    657a:	22 23       	and	r18, r18
    657c:	e9 f0       	breq	.+58     	; 0x65b8 <MLCDDrawRLArrow+0x72>
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    657e:	08 2f       	mov	r16, r24
    6580:	10 e0       	ldi	r17, 0x00	; 0
    6582:	01 50       	subi	r16, 0x01	; 1
    6584:	11 09       	sbc	r17, r1
    6586:	90 9f       	mul	r25, r16
    6588:	a0 01       	movw	r20, r0
    658a:	91 9f       	mul	r25, r17
    658c:	50 0d       	add	r21, r0
    658e:	11 24       	eor	r1, r1
    6590:	43 57       	subi	r20, 0x73	; 115
    6592:	5d 49       	sbci	r21, 0x9D	; 157
    6594:	8a 01       	movw	r16, r20
    6596:	0c 0d       	add	r16, r12
    6598:	1d 1d       	adc	r17, r13
    659a:	01 50       	subi	r16, 0x01	; 1
    659c:	11 09       	sbc	r17, r1
	
	}
	
	for(i=0; i<17; i++){
		if(white){
			MLCDUpdateByte(~arrow[i*2], row, column);
    659e:	fc 90       	ld	r15, X
    65a0:	f0 94       	com	r15
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    65a2:	e8 01       	movw	r28, r16
    65a4:	f8 82       	st	Y, r15
    65a6:	46 0f       	add	r20, r22
    65a8:	57 1f       	adc	r21, r23
    65aa:	41 50       	subi	r20, 0x01	; 1
    65ac:	51 09       	sbc	r21, r1
	}
	
	for(i=0; i<17; i++){
		if(white){
			MLCDUpdateByte(~arrow[i*2], row, column);
			MLCDUpdateByte(~arrow[i*2 + 1], row, column + 1);
    65ae:	10 81       	ld	r17, Z
    65b0:	10 95       	com	r17
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    65b2:	ea 01       	movw	r28, r20
    65b4:	18 83       	st	Y, r17
    65b6:	1a c0       	rjmp	.+52     	; 0x65ec <MLCDDrawRLArrow+0xa6>
    65b8:	08 2f       	mov	r16, r24
    65ba:	10 e0       	ldi	r17, 0x00	; 0
    65bc:	01 50       	subi	r16, 0x01	; 1
    65be:	11 09       	sbc	r17, r1
    65c0:	90 9f       	mul	r25, r16
    65c2:	a0 01       	movw	r20, r0
    65c4:	91 9f       	mul	r25, r17
    65c6:	50 0d       	add	r21, r0
    65c8:	11 24       	eor	r1, r1
    65ca:	43 57       	subi	r20, 0x73	; 115
    65cc:	5d 49       	sbci	r21, 0x9D	; 157
    65ce:	8a 01       	movw	r16, r20
    65d0:	0c 0d       	add	r16, r12
    65d2:	1d 1d       	adc	r17, r13
    65d4:	01 50       	subi	r16, 0x01	; 1
    65d6:	11 09       	sbc	r17, r1
    65d8:	fc 90       	ld	r15, X
    65da:	e8 01       	movw	r28, r16
    65dc:	f8 82       	st	Y, r15
    65de:	46 0f       	add	r20, r22
    65e0:	57 1f       	adc	r21, r23
    65e2:	41 50       	subi	r20, 0x01	; 1
    65e4:	51 09       	sbc	r21, r1
    65e6:	10 81       	ld	r17, Z
    65e8:	ea 01       	movw	r28, r20
    65ea:	18 83       	st	Y, r17
		}
		else{
			MLCDUpdateByte(arrow[i*2], row, column);
			MLCDUpdateByte(arrow[i*2 + 1], row, column + 1);
		}
		row++;
    65ec:	8f 5f       	subi	r24, 0xFF	; 255
    65ee:	12 96       	adiw	r26, 0x02	; 2
    65f0:	32 96       	adiw	r30, 0x02	; 2
		default:
			return;
	
	}
	
	for(i=0; i<17; i++){
    65f2:	83 13       	cpse	r24, r19
    65f4:	c2 cf       	rjmp	.-124    	; 0x657a <MLCDDrawRLArrow+0x34>
			MLCDUpdateByte(arrow[i*2 + 1], row, column + 1);
		}
		row++;
	}
	
}
    65f6:	df 91       	pop	r29
    65f8:	cf 91       	pop	r28
    65fa:	1f 91       	pop	r17
    65fc:	0f 91       	pop	r16
    65fe:	ff 90       	pop	r15
    6600:	df 90       	pop	r13
    6602:	cf 90       	pop	r12
    6604:	08 95       	ret

00006606 <ioport_set_pin_sense_mode>:
		
	//}
	for(i=0;i<MLCD_YRES;i++){
		MLCDWriteLine(data2,i+1);
	}
}
    6606:	e8 2f       	mov	r30, r24
    6608:	e6 95       	lsr	r30
    660a:	e6 95       	lsr	r30
    660c:	e6 95       	lsr	r30
    660e:	90 e2       	ldi	r25, 0x20	; 32
    6610:	e9 9f       	mul	r30, r25
    6612:	f0 01       	movw	r30, r0
    6614:	11 24       	eor	r1, r1
    6616:	e0 5f       	subi	r30, 0xF0	; 240
    6618:	f9 4f       	sbci	r31, 0xF9	; 249
    661a:	87 70       	andi	r24, 0x07	; 7
    661c:	e8 0f       	add	r30, r24
    661e:	f1 1d       	adc	r31, r1
    6620:	8f b7       	in	r24, 0x3f	; 63
    6622:	f8 94       	cli
    6624:	90 81       	ld	r25, Z
    6626:	98 7f       	andi	r25, 0xF8	; 248
    6628:	90 83       	st	Z, r25
    662a:	90 81       	ld	r25, Z
    662c:	67 70       	andi	r22, 0x07	; 7
    662e:	69 2b       	or	r22, r25
    6630:	60 83       	st	Z, r22
    6632:	8f bf       	out	0x3f, r24	; 63
    6634:	08 95       	ret

00006636 <__vector_104>:
    6636:	1f 92       	push	r1
    6638:	0f 92       	push	r0
    663a:	0f b6       	in	r0, 0x3f	; 63
    663c:	0f 92       	push	r0
    663e:	11 24       	eor	r1, r1
    6640:	0b b6       	in	r0, 0x3b	; 59
    6642:	0f 92       	push	r0
    6644:	2f 93       	push	r18
    6646:	3f 93       	push	r19
    6648:	4f 93       	push	r20
    664a:	5f 93       	push	r21
    664c:	6f 93       	push	r22
    664e:	7f 93       	push	r23
    6650:	8f 93       	push	r24
    6652:	9f 93       	push	r25
    6654:	af 93       	push	r26
    6656:	bf 93       	push	r27
    6658:	ef 93       	push	r30
    665a:	ff 93       	push	r31
    665c:	e0 ea       	ldi	r30, 0xA0	; 160
    665e:	f6 e0       	ldi	r31, 0x06	; 6
    6660:	80 85       	ldd	r24, Z+8	; 0x08
    6662:	82 fd       	sbrc	r24, 2
    6664:	0a c0       	rjmp	.+20     	; 0x667a <__vector_104+0x44>
    6666:	81 e0       	ldi	r24, 0x01	; 1
    6668:	e0 ee       	ldi	r30, 0xE0	; 224
    666a:	f7 e0       	ldi	r31, 0x07	; 7
    666c:	86 83       	std	Z+6, r24	; 0x06
    666e:	80 91 67 62 	lds	r24, 0x6267
    6672:	8f 5f       	subi	r24, 0xFF	; 255
    6674:	80 93 67 62 	sts	0x6267, r24
    6678:	46 c0       	rjmp	.+140    	; 0x6706 <__vector_104+0xd0>
    667a:	e0 ea       	ldi	r30, 0xA0	; 160
    667c:	f6 e0       	ldi	r31, 0x06	; 6
    667e:	80 85       	ldd	r24, Z+8	; 0x08
    6680:	83 fd       	sbrc	r24, 3
    6682:	19 c0       	rjmp	.+50     	; 0x66b6 <__vector_104+0x80>
    6684:	10 92 71 62 	sts	0x6271, r1
    6688:	10 92 72 62 	sts	0x6272, r1
    668c:	10 92 73 62 	sts	0x6273, r1
    6690:	10 92 74 62 	sts	0x6274, r1
    6694:	10 92 6d 62 	sts	0x626D, r1
    6698:	10 92 6e 62 	sts	0x626E, r1
    669c:	10 92 6f 62 	sts	0x626F, r1
    66a0:	10 92 70 62 	sts	0x6270, r1
    66a4:	10 92 69 62 	sts	0x6269, r1
    66a8:	10 92 6a 62 	sts	0x626A, r1
    66ac:	10 92 6b 62 	sts	0x626B, r1
    66b0:	10 92 6c 62 	sts	0x626C, r1
    66b4:	28 c0       	rjmp	.+80     	; 0x6706 <__vector_104+0xd0>
    66b6:	e0 ea       	ldi	r30, 0xA0	; 160
    66b8:	f6 e0       	ldi	r31, 0x06	; 6
    66ba:	80 85       	ldd	r24, Z+8	; 0x08
    66bc:	84 fd       	sbrc	r24, 4
    66be:	0a c0       	rjmp	.+20     	; 0x66d4 <__vector_104+0x9e>
    66c0:	82 e0       	ldi	r24, 0x02	; 2
    66c2:	e0 ee       	ldi	r30, 0xE0	; 224
    66c4:	f7 e0       	ldi	r31, 0x07	; 7
    66c6:	86 83       	std	Z+6, r24	; 0x06
    66c8:	80 91 67 62 	lds	r24, 0x6267
    66cc:	81 50       	subi	r24, 0x01	; 1
    66ce:	80 93 67 62 	sts	0x6267, r24
    66d2:	19 c0       	rjmp	.+50     	; 0x6706 <__vector_104+0xd0>
    66d4:	e0 ea       	ldi	r30, 0xA0	; 160
    66d6:	f6 e0       	ldi	r31, 0x06	; 6
    66d8:	80 85       	ldd	r24, Z+8	; 0x08
    66da:	85 fd       	sbrc	r24, 5
    66dc:	0e c0       	rjmp	.+28     	; 0x66fa <__vector_104+0xc4>
    66de:	f3 db       	rcall	.-2074   	; 0x5ec6 <MLCDShowImecLogo>
    66e0:	8a e0       	ldi	r24, 0x0A	; 10
    66e2:	9b e8       	ldi	r25, 0x8B	; 139
    66e4:	a2 e0       	ldi	r26, 0x02	; 2
    66e6:	b0 e0       	ldi	r27, 0x00	; 0
    66e8:	01 97       	sbiw	r24, 0x01	; 1
    66ea:	a1 09       	sbc	r26, r1
    66ec:	b1 09       	sbc	r27, r1
    66ee:	00 97       	sbiw	r24, 0x00	; 0
    66f0:	a1 05       	cpc	r26, r1
    66f2:	b1 05       	cpc	r27, r1
    66f4:	c9 f7       	brne	.-14     	; 0x66e8 <__vector_104+0xb2>
    66f6:	66 db       	rcall	.-2356   	; 0x5dc4 <MLCDClearFrame>
    66f8:	06 c0       	rjmp	.+12     	; 0x6706 <__vector_104+0xd0>
    66fa:	e0 ee       	ldi	r30, 0xE0	; 224
    66fc:	f7 e0       	ldi	r31, 0x07	; 7
    66fe:	82 e0       	ldi	r24, 0x02	; 2
    6700:	85 83       	std	Z+5, r24	; 0x05
    6702:	81 e0       	ldi	r24, 0x01	; 1
    6704:	85 83       	std	Z+5, r24	; 0x05
    6706:	ff 91       	pop	r31
    6708:	ef 91       	pop	r30
    670a:	bf 91       	pop	r27
    670c:	af 91       	pop	r26
    670e:	9f 91       	pop	r25
    6710:	8f 91       	pop	r24
    6712:	7f 91       	pop	r23
    6714:	6f 91       	pop	r22
    6716:	5f 91       	pop	r21
    6718:	4f 91       	pop	r20
    671a:	3f 91       	pop	r19
    671c:	2f 91       	pop	r18
    671e:	0f 90       	pop	r0
    6720:	0b be       	out	0x3b, r0	; 59
    6722:	0f 90       	pop	r0
    6724:	0f be       	out	0x3f, r0	; 63
    6726:	0f 90       	pop	r0
    6728:	1f 90       	pop	r1
    672a:	18 95       	reti

0000672c <PowerScreen>:
    672c:	ef 92       	push	r14
    672e:	0f 93       	push	r16
    6730:	1f 93       	push	r17
    6732:	cf 93       	push	r28
    6734:	df 93       	push	r29
    6736:	10 92 79 62 	sts	0x6279, r1
    673a:	10 92 7a 62 	sts	0x627A, r1
    673e:	c0 e0       	ldi	r28, 0x00	; 0
    6740:	d0 e0       	ldi	r29, 0x00	; 0
    6742:	12 e3       	ldi	r17, 0x32	; 50
    6744:	fe 01       	movw	r30, r28
    6746:	ee 0f       	add	r30, r30
    6748:	ff 1f       	adc	r31, r31
    674a:	ee 0f       	add	r30, r30
    674c:	ff 1f       	adc	r31, r31
    674e:	e8 58       	subi	r30, 0x88	; 136
    6750:	fe 46       	sbci	r31, 0x6E	; 110
    6752:	20 e0       	ldi	r18, 0x00	; 0
    6754:	30 e0       	ldi	r19, 0x00	; 0
    6756:	40 ef       	ldi	r20, 0xF0	; 240
    6758:	52 e4       	ldi	r21, 0x42	; 66
    675a:	60 81       	ld	r22, Z
    675c:	71 81       	ldd	r23, Z+1	; 0x01
    675e:	82 81       	ldd	r24, Z+2	; 0x02
    6760:	93 81       	ldd	r25, Z+3	; 0x03
    6762:	3e d5       	rcall	.+2684   	; 0x71e0 <__mulsf3>
    6764:	20 e0       	ldi	r18, 0x00	; 0
    6766:	30 e0       	ldi	r19, 0x00	; 0
    6768:	48 e4       	ldi	r20, 0x48	; 72
    676a:	52 e4       	ldi	r21, 0x42	; 66
    676c:	a4 d3       	rcall	.+1864   	; 0x6eb6 <__divsf3>
    676e:	0b d4       	rcall	.+2070   	; 0x6f86 <__fixunssfsi>
    6770:	26 2f       	mov	r18, r22
    6772:	61 2f       	mov	r22, r17
    6774:	6c 1b       	sub	r22, r28
    6776:	00 e0       	ldi	r16, 0x00	; 0
    6778:	41 e0       	ldi	r20, 0x01	; 1
    677a:	80 ef       	ldi	r24, 0xF0	; 240
    677c:	3c dd       	rcall	.-1416   	; 0x61f6 <MLCDDrawColumn>
    677e:	80 91 79 62 	lds	r24, 0x6279
    6782:	90 91 7a 62 	lds	r25, 0x627A
    6786:	01 96       	adiw	r24, 0x01	; 1
    6788:	80 93 79 62 	sts	0x6279, r24
    678c:	90 93 7a 62 	sts	0x627A, r25
    6790:	20 91 68 62 	lds	r18, 0x6268
    6794:	30 e0       	ldi	r19, 0x00	; 0
    6796:	28 17       	cp	r18, r24
    6798:	39 07       	cpc	r19, r25
    679a:	14 f0       	brlt	.+4      	; 0x67a0 <PowerScreen+0x74>
    679c:	ec 01       	movw	r28, r24
    679e:	d2 cf       	rjmp	.-92     	; 0x6744 <PowerScreen+0x18>
    67a0:	60 91 78 91 	lds	r22, 0x9178
    67a4:	70 91 79 91 	lds	r23, 0x9179
    67a8:	80 91 7a 91 	lds	r24, 0x917A
    67ac:	90 91 7b 91 	lds	r25, 0x917B
    67b0:	e1 2c       	mov	r14, r1
    67b2:	0d e0       	ldi	r16, 0x0D	; 13
    67b4:	2b e3       	ldi	r18, 0x3B	; 59
    67b6:	4b e2       	ldi	r20, 0x2B	; 43
    67b8:	82 dc       	rcall	.-1788   	; 0x60be <MLCDWriteDouble>
    67ba:	00 e0       	ldi	r16, 0x00	; 0
    67bc:	2f e1       	ldi	r18, 0x1F	; 31
    67be:	4b e3       	ldi	r20, 0x3B	; 59
    67c0:	6b e2       	ldi	r22, 0x2B	; 43
    67c2:	8f ef       	ldi	r24, 0xFF	; 255
    67c4:	91 e6       	ldi	r25, 0x61	; 97
    67c6:	01 dc       	rcall	.-2046   	; 0x5fca <MLCDWriteString>
    67c8:	60 91 69 62 	lds	r22, 0x6269
    67cc:	70 91 6a 62 	lds	r23, 0x626A
    67d0:	80 91 6b 62 	lds	r24, 0x626B
    67d4:	90 91 6c 62 	lds	r25, 0x626C
    67d8:	ee 24       	eor	r14, r14
    67da:	e3 94       	inc	r14
    67dc:	01 e0       	ldi	r16, 0x01	; 1
    67de:	20 ee       	ldi	r18, 0xE0	; 224
    67e0:	41 e1       	ldi	r20, 0x11	; 17
    67e2:	6d dc       	rcall	.-1830   	; 0x60be <MLCDWriteDouble>
    67e4:	df 91       	pop	r29
    67e6:	cf 91       	pop	r28
    67e8:	1f 91       	pop	r17
    67ea:	0f 91       	pop	r16
    67ec:	ef 90       	pop	r14
    67ee:	08 95       	ret

000067f0 <showBattery>:
    67f0:	4f 92       	push	r4
    67f2:	5f 92       	push	r5
    67f4:	6f 92       	push	r6
    67f6:	7f 92       	push	r7
    67f8:	af 92       	push	r10
    67fa:	cf 92       	push	r12
    67fc:	df 92       	push	r13
    67fe:	ef 92       	push	r14
    6800:	ff 92       	push	r15
    6802:	0f 93       	push	r16
    6804:	2b 01       	movw	r4, r22
    6806:	3c 01       	movw	r6, r24
    6808:	20 e0       	ldi	r18, 0x00	; 0
    680a:	30 e0       	ldi	r19, 0x00	; 0
    680c:	48 ec       	ldi	r20, 0xC8	; 200
    680e:	52 e4       	ldi	r21, 0x42	; 66
    6810:	e7 d4       	rcall	.+2510   	; 0x71e0 <__mulsf3>
    6812:	20 e0       	ldi	r18, 0x00	; 0
    6814:	30 e0       	ldi	r19, 0x00	; 0
    6816:	40 ea       	ldi	r20, 0xA0	; 160
    6818:	50 e4       	ldi	r21, 0x40	; 64
    681a:	4d d3       	rcall	.+1690   	; 0x6eb6 <__divsf3>
    681c:	b4 d3       	rcall	.+1896   	; 0x6f86 <__fixunssfsi>
    681e:	f6 2e       	mov	r15, r22
    6820:	70 e0       	ldi	r23, 0x00	; 0
    6822:	80 e0       	ldi	r24, 0x00	; 0
    6824:	90 e0       	ldi	r25, 0x00	; 0
    6826:	db d3       	rcall	.+1974   	; 0x6fde <__floatunsisf>
    6828:	90 d4       	rcall	.+2336   	; 0x714a <log10>
    682a:	20 e0       	ldi	r18, 0x00	; 0
    682c:	30 e0       	ldi	r19, 0x00	; 0
    682e:	40 e8       	ldi	r20, 0x80	; 128
    6830:	5f e3       	ldi	r21, 0x3F	; 63
    6832:	d9 d2       	rcall	.+1458   	; 0x6de6 <__addsf3>
    6834:	a8 d3       	rcall	.+1872   	; 0x6f86 <__fixunssfsi>
    6836:	c6 2e       	mov	r12, r22
    6838:	c1 94       	neg	r12
    683a:	8c 2d       	mov	r24, r12
    683c:	88 0f       	add	r24, r24
    683e:	0f 2e       	mov	r0, r31
    6840:	f1 e3       	ldi	r31, 0x31	; 49
    6842:	cf 2e       	mov	r12, r31
    6844:	f0 2d       	mov	r31, r0
    6846:	c8 0e       	add	r12, r24
    6848:	a1 2c       	mov	r10, r1
    684a:	0f 2e       	mov	r0, r31
    684c:	f2 e1       	ldi	r31, 0x12	; 18
    684e:	ef 2e       	mov	r14, r31
    6850:	f0 2d       	mov	r31, r0
    6852:	01 e1       	ldi	r16, 0x11	; 17
    6854:	2f 2d       	mov	r18, r15
    6856:	30 e0       	ldi	r19, 0x00	; 0
    6858:	40 e0       	ldi	r20, 0x00	; 0
    685a:	50 e0       	ldi	r21, 0x00	; 0
    685c:	60 e0       	ldi	r22, 0x00	; 0
    685e:	70 e0       	ldi	r23, 0x00	; 0
    6860:	80 e0       	ldi	r24, 0x00	; 0
    6862:	90 e0       	ldi	r25, 0x00	; 0
    6864:	0f dc       	rcall	.-2018   	; 0x6084 <MLCDWriteInt>
    6866:	00 e0       	ldi	r16, 0x00	; 0
    6868:	21 e3       	ldi	r18, 0x31	; 49
    686a:	42 e1       	ldi	r20, 0x12	; 18
    686c:	61 e1       	ldi	r22, 0x11	; 17
    686e:	82 e0       	ldi	r24, 0x02	; 2
    6870:	92 e6       	ldi	r25, 0x62	; 98
    6872:	ab db       	rcall	.-2218   	; 0x5fca <MLCDWriteString>
    6874:	20 e0       	ldi	r18, 0x00	; 0
    6876:	4f 2d       	mov	r20, r15
    6878:	6f e2       	ldi	r22, 0x2F	; 47
    687a:	81 e0       	ldi	r24, 0x01	; 1
    687c:	5c dd       	rcall	.-1352   	; 0x6336 <MLCDDrawBattery>
    687e:	c0 90 75 62 	lds	r12, 0x6275
    6882:	d0 90 76 62 	lds	r13, 0x6276
    6886:	e0 90 77 62 	lds	r14, 0x6277
    688a:	f0 90 78 62 	lds	r15, 0x6278
    688e:	26 ea       	ldi	r18, 0xA6	; 166
    6890:	3b e9       	ldi	r19, 0x9B	; 155
    6892:	44 e4       	ldi	r20, 0x44	; 68
    6894:	5b e3       	ldi	r21, 0x3B	; 59
    6896:	c7 01       	movw	r24, r14
    6898:	b6 01       	movw	r22, r12
    689a:	a5 d2       	rcall	.+1354   	; 0x6de6 <__addsf3>
    689c:	9b 01       	movw	r18, r22
    689e:	ac 01       	movw	r20, r24
    68a0:	c3 01       	movw	r24, r6
    68a2:	b2 01       	movw	r22, r4
    68a4:	4e d4       	rcall	.+2204   	; 0x7142 <__gesf2>
    68a6:	18 16       	cp	r1, r24
    68a8:	7c f4       	brge	.+30     	; 0x68c8 <showBattery+0xd8>
    68aa:	2e e2       	ldi	r18, 0x2E	; 46
    68ac:	41 e0       	ldi	r20, 0x01	; 1
    68ae:	61 e1       	ldi	r22, 0x11	; 17
    68b0:	84 e0       	ldi	r24, 0x04	; 4
    68b2:	92 e6       	ldi	r25, 0x62	; 98
    68b4:	8a db       	rcall	.-2284   	; 0x5fca <MLCDWriteString>
    68b6:	40 92 75 62 	sts	0x6275, r4
    68ba:	50 92 76 62 	sts	0x6276, r5
    68be:	60 92 77 62 	sts	0x6277, r6
    68c2:	70 92 78 62 	sts	0x6278, r7
    68c6:	1d c0       	rjmp	.+58     	; 0x6902 <showBattery+0x112>
    68c8:	26 ea       	ldi	r18, 0xA6	; 166
    68ca:	3b e9       	ldi	r19, 0x9B	; 155
    68cc:	44 e4       	ldi	r20, 0x44	; 68
    68ce:	5b e3       	ldi	r21, 0x3B	; 59
    68d0:	c7 01       	movw	r24, r14
    68d2:	b6 01       	movw	r22, r12
    68d4:	87 d2       	rcall	.+1294   	; 0x6de4 <__subsf3>
    68d6:	9b 01       	movw	r18, r22
    68d8:	ac 01       	movw	r20, r24
    68da:	c3 01       	movw	r24, r6
    68dc:	b2 01       	movw	r22, r4
    68de:	e7 d2       	rcall	.+1486   	; 0x6eae <__cmpsf2>
    68e0:	88 23       	and	r24, r24
    68e2:	7c f4       	brge	.+30     	; 0x6902 <showBattery+0x112>
    68e4:	00 e0       	ldi	r16, 0x00	; 0
    68e6:	2e e2       	ldi	r18, 0x2E	; 46
    68e8:	41 e0       	ldi	r20, 0x01	; 1
    68ea:	61 e1       	ldi	r22, 0x11	; 17
    68ec:	86 e0       	ldi	r24, 0x06	; 6
    68ee:	92 e6       	ldi	r25, 0x62	; 98
    68f0:	6c db       	rcall	.-2344   	; 0x5fca <MLCDWriteString>
    68f2:	40 92 75 62 	sts	0x6275, r4
    68f6:	50 92 76 62 	sts	0x6276, r5
    68fa:	60 92 77 62 	sts	0x6277, r6
    68fe:	70 92 78 62 	sts	0x6278, r7
    6902:	0f 91       	pop	r16
    6904:	ff 90       	pop	r15
    6906:	ef 90       	pop	r14
    6908:	df 90       	pop	r13
    690a:	cf 90       	pop	r12
    690c:	af 90       	pop	r10
    690e:	7f 90       	pop	r7
    6910:	6f 90       	pop	r6
    6912:	5f 90       	pop	r5
    6914:	4f 90       	pop	r4
    6916:	08 95       	ret

00006918 <BarScreen>:
    6918:	8f 92       	push	r8
    691a:	9f 92       	push	r9
    691c:	af 92       	push	r10
    691e:	bf 92       	push	r11
    6920:	ef 92       	push	r14
    6922:	0f 93       	push	r16
    6924:	20 e0       	ldi	r18, 0x00	; 0
    6926:	30 e0       	ldi	r19, 0x00	; 0
    6928:	4c e1       	ldi	r20, 0x1C	; 28
    692a:	53 e4       	ldi	r21, 0x43	; 67
    692c:	60 91 40 92 	lds	r22, 0x9240
    6930:	70 91 41 92 	lds	r23, 0x9241
    6934:	80 91 42 92 	lds	r24, 0x9242
    6938:	90 91 43 92 	lds	r25, 0x9243
    693c:	51 d4       	rcall	.+2210   	; 0x71e0 <__mulsf3>
    693e:	20 e0       	ldi	r18, 0x00	; 0
    6940:	30 e0       	ldi	r19, 0x00	; 0
    6942:	40 ef       	ldi	r20, 0xF0	; 240
    6944:	51 e4       	ldi	r21, 0x41	; 65
    6946:	b7 d2       	rcall	.+1390   	; 0x6eb6 <__divsf3>
    6948:	1e d3       	rcall	.+1596   	; 0x6f86 <__fixunssfsi>
    694a:	26 2f       	mov	r18, r22
    694c:	00 e0       	ldi	r16, 0x00	; 0
    694e:	4a e0       	ldi	r20, 0x0A	; 10
    6950:	64 e0       	ldi	r22, 0x04	; 4
    6952:	88 ec       	ldi	r24, 0xC8	; 200
    6954:	50 dc       	rcall	.-1888   	; 0x61f6 <MLCDDrawColumn>
    6956:	20 e0       	ldi	r18, 0x00	; 0
    6958:	30 e0       	ldi	r19, 0x00	; 0
    695a:	4c e1       	ldi	r20, 0x1C	; 28
    695c:	53 e4       	ldi	r21, 0x43	; 67
    695e:	60 91 44 92 	lds	r22, 0x9244
    6962:	70 91 45 92 	lds	r23, 0x9245
    6966:	80 91 46 92 	lds	r24, 0x9246
    696a:	90 91 47 92 	lds	r25, 0x9247
    696e:	38 d4       	rcall	.+2160   	; 0x71e0 <__mulsf3>
    6970:	20 e0       	ldi	r18, 0x00	; 0
    6972:	30 e0       	ldi	r19, 0x00	; 0
    6974:	40 ec       	ldi	r20, 0xC0	; 192
    6976:	50 e4       	ldi	r21, 0x40	; 64
    6978:	9e d2       	rcall	.+1340   	; 0x6eb6 <__divsf3>
    697a:	05 d3       	rcall	.+1546   	; 0x6f86 <__fixunssfsi>
    697c:	26 2f       	mov	r18, r22
    697e:	4a e0       	ldi	r20, 0x0A	; 10
    6980:	64 e1       	ldi	r22, 0x14	; 20
    6982:	88 ec       	ldi	r24, 0xC8	; 200
    6984:	38 dc       	rcall	.-1936   	; 0x61f6 <MLCDDrawColumn>
    6986:	20 e0       	ldi	r18, 0x00	; 0
    6988:	30 e0       	ldi	r19, 0x00	; 0
    698a:	4c e1       	ldi	r20, 0x1C	; 28
    698c:	53 e4       	ldi	r21, 0x43	; 67
    698e:	60 91 74 91 	lds	r22, 0x9174
    6992:	70 91 75 91 	lds	r23, 0x9175
    6996:	80 91 76 91 	lds	r24, 0x9176
    699a:	90 91 77 91 	lds	r25, 0x9177
    699e:	20 d4       	rcall	.+2112   	; 0x71e0 <__mulsf3>
    69a0:	20 e0       	ldi	r18, 0x00	; 0
    69a2:	30 e0       	ldi	r19, 0x00	; 0
    69a4:	48 e4       	ldi	r20, 0x48	; 72
    69a6:	52 e4       	ldi	r21, 0x42	; 66
    69a8:	86 d2       	rcall	.+1292   	; 0x6eb6 <__divsf3>
    69aa:	ed d2       	rcall	.+1498   	; 0x6f86 <__fixunssfsi>
    69ac:	26 2f       	mov	r18, r22
    69ae:	4a e0       	ldi	r20, 0x0A	; 10
    69b0:	64 e2       	ldi	r22, 0x24	; 36
    69b2:	88 ec       	ldi	r24, 0xC8	; 200
    69b4:	20 dc       	rcall	.-1984   	; 0x61f6 <MLCDDrawColumn>
    69b6:	24 e0       	ldi	r18, 0x04	; 4
    69b8:	4f ec       	ldi	r20, 0xCF	; 207
    69ba:	61 e1       	ldi	r22, 0x11	; 17
    69bc:	88 e0       	ldi	r24, 0x08	; 8
    69be:	92 e6       	ldi	r25, 0x62	; 98
    69c0:	04 db       	rcall	.-2552   	; 0x5fca <MLCDWriteString>
    69c2:	24 e1       	ldi	r18, 0x14	; 20
    69c4:	4f ec       	ldi	r20, 0xCF	; 207
    69c6:	61 e1       	ldi	r22, 0x11	; 17
    69c8:	80 e1       	ldi	r24, 0x10	; 16
    69ca:	92 e6       	ldi	r25, 0x62	; 98
    69cc:	fe da       	rcall	.-2564   	; 0x5fca <MLCDWriteString>
    69ce:	25 e2       	ldi	r18, 0x25	; 37
    69d0:	4f ec       	ldi	r20, 0xCF	; 207
    69d2:	61 e1       	ldi	r22, 0x11	; 17
    69d4:	88 e1       	ldi	r24, 0x18	; 24
    69d6:	92 e6       	ldi	r25, 0x62	; 98
    69d8:	f8 da       	rcall	.-2576   	; 0x5fca <MLCDWriteString>
    69da:	80 90 40 92 	lds	r8, 0x9240
    69de:	90 90 41 92 	lds	r9, 0x9241
    69e2:	a0 90 42 92 	lds	r10, 0x9242
    69e6:	b0 90 43 92 	lds	r11, 0x9243
    69ea:	c5 01       	movw	r24, r10
    69ec:	b4 01       	movw	r22, r8
    69ee:	ad d3       	rcall	.+1882   	; 0x714a <log10>
    69f0:	9b 01       	movw	r18, r22
    69f2:	ac 01       	movw	r20, r24
    69f4:	60 e0       	ldi	r22, 0x00	; 0
    69f6:	70 e0       	ldi	r23, 0x00	; 0
    69f8:	80 ec       	ldi	r24, 0xC0	; 192
    69fa:	90 e4       	ldi	r25, 0x40	; 64
    69fc:	f3 d1       	rcall	.+998    	; 0x6de4 <__subsf3>
    69fe:	20 e0       	ldi	r18, 0x00	; 0
    6a00:	30 e0       	ldi	r19, 0x00	; 0
    6a02:	40 e8       	ldi	r20, 0x80	; 128
    6a04:	5f e3       	ldi	r21, 0x3F	; 63
    6a06:	ef d1       	rcall	.+990    	; 0x6de6 <__addsf3>
    6a08:	be d2       	rcall	.+1404   	; 0x6f86 <__fixunssfsi>
    6a0a:	ee 24       	eor	r14, r14
    6a0c:	e3 94       	inc	r14
    6a0e:	06 2f       	mov	r16, r22
    6a10:	27 eb       	ldi	r18, 0xB7	; 183
    6a12:	41 e1       	ldi	r20, 0x11	; 17
    6a14:	c5 01       	movw	r24, r10
    6a16:	b4 01       	movw	r22, r8
    6a18:	52 db       	rcall	.-2396   	; 0x60be <MLCDWriteDouble>
    6a1a:	00 e0       	ldi	r16, 0x00	; 0
    6a1c:	2d e0       	ldi	r18, 0x0D	; 13
    6a1e:	40 ee       	ldi	r20, 0xE0	; 224
    6a20:	61 e1       	ldi	r22, 0x11	; 17
    6a22:	8e e1       	ldi	r24, 0x1E	; 30
    6a24:	92 e6       	ldi	r25, 0x62	; 98
    6a26:	d1 da       	rcall	.-2654   	; 0x5fca <MLCDWriteString>
    6a28:	80 90 44 92 	lds	r8, 0x9244
    6a2c:	90 90 45 92 	lds	r9, 0x9245
    6a30:	a0 90 46 92 	lds	r10, 0x9246
    6a34:	b0 90 47 92 	lds	r11, 0x9247
    6a38:	c5 01       	movw	r24, r10
    6a3a:	b4 01       	movw	r22, r8
    6a3c:	86 d3       	rcall	.+1804   	; 0x714a <log10>
    6a3e:	9b 01       	movw	r18, r22
    6a40:	ac 01       	movw	r20, r24
    6a42:	60 e0       	ldi	r22, 0x00	; 0
    6a44:	70 e0       	ldi	r23, 0x00	; 0
    6a46:	80 eb       	ldi	r24, 0xB0	; 176
    6a48:	91 e4       	ldi	r25, 0x41	; 65
    6a4a:	cc d1       	rcall	.+920    	; 0x6de4 <__subsf3>
    6a4c:	20 e0       	ldi	r18, 0x00	; 0
    6a4e:	30 e0       	ldi	r19, 0x00	; 0
    6a50:	40 e8       	ldi	r20, 0x80	; 128
    6a52:	5f e3       	ldi	r21, 0x3F	; 63
    6a54:	c8 d1       	rcall	.+912    	; 0x6de6 <__addsf3>
    6a56:	97 d2       	rcall	.+1326   	; 0x6f86 <__fixunssfsi>
    6a58:	06 2f       	mov	r16, r22
    6a5a:	27 eb       	ldi	r18, 0xB7	; 183
    6a5c:	41 e1       	ldi	r20, 0x11	; 17
    6a5e:	c5 01       	movw	r24, r10
    6a60:	b4 01       	movw	r22, r8
    6a62:	2d db       	rcall	.-2470   	; 0x60be <MLCDWriteDouble>
    6a64:	00 e0       	ldi	r16, 0x00	; 0
    6a66:	2c e1       	ldi	r18, 0x1C	; 28
    6a68:	40 ee       	ldi	r20, 0xE0	; 224
    6a6a:	61 e1       	ldi	r22, 0x11	; 17
    6a6c:	80 e2       	ldi	r24, 0x20	; 32
    6a6e:	92 e6       	ldi	r25, 0x62	; 98
    6a70:	ac da       	rcall	.-2728   	; 0x5fca <MLCDWriteString>
    6a72:	80 90 74 91 	lds	r8, 0x9174
    6a76:	90 90 75 91 	lds	r9, 0x9175
    6a7a:	a0 90 76 91 	lds	r10, 0x9176
    6a7e:	b0 90 77 91 	lds	r11, 0x9177
    6a82:	c5 01       	movw	r24, r10
    6a84:	b4 01       	movw	r22, r8
    6a86:	61 d3       	rcall	.+1730   	; 0x714a <log10>
    6a88:	9b 01       	movw	r18, r22
    6a8a:	ac 01       	movw	r20, r24
    6a8c:	60 e0       	ldi	r22, 0x00	; 0
    6a8e:	70 e0       	ldi	r23, 0x00	; 0
    6a90:	88 e1       	ldi	r24, 0x18	; 24
    6a92:	92 e4       	ldi	r25, 0x42	; 66
    6a94:	a7 d1       	rcall	.+846    	; 0x6de4 <__subsf3>
    6a96:	20 e0       	ldi	r18, 0x00	; 0
    6a98:	30 e0       	ldi	r19, 0x00	; 0
    6a9a:	40 e8       	ldi	r20, 0x80	; 128
    6a9c:	5f e3       	ldi	r21, 0x3F	; 63
    6a9e:	a3 d1       	rcall	.+838    	; 0x6de6 <__addsf3>
    6aa0:	72 d2       	rcall	.+1252   	; 0x6f86 <__fixunssfsi>
    6aa2:	06 2f       	mov	r16, r22
    6aa4:	27 eb       	ldi	r18, 0xB7	; 183
    6aa6:	41 e1       	ldi	r20, 0x11	; 17
    6aa8:	c5 01       	movw	r24, r10
    6aaa:	b4 01       	movw	r22, r8
    6aac:	08 db       	rcall	.-2544   	; 0x60be <MLCDWriteDouble>
    6aae:	00 e0       	ldi	r16, 0x00	; 0
    6ab0:	2d e2       	ldi	r18, 0x2D	; 45
    6ab2:	40 ee       	ldi	r20, 0xE0	; 224
    6ab4:	61 e1       	ldi	r22, 0x11	; 17
    6ab6:	8f ef       	ldi	r24, 0xFF	; 255
    6ab8:	91 e6       	ldi	r25, 0x61	; 97
    6aba:	87 da       	rcall	.-2802   	; 0x5fca <MLCDWriteString>
    6abc:	60 91 71 62 	lds	r22, 0x6271
    6ac0:	70 91 72 62 	lds	r23, 0x6272
    6ac4:	80 91 73 62 	lds	r24, 0x6273
    6ac8:	90 91 74 62 	lds	r25, 0x6274
    6acc:	e1 2c       	mov	r14, r1
    6ace:	04 e0       	ldi	r16, 0x04	; 4
    6ad0:	20 ee       	ldi	r18, 0xE0	; 224
    6ad2:	41 e1       	ldi	r20, 0x11	; 17
    6ad4:	f4 da       	rcall	.-2584   	; 0x60be <MLCDWriteDouble>
    6ad6:	60 91 6d 62 	lds	r22, 0x626D
    6ada:	70 91 6e 62 	lds	r23, 0x626E
    6ade:	80 91 6f 62 	lds	r24, 0x626F
    6ae2:	90 91 70 62 	lds	r25, 0x6270
    6ae6:	03 e1       	ldi	r16, 0x13	; 19
    6ae8:	20 ee       	ldi	r18, 0xE0	; 224
    6aea:	41 e1       	ldi	r20, 0x11	; 17
    6aec:	e8 da       	rcall	.-2608   	; 0x60be <MLCDWriteDouble>
    6aee:	60 91 69 62 	lds	r22, 0x6269
    6af2:	70 91 6a 62 	lds	r23, 0x626A
    6af6:	80 91 6b 62 	lds	r24, 0x626B
    6afa:	90 91 6c 62 	lds	r25, 0x626C
    6afe:	02 e2       	ldi	r16, 0x22	; 34
    6b00:	20 ee       	ldi	r18, 0xE0	; 224
    6b02:	41 e1       	ldi	r20, 0x11	; 17
    6b04:	dc da       	rcall	.-2632   	; 0x60be <MLCDWriteDouble>
    6b06:	0f 91       	pop	r16
    6b08:	ef 90       	pop	r14
    6b0a:	bf 90       	pop	r11
    6b0c:	af 90       	pop	r10
    6b0e:	9f 90       	pop	r9
    6b10:	8f 90       	pop	r8
    6b12:	08 95       	ret

00006b14 <showArrows>:

void showArrows(void){
	MLCDDrawRLArrow(FONT_SIZE_LARGE+1,	MLCD_BYTES_LINE-1,	MLCD_ARROW_RIGHT,	MLCD_BLACK);
    6b14:	20 e0       	ldi	r18, 0x00	; 0
    6b16:	43 e0       	ldi	r20, 0x03	; 3
    6b18:	61 e3       	ldi	r22, 0x31	; 49
    6b1a:	8c e2       	ldi	r24, 0x2C	; 44
    6b1c:	14 dd       	rcall	.-1496   	; 0x6546 <MLCDDrawRLArrow>
	MLCDDrawRLArrow(FONT_SIZE_LARGE+1,	1,					MLCD_ARROW_LEFT,	MLCD_BLACK);
    6b1e:	20 e0       	ldi	r18, 0x00	; 0
    6b20:	42 e0       	ldi	r20, 0x02	; 2
    6b22:	61 e0       	ldi	r22, 0x01	; 1
    6b24:	8c e2       	ldi	r24, 0x2C	; 44
    6b26:	0f cd       	rjmp	.-1506   	; 0x6546 <MLCDDrawRLArrow>
    6b28:	08 95       	ret

00006b2a <main>:
uint8_t screen = 0;


int main (void)
{
	board_init();
    6b2a:	0e 94 3e 2c 	call	0x587c	; 0x587c <board_init>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    6b2e:	80 e4       	ldi	r24, 0x40	; 64
    6b30:	e0 ea       	ldi	r30, 0xA0	; 160
    6b32:	f6 e0       	ldi	r31, 0x06	; 6
    6b34:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    6b36:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    6b38:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    6b3a:	e6 eb       	ldi	r30, 0xB6	; 182
    6b3c:	f6 e0       	ldi	r31, 0x06	; 6
    6b3e:	90 81       	ld	r25, Z
    6b40:	97 70       	andi	r25, 0x07	; 7
    6b42:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    6b44:	90 81       	ld	r25, Z
    6b46:	98 61       	ori	r25, 0x18	; 24
    6b48:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6b4a:	8f bf       	out	0x3f, r24	; 63
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    6b4c:	80 e8       	ldi	r24, 0x80	; 128
    6b4e:	e0 ea       	ldi	r30, 0xA0	; 160
    6b50:	f6 e0       	ldi	r31, 0x06	; 6
    6b52:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    6b54:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    6b56:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    6b58:	e7 eb       	ldi	r30, 0xB7	; 183
    6b5a:	f6 e0       	ldi	r31, 0x06	; 6
    6b5c:	90 81       	ld	r25, Z
    6b5e:	97 70       	andi	r25, 0x07	; 7
    6b60:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    6b62:	90 81       	ld	r25, Z
    6b64:	98 61       	ori	r25, 0x18	; 24
    6b66:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    6b68:	8f bf       	out	0x3f, r24	; 63
	ioport_set_pin_dir(PB0, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(PB0, IOPORT_MODE_PULLUP);
	ioport_set_pin_dir(PB1, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(PB1, IOPORT_MODE_PULLUP);
	sysclk_init();
    6b6a:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <sysclk_init>
	
	ioport_set_pin_sense_mode(ioport_pin_to_mask(PORTF_PIN2CTRL), IOPORT_SENSE_FALLING);
    6b6e:	80 91 b2 06 	lds	r24, 0x06B2
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    6b72:	87 70       	andi	r24, 0x07	; 7
    6b74:	c1 e0       	ldi	r28, 0x01	; 1
    6b76:	62 e0       	ldi	r22, 0x02	; 2
    6b78:	9c 2f       	mov	r25, r28
    6b7a:	01 c0       	rjmp	.+2      	; 0x6b7e <main+0x54>
    6b7c:	99 0f       	add	r25, r25
    6b7e:	8a 95       	dec	r24
    6b80:	ea f7       	brpl	.-6      	; 0x6b7c <main+0x52>
    6b82:	89 2f       	mov	r24, r25
    6b84:	40 dd       	rcall	.-1408   	; 0x6606 <ioport_set_pin_sense_mode>
	ioport_set_pin_sense_mode(ioport_pin_to_mask(PORTF_PIN3CTRL), IOPORT_SENSE_FALLING);
    6b86:	80 91 b3 06 	lds	r24, 0x06B3
    6b8a:	87 70       	andi	r24, 0x07	; 7
    6b8c:	62 e0       	ldi	r22, 0x02	; 2
    6b8e:	ec 2f       	mov	r30, r28
    6b90:	01 c0       	rjmp	.+2      	; 0x6b94 <main+0x6a>
    6b92:	ee 0f       	add	r30, r30
    6b94:	8a 95       	dec	r24
    6b96:	ea f7       	brpl	.-6      	; 0x6b92 <main+0x68>
    6b98:	8e 2f       	mov	r24, r30
    6b9a:	35 dd       	rcall	.-1430   	; 0x6606 <ioport_set_pin_sense_mode>
	ioport_set_pin_sense_mode(ioport_pin_to_mask(PORTF_PIN4CTRL), IOPORT_SENSE_FALLING);
    6b9c:	80 91 b4 06 	lds	r24, 0x06B4
    6ba0:	87 70       	andi	r24, 0x07	; 7
    6ba2:	62 e0       	ldi	r22, 0x02	; 2
    6ba4:	fc 2f       	mov	r31, r28
    6ba6:	01 c0       	rjmp	.+2      	; 0x6baa <main+0x80>
    6ba8:	ff 0f       	add	r31, r31
    6baa:	8a 95       	dec	r24
    6bac:	ea f7       	brpl	.-6      	; 0x6ba8 <main+0x7e>
    6bae:	8f 2f       	mov	r24, r31
    6bb0:	2a dd       	rcall	.-1452   	; 0x6606 <ioport_set_pin_sense_mode>
	ioport_set_pin_sense_mode(ioport_pin_to_mask(PORTF_PIN5CTRL), IOPORT_SENSE_FALLING);
    6bb2:	80 91 b5 06 	lds	r24, 0x06B5
    6bb6:	87 70       	andi	r24, 0x07	; 7
    6bb8:	62 e0       	ldi	r22, 0x02	; 2
    6bba:	01 c0       	rjmp	.+2      	; 0x6bbe <main+0x94>
    6bbc:	cc 0f       	add	r28, r28
    6bbe:	8a 95       	dec	r24
    6bc0:	ea f7       	brpl	.-6      	; 0x6bbc <main+0x92>
    6bc2:	8c 2f       	mov	r24, r28
    6bc4:	20 dd       	rcall	.-1472   	; 0x6606 <ioport_set_pin_sense_mode>
	MLCDDrawRLArrow(FONT_SIZE_LARGE+1,	1,					MLCD_ARROW_LEFT,	MLCD_BLACK);
}


void PORT_ConfigureInterrupt0(PORT_t * port, PORT_INT0LVL_t intLevel, uint8_t pinMask){
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT0LVL_gm ) | intLevel;
    6bc6:	e0 ea       	ldi	r30, 0xA0	; 160
    6bc8:	f6 e0       	ldi	r31, 0x06	; 6
    6bca:	81 85       	ldd	r24, Z+9	; 0x09
    6bcc:	8c 7f       	andi	r24, 0xFC	; 252
    6bce:	82 60       	ori	r24, 0x02	; 2
    6bd0:	81 87       	std	Z+9, r24	; 0x09
	port->INT0MASK = pinMask;
    6bd2:	8c e3       	ldi	r24, 0x3C	; 60
    6bd4:	82 87       	std	Z+10, r24	; 0x0a
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    6bd6:	e0 ea       	ldi	r30, 0xA0	; 160
    6bd8:	f0 e0       	ldi	r31, 0x00	; 0
    6bda:	87 e0       	ldi	r24, 0x07	; 7
    6bdc:	82 83       	std	Z+2, r24	; 0x02
		PMIC.CTRL &= ~PMIC_RREN_bm;
		PMIC.INTPRI = 0;
		break;

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    6bde:	82 81       	ldd	r24, Z+2	; 0x02
    6be0:	80 68       	ori	r24, 0x80	; 128
    6be2:	82 83       	std	Z+2, r24	; 0x02
 */
static inline void pmic_enable_level(enum pmic_level level)
{
	Assert((level & PMIC_LVL_NMI));

	PMIC.CTRL |= level;
    6be4:	82 81       	ldd	r24, Z+2	; 0x02
    6be6:	82 60       	ori	r24, 0x02	; 2
    6be8:	82 83       	std	Z+2, r24	; 0x02
	PORT_ConfigureInterrupt0( &PORTF, PORT_INT0LVL_MED_gc, PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	pmic_enable_level(PMIC_LVL_MEDIUM);
	
	cpu_irq_enable();
    6bea:	78 94       	sei
	
	MLCDInit();
    6bec:	a4 d8       	rcall	.-3768   	; 0x5d36 <MLCDInit>
	MLCDTurnOn();
    6bee:	b1 d8       	rcall	.-3742   	; 0x5d52 <MLCDTurnOn>
	MLCDClearAll();
    6bf0:	c3 d8       	rcall	.-3706   	; 0x5d78 <MLCDClearAll>
	
	adc_init();
    6bf2:	0e 94 9e 1c 	call	0x393c	; 0x393c <adc_init>
	
	MLCDShowImecLogo();
    6bf6:	67 d9       	rcall	.-3378   	; 0x5ec6 <MLCDShowImecLogo>
	//delay_ms(2000);
	MLCDClearFrame();
    6bf8:	e5 d8       	rcall	.-3638   	; 0x5dc4 <MLCDClearFrame>
		
		for(i=powerTail; i>0; i--){
			powerHist[i] = powerHist[i-1];
		}
		
		powerHist[0] = power;
    6bfa:	c8 e7       	ldi	r28, 0x78	; 120
    6bfc:	d1 e9       	ldi	r29, 0x91	; 145

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    6bfe:	0f 2e       	mov	r0, r31
    6c00:	f0 ea       	ldi	r31, 0xA0	; 160
    6c02:	ef 2e       	mov	r14, r31
    6c04:	f6 e0       	ldi	r31, 0x06	; 6
    6c06:	ff 2e       	mov	r15, r31
    6c08:	f0 2d       	mov	r31, r0
		
		//MLCDWriteDouble(getBatteryADCVoltage(),	FONT_SIZE_NORMAL,	18+FONT_SIZE_NORMAL,	40,	MLCD_BLACK);
		
		//LED_On(LED0);
		
		voltage = getPVVVoltage();
    6c0a:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <getPVVVoltage>
    6c0e:	60 93 40 92 	sts	0x9240, r22
    6c12:	70 93 41 92 	sts	0x9241, r23
    6c16:	80 93 42 92 	sts	0x9242, r24
    6c1a:	90 93 43 92 	sts	0x9243, r25
		current = getPVCCurrent();
    6c1e:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <getPVCCurrent>
    6c22:	60 93 44 92 	sts	0x9244, r22
    6c26:	70 93 45 92 	sts	0x9245, r23
    6c2a:	80 93 46 92 	sts	0x9246, r24
    6c2e:	90 93 47 92 	sts	0x9247, r25
		power = voltage*current;
    6c32:	20 91 40 92 	lds	r18, 0x9240
    6c36:	30 91 41 92 	lds	r19, 0x9241
    6c3a:	40 91 42 92 	lds	r20, 0x9242
    6c3e:	50 91 43 92 	lds	r21, 0x9243
    6c42:	ce d2       	rcall	.+1436   	; 0x71e0 <__mulsf3>
    6c44:	60 93 74 91 	sts	0x9174, r22
    6c48:	70 93 75 91 	sts	0x9175, r23
    6c4c:	80 93 76 91 	sts	0x9176, r24
    6c50:	90 93 77 91 	sts	0x9177, r25
		battery = getBatteryVoltage();
    6c54:	0e 94 ba 1d 	call	0x3b74	; 0x3b74 <getBatteryVoltage>
    6c58:	60 93 48 92 	sts	0x9248, r22
    6c5c:	70 93 49 92 	sts	0x9249, r23
    6c60:	80 93 4a 92 	sts	0x924A, r24
    6c64:	90 93 4b 92 	sts	0x924B, r25
		
		if(voltage > maxVoltage)	maxVoltage = voltage;
    6c68:	80 90 40 92 	lds	r8, 0x9240
    6c6c:	90 90 41 92 	lds	r9, 0x9241
    6c70:	a0 90 42 92 	lds	r10, 0x9242
    6c74:	b0 90 43 92 	lds	r11, 0x9243
    6c78:	20 91 71 62 	lds	r18, 0x6271
    6c7c:	30 91 72 62 	lds	r19, 0x6272
    6c80:	40 91 73 62 	lds	r20, 0x6273
    6c84:	50 91 74 62 	lds	r21, 0x6274
    6c88:	c5 01       	movw	r24, r10
    6c8a:	b4 01       	movw	r22, r8
    6c8c:	5a d2       	rcall	.+1204   	; 0x7142 <__gesf2>
    6c8e:	18 16       	cp	r1, r24
    6c90:	44 f4       	brge	.+16     	; 0x6ca2 <main+0x178>
    6c92:	80 92 71 62 	sts	0x6271, r8
    6c96:	90 92 72 62 	sts	0x6272, r9
    6c9a:	a0 92 73 62 	sts	0x6273, r10
    6c9e:	b0 92 74 62 	sts	0x6274, r11
		if(current > maxCurrent)	maxCurrent = current;
    6ca2:	80 90 44 92 	lds	r8, 0x9244
    6ca6:	90 90 45 92 	lds	r9, 0x9245
    6caa:	a0 90 46 92 	lds	r10, 0x9246
    6cae:	b0 90 47 92 	lds	r11, 0x9247
    6cb2:	20 91 6d 62 	lds	r18, 0x626D
    6cb6:	30 91 6e 62 	lds	r19, 0x626E
    6cba:	40 91 6f 62 	lds	r20, 0x626F
    6cbe:	50 91 70 62 	lds	r21, 0x6270
    6cc2:	c5 01       	movw	r24, r10
    6cc4:	b4 01       	movw	r22, r8
    6cc6:	3d d2       	rcall	.+1146   	; 0x7142 <__gesf2>
    6cc8:	18 16       	cp	r1, r24
    6cca:	44 f4       	brge	.+16     	; 0x6cdc <main+0x1b2>
    6ccc:	80 92 6d 62 	sts	0x626D, r8
    6cd0:	90 92 6e 62 	sts	0x626E, r9
    6cd4:	a0 92 6f 62 	sts	0x626F, r10
    6cd8:	b0 92 70 62 	sts	0x6270, r11
		if(power > maxPower)		maxPower = power;
    6cdc:	80 90 74 91 	lds	r8, 0x9174
    6ce0:	90 90 75 91 	lds	r9, 0x9175
    6ce4:	a0 90 76 91 	lds	r10, 0x9176
    6ce8:	b0 90 77 91 	lds	r11, 0x9177
    6cec:	20 91 69 62 	lds	r18, 0x6269
    6cf0:	30 91 6a 62 	lds	r19, 0x626A
    6cf4:	40 91 6b 62 	lds	r20, 0x626B
    6cf8:	50 91 6c 62 	lds	r21, 0x626C
    6cfc:	c5 01       	movw	r24, r10
    6cfe:	b4 01       	movw	r22, r8
    6d00:	20 d2       	rcall	.+1088   	; 0x7142 <__gesf2>
    6d02:	18 16       	cp	r1, r24
    6d04:	44 f4       	brge	.+16     	; 0x6d16 <main+0x1ec>
    6d06:	80 92 69 62 	sts	0x6269, r8
    6d0a:	90 92 6a 62 	sts	0x626A, r9
    6d0e:	a0 92 6b 62 	sts	0x626B, r10
    6d12:	b0 92 6c 62 	sts	0x626C, r11
		
		for(i=powerTail; i>0; i--){
    6d16:	20 91 68 62 	lds	r18, 0x6268
    6d1a:	82 2f       	mov	r24, r18
    6d1c:	90 e0       	ldi	r25, 0x00	; 0
    6d1e:	80 93 79 62 	sts	0x6279, r24
    6d22:	90 93 7a 62 	sts	0x627A, r25
    6d26:	18 16       	cp	r1, r24
    6d28:	19 06       	cpc	r1, r25
    6d2a:	0c f0       	brlt	.+2      	; 0x6d2e <main+0x204>
    6d2c:	52 c0       	rjmp	.+164    	; 0x6dd2 <main+0x2a8>
    6d2e:	9c 01       	movw	r18, r24
    6d30:	22 0f       	add	r18, r18
    6d32:	33 1f       	adc	r19, r19
    6d34:	22 0f       	add	r18, r18
    6d36:	33 1f       	adc	r19, r19
    6d38:	f9 01       	movw	r30, r18
    6d3a:	e8 58       	subi	r30, 0x88	; 136
    6d3c:	fe 46       	sbci	r31, 0x6E	; 110
    6d3e:	44 27       	eor	r20, r20
    6d40:	55 27       	eor	r21, r21
    6d42:	42 1b       	sub	r20, r18
    6d44:	53 0b       	sbc	r21, r19
    6d46:	34 97       	sbiw	r30, 0x04	; 4
    6d48:	da 01       	movw	r26, r20
    6d4a:	ae 0f       	add	r26, r30
    6d4c:	bf 1f       	adc	r27, r31
    6d4e:	a2 0f       	add	r26, r18
    6d50:	b3 1f       	adc	r27, r19
			powerHist[i] = powerHist[i-1];
    6d52:	8d 91       	ld	r24, X+
    6d54:	9d 91       	ld	r25, X+
    6d56:	0d 90       	ld	r0, X+
    6d58:	bc 91       	ld	r27, X
    6d5a:	a0 2d       	mov	r26, r0
    6d5c:	84 83       	std	Z+4, r24	; 0x04
    6d5e:	95 83       	std	Z+5, r25	; 0x05
    6d60:	a6 83       	std	Z+6, r26	; 0x06
    6d62:	b7 83       	std	Z+7, r27	; 0x07
		
		if(voltage > maxVoltage)	maxVoltage = voltage;
		if(current > maxCurrent)	maxCurrent = current;
		if(power > maxPower)		maxPower = power;
		
		for(i=powerTail; i>0; i--){
    6d64:	ec 17       	cp	r30, r28
    6d66:	fd 07       	cpc	r31, r29
    6d68:	71 f7       	brne	.-36     	; 0x6d46 <main+0x21c>
    6d6a:	10 92 79 62 	sts	0x6279, r1
    6d6e:	10 92 7a 62 	sts	0x627A, r1
			powerHist[i] = powerHist[i-1];
		}
		
		powerHist[0] = power;
    6d72:	88 82       	st	Y, r8
    6d74:	99 82       	std	Y+1, r9	; 0x01
    6d76:	aa 82       	std	Y+2, r10	; 0x02
    6d78:	bb 82       	std	Y+3, r11	; 0x03
		
		if(screen%2 == 0)		PowerScreen();
    6d7a:	80 91 67 62 	lds	r24, 0x6267
    6d7e:	80 fd       	sbrc	r24, 0
    6d80:	02 c0       	rjmp	.+4      	; 0x6d86 <main+0x25c>
    6d82:	d4 dc       	rcall	.-1624   	; 0x672c <PowerScreen>
    6d84:	01 c0       	rjmp	.+2      	; 0x6d88 <main+0x25e>
		else if (screen%2 == 1)	BarScreen();
    6d86:	c8 dd       	rcall	.-1136   	; 0x6918 <BarScreen>
		//else if (screen%4 == 2)	PowerScreen();
		//else if (screen%4 == 3)	BarScreen();
		
		if(powerTail!=49)	powerTail++;
    6d88:	80 91 68 62 	lds	r24, 0x6268
    6d8c:	81 33       	cpi	r24, 0x31	; 49
    6d8e:	19 f0       	breq	.+6      	; 0x6d96 <main+0x26c>
    6d90:	8f 5f       	subi	r24, 0xFF	; 255
    6d92:	80 93 68 62 	sts	0x6268, r24
		
		MLCDWriteString("TFPV Group",FONT_SIZE_LARGE,1,1,MLCD_BLACK);
    6d96:	00 e0       	ldi	r16, 0x00	; 0
    6d98:	21 e0       	ldi	r18, 0x01	; 1
    6d9a:	41 e0       	ldi	r20, 0x01	; 1
    6d9c:	6b e2       	ldi	r22, 0x2B	; 43
    6d9e:	83 e2       	ldi	r24, 0x23	; 35
    6da0:	92 e6       	ldi	r25, 0x62	; 98
    6da2:	13 d9       	rcall	.-3546   	; 0x5fca <MLCDWriteString>
		showArrows();
    6da4:	b7 de       	rcall	.-658    	; 0x6b14 <showArrows>
		showBattery(battery);
    6da6:	60 91 48 92 	lds	r22, 0x9248
    6daa:	70 91 49 92 	lds	r23, 0x9249
    6dae:	80 91 4a 92 	lds	r24, 0x924A
    6db2:	90 91 4b 92 	lds	r25, 0x924B
    6db6:	1c dd       	rcall	.-1480   	; 0x67f0 <showBattery>
		MLCDRefreshFrame();
    6db8:	ae d8       	rcall	.-3748   	; 0x5f16 <MLCDRefreshFrame>
		MLCDClearFrame();
    6dba:	04 d8       	rcall	.-4088   	; 0x5dc4 <MLCDClearFrame>
    6dbc:	f7 01       	movw	r30, r14
    6dbe:	80 85       	ldd	r24, Z+8	; 0x08
		//LED_Off(LED1);
		if(gpio_pin_is_low(PB1) && gpio_pin_is_low(PB0)){
    6dc0:	88 23       	and	r24, r24
    6dc2:	0c f4       	brge	.+2      	; 0x6dc6 <main+0x29c>
    6dc4:	22 cf       	rjmp	.-444    	; 0x6c0a <main+0xe0>
    6dc6:	80 85       	ldd	r24, Z+8	; 0x08
    6dc8:	86 fd       	sbrc	r24, 6
    6dca:	1f cf       	rjmp	.-450    	; 0x6c0a <main+0xe0>
			playSnake();
    6dcc:	0e 94 56 21 	call	0x42ac	; 0x42ac <playSnake>
    6dd0:	1c cf       	rjmp	.-456    	; 0x6c0a <main+0xe0>
		
		for(i=powerTail; i>0; i--){
			powerHist[i] = powerHist[i-1];
		}
		
		powerHist[0] = power;
    6dd2:	88 82       	st	Y, r8
    6dd4:	99 82       	std	Y+1, r9	; 0x01
    6dd6:	aa 82       	std	Y+2, r10	; 0x02
    6dd8:	bb 82       	std	Y+3, r11	; 0x03
		
		if(screen%2 == 0)		PowerScreen();
    6dda:	80 91 67 62 	lds	r24, 0x6267
    6dde:	80 fd       	sbrc	r24, 0
    6de0:	d2 cf       	rjmp	.-92     	; 0x6d86 <main+0x25c>
    6de2:	cf cf       	rjmp	.-98     	; 0x6d82 <main+0x258>

00006de4 <__subsf3>:
    6de4:	50 58       	subi	r21, 0x80	; 128

00006de6 <__addsf3>:
    6de6:	bb 27       	eor	r27, r27
    6de8:	aa 27       	eor	r26, r26
    6dea:	0e d0       	rcall	.+28     	; 0x6e08 <__addsf3x>
    6dec:	70 c1       	rjmp	.+736    	; 0x70ce <__fp_round>
    6dee:	61 d1       	rcall	.+706    	; 0x70b2 <__fp_pscA>
    6df0:	30 f0       	brcs	.+12     	; 0x6dfe <__addsf3+0x18>
    6df2:	66 d1       	rcall	.+716    	; 0x70c0 <__fp_pscB>
    6df4:	20 f0       	brcs	.+8      	; 0x6dfe <__addsf3+0x18>
    6df6:	31 f4       	brne	.+12     	; 0x6e04 <__addsf3+0x1e>
    6df8:	9f 3f       	cpi	r25, 0xFF	; 255
    6dfa:	11 f4       	brne	.+4      	; 0x6e00 <__addsf3+0x1a>
    6dfc:	1e f4       	brtc	.+6      	; 0x6e04 <__addsf3+0x1e>
    6dfe:	56 c1       	rjmp	.+684    	; 0x70ac <__fp_nan>
    6e00:	0e f4       	brtc	.+2      	; 0x6e04 <__addsf3+0x1e>
    6e02:	e0 95       	com	r30
    6e04:	e7 fb       	bst	r30, 7
    6e06:	4c c1       	rjmp	.+664    	; 0x70a0 <__fp_inf>

00006e08 <__addsf3x>:
    6e08:	e9 2f       	mov	r30, r25
    6e0a:	72 d1       	rcall	.+740    	; 0x70f0 <__fp_split3>
    6e0c:	80 f3       	brcs	.-32     	; 0x6dee <__addsf3+0x8>
    6e0e:	ba 17       	cp	r27, r26
    6e10:	62 07       	cpc	r22, r18
    6e12:	73 07       	cpc	r23, r19
    6e14:	84 07       	cpc	r24, r20
    6e16:	95 07       	cpc	r25, r21
    6e18:	18 f0       	brcs	.+6      	; 0x6e20 <__addsf3x+0x18>
    6e1a:	71 f4       	brne	.+28     	; 0x6e38 <__addsf3x+0x30>
    6e1c:	9e f5       	brtc	.+102    	; 0x6e84 <__addsf3x+0x7c>
    6e1e:	8a c1       	rjmp	.+788    	; 0x7134 <__fp_zero>
    6e20:	0e f4       	brtc	.+2      	; 0x6e24 <__addsf3x+0x1c>
    6e22:	e0 95       	com	r30
    6e24:	0b 2e       	mov	r0, r27
    6e26:	ba 2f       	mov	r27, r26
    6e28:	a0 2d       	mov	r26, r0
    6e2a:	0b 01       	movw	r0, r22
    6e2c:	b9 01       	movw	r22, r18
    6e2e:	90 01       	movw	r18, r0
    6e30:	0c 01       	movw	r0, r24
    6e32:	ca 01       	movw	r24, r20
    6e34:	a0 01       	movw	r20, r0
    6e36:	11 24       	eor	r1, r1
    6e38:	ff 27       	eor	r31, r31
    6e3a:	59 1b       	sub	r21, r25
    6e3c:	99 f0       	breq	.+38     	; 0x6e64 <__addsf3x+0x5c>
    6e3e:	59 3f       	cpi	r21, 0xF9	; 249
    6e40:	50 f4       	brcc	.+20     	; 0x6e56 <__addsf3x+0x4e>
    6e42:	50 3e       	cpi	r21, 0xE0	; 224
    6e44:	68 f1       	brcs	.+90     	; 0x6ea0 <__addsf3x+0x98>
    6e46:	1a 16       	cp	r1, r26
    6e48:	f0 40       	sbci	r31, 0x00	; 0
    6e4a:	a2 2f       	mov	r26, r18
    6e4c:	23 2f       	mov	r18, r19
    6e4e:	34 2f       	mov	r19, r20
    6e50:	44 27       	eor	r20, r20
    6e52:	58 5f       	subi	r21, 0xF8	; 248
    6e54:	f3 cf       	rjmp	.-26     	; 0x6e3c <__addsf3x+0x34>
    6e56:	46 95       	lsr	r20
    6e58:	37 95       	ror	r19
    6e5a:	27 95       	ror	r18
    6e5c:	a7 95       	ror	r26
    6e5e:	f0 40       	sbci	r31, 0x00	; 0
    6e60:	53 95       	inc	r21
    6e62:	c9 f7       	brne	.-14     	; 0x6e56 <__addsf3x+0x4e>
    6e64:	7e f4       	brtc	.+30     	; 0x6e84 <__addsf3x+0x7c>
    6e66:	1f 16       	cp	r1, r31
    6e68:	ba 0b       	sbc	r27, r26
    6e6a:	62 0b       	sbc	r22, r18
    6e6c:	73 0b       	sbc	r23, r19
    6e6e:	84 0b       	sbc	r24, r20
    6e70:	ba f0       	brmi	.+46     	; 0x6ea0 <__addsf3x+0x98>
    6e72:	91 50       	subi	r25, 0x01	; 1
    6e74:	a1 f0       	breq	.+40     	; 0x6e9e <__addsf3x+0x96>
    6e76:	ff 0f       	add	r31, r31
    6e78:	bb 1f       	adc	r27, r27
    6e7a:	66 1f       	adc	r22, r22
    6e7c:	77 1f       	adc	r23, r23
    6e7e:	88 1f       	adc	r24, r24
    6e80:	c2 f7       	brpl	.-16     	; 0x6e72 <__addsf3x+0x6a>
    6e82:	0e c0       	rjmp	.+28     	; 0x6ea0 <__addsf3x+0x98>
    6e84:	ba 0f       	add	r27, r26
    6e86:	62 1f       	adc	r22, r18
    6e88:	73 1f       	adc	r23, r19
    6e8a:	84 1f       	adc	r24, r20
    6e8c:	48 f4       	brcc	.+18     	; 0x6ea0 <__addsf3x+0x98>
    6e8e:	87 95       	ror	r24
    6e90:	77 95       	ror	r23
    6e92:	67 95       	ror	r22
    6e94:	b7 95       	ror	r27
    6e96:	f7 95       	ror	r31
    6e98:	9e 3f       	cpi	r25, 0xFE	; 254
    6e9a:	08 f0       	brcs	.+2      	; 0x6e9e <__addsf3x+0x96>
    6e9c:	b3 cf       	rjmp	.-154    	; 0x6e04 <__addsf3+0x1e>
    6e9e:	93 95       	inc	r25
    6ea0:	88 0f       	add	r24, r24
    6ea2:	08 f0       	brcs	.+2      	; 0x6ea6 <__addsf3x+0x9e>
    6ea4:	99 27       	eor	r25, r25
    6ea6:	ee 0f       	add	r30, r30
    6ea8:	97 95       	ror	r25
    6eaa:	87 95       	ror	r24
    6eac:	08 95       	ret

00006eae <__cmpsf2>:
    6eae:	d4 d0       	rcall	.+424    	; 0x7058 <__fp_cmp>
    6eb0:	08 f4       	brcc	.+2      	; 0x6eb4 <__cmpsf2+0x6>
    6eb2:	81 e0       	ldi	r24, 0x01	; 1
    6eb4:	08 95       	ret

00006eb6 <__divsf3>:
    6eb6:	0c d0       	rcall	.+24     	; 0x6ed0 <__divsf3x>
    6eb8:	0a c1       	rjmp	.+532    	; 0x70ce <__fp_round>
    6eba:	02 d1       	rcall	.+516    	; 0x70c0 <__fp_pscB>
    6ebc:	40 f0       	brcs	.+16     	; 0x6ece <__divsf3+0x18>
    6ebe:	f9 d0       	rcall	.+498    	; 0x70b2 <__fp_pscA>
    6ec0:	30 f0       	brcs	.+12     	; 0x6ece <__divsf3+0x18>
    6ec2:	21 f4       	brne	.+8      	; 0x6ecc <__divsf3+0x16>
    6ec4:	5f 3f       	cpi	r21, 0xFF	; 255
    6ec6:	19 f0       	breq	.+6      	; 0x6ece <__divsf3+0x18>
    6ec8:	eb c0       	rjmp	.+470    	; 0x70a0 <__fp_inf>
    6eca:	51 11       	cpse	r21, r1
    6ecc:	34 c1       	rjmp	.+616    	; 0x7136 <__fp_szero>
    6ece:	ee c0       	rjmp	.+476    	; 0x70ac <__fp_nan>

00006ed0 <__divsf3x>:
    6ed0:	0f d1       	rcall	.+542    	; 0x70f0 <__fp_split3>
    6ed2:	98 f3       	brcs	.-26     	; 0x6eba <__divsf3+0x4>

00006ed4 <__divsf3_pse>:
    6ed4:	99 23       	and	r25, r25
    6ed6:	c9 f3       	breq	.-14     	; 0x6eca <__divsf3+0x14>
    6ed8:	55 23       	and	r21, r21
    6eda:	b1 f3       	breq	.-20     	; 0x6ec8 <__divsf3+0x12>
    6edc:	95 1b       	sub	r25, r21
    6ede:	55 0b       	sbc	r21, r21
    6ee0:	bb 27       	eor	r27, r27
    6ee2:	aa 27       	eor	r26, r26
    6ee4:	62 17       	cp	r22, r18
    6ee6:	73 07       	cpc	r23, r19
    6ee8:	84 07       	cpc	r24, r20
    6eea:	38 f0       	brcs	.+14     	; 0x6efa <__divsf3_pse+0x26>
    6eec:	9f 5f       	subi	r25, 0xFF	; 255
    6eee:	5f 4f       	sbci	r21, 0xFF	; 255
    6ef0:	22 0f       	add	r18, r18
    6ef2:	33 1f       	adc	r19, r19
    6ef4:	44 1f       	adc	r20, r20
    6ef6:	aa 1f       	adc	r26, r26
    6ef8:	a9 f3       	breq	.-22     	; 0x6ee4 <__divsf3_pse+0x10>
    6efa:	33 d0       	rcall	.+102    	; 0x6f62 <__divsf3_pse+0x8e>
    6efc:	0e 2e       	mov	r0, r30
    6efe:	3a f0       	brmi	.+14     	; 0x6f0e <__divsf3_pse+0x3a>
    6f00:	e0 e8       	ldi	r30, 0x80	; 128
    6f02:	30 d0       	rcall	.+96     	; 0x6f64 <__divsf3_pse+0x90>
    6f04:	91 50       	subi	r25, 0x01	; 1
    6f06:	50 40       	sbci	r21, 0x00	; 0
    6f08:	e6 95       	lsr	r30
    6f0a:	00 1c       	adc	r0, r0
    6f0c:	ca f7       	brpl	.-14     	; 0x6f00 <__divsf3_pse+0x2c>
    6f0e:	29 d0       	rcall	.+82     	; 0x6f62 <__divsf3_pse+0x8e>
    6f10:	fe 2f       	mov	r31, r30
    6f12:	27 d0       	rcall	.+78     	; 0x6f62 <__divsf3_pse+0x8e>
    6f14:	66 0f       	add	r22, r22
    6f16:	77 1f       	adc	r23, r23
    6f18:	88 1f       	adc	r24, r24
    6f1a:	bb 1f       	adc	r27, r27
    6f1c:	26 17       	cp	r18, r22
    6f1e:	37 07       	cpc	r19, r23
    6f20:	48 07       	cpc	r20, r24
    6f22:	ab 07       	cpc	r26, r27
    6f24:	b0 e8       	ldi	r27, 0x80	; 128
    6f26:	09 f0       	breq	.+2      	; 0x6f2a <__divsf3_pse+0x56>
    6f28:	bb 0b       	sbc	r27, r27
    6f2a:	80 2d       	mov	r24, r0
    6f2c:	bf 01       	movw	r22, r30
    6f2e:	ff 27       	eor	r31, r31
    6f30:	93 58       	subi	r25, 0x83	; 131
    6f32:	5f 4f       	sbci	r21, 0xFF	; 255
    6f34:	2a f0       	brmi	.+10     	; 0x6f40 <__divsf3_pse+0x6c>
    6f36:	9e 3f       	cpi	r25, 0xFE	; 254
    6f38:	51 05       	cpc	r21, r1
    6f3a:	68 f0       	brcs	.+26     	; 0x6f56 <__divsf3_pse+0x82>
    6f3c:	b1 c0       	rjmp	.+354    	; 0x70a0 <__fp_inf>
    6f3e:	fb c0       	rjmp	.+502    	; 0x7136 <__fp_szero>
    6f40:	5f 3f       	cpi	r21, 0xFF	; 255
    6f42:	ec f3       	brlt	.-6      	; 0x6f3e <__divsf3_pse+0x6a>
    6f44:	98 3e       	cpi	r25, 0xE8	; 232
    6f46:	dc f3       	brlt	.-10     	; 0x6f3e <__divsf3_pse+0x6a>
    6f48:	86 95       	lsr	r24
    6f4a:	77 95       	ror	r23
    6f4c:	67 95       	ror	r22
    6f4e:	b7 95       	ror	r27
    6f50:	f7 95       	ror	r31
    6f52:	9f 5f       	subi	r25, 0xFF	; 255
    6f54:	c9 f7       	brne	.-14     	; 0x6f48 <__divsf3_pse+0x74>
    6f56:	88 0f       	add	r24, r24
    6f58:	91 1d       	adc	r25, r1
    6f5a:	96 95       	lsr	r25
    6f5c:	87 95       	ror	r24
    6f5e:	97 f9       	bld	r25, 7
    6f60:	08 95       	ret
    6f62:	e1 e0       	ldi	r30, 0x01	; 1
    6f64:	66 0f       	add	r22, r22
    6f66:	77 1f       	adc	r23, r23
    6f68:	88 1f       	adc	r24, r24
    6f6a:	bb 1f       	adc	r27, r27
    6f6c:	62 17       	cp	r22, r18
    6f6e:	73 07       	cpc	r23, r19
    6f70:	84 07       	cpc	r24, r20
    6f72:	ba 07       	cpc	r27, r26
    6f74:	20 f0       	brcs	.+8      	; 0x6f7e <__divsf3_pse+0xaa>
    6f76:	62 1b       	sub	r22, r18
    6f78:	73 0b       	sbc	r23, r19
    6f7a:	84 0b       	sbc	r24, r20
    6f7c:	ba 0b       	sbc	r27, r26
    6f7e:	ee 1f       	adc	r30, r30
    6f80:	88 f7       	brcc	.-30     	; 0x6f64 <__divsf3_pse+0x90>
    6f82:	e0 95       	com	r30
    6f84:	08 95       	ret

00006f86 <__fixunssfsi>:
    6f86:	bc d0       	rcall	.+376    	; 0x7100 <__fp_splitA>
    6f88:	88 f0       	brcs	.+34     	; 0x6fac <__fixunssfsi+0x26>
    6f8a:	9f 57       	subi	r25, 0x7F	; 127
    6f8c:	90 f0       	brcs	.+36     	; 0x6fb2 <__fixunssfsi+0x2c>
    6f8e:	b9 2f       	mov	r27, r25
    6f90:	99 27       	eor	r25, r25
    6f92:	b7 51       	subi	r27, 0x17	; 23
    6f94:	a0 f0       	brcs	.+40     	; 0x6fbe <__fixunssfsi+0x38>
    6f96:	d1 f0       	breq	.+52     	; 0x6fcc <__fixunssfsi+0x46>
    6f98:	66 0f       	add	r22, r22
    6f9a:	77 1f       	adc	r23, r23
    6f9c:	88 1f       	adc	r24, r24
    6f9e:	99 1f       	adc	r25, r25
    6fa0:	1a f0       	brmi	.+6      	; 0x6fa8 <__fixunssfsi+0x22>
    6fa2:	ba 95       	dec	r27
    6fa4:	c9 f7       	brne	.-14     	; 0x6f98 <__fixunssfsi+0x12>
    6fa6:	12 c0       	rjmp	.+36     	; 0x6fcc <__fixunssfsi+0x46>
    6fa8:	b1 30       	cpi	r27, 0x01	; 1
    6faa:	81 f0       	breq	.+32     	; 0x6fcc <__fixunssfsi+0x46>
    6fac:	c3 d0       	rcall	.+390    	; 0x7134 <__fp_zero>
    6fae:	b1 e0       	ldi	r27, 0x01	; 1
    6fb0:	08 95       	ret
    6fb2:	c0 c0       	rjmp	.+384    	; 0x7134 <__fp_zero>
    6fb4:	67 2f       	mov	r22, r23
    6fb6:	78 2f       	mov	r23, r24
    6fb8:	88 27       	eor	r24, r24
    6fba:	b8 5f       	subi	r27, 0xF8	; 248
    6fbc:	39 f0       	breq	.+14     	; 0x6fcc <__fixunssfsi+0x46>
    6fbe:	b9 3f       	cpi	r27, 0xF9	; 249
    6fc0:	cc f3       	brlt	.-14     	; 0x6fb4 <__fixunssfsi+0x2e>
    6fc2:	86 95       	lsr	r24
    6fc4:	77 95       	ror	r23
    6fc6:	67 95       	ror	r22
    6fc8:	b3 95       	inc	r27
    6fca:	d9 f7       	brne	.-10     	; 0x6fc2 <__fixunssfsi+0x3c>
    6fcc:	3e f4       	brtc	.+14     	; 0x6fdc <__fixunssfsi+0x56>
    6fce:	90 95       	com	r25
    6fd0:	80 95       	com	r24
    6fd2:	70 95       	com	r23
    6fd4:	61 95       	neg	r22
    6fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    6fd8:	8f 4f       	sbci	r24, 0xFF	; 255
    6fda:	9f 4f       	sbci	r25, 0xFF	; 255
    6fdc:	08 95       	ret

00006fde <__floatunsisf>:
    6fde:	e8 94       	clt
    6fe0:	09 c0       	rjmp	.+18     	; 0x6ff4 <__floatsisf+0x12>

00006fe2 <__floatsisf>:
    6fe2:	97 fb       	bst	r25, 7
    6fe4:	3e f4       	brtc	.+14     	; 0x6ff4 <__floatsisf+0x12>
    6fe6:	90 95       	com	r25
    6fe8:	80 95       	com	r24
    6fea:	70 95       	com	r23
    6fec:	61 95       	neg	r22
    6fee:	7f 4f       	sbci	r23, 0xFF	; 255
    6ff0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ff4:	99 23       	and	r25, r25
    6ff6:	a9 f0       	breq	.+42     	; 0x7022 <__floatsisf+0x40>
    6ff8:	f9 2f       	mov	r31, r25
    6ffa:	96 e9       	ldi	r25, 0x96	; 150
    6ffc:	bb 27       	eor	r27, r27
    6ffe:	93 95       	inc	r25
    7000:	f6 95       	lsr	r31
    7002:	87 95       	ror	r24
    7004:	77 95       	ror	r23
    7006:	67 95       	ror	r22
    7008:	b7 95       	ror	r27
    700a:	f1 11       	cpse	r31, r1
    700c:	f8 cf       	rjmp	.-16     	; 0x6ffe <__floatsisf+0x1c>
    700e:	fa f4       	brpl	.+62     	; 0x704e <__floatsisf+0x6c>
    7010:	bb 0f       	add	r27, r27
    7012:	11 f4       	brne	.+4      	; 0x7018 <__floatsisf+0x36>
    7014:	60 ff       	sbrs	r22, 0
    7016:	1b c0       	rjmp	.+54     	; 0x704e <__floatsisf+0x6c>
    7018:	6f 5f       	subi	r22, 0xFF	; 255
    701a:	7f 4f       	sbci	r23, 0xFF	; 255
    701c:	8f 4f       	sbci	r24, 0xFF	; 255
    701e:	9f 4f       	sbci	r25, 0xFF	; 255
    7020:	16 c0       	rjmp	.+44     	; 0x704e <__floatsisf+0x6c>
    7022:	88 23       	and	r24, r24
    7024:	11 f0       	breq	.+4      	; 0x702a <__floatsisf+0x48>
    7026:	96 e9       	ldi	r25, 0x96	; 150
    7028:	11 c0       	rjmp	.+34     	; 0x704c <__floatsisf+0x6a>
    702a:	77 23       	and	r23, r23
    702c:	21 f0       	breq	.+8      	; 0x7036 <__floatsisf+0x54>
    702e:	9e e8       	ldi	r25, 0x8E	; 142
    7030:	87 2f       	mov	r24, r23
    7032:	76 2f       	mov	r23, r22
    7034:	05 c0       	rjmp	.+10     	; 0x7040 <__floatsisf+0x5e>
    7036:	66 23       	and	r22, r22
    7038:	71 f0       	breq	.+28     	; 0x7056 <__floatsisf+0x74>
    703a:	96 e8       	ldi	r25, 0x86	; 134
    703c:	86 2f       	mov	r24, r22
    703e:	70 e0       	ldi	r23, 0x00	; 0
    7040:	60 e0       	ldi	r22, 0x00	; 0
    7042:	2a f0       	brmi	.+10     	; 0x704e <__floatsisf+0x6c>
    7044:	9a 95       	dec	r25
    7046:	66 0f       	add	r22, r22
    7048:	77 1f       	adc	r23, r23
    704a:	88 1f       	adc	r24, r24
    704c:	da f7       	brpl	.-10     	; 0x7044 <__floatsisf+0x62>
    704e:	88 0f       	add	r24, r24
    7050:	96 95       	lsr	r25
    7052:	87 95       	ror	r24
    7054:	97 f9       	bld	r25, 7
    7056:	08 95       	ret

00007058 <__fp_cmp>:
    7058:	99 0f       	add	r25, r25
    705a:	00 08       	sbc	r0, r0
    705c:	55 0f       	add	r21, r21
    705e:	aa 0b       	sbc	r26, r26
    7060:	e0 e8       	ldi	r30, 0x80	; 128
    7062:	fe ef       	ldi	r31, 0xFE	; 254
    7064:	16 16       	cp	r1, r22
    7066:	17 06       	cpc	r1, r23
    7068:	e8 07       	cpc	r30, r24
    706a:	f9 07       	cpc	r31, r25
    706c:	c0 f0       	brcs	.+48     	; 0x709e <__fp_cmp+0x46>
    706e:	12 16       	cp	r1, r18
    7070:	13 06       	cpc	r1, r19
    7072:	e4 07       	cpc	r30, r20
    7074:	f5 07       	cpc	r31, r21
    7076:	98 f0       	brcs	.+38     	; 0x709e <__fp_cmp+0x46>
    7078:	62 1b       	sub	r22, r18
    707a:	73 0b       	sbc	r23, r19
    707c:	84 0b       	sbc	r24, r20
    707e:	95 0b       	sbc	r25, r21
    7080:	39 f4       	brne	.+14     	; 0x7090 <__fp_cmp+0x38>
    7082:	0a 26       	eor	r0, r26
    7084:	61 f0       	breq	.+24     	; 0x709e <__fp_cmp+0x46>
    7086:	23 2b       	or	r18, r19
    7088:	24 2b       	or	r18, r20
    708a:	25 2b       	or	r18, r21
    708c:	21 f4       	brne	.+8      	; 0x7096 <__fp_cmp+0x3e>
    708e:	08 95       	ret
    7090:	0a 26       	eor	r0, r26
    7092:	09 f4       	brne	.+2      	; 0x7096 <__fp_cmp+0x3e>
    7094:	a1 40       	sbci	r26, 0x01	; 1
    7096:	a6 95       	lsr	r26
    7098:	8f ef       	ldi	r24, 0xFF	; 255
    709a:	81 1d       	adc	r24, r1
    709c:	81 1d       	adc	r24, r1
    709e:	08 95       	ret

000070a0 <__fp_inf>:
    70a0:	97 f9       	bld	r25, 7
    70a2:	9f 67       	ori	r25, 0x7F	; 127
    70a4:	80 e8       	ldi	r24, 0x80	; 128
    70a6:	70 e0       	ldi	r23, 0x00	; 0
    70a8:	60 e0       	ldi	r22, 0x00	; 0
    70aa:	08 95       	ret

000070ac <__fp_nan>:
    70ac:	9f ef       	ldi	r25, 0xFF	; 255
    70ae:	80 ec       	ldi	r24, 0xC0	; 192
    70b0:	08 95       	ret

000070b2 <__fp_pscA>:
    70b2:	00 24       	eor	r0, r0
    70b4:	0a 94       	dec	r0
    70b6:	16 16       	cp	r1, r22
    70b8:	17 06       	cpc	r1, r23
    70ba:	18 06       	cpc	r1, r24
    70bc:	09 06       	cpc	r0, r25
    70be:	08 95       	ret

000070c0 <__fp_pscB>:
    70c0:	00 24       	eor	r0, r0
    70c2:	0a 94       	dec	r0
    70c4:	12 16       	cp	r1, r18
    70c6:	13 06       	cpc	r1, r19
    70c8:	14 06       	cpc	r1, r20
    70ca:	05 06       	cpc	r0, r21
    70cc:	08 95       	ret

000070ce <__fp_round>:
    70ce:	09 2e       	mov	r0, r25
    70d0:	03 94       	inc	r0
    70d2:	00 0c       	add	r0, r0
    70d4:	11 f4       	brne	.+4      	; 0x70da <__fp_round+0xc>
    70d6:	88 23       	and	r24, r24
    70d8:	52 f0       	brmi	.+20     	; 0x70ee <__fp_round+0x20>
    70da:	bb 0f       	add	r27, r27
    70dc:	40 f4       	brcc	.+16     	; 0x70ee <__fp_round+0x20>
    70de:	bf 2b       	or	r27, r31
    70e0:	11 f4       	brne	.+4      	; 0x70e6 <__fp_round+0x18>
    70e2:	60 ff       	sbrs	r22, 0
    70e4:	04 c0       	rjmp	.+8      	; 0x70ee <__fp_round+0x20>
    70e6:	6f 5f       	subi	r22, 0xFF	; 255
    70e8:	7f 4f       	sbci	r23, 0xFF	; 255
    70ea:	8f 4f       	sbci	r24, 0xFF	; 255
    70ec:	9f 4f       	sbci	r25, 0xFF	; 255
    70ee:	08 95       	ret

000070f0 <__fp_split3>:
    70f0:	57 fd       	sbrc	r21, 7
    70f2:	90 58       	subi	r25, 0x80	; 128
    70f4:	44 0f       	add	r20, r20
    70f6:	55 1f       	adc	r21, r21
    70f8:	59 f0       	breq	.+22     	; 0x7110 <__fp_splitA+0x10>
    70fa:	5f 3f       	cpi	r21, 0xFF	; 255
    70fc:	71 f0       	breq	.+28     	; 0x711a <__fp_splitA+0x1a>
    70fe:	47 95       	ror	r20

00007100 <__fp_splitA>:
    7100:	88 0f       	add	r24, r24
    7102:	97 fb       	bst	r25, 7
    7104:	99 1f       	adc	r25, r25
    7106:	61 f0       	breq	.+24     	; 0x7120 <__fp_splitA+0x20>
    7108:	9f 3f       	cpi	r25, 0xFF	; 255
    710a:	79 f0       	breq	.+30     	; 0x712a <__fp_splitA+0x2a>
    710c:	87 95       	ror	r24
    710e:	08 95       	ret
    7110:	12 16       	cp	r1, r18
    7112:	13 06       	cpc	r1, r19
    7114:	14 06       	cpc	r1, r20
    7116:	55 1f       	adc	r21, r21
    7118:	f2 cf       	rjmp	.-28     	; 0x70fe <__fp_split3+0xe>
    711a:	46 95       	lsr	r20
    711c:	f1 df       	rcall	.-30     	; 0x7100 <__fp_splitA>
    711e:	08 c0       	rjmp	.+16     	; 0x7130 <__fp_splitA+0x30>
    7120:	16 16       	cp	r1, r22
    7122:	17 06       	cpc	r1, r23
    7124:	18 06       	cpc	r1, r24
    7126:	99 1f       	adc	r25, r25
    7128:	f1 cf       	rjmp	.-30     	; 0x710c <__fp_splitA+0xc>
    712a:	86 95       	lsr	r24
    712c:	71 05       	cpc	r23, r1
    712e:	61 05       	cpc	r22, r1
    7130:	08 94       	sec
    7132:	08 95       	ret

00007134 <__fp_zero>:
    7134:	e8 94       	clt

00007136 <__fp_szero>:
    7136:	bb 27       	eor	r27, r27
    7138:	66 27       	eor	r22, r22
    713a:	77 27       	eor	r23, r23
    713c:	cb 01       	movw	r24, r22
    713e:	97 f9       	bld	r25, 7
    7140:	08 95       	ret

00007142 <__gesf2>:
    7142:	8a df       	rcall	.-236    	; 0x7058 <__fp_cmp>
    7144:	08 f4       	brcc	.+2      	; 0x7148 <__gesf2+0x6>
    7146:	8f ef       	ldi	r24, 0xFF	; 255
    7148:	08 95       	ret

0000714a <log10>:
    714a:	0a d0       	rcall	.+20     	; 0x7160 <log>
    714c:	29 ed       	ldi	r18, 0xD9	; 217
    714e:	3b e5       	ldi	r19, 0x5B	; 91
    7150:	4e ed       	ldi	r20, 0xDE	; 222
    7152:	5e e3       	ldi	r21, 0x3E	; 62
    7154:	45 c0       	rjmp	.+138    	; 0x71e0 <__mulsf3>
    7156:	0e f0       	brts	.+2      	; 0x715a <log10+0x10>
    7158:	a6 c0       	rjmp	.+332    	; 0x72a6 <__fp_mpack>
    715a:	a8 cf       	rjmp	.-176    	; 0x70ac <__fp_nan>
    715c:	68 94       	set
    715e:	a0 cf       	rjmp	.-192    	; 0x70a0 <__fp_inf>

00007160 <log>:
    7160:	cf df       	rcall	.-98     	; 0x7100 <__fp_splitA>
    7162:	c8 f3       	brcs	.-14     	; 0x7156 <log10+0xc>
    7164:	99 23       	and	r25, r25
    7166:	d1 f3       	breq	.-12     	; 0x715c <log10+0x12>
    7168:	c6 f3       	brts	.-16     	; 0x715a <log10+0x10>
    716a:	df 93       	push	r29
    716c:	cf 93       	push	r28
    716e:	1f 93       	push	r17
    7170:	0f 93       	push	r16
    7172:	ff 92       	push	r15
    7174:	c9 2f       	mov	r28, r25
    7176:	dd 27       	eor	r29, r29
    7178:	88 23       	and	r24, r24
    717a:	2a f0       	brmi	.+10     	; 0x7186 <log+0x26>
    717c:	21 97       	sbiw	r28, 0x01	; 1
    717e:	66 0f       	add	r22, r22
    7180:	77 1f       	adc	r23, r23
    7182:	88 1f       	adc	r24, r24
    7184:	da f7       	brpl	.-10     	; 0x717c <log+0x1c>
    7186:	20 e0       	ldi	r18, 0x00	; 0
    7188:	30 e0       	ldi	r19, 0x00	; 0
    718a:	40 e8       	ldi	r20, 0x80	; 128
    718c:	5f eb       	ldi	r21, 0xBF	; 191
    718e:	9f e3       	ldi	r25, 0x3F	; 63
    7190:	88 39       	cpi	r24, 0x98	; 152
    7192:	20 f0       	brcs	.+8      	; 0x719c <log+0x3c>
    7194:	80 3e       	cpi	r24, 0xE0	; 224
    7196:	30 f0       	brcs	.+12     	; 0x71a4 <log+0x44>
    7198:	21 96       	adiw	r28, 0x01	; 1
    719a:	8f 77       	andi	r24, 0x7F	; 127
    719c:	24 de       	rcall	.-952    	; 0x6de6 <__addsf3>
    719e:	e8 e7       	ldi	r30, 0x78	; 120
    71a0:	f3 e0       	ldi	r31, 0x03	; 3
    71a2:	03 c0       	rjmp	.+6      	; 0x71aa <log+0x4a>
    71a4:	20 de       	rcall	.-960    	; 0x6de6 <__addsf3>
    71a6:	e5 ea       	ldi	r30, 0xA5	; 165
    71a8:	f3 e0       	ldi	r31, 0x03	; 3
    71aa:	8b d0       	rcall	.+278    	; 0x72c2 <__fp_powser>
    71ac:	8b 01       	movw	r16, r22
    71ae:	be 01       	movw	r22, r28
    71b0:	ec 01       	movw	r28, r24
    71b2:	fb 2e       	mov	r15, r27
    71b4:	6f 57       	subi	r22, 0x7F	; 127
    71b6:	71 09       	sbc	r23, r1
    71b8:	75 95       	asr	r23
    71ba:	77 1f       	adc	r23, r23
    71bc:	88 0b       	sbc	r24, r24
    71be:	99 0b       	sbc	r25, r25
    71c0:	10 df       	rcall	.-480    	; 0x6fe2 <__floatsisf>
    71c2:	28 e1       	ldi	r18, 0x18	; 24
    71c4:	32 e7       	ldi	r19, 0x72	; 114
    71c6:	41 e3       	ldi	r20, 0x31	; 49
    71c8:	5f e3       	ldi	r21, 0x3F	; 63
    71ca:	16 d0       	rcall	.+44     	; 0x71f8 <__mulsf3x>
    71cc:	af 2d       	mov	r26, r15
    71ce:	98 01       	movw	r18, r16
    71d0:	ae 01       	movw	r20, r28
    71d2:	ff 90       	pop	r15
    71d4:	0f 91       	pop	r16
    71d6:	1f 91       	pop	r17
    71d8:	cf 91       	pop	r28
    71da:	df 91       	pop	r29
    71dc:	15 de       	rcall	.-982    	; 0x6e08 <__addsf3x>
    71de:	77 cf       	rjmp	.-274    	; 0x70ce <__fp_round>

000071e0 <__mulsf3>:
    71e0:	0b d0       	rcall	.+22     	; 0x71f8 <__mulsf3x>
    71e2:	75 cf       	rjmp	.-278    	; 0x70ce <__fp_round>
    71e4:	66 df       	rcall	.-308    	; 0x70b2 <__fp_pscA>
    71e6:	28 f0       	brcs	.+10     	; 0x71f2 <__mulsf3+0x12>
    71e8:	6b df       	rcall	.-298    	; 0x70c0 <__fp_pscB>
    71ea:	18 f0       	brcs	.+6      	; 0x71f2 <__mulsf3+0x12>
    71ec:	95 23       	and	r25, r21
    71ee:	09 f0       	breq	.+2      	; 0x71f2 <__mulsf3+0x12>
    71f0:	57 cf       	rjmp	.-338    	; 0x70a0 <__fp_inf>
    71f2:	5c cf       	rjmp	.-328    	; 0x70ac <__fp_nan>
    71f4:	11 24       	eor	r1, r1
    71f6:	9f cf       	rjmp	.-194    	; 0x7136 <__fp_szero>

000071f8 <__mulsf3x>:
    71f8:	7b df       	rcall	.-266    	; 0x70f0 <__fp_split3>
    71fa:	a0 f3       	brcs	.-24     	; 0x71e4 <__mulsf3+0x4>

000071fc <__mulsf3_pse>:
    71fc:	95 9f       	mul	r25, r21
    71fe:	d1 f3       	breq	.-12     	; 0x71f4 <__mulsf3+0x14>
    7200:	95 0f       	add	r25, r21
    7202:	50 e0       	ldi	r21, 0x00	; 0
    7204:	55 1f       	adc	r21, r21
    7206:	62 9f       	mul	r22, r18
    7208:	f0 01       	movw	r30, r0
    720a:	72 9f       	mul	r23, r18
    720c:	bb 27       	eor	r27, r27
    720e:	f0 0d       	add	r31, r0
    7210:	b1 1d       	adc	r27, r1
    7212:	63 9f       	mul	r22, r19
    7214:	aa 27       	eor	r26, r26
    7216:	f0 0d       	add	r31, r0
    7218:	b1 1d       	adc	r27, r1
    721a:	aa 1f       	adc	r26, r26
    721c:	64 9f       	mul	r22, r20
    721e:	66 27       	eor	r22, r22
    7220:	b0 0d       	add	r27, r0
    7222:	a1 1d       	adc	r26, r1
    7224:	66 1f       	adc	r22, r22
    7226:	82 9f       	mul	r24, r18
    7228:	22 27       	eor	r18, r18
    722a:	b0 0d       	add	r27, r0
    722c:	a1 1d       	adc	r26, r1
    722e:	62 1f       	adc	r22, r18
    7230:	73 9f       	mul	r23, r19
    7232:	b0 0d       	add	r27, r0
    7234:	a1 1d       	adc	r26, r1
    7236:	62 1f       	adc	r22, r18
    7238:	83 9f       	mul	r24, r19
    723a:	a0 0d       	add	r26, r0
    723c:	61 1d       	adc	r22, r1
    723e:	22 1f       	adc	r18, r18
    7240:	74 9f       	mul	r23, r20
    7242:	33 27       	eor	r19, r19
    7244:	a0 0d       	add	r26, r0
    7246:	61 1d       	adc	r22, r1
    7248:	23 1f       	adc	r18, r19
    724a:	84 9f       	mul	r24, r20
    724c:	60 0d       	add	r22, r0
    724e:	21 1d       	adc	r18, r1
    7250:	82 2f       	mov	r24, r18
    7252:	76 2f       	mov	r23, r22
    7254:	6a 2f       	mov	r22, r26
    7256:	11 24       	eor	r1, r1
    7258:	9f 57       	subi	r25, 0x7F	; 127
    725a:	50 40       	sbci	r21, 0x00	; 0
    725c:	8a f0       	brmi	.+34     	; 0x7280 <__mulsf3_pse+0x84>
    725e:	e1 f0       	breq	.+56     	; 0x7298 <__mulsf3_pse+0x9c>
    7260:	88 23       	and	r24, r24
    7262:	4a f0       	brmi	.+18     	; 0x7276 <__mulsf3_pse+0x7a>
    7264:	ee 0f       	add	r30, r30
    7266:	ff 1f       	adc	r31, r31
    7268:	bb 1f       	adc	r27, r27
    726a:	66 1f       	adc	r22, r22
    726c:	77 1f       	adc	r23, r23
    726e:	88 1f       	adc	r24, r24
    7270:	91 50       	subi	r25, 0x01	; 1
    7272:	50 40       	sbci	r21, 0x00	; 0
    7274:	a9 f7       	brne	.-22     	; 0x7260 <__mulsf3_pse+0x64>
    7276:	9e 3f       	cpi	r25, 0xFE	; 254
    7278:	51 05       	cpc	r21, r1
    727a:	70 f0       	brcs	.+28     	; 0x7298 <__mulsf3_pse+0x9c>
    727c:	11 cf       	rjmp	.-478    	; 0x70a0 <__fp_inf>
    727e:	5b cf       	rjmp	.-330    	; 0x7136 <__fp_szero>
    7280:	5f 3f       	cpi	r21, 0xFF	; 255
    7282:	ec f3       	brlt	.-6      	; 0x727e <__mulsf3_pse+0x82>
    7284:	98 3e       	cpi	r25, 0xE8	; 232
    7286:	dc f3       	brlt	.-10     	; 0x727e <__mulsf3_pse+0x82>
    7288:	86 95       	lsr	r24
    728a:	77 95       	ror	r23
    728c:	67 95       	ror	r22
    728e:	b7 95       	ror	r27
    7290:	f7 95       	ror	r31
    7292:	e7 95       	ror	r30
    7294:	9f 5f       	subi	r25, 0xFF	; 255
    7296:	c1 f7       	brne	.-16     	; 0x7288 <__mulsf3_pse+0x8c>
    7298:	fe 2b       	or	r31, r30
    729a:	88 0f       	add	r24, r24
    729c:	91 1d       	adc	r25, r1
    729e:	96 95       	lsr	r25
    72a0:	87 95       	ror	r24
    72a2:	97 f9       	bld	r25, 7
    72a4:	08 95       	ret

000072a6 <__fp_mpack>:
    72a6:	9f 3f       	cpi	r25, 0xFF	; 255
    72a8:	31 f0       	breq	.+12     	; 0x72b6 <__fp_mpack_finite+0xc>

000072aa <__fp_mpack_finite>:
    72aa:	91 50       	subi	r25, 0x01	; 1
    72ac:	20 f4       	brcc	.+8      	; 0x72b6 <__fp_mpack_finite+0xc>
    72ae:	87 95       	ror	r24
    72b0:	77 95       	ror	r23
    72b2:	67 95       	ror	r22
    72b4:	b7 95       	ror	r27
    72b6:	88 0f       	add	r24, r24
    72b8:	91 1d       	adc	r25, r1
    72ba:	96 95       	lsr	r25
    72bc:	87 95       	ror	r24
    72be:	97 f9       	bld	r25, 7
    72c0:	08 95       	ret

000072c2 <__fp_powser>:
    72c2:	df 93       	push	r29
    72c4:	cf 93       	push	r28
    72c6:	1f 93       	push	r17
    72c8:	0f 93       	push	r16
    72ca:	ff 92       	push	r15
    72cc:	ef 92       	push	r14
    72ce:	df 92       	push	r13
    72d0:	7b 01       	movw	r14, r22
    72d2:	8c 01       	movw	r16, r24
    72d4:	68 94       	set
    72d6:	05 c0       	rjmp	.+10     	; 0x72e2 <__fp_powser+0x20>
    72d8:	da 2e       	mov	r13, r26
    72da:	ef 01       	movw	r28, r30
    72dc:	8d df       	rcall	.-230    	; 0x71f8 <__mulsf3x>
    72de:	fe 01       	movw	r30, r28
    72e0:	e8 94       	clt
    72e2:	a5 91       	lpm	r26, Z+
    72e4:	25 91       	lpm	r18, Z+
    72e6:	35 91       	lpm	r19, Z+
    72e8:	45 91       	lpm	r20, Z+
    72ea:	55 91       	lpm	r21, Z+
    72ec:	ae f3       	brts	.-22     	; 0x72d8 <__fp_powser+0x16>
    72ee:	ef 01       	movw	r28, r30
    72f0:	8b dd       	rcall	.-1258   	; 0x6e08 <__addsf3x>
    72f2:	fe 01       	movw	r30, r28
    72f4:	97 01       	movw	r18, r14
    72f6:	a8 01       	movw	r20, r16
    72f8:	da 94       	dec	r13
    72fa:	79 f7       	brne	.-34     	; 0x72da <__fp_powser+0x18>
    72fc:	df 90       	pop	r13
    72fe:	ef 90       	pop	r14
    7300:	ff 90       	pop	r15
    7302:	0f 91       	pop	r16
    7304:	1f 91       	pop	r17
    7306:	cf 91       	pop	r28
    7308:	df 91       	pop	r29
    730a:	08 95       	ret

0000730c <vfprintf>:
    730c:	2f 92       	push	r2
    730e:	3f 92       	push	r3
    7310:	4f 92       	push	r4
    7312:	5f 92       	push	r5
    7314:	6f 92       	push	r6
    7316:	7f 92       	push	r7
    7318:	8f 92       	push	r8
    731a:	9f 92       	push	r9
    731c:	af 92       	push	r10
    731e:	bf 92       	push	r11
    7320:	cf 92       	push	r12
    7322:	df 92       	push	r13
    7324:	ef 92       	push	r14
    7326:	ff 92       	push	r15
    7328:	0f 93       	push	r16
    732a:	1f 93       	push	r17
    732c:	cf 93       	push	r28
    732e:	df 93       	push	r29
    7330:	cd b7       	in	r28, 0x3d	; 61
    7332:	de b7       	in	r29, 0x3e	; 62
    7334:	63 97       	sbiw	r28, 0x13	; 19
    7336:	cd bf       	out	0x3d, r28	; 61
    7338:	de bf       	out	0x3e, r29	; 62
    733a:	7c 01       	movw	r14, r24
    733c:	1b 01       	movw	r2, r22
    733e:	6a 01       	movw	r12, r20
    7340:	fc 01       	movw	r30, r24
    7342:	16 82       	std	Z+6, r1	; 0x06
    7344:	17 82       	std	Z+7, r1	; 0x07
    7346:	83 81       	ldd	r24, Z+3	; 0x03
    7348:	81 ff       	sbrs	r24, 1
    734a:	49 c3       	rjmp	.+1682   	; 0x79de <vfprintf+0x6d2>
    734c:	be 01       	movw	r22, r28
    734e:	6f 5f       	subi	r22, 0xFF	; 255
    7350:	7f 4f       	sbci	r23, 0xFF	; 255
    7352:	4b 01       	movw	r8, r22
    7354:	f7 01       	movw	r30, r14
    7356:	93 81       	ldd	r25, Z+3	; 0x03
    7358:	f1 01       	movw	r30, r2
    735a:	93 fd       	sbrc	r25, 3
    735c:	85 91       	lpm	r24, Z+
    735e:	93 ff       	sbrs	r25, 3
    7360:	81 91       	ld	r24, Z+
    7362:	1f 01       	movw	r2, r30
    7364:	88 23       	and	r24, r24
    7366:	09 f4       	brne	.+2      	; 0x736a <vfprintf+0x5e>
    7368:	36 c3       	rjmp	.+1644   	; 0x79d6 <vfprintf+0x6ca>
    736a:	85 32       	cpi	r24, 0x25	; 37
    736c:	39 f4       	brne	.+14     	; 0x737c <vfprintf+0x70>
    736e:	93 fd       	sbrc	r25, 3
    7370:	85 91       	lpm	r24, Z+
    7372:	93 ff       	sbrs	r25, 3
    7374:	81 91       	ld	r24, Z+
    7376:	1f 01       	movw	r2, r30
    7378:	85 32       	cpi	r24, 0x25	; 37
    737a:	31 f4       	brne	.+12     	; 0x7388 <vfprintf+0x7c>
    737c:	b7 01       	movw	r22, r14
    737e:	90 e0       	ldi	r25, 0x00	; 0
    7380:	3a d6       	rcall	.+3188   	; 0x7ff6 <fputc>
    7382:	56 01       	movw	r10, r12
    7384:	65 01       	movw	r12, r10
    7386:	e6 cf       	rjmp	.-52     	; 0x7354 <vfprintf+0x48>
    7388:	10 e0       	ldi	r17, 0x00	; 0
    738a:	51 2c       	mov	r5, r1
    738c:	20 e0       	ldi	r18, 0x00	; 0
    738e:	20 32       	cpi	r18, 0x20	; 32
    7390:	a0 f4       	brcc	.+40     	; 0x73ba <vfprintf+0xae>
    7392:	8b 32       	cpi	r24, 0x2B	; 43
    7394:	69 f0       	breq	.+26     	; 0x73b0 <vfprintf+0xa4>
    7396:	30 f4       	brcc	.+12     	; 0x73a4 <vfprintf+0x98>
    7398:	80 32       	cpi	r24, 0x20	; 32
    739a:	59 f0       	breq	.+22     	; 0x73b2 <vfprintf+0xa6>
    739c:	83 32       	cpi	r24, 0x23	; 35
    739e:	69 f4       	brne	.+26     	; 0x73ba <vfprintf+0xae>
    73a0:	20 61       	ori	r18, 0x10	; 16
    73a2:	2c c0       	rjmp	.+88     	; 0x73fc <vfprintf+0xf0>
    73a4:	8d 32       	cpi	r24, 0x2D	; 45
    73a6:	39 f0       	breq	.+14     	; 0x73b6 <vfprintf+0xaa>
    73a8:	80 33       	cpi	r24, 0x30	; 48
    73aa:	39 f4       	brne	.+14     	; 0x73ba <vfprintf+0xae>
    73ac:	21 60       	ori	r18, 0x01	; 1
    73ae:	26 c0       	rjmp	.+76     	; 0x73fc <vfprintf+0xf0>
    73b0:	22 60       	ori	r18, 0x02	; 2
    73b2:	24 60       	ori	r18, 0x04	; 4
    73b4:	23 c0       	rjmp	.+70     	; 0x73fc <vfprintf+0xf0>
    73b6:	28 60       	ori	r18, 0x08	; 8
    73b8:	21 c0       	rjmp	.+66     	; 0x73fc <vfprintf+0xf0>
    73ba:	27 fd       	sbrc	r18, 7
    73bc:	27 c0       	rjmp	.+78     	; 0x740c <vfprintf+0x100>
    73be:	30 ed       	ldi	r19, 0xD0	; 208
    73c0:	38 0f       	add	r19, r24
    73c2:	3a 30       	cpi	r19, 0x0A	; 10
    73c4:	78 f4       	brcc	.+30     	; 0x73e4 <vfprintf+0xd8>
    73c6:	26 ff       	sbrs	r18, 6
    73c8:	06 c0       	rjmp	.+12     	; 0x73d6 <vfprintf+0xca>
    73ca:	fa e0       	ldi	r31, 0x0A	; 10
    73cc:	1f 9f       	mul	r17, r31
    73ce:	30 0d       	add	r19, r0
    73d0:	11 24       	eor	r1, r1
    73d2:	13 2f       	mov	r17, r19
    73d4:	13 c0       	rjmp	.+38     	; 0x73fc <vfprintf+0xf0>
    73d6:	6a e0       	ldi	r22, 0x0A	; 10
    73d8:	56 9e       	mul	r5, r22
    73da:	30 0d       	add	r19, r0
    73dc:	11 24       	eor	r1, r1
    73de:	53 2e       	mov	r5, r19
    73e0:	20 62       	ori	r18, 0x20	; 32
    73e2:	0c c0       	rjmp	.+24     	; 0x73fc <vfprintf+0xf0>
    73e4:	8e 32       	cpi	r24, 0x2E	; 46
    73e6:	21 f4       	brne	.+8      	; 0x73f0 <vfprintf+0xe4>
    73e8:	26 fd       	sbrc	r18, 6
    73ea:	f5 c2       	rjmp	.+1514   	; 0x79d6 <vfprintf+0x6ca>
    73ec:	20 64       	ori	r18, 0x40	; 64
    73ee:	06 c0       	rjmp	.+12     	; 0x73fc <vfprintf+0xf0>
    73f0:	8c 36       	cpi	r24, 0x6C	; 108
    73f2:	11 f4       	brne	.+4      	; 0x73f8 <vfprintf+0xec>
    73f4:	20 68       	ori	r18, 0x80	; 128
    73f6:	02 c0       	rjmp	.+4      	; 0x73fc <vfprintf+0xf0>
    73f8:	88 36       	cpi	r24, 0x68	; 104
    73fa:	41 f4       	brne	.+16     	; 0x740c <vfprintf+0x100>
    73fc:	f1 01       	movw	r30, r2
    73fe:	93 fd       	sbrc	r25, 3
    7400:	85 91       	lpm	r24, Z+
    7402:	93 ff       	sbrs	r25, 3
    7404:	81 91       	ld	r24, Z+
    7406:	1f 01       	movw	r2, r30
    7408:	81 11       	cpse	r24, r1
    740a:	c1 cf       	rjmp	.-126    	; 0x738e <vfprintf+0x82>
    740c:	9b eb       	ldi	r25, 0xBB	; 187
    740e:	98 0f       	add	r25, r24
    7410:	93 30       	cpi	r25, 0x03	; 3
    7412:	18 f4       	brcc	.+6      	; 0x741a <vfprintf+0x10e>
    7414:	20 61       	ori	r18, 0x10	; 16
    7416:	80 5e       	subi	r24, 0xE0	; 224
    7418:	06 c0       	rjmp	.+12     	; 0x7426 <vfprintf+0x11a>
    741a:	9b e9       	ldi	r25, 0x9B	; 155
    741c:	98 0f       	add	r25, r24
    741e:	93 30       	cpi	r25, 0x03	; 3
    7420:	08 f0       	brcs	.+2      	; 0x7424 <vfprintf+0x118>
    7422:	9a c1       	rjmp	.+820    	; 0x7758 <vfprintf+0x44c>
    7424:	2f 7e       	andi	r18, 0xEF	; 239
    7426:	26 ff       	sbrs	r18, 6
    7428:	16 e0       	ldi	r17, 0x06	; 6
    742a:	2f 73       	andi	r18, 0x3F	; 63
    742c:	72 2e       	mov	r7, r18
    742e:	85 36       	cpi	r24, 0x65	; 101
    7430:	21 f4       	brne	.+8      	; 0x743a <vfprintf+0x12e>
    7432:	f2 2f       	mov	r31, r18
    7434:	f0 64       	ori	r31, 0x40	; 64
    7436:	7f 2e       	mov	r7, r31
    7438:	08 c0       	rjmp	.+16     	; 0x744a <vfprintf+0x13e>
    743a:	86 36       	cpi	r24, 0x66	; 102
    743c:	21 f4       	brne	.+8      	; 0x7446 <vfprintf+0x13a>
    743e:	62 2f       	mov	r22, r18
    7440:	60 68       	ori	r22, 0x80	; 128
    7442:	76 2e       	mov	r7, r22
    7444:	02 c0       	rjmp	.+4      	; 0x744a <vfprintf+0x13e>
    7446:	11 11       	cpse	r17, r1
    7448:	11 50       	subi	r17, 0x01	; 1
    744a:	77 fe       	sbrs	r7, 7
    744c:	07 c0       	rjmp	.+14     	; 0x745c <vfprintf+0x150>
    744e:	1c 33       	cpi	r17, 0x3C	; 60
    7450:	48 f4       	brcc	.+18     	; 0x7464 <vfprintf+0x158>
    7452:	44 24       	eor	r4, r4
    7454:	43 94       	inc	r4
    7456:	41 0e       	add	r4, r17
    7458:	27 e0       	ldi	r18, 0x07	; 7
    745a:	0b c0       	rjmp	.+22     	; 0x7472 <vfprintf+0x166>
    745c:	18 30       	cpi	r17, 0x08	; 8
    745e:	30 f4       	brcc	.+12     	; 0x746c <vfprintf+0x160>
    7460:	21 2f       	mov	r18, r17
    7462:	06 c0       	rjmp	.+12     	; 0x7470 <vfprintf+0x164>
    7464:	27 e0       	ldi	r18, 0x07	; 7
    7466:	4c e3       	ldi	r20, 0x3C	; 60
    7468:	44 2e       	mov	r4, r20
    746a:	03 c0       	rjmp	.+6      	; 0x7472 <vfprintf+0x166>
    746c:	27 e0       	ldi	r18, 0x07	; 7
    746e:	17 e0       	ldi	r17, 0x07	; 7
    7470:	41 2c       	mov	r4, r1
    7472:	56 01       	movw	r10, r12
    7474:	74 e0       	ldi	r23, 0x04	; 4
    7476:	a7 0e       	add	r10, r23
    7478:	b1 1c       	adc	r11, r1
    747a:	f6 01       	movw	r30, r12
    747c:	60 81       	ld	r22, Z
    747e:	71 81       	ldd	r23, Z+1	; 0x01
    7480:	82 81       	ldd	r24, Z+2	; 0x02
    7482:	93 81       	ldd	r25, Z+3	; 0x03
    7484:	04 2d       	mov	r16, r4
    7486:	a4 01       	movw	r20, r8
    7488:	b8 d4       	rcall	.+2416   	; 0x7dfa <__ftoa_engine>
    748a:	6c 01       	movw	r12, r24
    748c:	09 81       	ldd	r16, Y+1	; 0x01
    748e:	00 ff       	sbrs	r16, 0
    7490:	02 c0       	rjmp	.+4      	; 0x7496 <vfprintf+0x18a>
    7492:	03 ff       	sbrs	r16, 3
    7494:	06 c0       	rjmp	.+12     	; 0x74a2 <vfprintf+0x196>
    7496:	71 fc       	sbrc	r7, 1
    7498:	07 c0       	rjmp	.+14     	; 0x74a8 <vfprintf+0x19c>
    749a:	72 fc       	sbrc	r7, 2
    749c:	08 c0       	rjmp	.+16     	; 0x74ae <vfprintf+0x1a2>
    749e:	61 2c       	mov	r6, r1
    74a0:	08 c0       	rjmp	.+16     	; 0x74b2 <vfprintf+0x1a6>
    74a2:	3d e2       	ldi	r19, 0x2D	; 45
    74a4:	63 2e       	mov	r6, r19
    74a6:	05 c0       	rjmp	.+10     	; 0x74b2 <vfprintf+0x1a6>
    74a8:	2b e2       	ldi	r18, 0x2B	; 43
    74aa:	62 2e       	mov	r6, r18
    74ac:	02 c0       	rjmp	.+4      	; 0x74b2 <vfprintf+0x1a6>
    74ae:	90 e2       	ldi	r25, 0x20	; 32
    74b0:	69 2e       	mov	r6, r25
    74b2:	80 2f       	mov	r24, r16
    74b4:	8c 70       	andi	r24, 0x0C	; 12
    74b6:	81 f1       	breq	.+96     	; 0x7518 <vfprintf+0x20c>
    74b8:	66 20       	and	r6, r6
    74ba:	11 f0       	breq	.+4      	; 0x74c0 <vfprintf+0x1b4>
    74bc:	84 e0       	ldi	r24, 0x04	; 4
    74be:	01 c0       	rjmp	.+2      	; 0x74c2 <vfprintf+0x1b6>
    74c0:	83 e0       	ldi	r24, 0x03	; 3
    74c2:	85 15       	cp	r24, r5
    74c4:	10 f0       	brcs	.+4      	; 0x74ca <vfprintf+0x1be>
    74c6:	51 2c       	mov	r5, r1
    74c8:	0a c0       	rjmp	.+20     	; 0x74de <vfprintf+0x1d2>
    74ca:	58 1a       	sub	r5, r24
    74cc:	73 fc       	sbrc	r7, 3
    74ce:	07 c0       	rjmp	.+14     	; 0x74de <vfprintf+0x1d2>
    74d0:	b7 01       	movw	r22, r14
    74d2:	80 e2       	ldi	r24, 0x20	; 32
    74d4:	90 e0       	ldi	r25, 0x00	; 0
    74d6:	8f d5       	rcall	.+2846   	; 0x7ff6 <fputc>
    74d8:	5a 94       	dec	r5
    74da:	d1 f7       	brne	.-12     	; 0x74d0 <vfprintf+0x1c4>
    74dc:	f4 cf       	rjmp	.-24     	; 0x74c6 <vfprintf+0x1ba>
    74de:	66 20       	and	r6, r6
    74e0:	21 f0       	breq	.+8      	; 0x74ea <vfprintf+0x1de>
    74e2:	b7 01       	movw	r22, r14
    74e4:	86 2d       	mov	r24, r6
    74e6:	90 e0       	ldi	r25, 0x00	; 0
    74e8:	86 d5       	rcall	.+2828   	; 0x7ff6 <fputc>
    74ea:	03 fd       	sbrc	r16, 3
    74ec:	03 c0       	rjmp	.+6      	; 0x74f4 <vfprintf+0x1e8>
    74ee:	06 eb       	ldi	r16, 0xB6	; 182
    74f0:	12 e3       	ldi	r17, 0x32	; 50
    74f2:	02 c0       	rjmp	.+4      	; 0x74f8 <vfprintf+0x1ec>
    74f4:	02 eb       	ldi	r16, 0xB2	; 178
    74f6:	12 e3       	ldi	r17, 0x32	; 50
    74f8:	f7 2d       	mov	r31, r7
    74fa:	f0 71       	andi	r31, 0x10	; 16
    74fc:	7f 2e       	mov	r7, r31
    74fe:	f8 01       	movw	r30, r16
    7500:	84 91       	lpm	r24, Z
    7502:	88 23       	and	r24, r24
    7504:	09 f4       	brne	.+2      	; 0x7508 <vfprintf+0x1fc>
    7506:	5e c2       	rjmp	.+1212   	; 0x79c4 <vfprintf+0x6b8>
    7508:	71 10       	cpse	r7, r1
    750a:	80 52       	subi	r24, 0x20	; 32
    750c:	b7 01       	movw	r22, r14
    750e:	90 e0       	ldi	r25, 0x00	; 0
    7510:	72 d5       	rcall	.+2788   	; 0x7ff6 <fputc>
    7512:	0f 5f       	subi	r16, 0xFF	; 255
    7514:	1f 4f       	sbci	r17, 0xFF	; 255
    7516:	f3 cf       	rjmp	.-26     	; 0x74fe <vfprintf+0x1f2>
    7518:	77 fe       	sbrs	r7, 7
    751a:	0f c0       	rjmp	.+30     	; 0x753a <vfprintf+0x22e>
    751c:	4c 0c       	add	r4, r12
    751e:	04 ff       	sbrs	r16, 4
    7520:	04 c0       	rjmp	.+8      	; 0x752a <vfprintf+0x21e>
    7522:	8a 81       	ldd	r24, Y+2	; 0x02
    7524:	81 33       	cpi	r24, 0x31	; 49
    7526:	09 f4       	brne	.+2      	; 0x752a <vfprintf+0x21e>
    7528:	4a 94       	dec	r4
    752a:	14 14       	cp	r1, r4
    752c:	74 f5       	brge	.+92     	; 0x758a <vfprintf+0x27e>
    752e:	f8 e0       	ldi	r31, 0x08	; 8
    7530:	f4 15       	cp	r31, r4
    7532:	78 f5       	brcc	.+94     	; 0x7592 <vfprintf+0x286>
    7534:	88 e0       	ldi	r24, 0x08	; 8
    7536:	48 2e       	mov	r4, r24
    7538:	2c c0       	rjmp	.+88     	; 0x7592 <vfprintf+0x286>
    753a:	76 fc       	sbrc	r7, 6
    753c:	2a c0       	rjmp	.+84     	; 0x7592 <vfprintf+0x286>
    753e:	81 2f       	mov	r24, r17
    7540:	90 e0       	ldi	r25, 0x00	; 0
    7542:	8c 15       	cp	r24, r12
    7544:	9d 05       	cpc	r25, r13
    7546:	9c f0       	brlt	.+38     	; 0x756e <vfprintf+0x262>
    7548:	6c ef       	ldi	r22, 0xFC	; 252
    754a:	c6 16       	cp	r12, r22
    754c:	6f ef       	ldi	r22, 0xFF	; 255
    754e:	d6 06       	cpc	r13, r22
    7550:	74 f0       	brlt	.+28     	; 0x756e <vfprintf+0x262>
    7552:	77 2d       	mov	r23, r7
    7554:	70 68       	ori	r23, 0x80	; 128
    7556:	77 2e       	mov	r7, r23
    7558:	0a c0       	rjmp	.+20     	; 0x756e <vfprintf+0x262>
    755a:	e2 e0       	ldi	r30, 0x02	; 2
    755c:	f0 e0       	ldi	r31, 0x00	; 0
    755e:	ec 0f       	add	r30, r28
    7560:	fd 1f       	adc	r31, r29
    7562:	e1 0f       	add	r30, r17
    7564:	f1 1d       	adc	r31, r1
    7566:	80 81       	ld	r24, Z
    7568:	80 33       	cpi	r24, 0x30	; 48
    756a:	19 f4       	brne	.+6      	; 0x7572 <vfprintf+0x266>
    756c:	11 50       	subi	r17, 0x01	; 1
    756e:	11 11       	cpse	r17, r1
    7570:	f4 cf       	rjmp	.-24     	; 0x755a <vfprintf+0x24e>
    7572:	77 fe       	sbrs	r7, 7
    7574:	0e c0       	rjmp	.+28     	; 0x7592 <vfprintf+0x286>
    7576:	44 24       	eor	r4, r4
    7578:	43 94       	inc	r4
    757a:	41 0e       	add	r4, r17
    757c:	81 2f       	mov	r24, r17
    757e:	90 e0       	ldi	r25, 0x00	; 0
    7580:	c8 16       	cp	r12, r24
    7582:	d9 06       	cpc	r13, r25
    7584:	2c f4       	brge	.+10     	; 0x7590 <vfprintf+0x284>
    7586:	1c 19       	sub	r17, r12
    7588:	04 c0       	rjmp	.+8      	; 0x7592 <vfprintf+0x286>
    758a:	44 24       	eor	r4, r4
    758c:	43 94       	inc	r4
    758e:	01 c0       	rjmp	.+2      	; 0x7592 <vfprintf+0x286>
    7590:	10 e0       	ldi	r17, 0x00	; 0
    7592:	77 fe       	sbrs	r7, 7
    7594:	07 c0       	rjmp	.+14     	; 0x75a4 <vfprintf+0x298>
    7596:	1c 14       	cp	r1, r12
    7598:	1d 04       	cpc	r1, r13
    759a:	3c f4       	brge	.+14     	; 0x75aa <vfprintf+0x29e>
    759c:	96 01       	movw	r18, r12
    759e:	2f 5f       	subi	r18, 0xFF	; 255
    75a0:	3f 4f       	sbci	r19, 0xFF	; 255
    75a2:	05 c0       	rjmp	.+10     	; 0x75ae <vfprintf+0x2a2>
    75a4:	25 e0       	ldi	r18, 0x05	; 5
    75a6:	30 e0       	ldi	r19, 0x00	; 0
    75a8:	02 c0       	rjmp	.+4      	; 0x75ae <vfprintf+0x2a2>
    75aa:	21 e0       	ldi	r18, 0x01	; 1
    75ac:	30 e0       	ldi	r19, 0x00	; 0
    75ae:	66 20       	and	r6, r6
    75b0:	11 f0       	breq	.+4      	; 0x75b6 <vfprintf+0x2aa>
    75b2:	2f 5f       	subi	r18, 0xFF	; 255
    75b4:	3f 4f       	sbci	r19, 0xFF	; 255
    75b6:	11 23       	and	r17, r17
    75b8:	31 f0       	breq	.+12     	; 0x75c6 <vfprintf+0x2ba>
    75ba:	41 2f       	mov	r20, r17
    75bc:	50 e0       	ldi	r21, 0x00	; 0
    75be:	4f 5f       	subi	r20, 0xFF	; 255
    75c0:	5f 4f       	sbci	r21, 0xFF	; 255
    75c2:	24 0f       	add	r18, r20
    75c4:	35 1f       	adc	r19, r21
    75c6:	45 2d       	mov	r20, r5
    75c8:	50 e0       	ldi	r21, 0x00	; 0
    75ca:	24 17       	cp	r18, r20
    75cc:	35 07       	cpc	r19, r21
    75ce:	14 f4       	brge	.+4      	; 0x75d4 <vfprintf+0x2c8>
    75d0:	52 1a       	sub	r5, r18
    75d2:	01 c0       	rjmp	.+2      	; 0x75d6 <vfprintf+0x2ca>
    75d4:	51 2c       	mov	r5, r1
    75d6:	87 2d       	mov	r24, r7
    75d8:	89 70       	andi	r24, 0x09	; 9
    75da:	41 f4       	brne	.+16     	; 0x75ec <vfprintf+0x2e0>
    75dc:	55 20       	and	r5, r5
    75de:	31 f0       	breq	.+12     	; 0x75ec <vfprintf+0x2e0>
    75e0:	b7 01       	movw	r22, r14
    75e2:	80 e2       	ldi	r24, 0x20	; 32
    75e4:	90 e0       	ldi	r25, 0x00	; 0
    75e6:	07 d5       	rcall	.+2574   	; 0x7ff6 <fputc>
    75e8:	5a 94       	dec	r5
    75ea:	f8 cf       	rjmp	.-16     	; 0x75dc <vfprintf+0x2d0>
    75ec:	66 20       	and	r6, r6
    75ee:	21 f0       	breq	.+8      	; 0x75f8 <vfprintf+0x2ec>
    75f0:	b7 01       	movw	r22, r14
    75f2:	86 2d       	mov	r24, r6
    75f4:	90 e0       	ldi	r25, 0x00	; 0
    75f6:	ff d4       	rcall	.+2558   	; 0x7ff6 <fputc>
    75f8:	73 fc       	sbrc	r7, 3
    75fa:	08 c0       	rjmp	.+16     	; 0x760c <vfprintf+0x300>
    75fc:	55 20       	and	r5, r5
    75fe:	31 f0       	breq	.+12     	; 0x760c <vfprintf+0x300>
    7600:	b7 01       	movw	r22, r14
    7602:	80 e3       	ldi	r24, 0x30	; 48
    7604:	90 e0       	ldi	r25, 0x00	; 0
    7606:	f7 d4       	rcall	.+2542   	; 0x7ff6 <fputc>
    7608:	5a 94       	dec	r5
    760a:	f8 cf       	rjmp	.-16     	; 0x75fc <vfprintf+0x2f0>
    760c:	77 fe       	sbrs	r7, 7
    760e:	5d c0       	rjmp	.+186    	; 0x76ca <vfprintf+0x3be>
    7610:	9c 2d       	mov	r25, r12
    7612:	8d 2d       	mov	r24, r13
    7614:	d7 fe       	sbrs	r13, 7
    7616:	02 c0       	rjmp	.+4      	; 0x761c <vfprintf+0x310>
    7618:	90 e0       	ldi	r25, 0x00	; 0
    761a:	80 e0       	ldi	r24, 0x00	; 0
    761c:	69 2e       	mov	r6, r25
    761e:	78 2e       	mov	r7, r24
    7620:	40 e0       	ldi	r20, 0x00	; 0
    7622:	50 e0       	ldi	r21, 0x00	; 0
    7624:	c6 01       	movw	r24, r12
    7626:	84 19       	sub	r24, r4
    7628:	91 09       	sbc	r25, r1
    762a:	8c 87       	std	Y+12, r24	; 0x0c
    762c:	9d 87       	std	Y+13, r25	; 0x0d
    762e:	96 01       	movw	r18, r12
    7630:	26 19       	sub	r18, r6
    7632:	37 09       	sbc	r19, r7
    7634:	28 0d       	add	r18, r8
    7636:	39 1d       	adc	r19, r9
    7638:	81 2f       	mov	r24, r17
    763a:	90 e0       	ldi	r25, 0x00	; 0
    763c:	ee 27       	eor	r30, r30
    763e:	ff 27       	eor	r31, r31
    7640:	e8 1b       	sub	r30, r24
    7642:	f9 0b       	sbc	r31, r25
    7644:	ee 87       	std	Y+14, r30	; 0x0e
    7646:	ff 87       	std	Y+15, r31	; 0x0f
    7648:	ff ef       	ldi	r31, 0xFF	; 255
    764a:	6f 16       	cp	r6, r31
    764c:	7f 06       	cpc	r7, r31
    764e:	61 f4       	brne	.+24     	; 0x7668 <vfprintf+0x35c>
    7650:	b7 01       	movw	r22, r14
    7652:	8e e2       	ldi	r24, 0x2E	; 46
    7654:	90 e0       	ldi	r25, 0x00	; 0
    7656:	2b 8b       	std	Y+19, r18	; 0x13
    7658:	3a 8b       	std	Y+18, r19	; 0x12
    765a:	48 8b       	std	Y+16, r20	; 0x10
    765c:	59 8b       	std	Y+17, r21	; 0x11
    765e:	cb d4       	rcall	.+2454   	; 0x7ff6 <fputc>
    7660:	59 89       	ldd	r21, Y+17	; 0x11
    7662:	48 89       	ldd	r20, Y+16	; 0x10
    7664:	3a 89       	ldd	r19, Y+18	; 0x12
    7666:	2b 89       	ldd	r18, Y+19	; 0x13
    7668:	c6 14       	cp	r12, r6
    766a:	d7 04       	cpc	r13, r7
    766c:	54 f0       	brlt	.+20     	; 0x7682 <vfprintf+0x376>
    766e:	6c 85       	ldd	r22, Y+12	; 0x0c
    7670:	7d 85       	ldd	r23, Y+13	; 0x0d
    7672:	66 15       	cp	r22, r6
    7674:	77 05       	cpc	r23, r7
    7676:	2c f4       	brge	.+10     	; 0x7682 <vfprintf+0x376>
    7678:	f9 01       	movw	r30, r18
    767a:	e4 0f       	add	r30, r20
    767c:	f5 1f       	adc	r31, r21
    767e:	81 81       	ldd	r24, Z+1	; 0x01
    7680:	01 c0       	rjmp	.+2      	; 0x7684 <vfprintf+0x378>
    7682:	80 e3       	ldi	r24, 0x30	; 48
    7684:	71 e0       	ldi	r23, 0x01	; 1
    7686:	67 1a       	sub	r6, r23
    7688:	71 08       	sbc	r7, r1
    768a:	4f 5f       	subi	r20, 0xFF	; 255
    768c:	5f 4f       	sbci	r21, 0xFF	; 255
    768e:	ee 85       	ldd	r30, Y+14	; 0x0e
    7690:	ff 85       	ldd	r31, Y+15	; 0x0f
    7692:	6e 16       	cp	r6, r30
    7694:	7f 06       	cpc	r7, r31
    7696:	64 f0       	brlt	.+24     	; 0x76b0 <vfprintf+0x3a4>
    7698:	b7 01       	movw	r22, r14
    769a:	90 e0       	ldi	r25, 0x00	; 0
    769c:	2b 8b       	std	Y+19, r18	; 0x13
    769e:	3a 8b       	std	Y+18, r19	; 0x12
    76a0:	48 8b       	std	Y+16, r20	; 0x10
    76a2:	59 8b       	std	Y+17, r21	; 0x11
    76a4:	a8 d4       	rcall	.+2384   	; 0x7ff6 <fputc>
    76a6:	2b 89       	ldd	r18, Y+19	; 0x13
    76a8:	3a 89       	ldd	r19, Y+18	; 0x12
    76aa:	48 89       	ldd	r20, Y+16	; 0x10
    76ac:	59 89       	ldd	r21, Y+17	; 0x11
    76ae:	cc cf       	rjmp	.-104    	; 0x7648 <vfprintf+0x33c>
    76b0:	6c 14       	cp	r6, r12
    76b2:	7d 04       	cpc	r7, r13
    76b4:	39 f4       	brne	.+14     	; 0x76c4 <vfprintf+0x3b8>
    76b6:	9a 81       	ldd	r25, Y+2	; 0x02
    76b8:	96 33       	cpi	r25, 0x36	; 54
    76ba:	18 f4       	brcc	.+6      	; 0x76c2 <vfprintf+0x3b6>
    76bc:	95 33       	cpi	r25, 0x35	; 53
    76be:	11 f4       	brne	.+4      	; 0x76c4 <vfprintf+0x3b8>
    76c0:	04 ff       	sbrs	r16, 4
    76c2:	81 e3       	ldi	r24, 0x31	; 49
    76c4:	b7 01       	movw	r22, r14
    76c6:	90 e0       	ldi	r25, 0x00	; 0
    76c8:	45 c0       	rjmp	.+138    	; 0x7754 <vfprintf+0x448>
    76ca:	8a 81       	ldd	r24, Y+2	; 0x02
    76cc:	81 33       	cpi	r24, 0x31	; 49
    76ce:	09 f0       	breq	.+2      	; 0x76d2 <vfprintf+0x3c6>
    76d0:	0f 7e       	andi	r16, 0xEF	; 239
    76d2:	b7 01       	movw	r22, r14
    76d4:	90 e0       	ldi	r25, 0x00	; 0
    76d6:	8f d4       	rcall	.+2334   	; 0x7ff6 <fputc>
    76d8:	11 11       	cpse	r17, r1
    76da:	05 c0       	rjmp	.+10     	; 0x76e6 <vfprintf+0x3da>
    76dc:	74 fe       	sbrs	r7, 4
    76de:	16 c0       	rjmp	.+44     	; 0x770c <vfprintf+0x400>
    76e0:	85 e4       	ldi	r24, 0x45	; 69
    76e2:	90 e0       	ldi	r25, 0x00	; 0
    76e4:	15 c0       	rjmp	.+42     	; 0x7710 <vfprintf+0x404>
    76e6:	b7 01       	movw	r22, r14
    76e8:	8e e2       	ldi	r24, 0x2E	; 46
    76ea:	90 e0       	ldi	r25, 0x00	; 0
    76ec:	84 d4       	rcall	.+2312   	; 0x7ff6 <fputc>
    76ee:	82 e0       	ldi	r24, 0x02	; 2
    76f0:	66 24       	eor	r6, r6
    76f2:	63 94       	inc	r6
    76f4:	68 0e       	add	r6, r24
    76f6:	f4 01       	movw	r30, r8
    76f8:	e8 0f       	add	r30, r24
    76fa:	f1 1d       	adc	r31, r1
    76fc:	80 81       	ld	r24, Z
    76fe:	b7 01       	movw	r22, r14
    7700:	90 e0       	ldi	r25, 0x00	; 0
    7702:	79 d4       	rcall	.+2290   	; 0x7ff6 <fputc>
    7704:	11 50       	subi	r17, 0x01	; 1
    7706:	51 f3       	breq	.-44     	; 0x76dc <vfprintf+0x3d0>
    7708:	86 2d       	mov	r24, r6
    770a:	f2 cf       	rjmp	.-28     	; 0x76f0 <vfprintf+0x3e4>
    770c:	85 e6       	ldi	r24, 0x65	; 101
    770e:	90 e0       	ldi	r25, 0x00	; 0
    7710:	b7 01       	movw	r22, r14
    7712:	71 d4       	rcall	.+2274   	; 0x7ff6 <fputc>
    7714:	d7 fc       	sbrc	r13, 7
    7716:	05 c0       	rjmp	.+10     	; 0x7722 <vfprintf+0x416>
    7718:	c1 14       	cp	r12, r1
    771a:	d1 04       	cpc	r13, r1
    771c:	39 f4       	brne	.+14     	; 0x772c <vfprintf+0x420>
    771e:	04 ff       	sbrs	r16, 4
    7720:	05 c0       	rjmp	.+10     	; 0x772c <vfprintf+0x420>
    7722:	d1 94       	neg	r13
    7724:	c1 94       	neg	r12
    7726:	d1 08       	sbc	r13, r1
    7728:	8d e2       	ldi	r24, 0x2D	; 45
    772a:	01 c0       	rjmp	.+2      	; 0x772e <vfprintf+0x422>
    772c:	8b e2       	ldi	r24, 0x2B	; 43
    772e:	b7 01       	movw	r22, r14
    7730:	90 e0       	ldi	r25, 0x00	; 0
    7732:	61 d4       	rcall	.+2242   	; 0x7ff6 <fputc>
    7734:	80 e3       	ldi	r24, 0x30	; 48
    7736:	6a e0       	ldi	r22, 0x0A	; 10
    7738:	c6 16       	cp	r12, r22
    773a:	d1 04       	cpc	r13, r1
    773c:	2c f0       	brlt	.+10     	; 0x7748 <vfprintf+0x43c>
    773e:	8f 5f       	subi	r24, 0xFF	; 255
    7740:	fa e0       	ldi	r31, 0x0A	; 10
    7742:	cf 1a       	sub	r12, r31
    7744:	d1 08       	sbc	r13, r1
    7746:	f7 cf       	rjmp	.-18     	; 0x7736 <vfprintf+0x42a>
    7748:	b7 01       	movw	r22, r14
    774a:	90 e0       	ldi	r25, 0x00	; 0
    774c:	54 d4       	rcall	.+2216   	; 0x7ff6 <fputc>
    774e:	b7 01       	movw	r22, r14
    7750:	c6 01       	movw	r24, r12
    7752:	c0 96       	adiw	r24, 0x30	; 48
    7754:	50 d4       	rcall	.+2208   	; 0x7ff6 <fputc>
    7756:	36 c1       	rjmp	.+620    	; 0x79c4 <vfprintf+0x6b8>
    7758:	83 36       	cpi	r24, 0x63	; 99
    775a:	31 f0       	breq	.+12     	; 0x7768 <vfprintf+0x45c>
    775c:	83 37       	cpi	r24, 0x73	; 115
    775e:	79 f0       	breq	.+30     	; 0x777e <vfprintf+0x472>
    7760:	83 35       	cpi	r24, 0x53	; 83
    7762:	09 f0       	breq	.+2      	; 0x7766 <vfprintf+0x45a>
    7764:	54 c0       	rjmp	.+168    	; 0x780e <vfprintf+0x502>
    7766:	20 c0       	rjmp	.+64     	; 0x77a8 <vfprintf+0x49c>
    7768:	56 01       	movw	r10, r12
    776a:	72 e0       	ldi	r23, 0x02	; 2
    776c:	a7 0e       	add	r10, r23
    776e:	b1 1c       	adc	r11, r1
    7770:	f6 01       	movw	r30, r12
    7772:	80 81       	ld	r24, Z
    7774:	89 83       	std	Y+1, r24	; 0x01
    7776:	01 e0       	ldi	r16, 0x01	; 1
    7778:	10 e0       	ldi	r17, 0x00	; 0
    777a:	64 01       	movw	r12, r8
    777c:	13 c0       	rjmp	.+38     	; 0x77a4 <vfprintf+0x498>
    777e:	56 01       	movw	r10, r12
    7780:	f2 e0       	ldi	r31, 0x02	; 2
    7782:	af 0e       	add	r10, r31
    7784:	b1 1c       	adc	r11, r1
    7786:	f6 01       	movw	r30, r12
    7788:	c0 80       	ld	r12, Z
    778a:	d1 80       	ldd	r13, Z+1	; 0x01
    778c:	26 ff       	sbrs	r18, 6
    778e:	03 c0       	rjmp	.+6      	; 0x7796 <vfprintf+0x48a>
    7790:	61 2f       	mov	r22, r17
    7792:	70 e0       	ldi	r23, 0x00	; 0
    7794:	02 c0       	rjmp	.+4      	; 0x779a <vfprintf+0x48e>
    7796:	6f ef       	ldi	r22, 0xFF	; 255
    7798:	7f ef       	ldi	r23, 0xFF	; 255
    779a:	c6 01       	movw	r24, r12
    779c:	2b 8b       	std	Y+19, r18	; 0x13
    779e:	20 d4       	rcall	.+2112   	; 0x7fe0 <strnlen>
    77a0:	8c 01       	movw	r16, r24
    77a2:	2b 89       	ldd	r18, Y+19	; 0x13
    77a4:	2f 77       	andi	r18, 0x7F	; 127
    77a6:	14 c0       	rjmp	.+40     	; 0x77d0 <vfprintf+0x4c4>
    77a8:	56 01       	movw	r10, r12
    77aa:	f2 e0       	ldi	r31, 0x02	; 2
    77ac:	af 0e       	add	r10, r31
    77ae:	b1 1c       	adc	r11, r1
    77b0:	f6 01       	movw	r30, r12
    77b2:	c0 80       	ld	r12, Z
    77b4:	d1 80       	ldd	r13, Z+1	; 0x01
    77b6:	26 ff       	sbrs	r18, 6
    77b8:	03 c0       	rjmp	.+6      	; 0x77c0 <vfprintf+0x4b4>
    77ba:	61 2f       	mov	r22, r17
    77bc:	70 e0       	ldi	r23, 0x00	; 0
    77be:	02 c0       	rjmp	.+4      	; 0x77c4 <vfprintf+0x4b8>
    77c0:	6f ef       	ldi	r22, 0xFF	; 255
    77c2:	7f ef       	ldi	r23, 0xFF	; 255
    77c4:	c6 01       	movw	r24, r12
    77c6:	2b 8b       	std	Y+19, r18	; 0x13
    77c8:	f9 d3       	rcall	.+2034   	; 0x7fbc <strnlen_P>
    77ca:	8c 01       	movw	r16, r24
    77cc:	2b 89       	ldd	r18, Y+19	; 0x13
    77ce:	20 68       	ori	r18, 0x80	; 128
    77d0:	72 2e       	mov	r7, r18
    77d2:	23 fd       	sbrc	r18, 3
    77d4:	18 c0       	rjmp	.+48     	; 0x7806 <vfprintf+0x4fa>
    77d6:	85 2d       	mov	r24, r5
    77d8:	90 e0       	ldi	r25, 0x00	; 0
    77da:	08 17       	cp	r16, r24
    77dc:	19 07       	cpc	r17, r25
    77de:	98 f4       	brcc	.+38     	; 0x7806 <vfprintf+0x4fa>
    77e0:	b7 01       	movw	r22, r14
    77e2:	80 e2       	ldi	r24, 0x20	; 32
    77e4:	90 e0       	ldi	r25, 0x00	; 0
    77e6:	07 d4       	rcall	.+2062   	; 0x7ff6 <fputc>
    77e8:	5a 94       	dec	r5
    77ea:	f5 cf       	rjmp	.-22     	; 0x77d6 <vfprintf+0x4ca>
    77ec:	f6 01       	movw	r30, r12
    77ee:	77 fc       	sbrc	r7, 7
    77f0:	85 91       	lpm	r24, Z+
    77f2:	77 fe       	sbrs	r7, 7
    77f4:	81 91       	ld	r24, Z+
    77f6:	6f 01       	movw	r12, r30
    77f8:	b7 01       	movw	r22, r14
    77fa:	90 e0       	ldi	r25, 0x00	; 0
    77fc:	fc d3       	rcall	.+2040   	; 0x7ff6 <fputc>
    77fe:	51 10       	cpse	r5, r1
    7800:	5a 94       	dec	r5
    7802:	01 50       	subi	r16, 0x01	; 1
    7804:	11 09       	sbc	r17, r1
    7806:	01 15       	cp	r16, r1
    7808:	11 05       	cpc	r17, r1
    780a:	81 f7       	brne	.-32     	; 0x77ec <vfprintf+0x4e0>
    780c:	db c0       	rjmp	.+438    	; 0x79c4 <vfprintf+0x6b8>
    780e:	84 36       	cpi	r24, 0x64	; 100
    7810:	11 f0       	breq	.+4      	; 0x7816 <vfprintf+0x50a>
    7812:	89 36       	cpi	r24, 0x69	; 105
    7814:	49 f5       	brne	.+82     	; 0x7868 <vfprintf+0x55c>
    7816:	56 01       	movw	r10, r12
    7818:	27 ff       	sbrs	r18, 7
    781a:	09 c0       	rjmp	.+18     	; 0x782e <vfprintf+0x522>
    781c:	f4 e0       	ldi	r31, 0x04	; 4
    781e:	af 0e       	add	r10, r31
    7820:	b1 1c       	adc	r11, r1
    7822:	f6 01       	movw	r30, r12
    7824:	60 81       	ld	r22, Z
    7826:	71 81       	ldd	r23, Z+1	; 0x01
    7828:	82 81       	ldd	r24, Z+2	; 0x02
    782a:	93 81       	ldd	r25, Z+3	; 0x03
    782c:	0a c0       	rjmp	.+20     	; 0x7842 <vfprintf+0x536>
    782e:	f2 e0       	ldi	r31, 0x02	; 2
    7830:	af 0e       	add	r10, r31
    7832:	b1 1c       	adc	r11, r1
    7834:	f6 01       	movw	r30, r12
    7836:	60 81       	ld	r22, Z
    7838:	71 81       	ldd	r23, Z+1	; 0x01
    783a:	88 27       	eor	r24, r24
    783c:	77 fd       	sbrc	r23, 7
    783e:	80 95       	com	r24
    7840:	98 2f       	mov	r25, r24
    7842:	02 2f       	mov	r16, r18
    7844:	0f 76       	andi	r16, 0x6F	; 111
    7846:	97 ff       	sbrs	r25, 7
    7848:	08 c0       	rjmp	.+16     	; 0x785a <vfprintf+0x54e>
    784a:	90 95       	com	r25
    784c:	80 95       	com	r24
    784e:	70 95       	com	r23
    7850:	61 95       	neg	r22
    7852:	7f 4f       	sbci	r23, 0xFF	; 255
    7854:	8f 4f       	sbci	r24, 0xFF	; 255
    7856:	9f 4f       	sbci	r25, 0xFF	; 255
    7858:	00 68       	ori	r16, 0x80	; 128
    785a:	2a e0       	ldi	r18, 0x0A	; 10
    785c:	30 e0       	ldi	r19, 0x00	; 0
    785e:	a4 01       	movw	r20, r8
    7860:	24 d4       	rcall	.+2120   	; 0x80aa <__ultoa_invert>
    7862:	c8 2e       	mov	r12, r24
    7864:	c8 18       	sub	r12, r8
    7866:	3d c0       	rjmp	.+122    	; 0x78e2 <vfprintf+0x5d6>
    7868:	02 2f       	mov	r16, r18
    786a:	85 37       	cpi	r24, 0x75	; 117
    786c:	21 f4       	brne	.+8      	; 0x7876 <vfprintf+0x56a>
    786e:	0f 7e       	andi	r16, 0xEF	; 239
    7870:	2a e0       	ldi	r18, 0x0A	; 10
    7872:	30 e0       	ldi	r19, 0x00	; 0
    7874:	1d c0       	rjmp	.+58     	; 0x78b0 <vfprintf+0x5a4>
    7876:	09 7f       	andi	r16, 0xF9	; 249
    7878:	8f 36       	cpi	r24, 0x6F	; 111
    787a:	91 f0       	breq	.+36     	; 0x78a0 <vfprintf+0x594>
    787c:	18 f4       	brcc	.+6      	; 0x7884 <vfprintf+0x578>
    787e:	88 35       	cpi	r24, 0x58	; 88
    7880:	59 f0       	breq	.+22     	; 0x7898 <vfprintf+0x58c>
    7882:	a9 c0       	rjmp	.+338    	; 0x79d6 <vfprintf+0x6ca>
    7884:	80 37       	cpi	r24, 0x70	; 112
    7886:	19 f0       	breq	.+6      	; 0x788e <vfprintf+0x582>
    7888:	88 37       	cpi	r24, 0x78	; 120
    788a:	11 f0       	breq	.+4      	; 0x7890 <vfprintf+0x584>
    788c:	a4 c0       	rjmp	.+328    	; 0x79d6 <vfprintf+0x6ca>
    788e:	00 61       	ori	r16, 0x10	; 16
    7890:	04 ff       	sbrs	r16, 4
    7892:	09 c0       	rjmp	.+18     	; 0x78a6 <vfprintf+0x59a>
    7894:	04 60       	ori	r16, 0x04	; 4
    7896:	07 c0       	rjmp	.+14     	; 0x78a6 <vfprintf+0x59a>
    7898:	24 ff       	sbrs	r18, 4
    789a:	08 c0       	rjmp	.+16     	; 0x78ac <vfprintf+0x5a0>
    789c:	06 60       	ori	r16, 0x06	; 6
    789e:	06 c0       	rjmp	.+12     	; 0x78ac <vfprintf+0x5a0>
    78a0:	28 e0       	ldi	r18, 0x08	; 8
    78a2:	30 e0       	ldi	r19, 0x00	; 0
    78a4:	05 c0       	rjmp	.+10     	; 0x78b0 <vfprintf+0x5a4>
    78a6:	20 e1       	ldi	r18, 0x10	; 16
    78a8:	30 e0       	ldi	r19, 0x00	; 0
    78aa:	02 c0       	rjmp	.+4      	; 0x78b0 <vfprintf+0x5a4>
    78ac:	20 e1       	ldi	r18, 0x10	; 16
    78ae:	32 e0       	ldi	r19, 0x02	; 2
    78b0:	56 01       	movw	r10, r12
    78b2:	07 ff       	sbrs	r16, 7
    78b4:	09 c0       	rjmp	.+18     	; 0x78c8 <vfprintf+0x5bc>
    78b6:	f4 e0       	ldi	r31, 0x04	; 4
    78b8:	af 0e       	add	r10, r31
    78ba:	b1 1c       	adc	r11, r1
    78bc:	f6 01       	movw	r30, r12
    78be:	60 81       	ld	r22, Z
    78c0:	71 81       	ldd	r23, Z+1	; 0x01
    78c2:	82 81       	ldd	r24, Z+2	; 0x02
    78c4:	93 81       	ldd	r25, Z+3	; 0x03
    78c6:	08 c0       	rjmp	.+16     	; 0x78d8 <vfprintf+0x5cc>
    78c8:	f2 e0       	ldi	r31, 0x02	; 2
    78ca:	af 0e       	add	r10, r31
    78cc:	b1 1c       	adc	r11, r1
    78ce:	f6 01       	movw	r30, r12
    78d0:	60 81       	ld	r22, Z
    78d2:	71 81       	ldd	r23, Z+1	; 0x01
    78d4:	80 e0       	ldi	r24, 0x00	; 0
    78d6:	90 e0       	ldi	r25, 0x00	; 0
    78d8:	a4 01       	movw	r20, r8
    78da:	e7 d3       	rcall	.+1998   	; 0x80aa <__ultoa_invert>
    78dc:	c8 2e       	mov	r12, r24
    78de:	c8 18       	sub	r12, r8
    78e0:	0f 77       	andi	r16, 0x7F	; 127
    78e2:	06 ff       	sbrs	r16, 6
    78e4:	0b c0       	rjmp	.+22     	; 0x78fc <vfprintf+0x5f0>
    78e6:	20 2f       	mov	r18, r16
    78e8:	2e 7f       	andi	r18, 0xFE	; 254
    78ea:	c1 16       	cp	r12, r17
    78ec:	50 f4       	brcc	.+20     	; 0x7902 <vfprintf+0x5f6>
    78ee:	04 ff       	sbrs	r16, 4
    78f0:	0a c0       	rjmp	.+20     	; 0x7906 <vfprintf+0x5fa>
    78f2:	02 fd       	sbrc	r16, 2
    78f4:	08 c0       	rjmp	.+16     	; 0x7906 <vfprintf+0x5fa>
    78f6:	20 2f       	mov	r18, r16
    78f8:	2e 7e       	andi	r18, 0xEE	; 238
    78fa:	05 c0       	rjmp	.+10     	; 0x7906 <vfprintf+0x5fa>
    78fc:	dc 2c       	mov	r13, r12
    78fe:	20 2f       	mov	r18, r16
    7900:	03 c0       	rjmp	.+6      	; 0x7908 <vfprintf+0x5fc>
    7902:	dc 2c       	mov	r13, r12
    7904:	01 c0       	rjmp	.+2      	; 0x7908 <vfprintf+0x5fc>
    7906:	d1 2e       	mov	r13, r17
    7908:	24 ff       	sbrs	r18, 4
    790a:	0d c0       	rjmp	.+26     	; 0x7926 <vfprintf+0x61a>
    790c:	fe 01       	movw	r30, r28
    790e:	ec 0d       	add	r30, r12
    7910:	f1 1d       	adc	r31, r1
    7912:	80 81       	ld	r24, Z
    7914:	80 33       	cpi	r24, 0x30	; 48
    7916:	11 f4       	brne	.+4      	; 0x791c <vfprintf+0x610>
    7918:	29 7e       	andi	r18, 0xE9	; 233
    791a:	09 c0       	rjmp	.+18     	; 0x792e <vfprintf+0x622>
    791c:	22 ff       	sbrs	r18, 2
    791e:	06 c0       	rjmp	.+12     	; 0x792c <vfprintf+0x620>
    7920:	d3 94       	inc	r13
    7922:	d3 94       	inc	r13
    7924:	04 c0       	rjmp	.+8      	; 0x792e <vfprintf+0x622>
    7926:	82 2f       	mov	r24, r18
    7928:	86 78       	andi	r24, 0x86	; 134
    792a:	09 f0       	breq	.+2      	; 0x792e <vfprintf+0x622>
    792c:	d3 94       	inc	r13
    792e:	23 fd       	sbrc	r18, 3
    7930:	12 c0       	rjmp	.+36     	; 0x7956 <vfprintf+0x64a>
    7932:	20 ff       	sbrs	r18, 0
    7934:	06 c0       	rjmp	.+12     	; 0x7942 <vfprintf+0x636>
    7936:	1c 2d       	mov	r17, r12
    7938:	d5 14       	cp	r13, r5
    793a:	18 f4       	brcc	.+6      	; 0x7942 <vfprintf+0x636>
    793c:	15 0d       	add	r17, r5
    793e:	1d 19       	sub	r17, r13
    7940:	d5 2c       	mov	r13, r5
    7942:	d5 14       	cp	r13, r5
    7944:	60 f4       	brcc	.+24     	; 0x795e <vfprintf+0x652>
    7946:	b7 01       	movw	r22, r14
    7948:	80 e2       	ldi	r24, 0x20	; 32
    794a:	90 e0       	ldi	r25, 0x00	; 0
    794c:	2b 8b       	std	Y+19, r18	; 0x13
    794e:	53 d3       	rcall	.+1702   	; 0x7ff6 <fputc>
    7950:	d3 94       	inc	r13
    7952:	2b 89       	ldd	r18, Y+19	; 0x13
    7954:	f6 cf       	rjmp	.-20     	; 0x7942 <vfprintf+0x636>
    7956:	d5 14       	cp	r13, r5
    7958:	10 f4       	brcc	.+4      	; 0x795e <vfprintf+0x652>
    795a:	5d 18       	sub	r5, r13
    795c:	01 c0       	rjmp	.+2      	; 0x7960 <vfprintf+0x654>
    795e:	51 2c       	mov	r5, r1
    7960:	24 ff       	sbrs	r18, 4
    7962:	11 c0       	rjmp	.+34     	; 0x7986 <vfprintf+0x67a>
    7964:	b7 01       	movw	r22, r14
    7966:	80 e3       	ldi	r24, 0x30	; 48
    7968:	90 e0       	ldi	r25, 0x00	; 0
    796a:	2b 8b       	std	Y+19, r18	; 0x13
    796c:	44 d3       	rcall	.+1672   	; 0x7ff6 <fputc>
    796e:	2b 89       	ldd	r18, Y+19	; 0x13
    7970:	22 ff       	sbrs	r18, 2
    7972:	16 c0       	rjmp	.+44     	; 0x79a0 <vfprintf+0x694>
    7974:	21 ff       	sbrs	r18, 1
    7976:	03 c0       	rjmp	.+6      	; 0x797e <vfprintf+0x672>
    7978:	88 e5       	ldi	r24, 0x58	; 88
    797a:	90 e0       	ldi	r25, 0x00	; 0
    797c:	02 c0       	rjmp	.+4      	; 0x7982 <vfprintf+0x676>
    797e:	88 e7       	ldi	r24, 0x78	; 120
    7980:	90 e0       	ldi	r25, 0x00	; 0
    7982:	b7 01       	movw	r22, r14
    7984:	0c c0       	rjmp	.+24     	; 0x799e <vfprintf+0x692>
    7986:	82 2f       	mov	r24, r18
    7988:	86 78       	andi	r24, 0x86	; 134
    798a:	51 f0       	breq	.+20     	; 0x79a0 <vfprintf+0x694>
    798c:	21 fd       	sbrc	r18, 1
    798e:	02 c0       	rjmp	.+4      	; 0x7994 <vfprintf+0x688>
    7990:	80 e2       	ldi	r24, 0x20	; 32
    7992:	01 c0       	rjmp	.+2      	; 0x7996 <vfprintf+0x68a>
    7994:	8b e2       	ldi	r24, 0x2B	; 43
    7996:	27 fd       	sbrc	r18, 7
    7998:	8d e2       	ldi	r24, 0x2D	; 45
    799a:	b7 01       	movw	r22, r14
    799c:	90 e0       	ldi	r25, 0x00	; 0
    799e:	2b d3       	rcall	.+1622   	; 0x7ff6 <fputc>
    79a0:	c1 16       	cp	r12, r17
    79a2:	30 f4       	brcc	.+12     	; 0x79b0 <vfprintf+0x6a4>
    79a4:	b7 01       	movw	r22, r14
    79a6:	80 e3       	ldi	r24, 0x30	; 48
    79a8:	90 e0       	ldi	r25, 0x00	; 0
    79aa:	25 d3       	rcall	.+1610   	; 0x7ff6 <fputc>
    79ac:	11 50       	subi	r17, 0x01	; 1
    79ae:	f8 cf       	rjmp	.-16     	; 0x79a0 <vfprintf+0x694>
    79b0:	ca 94       	dec	r12
    79b2:	f4 01       	movw	r30, r8
    79b4:	ec 0d       	add	r30, r12
    79b6:	f1 1d       	adc	r31, r1
    79b8:	80 81       	ld	r24, Z
    79ba:	b7 01       	movw	r22, r14
    79bc:	90 e0       	ldi	r25, 0x00	; 0
    79be:	1b d3       	rcall	.+1590   	; 0x7ff6 <fputc>
    79c0:	c1 10       	cpse	r12, r1
    79c2:	f6 cf       	rjmp	.-20     	; 0x79b0 <vfprintf+0x6a4>
    79c4:	55 20       	and	r5, r5
    79c6:	09 f4       	brne	.+2      	; 0x79ca <vfprintf+0x6be>
    79c8:	dd cc       	rjmp	.-1606   	; 0x7384 <vfprintf+0x78>
    79ca:	b7 01       	movw	r22, r14
    79cc:	80 e2       	ldi	r24, 0x20	; 32
    79ce:	90 e0       	ldi	r25, 0x00	; 0
    79d0:	12 d3       	rcall	.+1572   	; 0x7ff6 <fputc>
    79d2:	5a 94       	dec	r5
    79d4:	f7 cf       	rjmp	.-18     	; 0x79c4 <vfprintf+0x6b8>
    79d6:	f7 01       	movw	r30, r14
    79d8:	86 81       	ldd	r24, Z+6	; 0x06
    79da:	97 81       	ldd	r25, Z+7	; 0x07
    79dc:	02 c0       	rjmp	.+4      	; 0x79e2 <vfprintf+0x6d6>
    79de:	8f ef       	ldi	r24, 0xFF	; 255
    79e0:	9f ef       	ldi	r25, 0xFF	; 255
    79e2:	63 96       	adiw	r28, 0x13	; 19
    79e4:	cd bf       	out	0x3d, r28	; 61
    79e6:	de bf       	out	0x3e, r29	; 62
    79e8:	df 91       	pop	r29
    79ea:	cf 91       	pop	r28
    79ec:	1f 91       	pop	r17
    79ee:	0f 91       	pop	r16
    79f0:	ff 90       	pop	r15
    79f2:	ef 90       	pop	r14
    79f4:	df 90       	pop	r13
    79f6:	cf 90       	pop	r12
    79f8:	bf 90       	pop	r11
    79fa:	af 90       	pop	r10
    79fc:	9f 90       	pop	r9
    79fe:	8f 90       	pop	r8
    7a00:	7f 90       	pop	r7
    7a02:	6f 90       	pop	r6
    7a04:	5f 90       	pop	r5
    7a06:	4f 90       	pop	r4
    7a08:	3f 90       	pop	r3
    7a0a:	2f 90       	pop	r2
    7a0c:	08 95       	ret

00007a0e <__divmodhi4>:
    7a0e:	97 fb       	bst	r25, 7
    7a10:	07 2e       	mov	r0, r23
    7a12:	16 f4       	brtc	.+4      	; 0x7a18 <__divmodhi4+0xa>
    7a14:	00 94       	com	r0
    7a16:	06 d0       	rcall	.+12     	; 0x7a24 <__divmodhi4_neg1>
    7a18:	77 fd       	sbrc	r23, 7
    7a1a:	08 d0       	rcall	.+16     	; 0x7a2c <__divmodhi4_neg2>
    7a1c:	42 d0       	rcall	.+132    	; 0x7aa2 <__udivmodhi4>
    7a1e:	07 fc       	sbrc	r0, 7
    7a20:	05 d0       	rcall	.+10     	; 0x7a2c <__divmodhi4_neg2>
    7a22:	3e f4       	brtc	.+14     	; 0x7a32 <__divmodhi4_exit>

00007a24 <__divmodhi4_neg1>:
    7a24:	90 95       	com	r25
    7a26:	81 95       	neg	r24
    7a28:	9f 4f       	sbci	r25, 0xFF	; 255
    7a2a:	08 95       	ret

00007a2c <__divmodhi4_neg2>:
    7a2c:	70 95       	com	r23
    7a2e:	61 95       	neg	r22
    7a30:	7f 4f       	sbci	r23, 0xFF	; 255

00007a32 <__divmodhi4_exit>:
    7a32:	08 95       	ret

00007a34 <__udivmodsi4>:
    7a34:	a1 e2       	ldi	r26, 0x21	; 33
    7a36:	1a 2e       	mov	r1, r26
    7a38:	aa 1b       	sub	r26, r26
    7a3a:	bb 1b       	sub	r27, r27
    7a3c:	fd 01       	movw	r30, r26
    7a3e:	0d c0       	rjmp	.+26     	; 0x7a5a <__udivmodsi4_ep>

00007a40 <__udivmodsi4_loop>:
    7a40:	aa 1f       	adc	r26, r26
    7a42:	bb 1f       	adc	r27, r27
    7a44:	ee 1f       	adc	r30, r30
    7a46:	ff 1f       	adc	r31, r31
    7a48:	a2 17       	cp	r26, r18
    7a4a:	b3 07       	cpc	r27, r19
    7a4c:	e4 07       	cpc	r30, r20
    7a4e:	f5 07       	cpc	r31, r21
    7a50:	20 f0       	brcs	.+8      	; 0x7a5a <__udivmodsi4_ep>
    7a52:	a2 1b       	sub	r26, r18
    7a54:	b3 0b       	sbc	r27, r19
    7a56:	e4 0b       	sbc	r30, r20
    7a58:	f5 0b       	sbc	r31, r21

00007a5a <__udivmodsi4_ep>:
    7a5a:	66 1f       	adc	r22, r22
    7a5c:	77 1f       	adc	r23, r23
    7a5e:	88 1f       	adc	r24, r24
    7a60:	99 1f       	adc	r25, r25
    7a62:	1a 94       	dec	r1
    7a64:	69 f7       	brne	.-38     	; 0x7a40 <__udivmodsi4_loop>
    7a66:	60 95       	com	r22
    7a68:	70 95       	com	r23
    7a6a:	80 95       	com	r24
    7a6c:	90 95       	com	r25
    7a6e:	9b 01       	movw	r18, r22
    7a70:	ac 01       	movw	r20, r24
    7a72:	bd 01       	movw	r22, r26
    7a74:	cf 01       	movw	r24, r30
    7a76:	08 95       	ret

00007a78 <__tablejump2__>:
    7a78:	ee 0f       	add	r30, r30
    7a7a:	ff 1f       	adc	r31, r31

00007a7c <__tablejump__>:
    7a7c:	05 90       	lpm	r0, Z+
    7a7e:	f4 91       	lpm	r31, Z
    7a80:	e0 2d       	mov	r30, r0
    7a82:	19 94       	eijmp

00007a84 <__umulhisi3>:
    7a84:	a2 9f       	mul	r26, r18
    7a86:	b0 01       	movw	r22, r0
    7a88:	b3 9f       	mul	r27, r19
    7a8a:	c0 01       	movw	r24, r0
    7a8c:	a3 9f       	mul	r26, r19
    7a8e:	70 0d       	add	r23, r0
    7a90:	81 1d       	adc	r24, r1
    7a92:	11 24       	eor	r1, r1
    7a94:	91 1d       	adc	r25, r1
    7a96:	b2 9f       	mul	r27, r18
    7a98:	70 0d       	add	r23, r0
    7a9a:	81 1d       	adc	r24, r1
    7a9c:	11 24       	eor	r1, r1
    7a9e:	91 1d       	adc	r25, r1
    7aa0:	08 95       	ret

00007aa2 <__udivmodhi4>:
    7aa2:	aa 1b       	sub	r26, r26
    7aa4:	bb 1b       	sub	r27, r27
    7aa6:	51 e1       	ldi	r21, 0x11	; 17
    7aa8:	07 c0       	rjmp	.+14     	; 0x7ab8 <__udivmodhi4_ep>

00007aaa <__udivmodhi4_loop>:
    7aaa:	aa 1f       	adc	r26, r26
    7aac:	bb 1f       	adc	r27, r27
    7aae:	a6 17       	cp	r26, r22
    7ab0:	b7 07       	cpc	r27, r23
    7ab2:	10 f0       	brcs	.+4      	; 0x7ab8 <__udivmodhi4_ep>
    7ab4:	a6 1b       	sub	r26, r22
    7ab6:	b7 0b       	sbc	r27, r23

00007ab8 <__udivmodhi4_ep>:
    7ab8:	88 1f       	adc	r24, r24
    7aba:	99 1f       	adc	r25, r25
    7abc:	5a 95       	dec	r21
    7abe:	a9 f7       	brne	.-22     	; 0x7aaa <__udivmodhi4_loop>
    7ac0:	80 95       	com	r24
    7ac2:	90 95       	com	r25
    7ac4:	bc 01       	movw	r22, r24
    7ac6:	cd 01       	movw	r24, r26
    7ac8:	08 95       	ret

00007aca <calloc>:
    7aca:	0f 93       	push	r16
    7acc:	1f 93       	push	r17
    7ace:	cf 93       	push	r28
    7ad0:	df 93       	push	r29
    7ad2:	86 9f       	mul	r24, r22
    7ad4:	80 01       	movw	r16, r0
    7ad6:	87 9f       	mul	r24, r23
    7ad8:	10 0d       	add	r17, r0
    7ada:	96 9f       	mul	r25, r22
    7adc:	10 0d       	add	r17, r0
    7ade:	11 24       	eor	r1, r1
    7ae0:	c8 01       	movw	r24, r16
    7ae2:	0d d0       	rcall	.+26     	; 0x7afe <malloc>
    7ae4:	ec 01       	movw	r28, r24
    7ae6:	00 97       	sbiw	r24, 0x00	; 0
    7ae8:	21 f0       	breq	.+8      	; 0x7af2 <calloc+0x28>
    7aea:	a8 01       	movw	r20, r16
    7aec:	60 e0       	ldi	r22, 0x00	; 0
    7aee:	70 e0       	ldi	r23, 0x00	; 0
    7af0:	70 d2       	rcall	.+1248   	; 0x7fd2 <memset>
    7af2:	ce 01       	movw	r24, r28
    7af4:	df 91       	pop	r29
    7af6:	cf 91       	pop	r28
    7af8:	1f 91       	pop	r17
    7afa:	0f 91       	pop	r16
    7afc:	08 95       	ret

00007afe <malloc>:
    7afe:	cf 93       	push	r28
    7b00:	df 93       	push	r29
    7b02:	82 30       	cpi	r24, 0x02	; 2
    7b04:	91 05       	cpc	r25, r1
    7b06:	10 f4       	brcc	.+4      	; 0x7b0c <malloc+0xe>
    7b08:	82 e0       	ldi	r24, 0x02	; 2
    7b0a:	90 e0       	ldi	r25, 0x00	; 0
    7b0c:	e0 91 4e 92 	lds	r30, 0x924E
    7b10:	f0 91 4f 92 	lds	r31, 0x924F
    7b14:	20 e0       	ldi	r18, 0x00	; 0
    7b16:	30 e0       	ldi	r19, 0x00	; 0
    7b18:	a0 e0       	ldi	r26, 0x00	; 0
    7b1a:	b0 e0       	ldi	r27, 0x00	; 0
    7b1c:	30 97       	sbiw	r30, 0x00	; 0
    7b1e:	39 f1       	breq	.+78     	; 0x7b6e <malloc+0x70>
    7b20:	40 81       	ld	r20, Z
    7b22:	51 81       	ldd	r21, Z+1	; 0x01
    7b24:	48 17       	cp	r20, r24
    7b26:	59 07       	cpc	r21, r25
    7b28:	b8 f0       	brcs	.+46     	; 0x7b58 <malloc+0x5a>
    7b2a:	48 17       	cp	r20, r24
    7b2c:	59 07       	cpc	r21, r25
    7b2e:	71 f4       	brne	.+28     	; 0x7b4c <malloc+0x4e>
    7b30:	82 81       	ldd	r24, Z+2	; 0x02
    7b32:	93 81       	ldd	r25, Z+3	; 0x03
    7b34:	10 97       	sbiw	r26, 0x00	; 0
    7b36:	29 f0       	breq	.+10     	; 0x7b42 <malloc+0x44>
    7b38:	12 96       	adiw	r26, 0x02	; 2
    7b3a:	8d 93       	st	X+, r24
    7b3c:	9c 93       	st	X, r25
    7b3e:	13 97       	sbiw	r26, 0x03	; 3
    7b40:	2c c0       	rjmp	.+88     	; 0x7b9a <malloc+0x9c>
    7b42:	80 93 4e 92 	sts	0x924E, r24
    7b46:	90 93 4f 92 	sts	0x924F, r25
    7b4a:	27 c0       	rjmp	.+78     	; 0x7b9a <malloc+0x9c>
    7b4c:	21 15       	cp	r18, r1
    7b4e:	31 05       	cpc	r19, r1
    7b50:	31 f0       	breq	.+12     	; 0x7b5e <malloc+0x60>
    7b52:	42 17       	cp	r20, r18
    7b54:	53 07       	cpc	r21, r19
    7b56:	18 f0       	brcs	.+6      	; 0x7b5e <malloc+0x60>
    7b58:	a9 01       	movw	r20, r18
    7b5a:	db 01       	movw	r26, r22
    7b5c:	01 c0       	rjmp	.+2      	; 0x7b60 <malloc+0x62>
    7b5e:	ef 01       	movw	r28, r30
    7b60:	9a 01       	movw	r18, r20
    7b62:	bd 01       	movw	r22, r26
    7b64:	df 01       	movw	r26, r30
    7b66:	02 80       	ldd	r0, Z+2	; 0x02
    7b68:	f3 81       	ldd	r31, Z+3	; 0x03
    7b6a:	e0 2d       	mov	r30, r0
    7b6c:	d7 cf       	rjmp	.-82     	; 0x7b1c <malloc+0x1e>
    7b6e:	21 15       	cp	r18, r1
    7b70:	31 05       	cpc	r19, r1
    7b72:	f9 f0       	breq	.+62     	; 0x7bb2 <malloc+0xb4>
    7b74:	28 1b       	sub	r18, r24
    7b76:	39 0b       	sbc	r19, r25
    7b78:	24 30       	cpi	r18, 0x04	; 4
    7b7a:	31 05       	cpc	r19, r1
    7b7c:	80 f4       	brcc	.+32     	; 0x7b9e <malloc+0xa0>
    7b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    7b80:	9b 81       	ldd	r25, Y+3	; 0x03
    7b82:	61 15       	cp	r22, r1
    7b84:	71 05       	cpc	r23, r1
    7b86:	21 f0       	breq	.+8      	; 0x7b90 <malloc+0x92>
    7b88:	fb 01       	movw	r30, r22
    7b8a:	82 83       	std	Z+2, r24	; 0x02
    7b8c:	93 83       	std	Z+3, r25	; 0x03
    7b8e:	04 c0       	rjmp	.+8      	; 0x7b98 <malloc+0x9a>
    7b90:	80 93 4e 92 	sts	0x924E, r24
    7b94:	90 93 4f 92 	sts	0x924F, r25
    7b98:	fe 01       	movw	r30, r28
    7b9a:	32 96       	adiw	r30, 0x02	; 2
    7b9c:	44 c0       	rjmp	.+136    	; 0x7c26 <malloc+0x128>
    7b9e:	fe 01       	movw	r30, r28
    7ba0:	e2 0f       	add	r30, r18
    7ba2:	f3 1f       	adc	r31, r19
    7ba4:	81 93       	st	Z+, r24
    7ba6:	91 93       	st	Z+, r25
    7ba8:	22 50       	subi	r18, 0x02	; 2
    7baa:	31 09       	sbc	r19, r1
    7bac:	28 83       	st	Y, r18
    7bae:	39 83       	std	Y+1, r19	; 0x01
    7bb0:	3a c0       	rjmp	.+116    	; 0x7c26 <malloc+0x128>
    7bb2:	20 91 4c 92 	lds	r18, 0x924C
    7bb6:	30 91 4d 92 	lds	r19, 0x924D
    7bba:	23 2b       	or	r18, r19
    7bbc:	41 f4       	brne	.+16     	; 0x7bce <malloc+0xd0>
    7bbe:	20 91 02 20 	lds	r18, 0x2002
    7bc2:	30 91 03 20 	lds	r19, 0x2003
    7bc6:	20 93 4c 92 	sts	0x924C, r18
    7bca:	30 93 4d 92 	sts	0x924D, r19
    7bce:	20 91 00 20 	lds	r18, 0x2000
    7bd2:	30 91 01 20 	lds	r19, 0x2001
    7bd6:	21 15       	cp	r18, r1
    7bd8:	31 05       	cpc	r19, r1
    7bda:	41 f4       	brne	.+16     	; 0x7bec <malloc+0xee>
    7bdc:	2d b7       	in	r18, 0x3d	; 61
    7bde:	3e b7       	in	r19, 0x3e	; 62
    7be0:	40 91 04 20 	lds	r20, 0x2004
    7be4:	50 91 05 20 	lds	r21, 0x2005
    7be8:	24 1b       	sub	r18, r20
    7bea:	35 0b       	sbc	r19, r21
    7bec:	e0 91 4c 92 	lds	r30, 0x924C
    7bf0:	f0 91 4d 92 	lds	r31, 0x924D
    7bf4:	e2 17       	cp	r30, r18
    7bf6:	f3 07       	cpc	r31, r19
    7bf8:	a0 f4       	brcc	.+40     	; 0x7c22 <malloc+0x124>
    7bfa:	2e 1b       	sub	r18, r30
    7bfc:	3f 0b       	sbc	r19, r31
    7bfe:	28 17       	cp	r18, r24
    7c00:	39 07       	cpc	r19, r25
    7c02:	78 f0       	brcs	.+30     	; 0x7c22 <malloc+0x124>
    7c04:	ac 01       	movw	r20, r24
    7c06:	4e 5f       	subi	r20, 0xFE	; 254
    7c08:	5f 4f       	sbci	r21, 0xFF	; 255
    7c0a:	24 17       	cp	r18, r20
    7c0c:	35 07       	cpc	r19, r21
    7c0e:	48 f0       	brcs	.+18     	; 0x7c22 <malloc+0x124>
    7c10:	4e 0f       	add	r20, r30
    7c12:	5f 1f       	adc	r21, r31
    7c14:	40 93 4c 92 	sts	0x924C, r20
    7c18:	50 93 4d 92 	sts	0x924D, r21
    7c1c:	81 93       	st	Z+, r24
    7c1e:	91 93       	st	Z+, r25
    7c20:	02 c0       	rjmp	.+4      	; 0x7c26 <malloc+0x128>
    7c22:	e0 e0       	ldi	r30, 0x00	; 0
    7c24:	f0 e0       	ldi	r31, 0x00	; 0
    7c26:	cf 01       	movw	r24, r30
    7c28:	df 91       	pop	r29
    7c2a:	cf 91       	pop	r28
    7c2c:	08 95       	ret

00007c2e <free>:
    7c2e:	cf 93       	push	r28
    7c30:	df 93       	push	r29
    7c32:	00 97       	sbiw	r24, 0x00	; 0
    7c34:	09 f4       	brne	.+2      	; 0x7c38 <free+0xa>
    7c36:	87 c0       	rjmp	.+270    	; 0x7d46 <free+0x118>
    7c38:	fc 01       	movw	r30, r24
    7c3a:	32 97       	sbiw	r30, 0x02	; 2
    7c3c:	12 82       	std	Z+2, r1	; 0x02
    7c3e:	13 82       	std	Z+3, r1	; 0x03
    7c40:	c0 91 4e 92 	lds	r28, 0x924E
    7c44:	d0 91 4f 92 	lds	r29, 0x924F
    7c48:	20 97       	sbiw	r28, 0x00	; 0
    7c4a:	81 f4       	brne	.+32     	; 0x7c6c <free+0x3e>
    7c4c:	20 81       	ld	r18, Z
    7c4e:	31 81       	ldd	r19, Z+1	; 0x01
    7c50:	28 0f       	add	r18, r24
    7c52:	39 1f       	adc	r19, r25
    7c54:	80 91 4c 92 	lds	r24, 0x924C
    7c58:	90 91 4d 92 	lds	r25, 0x924D
    7c5c:	82 17       	cp	r24, r18
    7c5e:	93 07       	cpc	r25, r19
    7c60:	79 f5       	brne	.+94     	; 0x7cc0 <free+0x92>
    7c62:	e0 93 4c 92 	sts	0x924C, r30
    7c66:	f0 93 4d 92 	sts	0x924D, r31
    7c6a:	6d c0       	rjmp	.+218    	; 0x7d46 <free+0x118>
    7c6c:	de 01       	movw	r26, r28
    7c6e:	20 e0       	ldi	r18, 0x00	; 0
    7c70:	30 e0       	ldi	r19, 0x00	; 0
    7c72:	ae 17       	cp	r26, r30
    7c74:	bf 07       	cpc	r27, r31
    7c76:	50 f4       	brcc	.+20     	; 0x7c8c <free+0x5e>
    7c78:	12 96       	adiw	r26, 0x02	; 2
    7c7a:	4d 91       	ld	r20, X+
    7c7c:	5c 91       	ld	r21, X
    7c7e:	13 97       	sbiw	r26, 0x03	; 3
    7c80:	9d 01       	movw	r18, r26
    7c82:	41 15       	cp	r20, r1
    7c84:	51 05       	cpc	r21, r1
    7c86:	09 f1       	breq	.+66     	; 0x7cca <free+0x9c>
    7c88:	da 01       	movw	r26, r20
    7c8a:	f3 cf       	rjmp	.-26     	; 0x7c72 <free+0x44>
    7c8c:	a2 83       	std	Z+2, r26	; 0x02
    7c8e:	b3 83       	std	Z+3, r27	; 0x03
    7c90:	40 81       	ld	r20, Z
    7c92:	51 81       	ldd	r21, Z+1	; 0x01
    7c94:	84 0f       	add	r24, r20
    7c96:	95 1f       	adc	r25, r21
    7c98:	8a 17       	cp	r24, r26
    7c9a:	9b 07       	cpc	r25, r27
    7c9c:	71 f4       	brne	.+28     	; 0x7cba <free+0x8c>
    7c9e:	8d 91       	ld	r24, X+
    7ca0:	9c 91       	ld	r25, X
    7ca2:	11 97       	sbiw	r26, 0x01	; 1
    7ca4:	84 0f       	add	r24, r20
    7ca6:	95 1f       	adc	r25, r21
    7ca8:	02 96       	adiw	r24, 0x02	; 2
    7caa:	80 83       	st	Z, r24
    7cac:	91 83       	std	Z+1, r25	; 0x01
    7cae:	12 96       	adiw	r26, 0x02	; 2
    7cb0:	8d 91       	ld	r24, X+
    7cb2:	9c 91       	ld	r25, X
    7cb4:	13 97       	sbiw	r26, 0x03	; 3
    7cb6:	82 83       	std	Z+2, r24	; 0x02
    7cb8:	93 83       	std	Z+3, r25	; 0x03
    7cba:	21 15       	cp	r18, r1
    7cbc:	31 05       	cpc	r19, r1
    7cbe:	29 f4       	brne	.+10     	; 0x7cca <free+0x9c>
    7cc0:	e0 93 4e 92 	sts	0x924E, r30
    7cc4:	f0 93 4f 92 	sts	0x924F, r31
    7cc8:	3e c0       	rjmp	.+124    	; 0x7d46 <free+0x118>
    7cca:	d9 01       	movw	r26, r18
    7ccc:	12 96       	adiw	r26, 0x02	; 2
    7cce:	ed 93       	st	X+, r30
    7cd0:	fc 93       	st	X, r31
    7cd2:	13 97       	sbiw	r26, 0x03	; 3
    7cd4:	4d 91       	ld	r20, X+
    7cd6:	5d 91       	ld	r21, X+
    7cd8:	a4 0f       	add	r26, r20
    7cda:	b5 1f       	adc	r27, r21
    7cdc:	ea 17       	cp	r30, r26
    7cde:	fb 07       	cpc	r31, r27
    7ce0:	79 f4       	brne	.+30     	; 0x7d00 <free+0xd2>
    7ce2:	80 81       	ld	r24, Z
    7ce4:	91 81       	ldd	r25, Z+1	; 0x01
    7ce6:	84 0f       	add	r24, r20
    7ce8:	95 1f       	adc	r25, r21
    7cea:	02 96       	adiw	r24, 0x02	; 2
    7cec:	d9 01       	movw	r26, r18
    7cee:	8d 93       	st	X+, r24
    7cf0:	9c 93       	st	X, r25
    7cf2:	11 97       	sbiw	r26, 0x01	; 1
    7cf4:	82 81       	ldd	r24, Z+2	; 0x02
    7cf6:	93 81       	ldd	r25, Z+3	; 0x03
    7cf8:	12 96       	adiw	r26, 0x02	; 2
    7cfa:	8d 93       	st	X+, r24
    7cfc:	9c 93       	st	X, r25
    7cfe:	13 97       	sbiw	r26, 0x03	; 3
    7d00:	e0 e0       	ldi	r30, 0x00	; 0
    7d02:	f0 e0       	ldi	r31, 0x00	; 0
    7d04:	8a 81       	ldd	r24, Y+2	; 0x02
    7d06:	9b 81       	ldd	r25, Y+3	; 0x03
    7d08:	00 97       	sbiw	r24, 0x00	; 0
    7d0a:	19 f0       	breq	.+6      	; 0x7d12 <free+0xe4>
    7d0c:	fe 01       	movw	r30, r28
    7d0e:	ec 01       	movw	r28, r24
    7d10:	f9 cf       	rjmp	.-14     	; 0x7d04 <free+0xd6>
    7d12:	ce 01       	movw	r24, r28
    7d14:	02 96       	adiw	r24, 0x02	; 2
    7d16:	28 81       	ld	r18, Y
    7d18:	39 81       	ldd	r19, Y+1	; 0x01
    7d1a:	82 0f       	add	r24, r18
    7d1c:	93 1f       	adc	r25, r19
    7d1e:	20 91 4c 92 	lds	r18, 0x924C
    7d22:	30 91 4d 92 	lds	r19, 0x924D
    7d26:	28 17       	cp	r18, r24
    7d28:	39 07       	cpc	r19, r25
    7d2a:	69 f4       	brne	.+26     	; 0x7d46 <free+0x118>
    7d2c:	30 97       	sbiw	r30, 0x00	; 0
    7d2e:	29 f4       	brne	.+10     	; 0x7d3a <free+0x10c>
    7d30:	10 92 4e 92 	sts	0x924E, r1
    7d34:	10 92 4f 92 	sts	0x924F, r1
    7d38:	02 c0       	rjmp	.+4      	; 0x7d3e <free+0x110>
    7d3a:	12 82       	std	Z+2, r1	; 0x02
    7d3c:	13 82       	std	Z+3, r1	; 0x03
    7d3e:	c0 93 4c 92 	sts	0x924C, r28
    7d42:	d0 93 4d 92 	sts	0x924D, r29
    7d46:	df 91       	pop	r29
    7d48:	cf 91       	pop	r28
    7d4a:	08 95       	ret

00007d4c <do_rand>:
    7d4c:	8f 92       	push	r8
    7d4e:	9f 92       	push	r9
    7d50:	af 92       	push	r10
    7d52:	bf 92       	push	r11
    7d54:	cf 92       	push	r12
    7d56:	df 92       	push	r13
    7d58:	ef 92       	push	r14
    7d5a:	ff 92       	push	r15
    7d5c:	cf 93       	push	r28
    7d5e:	df 93       	push	r29
    7d60:	ec 01       	movw	r28, r24
    7d62:	68 81       	ld	r22, Y
    7d64:	79 81       	ldd	r23, Y+1	; 0x01
    7d66:	8a 81       	ldd	r24, Y+2	; 0x02
    7d68:	9b 81       	ldd	r25, Y+3	; 0x03
    7d6a:	61 15       	cp	r22, r1
    7d6c:	71 05       	cpc	r23, r1
    7d6e:	81 05       	cpc	r24, r1
    7d70:	91 05       	cpc	r25, r1
    7d72:	21 f4       	brne	.+8      	; 0x7d7c <do_rand+0x30>
    7d74:	64 e2       	ldi	r22, 0x24	; 36
    7d76:	79 ed       	ldi	r23, 0xD9	; 217
    7d78:	8b e5       	ldi	r24, 0x5B	; 91
    7d7a:	97 e0       	ldi	r25, 0x07	; 7
    7d7c:	2d e1       	ldi	r18, 0x1D	; 29
    7d7e:	33 ef       	ldi	r19, 0xF3	; 243
    7d80:	41 e0       	ldi	r20, 0x01	; 1
    7d82:	50 e0       	ldi	r21, 0x00	; 0
    7d84:	f0 d1       	rcall	.+992    	; 0x8166 <__divmodsi4>
    7d86:	49 01       	movw	r8, r18
    7d88:	5a 01       	movw	r10, r20
    7d8a:	9b 01       	movw	r18, r22
    7d8c:	ac 01       	movw	r20, r24
    7d8e:	a7 ea       	ldi	r26, 0xA7	; 167
    7d90:	b1 e4       	ldi	r27, 0x41	; 65
    7d92:	05 d2       	rcall	.+1034   	; 0x819e <__muluhisi3>
    7d94:	6b 01       	movw	r12, r22
    7d96:	7c 01       	movw	r14, r24
    7d98:	ac ee       	ldi	r26, 0xEC	; 236
    7d9a:	b4 ef       	ldi	r27, 0xF4	; 244
    7d9c:	a5 01       	movw	r20, r10
    7d9e:	94 01       	movw	r18, r8
    7da0:	0a d2       	rcall	.+1044   	; 0x81b6 <__mulohisi3>
    7da2:	c6 0e       	add	r12, r22
    7da4:	d7 1e       	adc	r13, r23
    7da6:	e8 1e       	adc	r14, r24
    7da8:	f9 1e       	adc	r15, r25
    7daa:	f7 fe       	sbrs	r15, 7
    7dac:	06 c0       	rjmp	.+12     	; 0x7dba <do_rand+0x6e>
    7dae:	81 e0       	ldi	r24, 0x01	; 1
    7db0:	c8 1a       	sub	r12, r24
    7db2:	d1 08       	sbc	r13, r1
    7db4:	e1 08       	sbc	r14, r1
    7db6:	80 e8       	ldi	r24, 0x80	; 128
    7db8:	f8 0a       	sbc	r15, r24
    7dba:	c8 82       	st	Y, r12
    7dbc:	d9 82       	std	Y+1, r13	; 0x01
    7dbe:	ea 82       	std	Y+2, r14	; 0x02
    7dc0:	fb 82       	std	Y+3, r15	; 0x03
    7dc2:	c6 01       	movw	r24, r12
    7dc4:	9f 77       	andi	r25, 0x7F	; 127
    7dc6:	df 91       	pop	r29
    7dc8:	cf 91       	pop	r28
    7dca:	ff 90       	pop	r15
    7dcc:	ef 90       	pop	r14
    7dce:	df 90       	pop	r13
    7dd0:	cf 90       	pop	r12
    7dd2:	bf 90       	pop	r11
    7dd4:	af 90       	pop	r10
    7dd6:	9f 90       	pop	r9
    7dd8:	8f 90       	pop	r8
    7dda:	08 95       	ret

00007ddc <rand_r>:
    7ddc:	b7 cf       	rjmp	.-146    	; 0x7d4c <do_rand>

00007dde <rand>:
    7dde:	86 e0       	ldi	r24, 0x06	; 6
    7de0:	90 e2       	ldi	r25, 0x20	; 32
    7de2:	b4 cf       	rjmp	.-152    	; 0x7d4c <do_rand>

00007de4 <srand>:
    7de4:	a0 e0       	ldi	r26, 0x00	; 0
    7de6:	b0 e0       	ldi	r27, 0x00	; 0
    7de8:	80 93 06 20 	sts	0x2006, r24
    7dec:	90 93 07 20 	sts	0x2007, r25
    7df0:	a0 93 08 20 	sts	0x2008, r26
    7df4:	b0 93 09 20 	sts	0x2009, r27
    7df8:	08 95       	ret

00007dfa <__ftoa_engine>:
    7dfa:	28 30       	cpi	r18, 0x08	; 8
    7dfc:	08 f0       	brcs	.+2      	; 0x7e00 <__ftoa_engine+0x6>
    7dfe:	27 e0       	ldi	r18, 0x07	; 7
    7e00:	33 27       	eor	r19, r19
    7e02:	da 01       	movw	r26, r20
    7e04:	99 0f       	add	r25, r25
    7e06:	31 1d       	adc	r19, r1
    7e08:	87 fd       	sbrc	r24, 7
    7e0a:	91 60       	ori	r25, 0x01	; 1
    7e0c:	00 96       	adiw	r24, 0x00	; 0
    7e0e:	61 05       	cpc	r22, r1
    7e10:	71 05       	cpc	r23, r1
    7e12:	39 f4       	brne	.+14     	; 0x7e22 <__ftoa_engine+0x28>
    7e14:	32 60       	ori	r19, 0x02	; 2
    7e16:	2e 5f       	subi	r18, 0xFE	; 254
    7e18:	3d 93       	st	X+, r19
    7e1a:	30 e3       	ldi	r19, 0x30	; 48
    7e1c:	2a 95       	dec	r18
    7e1e:	e1 f7       	brne	.-8      	; 0x7e18 <__ftoa_engine+0x1e>
    7e20:	08 95       	ret
    7e22:	9f 3f       	cpi	r25, 0xFF	; 255
    7e24:	30 f0       	brcs	.+12     	; 0x7e32 <__ftoa_engine+0x38>
    7e26:	80 38       	cpi	r24, 0x80	; 128
    7e28:	71 05       	cpc	r23, r1
    7e2a:	61 05       	cpc	r22, r1
    7e2c:	09 f0       	breq	.+2      	; 0x7e30 <__ftoa_engine+0x36>
    7e2e:	3c 5f       	subi	r19, 0xFC	; 252
    7e30:	3c 5f       	subi	r19, 0xFC	; 252
    7e32:	3d 93       	st	X+, r19
    7e34:	91 30       	cpi	r25, 0x01	; 1
    7e36:	08 f0       	brcs	.+2      	; 0x7e3a <__ftoa_engine+0x40>
    7e38:	80 68       	ori	r24, 0x80	; 128
    7e3a:	91 1d       	adc	r25, r1
    7e3c:	df 93       	push	r29
    7e3e:	cf 93       	push	r28
    7e40:	1f 93       	push	r17
    7e42:	0f 93       	push	r16
    7e44:	ff 92       	push	r15
    7e46:	ef 92       	push	r14
    7e48:	19 2f       	mov	r17, r25
    7e4a:	98 7f       	andi	r25, 0xF8	; 248
    7e4c:	96 95       	lsr	r25
    7e4e:	e9 2f       	mov	r30, r25
    7e50:	96 95       	lsr	r25
    7e52:	96 95       	lsr	r25
    7e54:	e9 0f       	add	r30, r25
    7e56:	ff 27       	eor	r31, r31
    7e58:	ec 5e       	subi	r30, 0xEC	; 236
    7e5a:	fc 4c       	sbci	r31, 0xCC	; 204
    7e5c:	99 27       	eor	r25, r25
    7e5e:	33 27       	eor	r19, r19
    7e60:	ee 24       	eor	r14, r14
    7e62:	ff 24       	eor	r15, r15
    7e64:	a7 01       	movw	r20, r14
    7e66:	e7 01       	movw	r28, r14
    7e68:	05 90       	lpm	r0, Z+
    7e6a:	08 94       	sec
    7e6c:	07 94       	ror	r0
    7e6e:	28 f4       	brcc	.+10     	; 0x7e7a <__ftoa_engine+0x80>
    7e70:	36 0f       	add	r19, r22
    7e72:	e7 1e       	adc	r14, r23
    7e74:	f8 1e       	adc	r15, r24
    7e76:	49 1f       	adc	r20, r25
    7e78:	51 1d       	adc	r21, r1
    7e7a:	66 0f       	add	r22, r22
    7e7c:	77 1f       	adc	r23, r23
    7e7e:	88 1f       	adc	r24, r24
    7e80:	99 1f       	adc	r25, r25
    7e82:	06 94       	lsr	r0
    7e84:	a1 f7       	brne	.-24     	; 0x7e6e <__ftoa_engine+0x74>
    7e86:	05 90       	lpm	r0, Z+
    7e88:	07 94       	ror	r0
    7e8a:	28 f4       	brcc	.+10     	; 0x7e96 <__ftoa_engine+0x9c>
    7e8c:	e7 0e       	add	r14, r23
    7e8e:	f8 1e       	adc	r15, r24
    7e90:	49 1f       	adc	r20, r25
    7e92:	56 1f       	adc	r21, r22
    7e94:	c1 1d       	adc	r28, r1
    7e96:	77 0f       	add	r23, r23
    7e98:	88 1f       	adc	r24, r24
    7e9a:	99 1f       	adc	r25, r25
    7e9c:	66 1f       	adc	r22, r22
    7e9e:	06 94       	lsr	r0
    7ea0:	a1 f7       	brne	.-24     	; 0x7e8a <__ftoa_engine+0x90>
    7ea2:	05 90       	lpm	r0, Z+
    7ea4:	07 94       	ror	r0
    7ea6:	28 f4       	brcc	.+10     	; 0x7eb2 <__ftoa_engine+0xb8>
    7ea8:	f8 0e       	add	r15, r24
    7eaa:	49 1f       	adc	r20, r25
    7eac:	56 1f       	adc	r21, r22
    7eae:	c7 1f       	adc	r28, r23
    7eb0:	d1 1d       	adc	r29, r1
    7eb2:	88 0f       	add	r24, r24
    7eb4:	99 1f       	adc	r25, r25
    7eb6:	66 1f       	adc	r22, r22
    7eb8:	77 1f       	adc	r23, r23
    7eba:	06 94       	lsr	r0
    7ebc:	a1 f7       	brne	.-24     	; 0x7ea6 <__ftoa_engine+0xac>
    7ebe:	05 90       	lpm	r0, Z+
    7ec0:	07 94       	ror	r0
    7ec2:	20 f4       	brcc	.+8      	; 0x7ecc <__ftoa_engine+0xd2>
    7ec4:	49 0f       	add	r20, r25
    7ec6:	56 1f       	adc	r21, r22
    7ec8:	c7 1f       	adc	r28, r23
    7eca:	d8 1f       	adc	r29, r24
    7ecc:	99 0f       	add	r25, r25
    7ece:	66 1f       	adc	r22, r22
    7ed0:	77 1f       	adc	r23, r23
    7ed2:	88 1f       	adc	r24, r24
    7ed4:	06 94       	lsr	r0
    7ed6:	a9 f7       	brne	.-22     	; 0x7ec2 <__ftoa_engine+0xc8>
    7ed8:	84 91       	lpm	r24, Z
    7eda:	10 95       	com	r17
    7edc:	17 70       	andi	r17, 0x07	; 7
    7ede:	41 f0       	breq	.+16     	; 0x7ef0 <__ftoa_engine+0xf6>
    7ee0:	d6 95       	lsr	r29
    7ee2:	c7 95       	ror	r28
    7ee4:	57 95       	ror	r21
    7ee6:	47 95       	ror	r20
    7ee8:	f7 94       	ror	r15
    7eea:	e7 94       	ror	r14
    7eec:	1a 95       	dec	r17
    7eee:	c1 f7       	brne	.-16     	; 0x7ee0 <__ftoa_engine+0xe6>
    7ef0:	ea eb       	ldi	r30, 0xBA	; 186
    7ef2:	f2 e3       	ldi	r31, 0x32	; 50
    7ef4:	68 94       	set
    7ef6:	15 90       	lpm	r1, Z+
    7ef8:	15 91       	lpm	r17, Z+
    7efa:	35 91       	lpm	r19, Z+
    7efc:	65 91       	lpm	r22, Z+
    7efe:	95 91       	lpm	r25, Z+
    7f00:	05 90       	lpm	r0, Z+
    7f02:	7f e2       	ldi	r23, 0x2F	; 47
    7f04:	73 95       	inc	r23
    7f06:	e1 18       	sub	r14, r1
    7f08:	f1 0a       	sbc	r15, r17
    7f0a:	43 0b       	sbc	r20, r19
    7f0c:	56 0b       	sbc	r21, r22
    7f0e:	c9 0b       	sbc	r28, r25
    7f10:	d0 09       	sbc	r29, r0
    7f12:	c0 f7       	brcc	.-16     	; 0x7f04 <__ftoa_engine+0x10a>
    7f14:	e1 0c       	add	r14, r1
    7f16:	f1 1e       	adc	r15, r17
    7f18:	43 1f       	adc	r20, r19
    7f1a:	56 1f       	adc	r21, r22
    7f1c:	c9 1f       	adc	r28, r25
    7f1e:	d0 1d       	adc	r29, r0
    7f20:	7e f4       	brtc	.+30     	; 0x7f40 <__ftoa_engine+0x146>
    7f22:	70 33       	cpi	r23, 0x30	; 48
    7f24:	11 f4       	brne	.+4      	; 0x7f2a <__ftoa_engine+0x130>
    7f26:	8a 95       	dec	r24
    7f28:	e6 cf       	rjmp	.-52     	; 0x7ef6 <__ftoa_engine+0xfc>
    7f2a:	e8 94       	clt
    7f2c:	01 50       	subi	r16, 0x01	; 1
    7f2e:	30 f0       	brcs	.+12     	; 0x7f3c <__ftoa_engine+0x142>
    7f30:	08 0f       	add	r16, r24
    7f32:	0a f4       	brpl	.+2      	; 0x7f36 <__ftoa_engine+0x13c>
    7f34:	00 27       	eor	r16, r16
    7f36:	02 17       	cp	r16, r18
    7f38:	08 f4       	brcc	.+2      	; 0x7f3c <__ftoa_engine+0x142>
    7f3a:	20 2f       	mov	r18, r16
    7f3c:	23 95       	inc	r18
    7f3e:	02 2f       	mov	r16, r18
    7f40:	7a 33       	cpi	r23, 0x3A	; 58
    7f42:	28 f0       	brcs	.+10     	; 0x7f4e <__ftoa_engine+0x154>
    7f44:	79 e3       	ldi	r23, 0x39	; 57
    7f46:	7d 93       	st	X+, r23
    7f48:	2a 95       	dec	r18
    7f4a:	e9 f7       	brne	.-6      	; 0x7f46 <__ftoa_engine+0x14c>
    7f4c:	10 c0       	rjmp	.+32     	; 0x7f6e <__ftoa_engine+0x174>
    7f4e:	7d 93       	st	X+, r23
    7f50:	2a 95       	dec	r18
    7f52:	89 f6       	brne	.-94     	; 0x7ef6 <__ftoa_engine+0xfc>
    7f54:	06 94       	lsr	r0
    7f56:	97 95       	ror	r25
    7f58:	67 95       	ror	r22
    7f5a:	37 95       	ror	r19
    7f5c:	17 95       	ror	r17
    7f5e:	17 94       	ror	r1
    7f60:	e1 18       	sub	r14, r1
    7f62:	f1 0a       	sbc	r15, r17
    7f64:	43 0b       	sbc	r20, r19
    7f66:	56 0b       	sbc	r21, r22
    7f68:	c9 0b       	sbc	r28, r25
    7f6a:	d0 09       	sbc	r29, r0
    7f6c:	98 f0       	brcs	.+38     	; 0x7f94 <__ftoa_engine+0x19a>
    7f6e:	23 95       	inc	r18
    7f70:	7e 91       	ld	r23, -X
    7f72:	73 95       	inc	r23
    7f74:	7a 33       	cpi	r23, 0x3A	; 58
    7f76:	08 f0       	brcs	.+2      	; 0x7f7a <__ftoa_engine+0x180>
    7f78:	70 e3       	ldi	r23, 0x30	; 48
    7f7a:	7c 93       	st	X, r23
    7f7c:	20 13       	cpse	r18, r16
    7f7e:	b8 f7       	brcc	.-18     	; 0x7f6e <__ftoa_engine+0x174>
    7f80:	7e 91       	ld	r23, -X
    7f82:	70 61       	ori	r23, 0x10	; 16
    7f84:	7d 93       	st	X+, r23
    7f86:	30 f0       	brcs	.+12     	; 0x7f94 <__ftoa_engine+0x19a>
    7f88:	83 95       	inc	r24
    7f8a:	71 e3       	ldi	r23, 0x31	; 49
    7f8c:	7d 93       	st	X+, r23
    7f8e:	70 e3       	ldi	r23, 0x30	; 48
    7f90:	2a 95       	dec	r18
    7f92:	e1 f7       	brne	.-8      	; 0x7f8c <__ftoa_engine+0x192>
    7f94:	11 24       	eor	r1, r1
    7f96:	ef 90       	pop	r14
    7f98:	ff 90       	pop	r15
    7f9a:	0f 91       	pop	r16
    7f9c:	1f 91       	pop	r17
    7f9e:	cf 91       	pop	r28
    7fa0:	df 91       	pop	r29
    7fa2:	99 27       	eor	r25, r25
    7fa4:	87 fd       	sbrc	r24, 7
    7fa6:	90 95       	com	r25
    7fa8:	08 95       	ret

00007faa <memcpy_P>:
    7faa:	fb 01       	movw	r30, r22
    7fac:	dc 01       	movw	r26, r24
    7fae:	02 c0       	rjmp	.+4      	; 0x7fb4 <memcpy_P+0xa>
    7fb0:	05 90       	lpm	r0, Z+
    7fb2:	0d 92       	st	X+, r0
    7fb4:	41 50       	subi	r20, 0x01	; 1
    7fb6:	50 40       	sbci	r21, 0x00	; 0
    7fb8:	d8 f7       	brcc	.-10     	; 0x7fb0 <memcpy_P+0x6>
    7fba:	08 95       	ret

00007fbc <strnlen_P>:
    7fbc:	fc 01       	movw	r30, r24
    7fbe:	05 90       	lpm	r0, Z+
    7fc0:	61 50       	subi	r22, 0x01	; 1
    7fc2:	70 40       	sbci	r23, 0x00	; 0
    7fc4:	01 10       	cpse	r0, r1
    7fc6:	d8 f7       	brcc	.-10     	; 0x7fbe <strnlen_P+0x2>
    7fc8:	80 95       	com	r24
    7fca:	90 95       	com	r25
    7fcc:	8e 0f       	add	r24, r30
    7fce:	9f 1f       	adc	r25, r31
    7fd0:	08 95       	ret

00007fd2 <memset>:
    7fd2:	dc 01       	movw	r26, r24
    7fd4:	01 c0       	rjmp	.+2      	; 0x7fd8 <memset+0x6>
    7fd6:	6d 93       	st	X+, r22
    7fd8:	41 50       	subi	r20, 0x01	; 1
    7fda:	50 40       	sbci	r21, 0x00	; 0
    7fdc:	e0 f7       	brcc	.-8      	; 0x7fd6 <memset+0x4>
    7fde:	08 95       	ret

00007fe0 <strnlen>:
    7fe0:	fc 01       	movw	r30, r24
    7fe2:	61 50       	subi	r22, 0x01	; 1
    7fe4:	70 40       	sbci	r23, 0x00	; 0
    7fe6:	01 90       	ld	r0, Z+
    7fe8:	01 10       	cpse	r0, r1
    7fea:	d8 f7       	brcc	.-10     	; 0x7fe2 <strnlen+0x2>
    7fec:	80 95       	com	r24
    7fee:	90 95       	com	r25
    7ff0:	8e 0f       	add	r24, r30
    7ff2:	9f 1f       	adc	r25, r31
    7ff4:	08 95       	ret

00007ff6 <fputc>:
    7ff6:	0f 93       	push	r16
    7ff8:	1f 93       	push	r17
    7ffa:	cf 93       	push	r28
    7ffc:	df 93       	push	r29
    7ffe:	18 2f       	mov	r17, r24
    8000:	09 2f       	mov	r16, r25
    8002:	eb 01       	movw	r28, r22
    8004:	8b 81       	ldd	r24, Y+3	; 0x03
    8006:	81 fd       	sbrc	r24, 1
    8008:	03 c0       	rjmp	.+6      	; 0x8010 <fputc+0x1a>
    800a:	8f ef       	ldi	r24, 0xFF	; 255
    800c:	9f ef       	ldi	r25, 0xFF	; 255
    800e:	20 c0       	rjmp	.+64     	; 0x8050 <fputc+0x5a>
    8010:	82 ff       	sbrs	r24, 2
    8012:	10 c0       	rjmp	.+32     	; 0x8034 <fputc+0x3e>
    8014:	4e 81       	ldd	r20, Y+6	; 0x06
    8016:	5f 81       	ldd	r21, Y+7	; 0x07
    8018:	2c 81       	ldd	r18, Y+4	; 0x04
    801a:	3d 81       	ldd	r19, Y+5	; 0x05
    801c:	42 17       	cp	r20, r18
    801e:	53 07       	cpc	r21, r19
    8020:	7c f4       	brge	.+30     	; 0x8040 <fputc+0x4a>
    8022:	e8 81       	ld	r30, Y
    8024:	f9 81       	ldd	r31, Y+1	; 0x01
    8026:	9f 01       	movw	r18, r30
    8028:	2f 5f       	subi	r18, 0xFF	; 255
    802a:	3f 4f       	sbci	r19, 0xFF	; 255
    802c:	28 83       	st	Y, r18
    802e:	39 83       	std	Y+1, r19	; 0x01
    8030:	10 83       	st	Z, r17
    8032:	06 c0       	rjmp	.+12     	; 0x8040 <fputc+0x4a>
    8034:	e8 85       	ldd	r30, Y+8	; 0x08
    8036:	f9 85       	ldd	r31, Y+9	; 0x09
    8038:	81 2f       	mov	r24, r17
    803a:	19 95       	eicall
    803c:	89 2b       	or	r24, r25
    803e:	29 f7       	brne	.-54     	; 0x800a <fputc+0x14>
    8040:	2e 81       	ldd	r18, Y+6	; 0x06
    8042:	3f 81       	ldd	r19, Y+7	; 0x07
    8044:	2f 5f       	subi	r18, 0xFF	; 255
    8046:	3f 4f       	sbci	r19, 0xFF	; 255
    8048:	2e 83       	std	Y+6, r18	; 0x06
    804a:	3f 83       	std	Y+7, r19	; 0x07
    804c:	81 2f       	mov	r24, r17
    804e:	90 2f       	mov	r25, r16
    8050:	df 91       	pop	r29
    8052:	cf 91       	pop	r28
    8054:	1f 91       	pop	r17
    8056:	0f 91       	pop	r16
    8058:	08 95       	ret

0000805a <sprintf>:
    805a:	0f 93       	push	r16
    805c:	1f 93       	push	r17
    805e:	cf 93       	push	r28
    8060:	df 93       	push	r29
    8062:	cd b7       	in	r28, 0x3d	; 61
    8064:	de b7       	in	r29, 0x3e	; 62
    8066:	2e 97       	sbiw	r28, 0x0e	; 14
    8068:	cd bf       	out	0x3d, r28	; 61
    806a:	de bf       	out	0x3e, r29	; 62
    806c:	0e 89       	ldd	r16, Y+22	; 0x16
    806e:	1f 89       	ldd	r17, Y+23	; 0x17
    8070:	86 e0       	ldi	r24, 0x06	; 6
    8072:	8c 83       	std	Y+4, r24	; 0x04
    8074:	09 83       	std	Y+1, r16	; 0x01
    8076:	1a 83       	std	Y+2, r17	; 0x02
    8078:	8f ef       	ldi	r24, 0xFF	; 255
    807a:	9f e7       	ldi	r25, 0x7F	; 127
    807c:	8d 83       	std	Y+5, r24	; 0x05
    807e:	9e 83       	std	Y+6, r25	; 0x06
    8080:	ae 01       	movw	r20, r28
    8082:	46 5e       	subi	r20, 0xE6	; 230
    8084:	5f 4f       	sbci	r21, 0xFF	; 255
    8086:	68 8d       	ldd	r22, Y+24	; 0x18
    8088:	79 8d       	ldd	r23, Y+25	; 0x19
    808a:	ce 01       	movw	r24, r28
    808c:	01 96       	adiw	r24, 0x01	; 1
    808e:	3e d9       	rcall	.-3460   	; 0x730c <vfprintf>
    8090:	ef 81       	ldd	r30, Y+7	; 0x07
    8092:	f8 85       	ldd	r31, Y+8	; 0x08
    8094:	e0 0f       	add	r30, r16
    8096:	f1 1f       	adc	r31, r17
    8098:	10 82       	st	Z, r1
    809a:	2e 96       	adiw	r28, 0x0e	; 14
    809c:	cd bf       	out	0x3d, r28	; 61
    809e:	de bf       	out	0x3e, r29	; 62
    80a0:	df 91       	pop	r29
    80a2:	cf 91       	pop	r28
    80a4:	1f 91       	pop	r17
    80a6:	0f 91       	pop	r16
    80a8:	08 95       	ret

000080aa <__ultoa_invert>:
    80aa:	fa 01       	movw	r30, r20
    80ac:	aa 27       	eor	r26, r26
    80ae:	28 30       	cpi	r18, 0x08	; 8
    80b0:	51 f1       	breq	.+84     	; 0x8106 <__ultoa_invert+0x5c>
    80b2:	20 31       	cpi	r18, 0x10	; 16
    80b4:	81 f1       	breq	.+96     	; 0x8116 <__ultoa_invert+0x6c>
    80b6:	e8 94       	clt
    80b8:	6f 93       	push	r22
    80ba:	6e 7f       	andi	r22, 0xFE	; 254
    80bc:	6e 5f       	subi	r22, 0xFE	; 254
    80be:	7f 4f       	sbci	r23, 0xFF	; 255
    80c0:	8f 4f       	sbci	r24, 0xFF	; 255
    80c2:	9f 4f       	sbci	r25, 0xFF	; 255
    80c4:	af 4f       	sbci	r26, 0xFF	; 255
    80c6:	b1 e0       	ldi	r27, 0x01	; 1
    80c8:	3e d0       	rcall	.+124    	; 0x8146 <__ultoa_invert+0x9c>
    80ca:	b4 e0       	ldi	r27, 0x04	; 4
    80cc:	3c d0       	rcall	.+120    	; 0x8146 <__ultoa_invert+0x9c>
    80ce:	67 0f       	add	r22, r23
    80d0:	78 1f       	adc	r23, r24
    80d2:	89 1f       	adc	r24, r25
    80d4:	9a 1f       	adc	r25, r26
    80d6:	a1 1d       	adc	r26, r1
    80d8:	68 0f       	add	r22, r24
    80da:	79 1f       	adc	r23, r25
    80dc:	8a 1f       	adc	r24, r26
    80de:	91 1d       	adc	r25, r1
    80e0:	a1 1d       	adc	r26, r1
    80e2:	6a 0f       	add	r22, r26
    80e4:	71 1d       	adc	r23, r1
    80e6:	81 1d       	adc	r24, r1
    80e8:	91 1d       	adc	r25, r1
    80ea:	a1 1d       	adc	r26, r1
    80ec:	20 d0       	rcall	.+64     	; 0x812e <__ultoa_invert+0x84>
    80ee:	09 f4       	brne	.+2      	; 0x80f2 <__ultoa_invert+0x48>
    80f0:	68 94       	set
    80f2:	3f 91       	pop	r19
    80f4:	2a e0       	ldi	r18, 0x0A	; 10
    80f6:	26 9f       	mul	r18, r22
    80f8:	11 24       	eor	r1, r1
    80fa:	30 19       	sub	r19, r0
    80fc:	30 5d       	subi	r19, 0xD0	; 208
    80fe:	31 93       	st	Z+, r19
    8100:	de f6       	brtc	.-74     	; 0x80b8 <__ultoa_invert+0xe>
    8102:	cf 01       	movw	r24, r30
    8104:	08 95       	ret
    8106:	46 2f       	mov	r20, r22
    8108:	47 70       	andi	r20, 0x07	; 7
    810a:	40 5d       	subi	r20, 0xD0	; 208
    810c:	41 93       	st	Z+, r20
    810e:	b3 e0       	ldi	r27, 0x03	; 3
    8110:	0f d0       	rcall	.+30     	; 0x8130 <__ultoa_invert+0x86>
    8112:	c9 f7       	brne	.-14     	; 0x8106 <__ultoa_invert+0x5c>
    8114:	f6 cf       	rjmp	.-20     	; 0x8102 <__ultoa_invert+0x58>
    8116:	46 2f       	mov	r20, r22
    8118:	4f 70       	andi	r20, 0x0F	; 15
    811a:	40 5d       	subi	r20, 0xD0	; 208
    811c:	4a 33       	cpi	r20, 0x3A	; 58
    811e:	18 f0       	brcs	.+6      	; 0x8126 <__ultoa_invert+0x7c>
    8120:	49 5d       	subi	r20, 0xD9	; 217
    8122:	31 fd       	sbrc	r19, 1
    8124:	40 52       	subi	r20, 0x20	; 32
    8126:	41 93       	st	Z+, r20
    8128:	02 d0       	rcall	.+4      	; 0x812e <__ultoa_invert+0x84>
    812a:	a9 f7       	brne	.-22     	; 0x8116 <__ultoa_invert+0x6c>
    812c:	ea cf       	rjmp	.-44     	; 0x8102 <__ultoa_invert+0x58>
    812e:	b4 e0       	ldi	r27, 0x04	; 4
    8130:	a6 95       	lsr	r26
    8132:	97 95       	ror	r25
    8134:	87 95       	ror	r24
    8136:	77 95       	ror	r23
    8138:	67 95       	ror	r22
    813a:	ba 95       	dec	r27
    813c:	c9 f7       	brne	.-14     	; 0x8130 <__ultoa_invert+0x86>
    813e:	00 97       	sbiw	r24, 0x00	; 0
    8140:	61 05       	cpc	r22, r1
    8142:	71 05       	cpc	r23, r1
    8144:	08 95       	ret
    8146:	9b 01       	movw	r18, r22
    8148:	ac 01       	movw	r20, r24
    814a:	0a 2e       	mov	r0, r26
    814c:	06 94       	lsr	r0
    814e:	57 95       	ror	r21
    8150:	47 95       	ror	r20
    8152:	37 95       	ror	r19
    8154:	27 95       	ror	r18
    8156:	ba 95       	dec	r27
    8158:	c9 f7       	brne	.-14     	; 0x814c <__ultoa_invert+0xa2>
    815a:	62 0f       	add	r22, r18
    815c:	73 1f       	adc	r23, r19
    815e:	84 1f       	adc	r24, r20
    8160:	95 1f       	adc	r25, r21
    8162:	a0 1d       	adc	r26, r0
    8164:	08 95       	ret

00008166 <__divmodsi4>:
    8166:	05 2e       	mov	r0, r21
    8168:	97 fb       	bst	r25, 7
    816a:	16 f4       	brtc	.+4      	; 0x8170 <__divmodsi4+0xa>
    816c:	00 94       	com	r0
    816e:	0f d0       	rcall	.+30     	; 0x818e <__negsi2>
    8170:	57 fd       	sbrc	r21, 7
    8172:	05 d0       	rcall	.+10     	; 0x817e <__divmodsi4_neg2>
    8174:	5f dc       	rcall	.-1858   	; 0x7a34 <__udivmodsi4>
    8176:	07 fc       	sbrc	r0, 7
    8178:	02 d0       	rcall	.+4      	; 0x817e <__divmodsi4_neg2>
    817a:	46 f4       	brtc	.+16     	; 0x818c <__divmodsi4_exit>
    817c:	08 c0       	rjmp	.+16     	; 0x818e <__negsi2>

0000817e <__divmodsi4_neg2>:
    817e:	50 95       	com	r21
    8180:	40 95       	com	r20
    8182:	30 95       	com	r19
    8184:	21 95       	neg	r18
    8186:	3f 4f       	sbci	r19, 0xFF	; 255
    8188:	4f 4f       	sbci	r20, 0xFF	; 255
    818a:	5f 4f       	sbci	r21, 0xFF	; 255

0000818c <__divmodsi4_exit>:
    818c:	08 95       	ret

0000818e <__negsi2>:
    818e:	90 95       	com	r25
    8190:	80 95       	com	r24
    8192:	70 95       	com	r23
    8194:	61 95       	neg	r22
    8196:	7f 4f       	sbci	r23, 0xFF	; 255
    8198:	8f 4f       	sbci	r24, 0xFF	; 255
    819a:	9f 4f       	sbci	r25, 0xFF	; 255
    819c:	08 95       	ret

0000819e <__muluhisi3>:
    819e:	72 dc       	rcall	.-1820   	; 0x7a84 <__umulhisi3>
    81a0:	a5 9f       	mul	r26, r21
    81a2:	90 0d       	add	r25, r0
    81a4:	b4 9f       	mul	r27, r20
    81a6:	90 0d       	add	r25, r0
    81a8:	a4 9f       	mul	r26, r20
    81aa:	80 0d       	add	r24, r0
    81ac:	91 1d       	adc	r25, r1
    81ae:	11 24       	eor	r1, r1
    81b0:	08 95       	ret

000081b2 <__mulshisi3>:
    81b2:	b7 ff       	sbrs	r27, 7
    81b4:	f4 cf       	rjmp	.-24     	; 0x819e <__muluhisi3>

000081b6 <__mulohisi3>:
    81b6:	f3 df       	rcall	.-26     	; 0x819e <__muluhisi3>
    81b8:	82 1b       	sub	r24, r18
    81ba:	93 0b       	sbc	r25, r19
    81bc:	08 95       	ret

000081be <_exit>:
    81be:	f8 94       	cli

000081c0 <__stop_program>:
    81c0:	ff cf       	rjmp	.-2      	; 0x81c0 <__stop_program>
