
SPI LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006bfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00003c60  00802000  00006bfe  00006c92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f37  00805c60  00805c60  0000a8f2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000a8f2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006b8  00000000  00000000  0000a950  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00010b59  00000000  00000000  0000b008  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000029f0  00000000  00000000  0001bb61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00009c65  00000000  00000000  0001e551  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001af8  00000000  00000000  000281b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0002aa8a  00000000  00000000  00029cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000721c  00000000  00000000  0005473a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008b8  00000000  00000000  0005b958  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000b53a  00000000  00000000  0005c210  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__ctors_end>
       4:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
       8:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
       c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      10:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      14:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      18:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      1c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      20:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      24:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      28:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      2c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      30:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      34:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      38:	0c 94 cf 24 	jmp	0x499e	; 0x499e <__vector_14>
      3c:	0c 94 fc 24 	jmp	0x49f8	; 0x49f8 <__vector_15>
      40:	0c 94 29 25 	jmp	0x4a52	; 0x4a52 <__vector_16>
      44:	0c 94 56 25 	jmp	0x4aac	; 0x4aac <__vector_17>
      48:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <__vector_18>
      4c:	0c 94 b0 25 	jmp	0x4b60	; 0x4b60 <__vector_19>
      50:	0c 94 dd 25 	jmp	0x4bba	; 0x4bba <__vector_20>
      54:	0c 94 0a 26 	jmp	0x4c14	; 0x4c14 <__vector_21>
      58:	0c 94 37 26 	jmp	0x4c6e	; 0x4c6e <__vector_22>
      5c:	0c 94 64 26 	jmp	0x4cc8	; 0x4cc8 <__vector_23>
      60:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      64:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      68:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      6c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      70:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      74:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      78:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      7c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      80:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      84:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      88:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      8c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      90:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      94:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      98:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      9c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      a0:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      a4:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      a8:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      ac:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      b0:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      b4:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      b8:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      bc:	0c 94 9f 27 	jmp	0x4f3e	; 0x4f3e <__vector_47>
      c0:	0c 94 cc 27 	jmp	0x4f98	; 0x4f98 <__vector_48>
      c4:	0c 94 f9 27 	jmp	0x4ff2	; 0x4ff2 <__vector_49>
      c8:	0c 94 26 28 	jmp	0x504c	; 0x504c <__vector_50>
      cc:	0c 94 53 28 	jmp	0x50a6	; 0x50a6 <__vector_51>
      d0:	0c 94 80 28 	jmp	0x5100	; 0x5100 <__vector_52>
      d4:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      d8:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      dc:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      e0:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      e4:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      e8:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      ec:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      f0:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      f4:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      f8:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
      fc:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     100:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     104:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     108:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     10c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     110:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     114:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     118:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     11c:	0c 94 72 1c 	jmp	0x38e4	; 0x38e4 <__vector_71>
     120:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     124:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     128:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     12c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     130:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     134:	0c 94 91 26 	jmp	0x4d22	; 0x4d22 <__vector_77>
     138:	0c 94 be 26 	jmp	0x4d7c	; 0x4d7c <__vector_78>
     13c:	0c 94 eb 26 	jmp	0x4dd6	; 0x4dd6 <__vector_79>
     140:	0c 94 18 27 	jmp	0x4e30	; 0x4e30 <__vector_80>
     144:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <__vector_81>
     148:	0c 94 72 27 	jmp	0x4ee4	; 0x4ee4 <__vector_82>
     14c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     150:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     154:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     158:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     15c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     160:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     164:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     168:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     16c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     170:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     174:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     178:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     17c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     180:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     184:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     188:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     18c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     190:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     194:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     198:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     19c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1a0:	0c 94 ab 2f 	jmp	0x5f56	; 0x5f56 <__vector_104>
     1a4:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1a8:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1ac:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1b0:	0c 94 ad 28 	jmp	0x515a	; 0x515a <__vector_108>
     1b4:	0c 94 da 28 	jmp	0x51b4	; 0x51b4 <__vector_109>
     1b8:	0c 94 07 29 	jmp	0x520e	; 0x520e <__vector_110>
     1bc:	0c 94 34 29 	jmp	0x5268	; 0x5268 <__vector_111>
     1c0:	0c 94 61 29 	jmp	0x52c2	; 0x52c2 <__vector_112>
     1c4:	0c 94 8e 29 	jmp	0x531c	; 0x531c <__vector_113>
     1c8:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1cc:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1d0:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1d4:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1d8:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1dc:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1e0:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1e4:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1e8:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1ec:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1f0:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1f4:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1f8:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__bad_interrupt>
     1fc:	df 19       	sub	r29, r15
     1fe:	e5 19       	sub	r30, r5
     200:	eb 19       	sub	r30, r11
     202:	f1 19       	sub	r31, r1
     204:	f7 19       	sub	r31, r7
     206:	fd 19       	sub	r31, r13
     208:	03 1a       	sub	r0, r19
     20a:	09 1a       	sub	r0, r25
     20c:	0f 1a       	sub	r0, r31
     20e:	15 1a       	sub	r1, r21
     210:	1b 1a       	sub	r1, r27
     212:	21 1a       	sub	r2, r17
     214:	27 1a       	sub	r2, r23
     216:	2d 1a       	sub	r2, r29
     218:	33 1a       	sub	r3, r19
     21a:	39 1a       	sub	r3, r25
     21c:	3f 1a       	sub	r3, r31
     21e:	45 1a       	sub	r4, r21
     220:	4b 1a       	sub	r4, r27
     222:	51 1a       	sub	r5, r17
     224:	57 1a       	sub	r5, r23
     226:	5d 1a       	sub	r5, r29
     228:	63 1a       	sub	r6, r19
     22a:	69 1a       	sub	r6, r25
     22c:	6f 1a       	sub	r6, r31
     22e:	75 1a       	sub	r7, r21
     230:	7b 1a       	sub	r7, r27
     232:	81 1a       	sub	r8, r17
     234:	87 1a       	sub	r8, r23
     236:	8d 1a       	sub	r8, r29
     238:	93 1a       	sub	r9, r19
     23a:	99 1a       	sub	r9, r25
     23c:	9f 1a       	sub	r9, r31
     23e:	a5 1a       	sub	r10, r21
     240:	ab 1a       	sub	r10, r27
     242:	b1 1a       	sub	r11, r17
     244:	b7 1a       	sub	r11, r23
     246:	bd 1a       	sub	r11, r29
     248:	c3 1a       	sub	r12, r19
     24a:	c9 1a       	sub	r12, r25
     24c:	cf 1a       	sub	r12, r31
     24e:	d5 1a       	sub	r13, r21
     250:	db 1a       	sub	r13, r27
     252:	e1 1a       	sub	r14, r17
     254:	e7 1a       	sub	r14, r23
     256:	ed 1a       	sub	r14, r29
     258:	f3 1a       	sub	r15, r19
     25a:	f9 1a       	sub	r15, r25
     25c:	ff 1a       	sub	r15, r31
     25e:	05 1b       	sub	r16, r21
     260:	0b 1b       	sub	r16, r27
     262:	11 1b       	sub	r17, r17
     264:	17 1b       	sub	r17, r23
     266:	1d 1b       	sub	r17, r29
     268:	23 1b       	sub	r18, r19
     26a:	29 1b       	sub	r18, r25
     26c:	2f 1b       	sub	r18, r31
     26e:	35 1b       	sub	r19, r21
     270:	3b 1b       	sub	r19, r27
     272:	41 1b       	sub	r20, r17
     274:	47 1b       	sub	r20, r23
     276:	4d 1b       	sub	r20, r29
     278:	53 1b       	sub	r21, r19
     27a:	59 1b       	sub	r21, r25
     27c:	5f 1b       	sub	r21, r31
     27e:	65 1b       	sub	r22, r21
     280:	6b 1b       	sub	r22, r27
     282:	71 1b       	sub	r23, r17
     284:	77 1b       	sub	r23, r23
     286:	7d 1b       	sub	r23, r29
     288:	83 1b       	sub	r24, r19
     28a:	89 1b       	sub	r24, r25
     28c:	8f 1b       	sub	r24, r31
     28e:	95 1b       	sub	r25, r21
     290:	9b 1b       	sub	r25, r27
     292:	a1 1b       	sub	r26, r17
     294:	a7 1b       	sub	r26, r23
     296:	ad 1b       	sub	r26, r29
     298:	b3 1b       	sub	r27, r19
     29a:	b9 1b       	sub	r27, r25
     29c:	bf 1b       	sub	r27, r31
     29e:	c5 1b       	sub	r28, r21
     2a0:	cb 1b       	sub	r28, r27
     2a2:	d1 1b       	sub	r29, r17
     2a4:	d7 1b       	sub	r29, r23
     2a6:	dd 1b       	sub	r29, r29
     2a8:	e3 1b       	sub	r30, r19
     2aa:	e9 1b       	sub	r30, r25
     2ac:	ef 1b       	sub	r30, r31
     2ae:	f5 1b       	sub	r31, r21
     2b0:	fb 1b       	sub	r31, r27
     2b2:	01 1c       	adc	r0, r1
     2b4:	07 1c       	adc	r0, r7
     2b6:	0d 1c       	adc	r0, r13
     2b8:	13 1c       	adc	r1, r3
     2ba:	4a 1d       	adc	r20, r10
     2bc:	50 1d       	adc	r21, r0
     2be:	56 1d       	adc	r21, r6
     2c0:	5c 1d       	adc	r21, r12
     2c2:	62 1d       	adc	r22, r2
     2c4:	68 1d       	adc	r22, r8
     2c6:	6e 1d       	adc	r22, r14
     2c8:	74 1d       	adc	r23, r4
     2ca:	7a 1d       	adc	r23, r10
     2cc:	80 1d       	adc	r24, r0
     2ce:	86 1d       	adc	r24, r6
     2d0:	8c 1d       	adc	r24, r12
     2d2:	92 1d       	adc	r25, r2
     2d4:	98 1d       	adc	r25, r8
     2d6:	9e 1d       	adc	r25, r14
     2d8:	a4 1d       	adc	r26, r4
     2da:	aa 1d       	adc	r26, r10
     2dc:	b0 1d       	adc	r27, r0
     2de:	b6 1d       	adc	r27, r6
     2e0:	bc 1d       	adc	r27, r12
     2e2:	c2 1d       	adc	r28, r2
     2e4:	c8 1d       	adc	r28, r8
     2e6:	ce 1d       	adc	r28, r14
     2e8:	d4 1d       	adc	r29, r4
     2ea:	da 1d       	adc	r29, r10
     2ec:	e0 1d       	adc	r30, r0
     2ee:	e6 1d       	adc	r30, r6
     2f0:	ec 1d       	adc	r30, r12
     2f2:	f2 1d       	adc	r31, r2
     2f4:	f8 1d       	adc	r31, r8
     2f6:	fe 1d       	adc	r31, r14
     2f8:	04 1e       	adc	r0, r20
     2fa:	0a 1e       	adc	r0, r26
     2fc:	10 1e       	adc	r1, r16
     2fe:	16 1e       	adc	r1, r22
     300:	1c 1e       	adc	r1, r28
     302:	22 1e       	adc	r2, r18
     304:	28 1e       	adc	r2, r24
     306:	2e 1e       	adc	r2, r30
     308:	34 1e       	adc	r3, r20
     30a:	3a 1e       	adc	r3, r26
     30c:	40 1e       	adc	r4, r16
     30e:	46 1e       	adc	r4, r22
     310:	4c 1e       	adc	r4, r28
     312:	52 1e       	adc	r5, r18
     314:	58 1e       	adc	r5, r24
     316:	5e 1e       	adc	r5, r30
     318:	64 1e       	adc	r6, r20
     31a:	6a 1e       	adc	r6, r26
     31c:	70 1e       	adc	r7, r16
     31e:	76 1e       	adc	r7, r22
     320:	7c 1e       	adc	r7, r28
     322:	82 1e       	adc	r8, r18
     324:	88 1e       	adc	r8, r24
     326:	8e 1e       	adc	r8, r30
     328:	94 1e       	adc	r9, r20
     32a:	9a 1e       	adc	r9, r26
     32c:	a0 1e       	adc	r10, r16
     32e:	a6 1e       	adc	r10, r22
     330:	ac 1e       	adc	r10, r28
     332:	b2 1e       	adc	r11, r18
     334:	b8 1e       	adc	r11, r24
     336:	be 1e       	adc	r11, r30
     338:	c4 1e       	adc	r12, r20
     33a:	ca 1e       	adc	r12, r26
     33c:	d0 1e       	adc	r13, r16
     33e:	d6 1e       	adc	r13, r22
     340:	dc 1e       	adc	r13, r28
     342:	e2 1e       	adc	r14, r18
     344:	e8 1e       	adc	r14, r24
     346:	ee 1e       	adc	r14, r30
     348:	f4 1e       	adc	r15, r20
     34a:	fa 1e       	adc	r15, r26
     34c:	00 1f       	adc	r16, r16
     34e:	06 1f       	adc	r16, r22
     350:	0c 1f       	adc	r16, r28
     352:	12 1f       	adc	r17, r18
     354:	18 1f       	adc	r17, r24
     356:	1e 1f       	adc	r17, r30
     358:	24 1f       	adc	r18, r20
     35a:	2a 1f       	adc	r18, r26
     35c:	30 1f       	adc	r19, r16
     35e:	36 1f       	adc	r19, r22
     360:	3c 1f       	adc	r19, r28
     362:	42 1f       	adc	r20, r18
     364:	48 1f       	adc	r20, r24
     366:	4e 1f       	adc	r20, r30
     368:	54 1f       	adc	r21, r20
     36a:	5a 1f       	adc	r21, r26
     36c:	60 1f       	adc	r22, r16
     36e:	66 1f       	adc	r22, r22
     370:	6c 1f       	adc	r22, r28
     372:	72 1f       	adc	r23, r18
     374:	78 1f       	adc	r23, r24
     376:	7e 1f       	adc	r23, r30

00000378 <__trampolines_end>:
	...
     418:	7f ff       	.word	0xff7f	; ????
     41a:	fc 00       	.word	0x00fc	; ????
	...
     448:	00 3f       	cpi	r16, 0xF0	; 240
     44a:	ff ff       	.word	0xffff	; ????
     44c:	ff fc       	.word	0xfcff	; ????
	...
     47a:	03 ff       	sbrs	r16, 3
     47c:	ff ff       	.word	0xffff	; ????
     47e:	ff ff       	.word	0xffff	; ????
     480:	c0 00       	.word	0x00c0	; ????
	...
     4aa:	00 00       	nop
     4ac:	0f ff       	.word	0xff0f	; ????
     4ae:	ff f0       	brie	.+62     	; 0x4ee <__trampolines_end+0x176>
     4b0:	00 ff       	sbrs	r16, 0
     4b2:	fc 00       	.word	0x00fc	; ????
	...
     4dc:	00 00       	nop
     4de:	ff ff       	.word	0xffff	; ????
     4e0:	f8 00       	.word	0x00f8	; ????
     4e2:	00 00       	nop
     4e4:	ff c0       	rjmp	.+510    	; 0x6e4 <__trampolines_end+0x36c>
	...
     50e:	00 01       	movw	r0, r0
     510:	ff ff       	.word	0xffff	; ????
     512:	80 00       	.word	0x0080	; ????
     514:	00 00       	nop
     516:	03 f8       	bld	r0, 3
	...
     540:	00 0f       	add	r16, r16
     542:	ff f8       	.word	0xf8ff	; ????
     544:	00 00       	nop
     546:	00 00       	nop
     548:	00 3f       	cpi	r16, 0xF0	; 240
	...
     572:	00 3f       	cpi	r16, 0xF0	; 240
     574:	ff c0       	rjmp	.+510    	; 0x774 <__trampolines_end+0x3fc>
     576:	00 00       	nop
     578:	00 00       	nop
     57a:	00 03       	mulsu	r16, r16
     57c:	e0 00       	.word	0x00e0	; ????
	...
     5a2:	00 00       	nop
     5a4:	00 7f       	andi	r16, 0xF0	; 240
     5a6:	ff 00       	.word	0x00ff	; ????
     5a8:	00 00       	nop
     5aa:	00 00       	nop
     5ac:	00 00       	nop
     5ae:	3c 00       	.word	0x003c	; ????
	...
     5d4:	00 00       	nop
     5d6:	01 ff       	sbrs	r16, 1
     5d8:	fc 00       	.word	0x00fc	; ????
     5da:	00 00       	nop
     5dc:	00 00       	nop
     5de:	00 00       	nop
     5e0:	0f 00       	.word	0x000f	; ????
	...
     606:	00 00       	nop
     608:	03 ff       	sbrs	r16, 3
     60a:	f0 00       	.word	0x00f0	; ????
     60c:	00 00       	nop
     60e:	00 00       	nop
     610:	00 00       	nop
     612:	01 e0       	ldi	r16, 0x01	; 1
	...
     638:	00 00       	nop
     63a:	0f ff       	.word	0xff0f	; ????
     63c:	c0 00       	.word	0x00c0	; ????
     63e:	00 00       	nop
     640:	00 00       	nop
     642:	00 00       	nop
     644:	00 38       	cpi	r16, 0x80	; 128
	...
     66a:	00 00       	nop
     66c:	1f ff       	.word	0xff1f	; ????
     66e:	80 00       	.word	0x0080	; ????
     670:	00 00       	nop
     672:	00 00       	nop
     674:	00 00       	nop
     676:	00 0e       	add	r0, r16
	...
     69c:	00 00       	nop
     69e:	3f fe       	.word	0xfe3f	; ????
	...
     6a8:	00 01       	movw	r0, r0
     6aa:	80 00       	.word	0x0080	; ????
	...
     6d0:	7f fc       	.word	0xfc7f	; ????
	...
     6da:	00 00       	nop
     6dc:	70 00       	.word	0x0070	; ????
	...
     702:	ff f0       	brie	.+62     	; 0x742 <__trampolines_end+0x3ca>
	...
     70c:	00 00       	nop
     70e:	18 00       	.word	0x0018	; ????
	...
     730:	00 00       	nop
     732:	00 01       	movw	r0, r0
     734:	ff e0       	ldi	r31, 0x0F	; 15
	...
     73e:	00 00       	nop
     740:	06 00       	.word	0x0006	; ????
	...
     762:	00 00       	nop
     764:	00 03       	mulsu	r16, r16
     766:	ff c0       	rjmp	.+510    	; 0x966 <__trampolines_end+0x5ee>
	...
     770:	00 00       	nop
     772:	01 80       	ldd	r0, Z+1	; 0x01
	...
     794:	00 00       	nop
     796:	00 07       	cpc	r16, r16
     798:	ff 80       	ldd	r15, Y+7	; 0x07
	...
     7a2:	00 00       	nop
     7a4:	00 60       	ori	r16, 0x00	; 0
	...
     7c6:	00 00       	nop
     7c8:	00 0f       	add	r16, r16
     7ca:	ff 00       	.word	0x00ff	; ????
	...
     7d4:	00 00       	nop
     7d6:	00 18       	sub	r0, r0
	...
     7f8:	00 00       	nop
     7fa:	00 1f       	adc	r16, r16
     7fc:	fe 00       	.word	0x00fe	; ????
	...
     806:	00 00       	nop
     808:	00 04       	cpc	r0, r0
	...
     82a:	00 00       	nop
     82c:	00 1f       	adc	r16, r16
     82e:	fe 00       	.word	0x00fe	; ????
	...
     838:	00 00       	nop
     83a:	00 01       	movw	r0, r0
	...
     85c:	00 00       	nop
     85e:	00 3f       	cpi	r16, 0xF0	; 240
     860:	fc 00       	.word	0x00fc	; ????
	...
     86e:	40 00       	.word	0x0040	; ????
	...
     890:	00 7f       	andi	r16, 0xF0	; 240
     892:	f8 00       	.word	0x00f8	; ????
	...
     8a0:	20 00       	.word	0x0020	; ????
	...
     8c2:	00 7f       	andi	r16, 0xF0	; 240
     8c4:	f0 00       	.word	0x00f0	; ????
	...
     8d2:	08 00       	.word	0x0008	; ????
	...
     8f4:	00 ff       	sbrs	r16, 0
     8f6:	f0 00       	.word	0x00f0	; ????
	...
     904:	04 00       	.word	0x0004	; ????
	...
     926:	00 ff       	sbrs	r16, 0
     928:	e0 00       	.word	0x00e0	; ????
	...
     936:	01 00       	.word	0x0001	; ????
	...
     958:	01 ff       	sbrs	r16, 1
     95a:	c0 00       	.word	0x00c0	; ????
	...
     988:	00 00       	nop
     98a:	01 ff       	sbrs	r16, 1
     98c:	c0 00       	.word	0x00c0	; ????
	...
     9ba:	00 00       	nop
     9bc:	03 ff       	sbrs	r16, 3
     9be:	80 00       	.word	0x0080	; ????
	...
     9ec:	00 00       	nop
     9ee:	03 ff       	sbrs	r16, 3
     9f0:	80 00       	.word	0x0080	; ????
	...
     a1e:	00 00       	nop
     a20:	03 ff       	sbrs	r16, 3
	...
     a52:	07 ff       	sbrs	r16, 7
	...
     a84:	07 ff       	sbrs	r16, 7
	...
     ab6:	0f fe       	.word	0xfe0f	; ????
	...
     ae8:	0f fe       	.word	0xfe0f	; ????
	...
     b1a:	0f fe       	.word	0xfe0f	; ????
	...
     b4c:	1f fc       	.word	0xfc1f	; ????
	...
     b7e:	1f fc       	.word	0xfc1f	; ????
	...
     bb0:	1f fc       	.word	0xfc1f	; ????
	...
     be2:	1f f8       	.word	0xf81f	; ????
	...
     c14:	1f f8       	.word	0xf81f	; ????
	...
     c46:	3f f8       	.word	0xf83f	; ????
	...
     c78:	3f f8       	.word	0xf83f	; ????
	...
     caa:	3f f8       	.word	0xf83f	; ????
	...
     cdc:	3f f8       	.word	0xf83f	; ????
	...
     ce6:	00 00       	nop
     ce8:	ff e0       	ldi	r31, 0x0F	; 15
	...
     d0e:	3f f8       	.word	0xf83f	; ????
	...
     d18:	00 00       	nop
     d1a:	ff e0       	ldi	r31, 0x0F	; 15
	...
     d40:	3f f0       	brie	.+14     	; 0xd50 <__trampolines_end+0x9d8>
	...
     d4a:	00 00       	nop
     d4c:	ff e0       	ldi	r31, 0x0F	; 15
	...
     d72:	3f f0       	brie	.+14     	; 0xd82 <__trampolines_end+0xa0a>
	...
     d7c:	00 00       	nop
     d7e:	ff e0       	ldi	r31, 0x0F	; 15
	...
     da4:	3f f0       	brie	.+14     	; 0xdb4 <__trampolines_end+0xa3c>
	...
     dae:	00 00       	nop
     db0:	ff e0       	ldi	r31, 0x0F	; 15
	...
     dd6:	3f f0       	brie	.+14     	; 0xde6 <__trampolines_end+0xa6e>
	...
     de0:	00 00       	nop
     de2:	ff e0       	ldi	r31, 0x0F	; 15
	...
     e08:	3f f0       	brie	.+14     	; 0xe18 <__trampolines_end+0xaa0>
	...
     e12:	00 00       	nop
     e14:	ff e0       	ldi	r31, 0x0F	; 15
	...
     e3a:	7f f0       	brie	.+30     	; 0xe5a <__trampolines_end+0xae2>
	...
     e44:	00 00       	nop
     e46:	ff e0       	ldi	r31, 0x0F	; 15
	...
     e6c:	7f f0       	brie	.+30     	; 0xe8c <__trampolines_end+0xb14>
	...
     e76:	00 00       	nop
     e78:	ff e0       	ldi	r31, 0x0F	; 15
	...
     e9e:	7f f0       	brie	.+30     	; 0xebe <__trampolines_end+0xb46>
	...
     ea8:	00 00       	nop
     eaa:	ff e0       	ldi	r31, 0x0F	; 15
	...
     ed0:	3f f0       	brie	.+14     	; 0xee0 <__trampolines_end+0xb68>
	...
     f02:	3f f0       	brie	.+14     	; 0xf12 <__trampolines_end+0xb9a>
	...
     f34:	3f f0       	brie	.+14     	; 0xf44 <__trampolines_end+0xbcc>
	...
     f66:	3f f0       	brie	.+14     	; 0xf76 <__trampolines_end+0xbfe>
	...
     f98:	3f f0       	brie	.+14     	; 0xfa8 <__trampolines_end+0xc30>
	...
     fca:	3f f8       	.word	0xf83f	; ????
	...
     ffc:	3f f8       	.word	0xf83f	; ????
	...
    102e:	3f f8       	.word	0xf83f	; ????
	...
    1060:	3f f8       	.word	0xf83f	; ????
	...
    1092:	3f f8       	.word	0xf83f	; ????
	...
    10c4:	1f f8       	.word	0xf81f	; ????
	...
    10f6:	1f f8       	.word	0xf81f	; ????
	...
    1128:	1f f8       	.word	0xf81f	; ????
	...
    115a:	1f fc       	.word	0xfc1f	; ????
	...
    116c:	3e 00       	.word	0x003e	; ????
    116e:	00 00       	nop
    1170:	0f 80       	ldd	r0, Y+7	; 0x07
	...
    118a:	00 00       	nop
    118c:	1f fc       	.word	0xfc1f	; ????
	...
    119a:	00 00       	nop
    119c:	00 0f       	add	r16, r16
    119e:	ff fc       	.word	0xfcff	; ????
    11a0:	00 07       	cpc	r16, r16
    11a2:	ff ff       	.word	0xffff	; ????
    11a4:	00 00       	nop
    11a6:	00 00       	nop
    11a8:	00 0f       	add	r16, r16
    11aa:	ff c0       	rjmp	.+510    	; 0x13aa <__trampolines_end+0x1032>
    11ac:	00 00       	nop
    11ae:	00 00       	nop
    11b0:	00 0f       	add	r16, r16
    11b2:	ff e0       	ldi	r31, 0x0F	; 15
	...
    11bc:	00 00       	nop
    11be:	1f fc       	.word	0xfc1f	; ????
	...
    11c8:	00 00       	nop
    11ca:	ff e0       	ldi	r31, 0x0F	; 15
    11cc:	00 00       	nop
    11ce:	00 7f       	andi	r16, 0xF0	; 240
    11d0:	ff ff       	.word	0xffff	; ????
    11d2:	00 1f       	adc	r16, r16
    11d4:	ff ff       	.word	0xffff	; ????
    11d6:	c0 00       	.word	0x00c0	; ????
    11d8:	00 00       	nop
    11da:	00 7f       	andi	r16, 0xF0	; 240
    11dc:	ff f8       	.word	0xf8ff	; ????
    11de:	00 00       	nop
    11e0:	00 00       	nop
    11e2:	00 7f       	andi	r16, 0xF0	; 240
    11e4:	ff fc       	.word	0xfcff	; ????
	...
    11ee:	00 00       	nop
    11f0:	0f fc       	.word	0xfc0f	; ????
	...
    11fa:	00 00       	nop
    11fc:	ff e0       	ldi	r31, 0x0F	; 15
    11fe:	00 00       	nop
    1200:	01 ff       	sbrs	r16, 1
    1202:	ff ff       	.word	0xffff	; ????
    1204:	c0 7f       	andi	r28, 0xF0	; 240
    1206:	ff ff       	.word	0xffff	; ????
    1208:	f8 00       	.word	0x00f8	; ????
    120a:	00 00       	nop
    120c:	03 ff       	sbrs	r16, 3
    120e:	ff ff       	.word	0xffff	; ????
    1210:	00 00       	nop
    1212:	00 00       	nop
    1214:	03 ff       	sbrs	r16, 3
    1216:	ff ff       	.word	0xffff	; ????
    1218:	80 00       	.word	0x0080	; ????
	...
    1222:	0f fe       	.word	0xfe0f	; ????
	...
    122c:	00 00       	nop
    122e:	ff e0       	ldi	r31, 0x0F	; 15
    1230:	00 00       	nop
    1232:	03 ff       	sbrs	r16, 3
    1234:	ff ff       	.word	0xffff	; ????
    1236:	f0 ff       	sbrs	r31, 0
    1238:	ff ff       	.word	0xffff	; ????
    123a:	fc 00       	.word	0x00fc	; ????
    123c:	00 00       	nop
    123e:	0f ff       	.word	0xff0f	; ????
    1240:	ff ff       	.word	0xffff	; ????
    1242:	c0 00       	.word	0x00c0	; ????
    1244:	00 00       	nop
    1246:	07 ff       	sbrs	r16, 7
    1248:	ff ff       	.word	0xffff	; ????
    124a:	c0 00       	.word	0x00c0	; ????
	...
    1254:	0f fe       	.word	0xfe0f	; ????
	...
    125e:	00 00       	nop
    1260:	ff e0       	ldi	r31, 0x0F	; 15
    1262:	00 00       	nop
    1264:	0f ff       	.word	0xff0f	; ????
    1266:	ff ff       	.word	0xffff	; ????
    1268:	fb ff       	.word	0xfffb	; ????
    126a:	ff ff       	.word	0xffff	; ????
    126c:	fe 00       	.word	0x00fe	; ????
    126e:	00 00       	nop
    1270:	1f ff       	.word	0xff1f	; ????
    1272:	ff ff       	.word	0xffff	; ????
    1274:	e0 00       	.word	0x00e0	; ????
    1276:	00 00       	nop
    1278:	1f ff       	.word	0xff1f	; ????
    127a:	ff ff       	.word	0xffff	; ????
    127c:	f0 00       	.word	0x00f0	; ????
	...
    1286:	0f fe       	.word	0xfe0f	; ????
	...
    1290:	00 00       	nop
    1292:	ff e0       	ldi	r31, 0x0F	; 15
    1294:	00 00       	nop
    1296:	1f ff       	.word	0xff1f	; ????
    1298:	ff ff       	.word	0xffff	; ????
    129a:	ff ff       	.word	0xffff	; ????
    129c:	ff ff       	.word	0xffff	; ????
    129e:	ff 00       	.word	0x00ff	; ????
    12a0:	00 00       	nop
    12a2:	3f ff       	.word	0xff3f	; ????
    12a4:	ff ff       	.word	0xffff	; ????
    12a6:	f8 00       	.word	0x00f8	; ????
    12a8:	00 00       	nop
    12aa:	3f ff       	.word	0xff3f	; ????
    12ac:	ff ff       	.word	0xffff	; ????
    12ae:	fc 00       	.word	0x00fc	; ????
	...
    12b8:	07 fe       	sbrs	r0, 7
	...
    12c2:	00 00       	nop
    12c4:	ff e0       	ldi	r31, 0x0F	; 15
    12c6:	00 00       	nop
    12c8:	1f ff       	.word	0xff1f	; ????
    12ca:	ff ff       	.word	0xffff	; ????
    12cc:	ff ff       	.word	0xffff	; ????
    12ce:	ff ff       	.word	0xffff	; ????
    12d0:	ff 80       	ldd	r15, Y+7	; 0x07
    12d2:	00 00       	nop
    12d4:	ff ff       	.word	0xffff	; ????
    12d6:	ff ff       	.word	0xffff	; ????
    12d8:	fc 00       	.word	0x00fc	; ????
    12da:	00 00       	nop
    12dc:	7f ff       	.word	0xff7f	; ????
    12de:	ff ff       	.word	0xffff	; ????
    12e0:	fe 00       	.word	0x00fe	; ????
	...
    12ea:	07 ff       	sbrs	r16, 7
	...
    12f4:	00 00       	nop
    12f6:	ff e0       	ldi	r31, 0x0F	; 15
    12f8:	00 00       	nop
    12fa:	3f ff       	.word	0xff3f	; ????
    12fc:	ff ff       	.word	0xffff	; ????
    12fe:	ff ff       	.word	0xffff	; ????
    1300:	ff ff       	.word	0xffff	; ????
    1302:	ff c0       	rjmp	.+510    	; 0x1502 <__trampolines_end+0x118a>
    1304:	00 01       	movw	r0, r0
    1306:	ff ff       	.word	0xffff	; ????
    1308:	ff ff       	.word	0xffff	; ????
    130a:	fe 00       	.word	0x00fe	; ????
    130c:	00 00       	nop
    130e:	ff ff       	.word	0xffff	; ????
    1310:	ff ff       	.word	0xffff	; ????
    1312:	ff 00       	.word	0x00ff	; ????
	...
    131c:	07 ff       	sbrs	r16, 7
	...
    1326:	00 00       	nop
    1328:	ff e0       	ldi	r31, 0x0F	; 15
    132a:	00 00       	nop
    132c:	7f ff       	.word	0xff7f	; ????
    132e:	ff ff       	.word	0xffff	; ????
    1330:	ff ff       	.word	0xffff	; ????
    1332:	ff ff       	.word	0xffff	; ????
    1334:	ff c0       	rjmp	.+510    	; 0x1534 <__trampolines_end+0x11bc>
    1336:	00 03       	mulsu	r16, r16
    1338:	ff ff       	.word	0xffff	; ????
    133a:	ff ff       	.word	0xffff	; ????
    133c:	ff 00       	.word	0x00ff	; ????
    133e:	00 01       	movw	r0, r0
    1340:	ff ff       	.word	0xffff	; ????
    1342:	ff ff       	.word	0xffff	; ????
    1344:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    134e:	03 ff       	sbrs	r16, 3
	...
    1358:	00 00       	nop
    135a:	ff e0       	ldi	r31, 0x0F	; 15
    135c:	00 00       	nop
    135e:	7f ff       	.word	0xff7f	; ????
    1360:	80 7f       	andi	r24, 0xF0	; 240
    1362:	ff ff       	.word	0xffff	; ????
    1364:	e0 3f       	cpi	r30, 0xF0	; 240
    1366:	ff e0       	ldi	r31, 0x0F	; 15
    1368:	00 07       	cpc	r16, r16
    136a:	ff ff       	.word	0xffff	; ????
    136c:	ff ff       	.word	0xffff	; ????
    136e:	ff 80       	ldd	r15, Y+7	; 0x07
    1370:	00 03       	mulsu	r16, r16
    1372:	ff ff       	.word	0xffff	; ????
    1374:	ff ff       	.word	0xffff	; ????
    1376:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    1380:	03 ff       	sbrs	r16, 3
    1382:	80 00       	.word	0x0080	; ????
	...
    138c:	ff e0       	ldi	r31, 0x0F	; 15
    138e:	00 00       	nop
    1390:	ff fe       	.word	0xfeff	; ????
    1392:	00 3f       	cpi	r16, 0xF0	; 240
    1394:	ff ff       	.word	0xffff	; ????
    1396:	80 07       	cpc	r24, r16
    1398:	ff e0       	ldi	r31, 0x0F	; 15
    139a:	00 07       	cpc	r16, r16
    139c:	ff fe       	.word	0xfeff	; ????
    139e:	03 ff       	sbrs	r16, 3
    13a0:	ff 80       	ldd	r15, Y+7	; 0x07
    13a2:	00 07       	cpc	r16, r16
    13a4:	ff fe       	.word	0xfeff	; ????
    13a6:	00 ff       	sbrs	r16, 0
    13a8:	ff c0       	rjmp	.+510    	; 0x15a8 <__trampolines_end+0x1230>
	...
    13b2:	03 ff       	sbrs	r16, 3
    13b4:	80 00       	.word	0x0080	; ????
	...
    13be:	ff e0       	ldi	r31, 0x0F	; 15
    13c0:	00 00       	nop
    13c2:	ff f8       	.word	0xf8ff	; ????
    13c4:	00 0f       	add	r16, r16
    13c6:	ff fe       	.word	0xfeff	; ????
    13c8:	00 03       	mulsu	r16, r16
    13ca:	ff e0       	ldi	r31, 0x0F	; 15
    13cc:	00 0f       	add	r16, r16
    13ce:	ff f0       	brie	.+62     	; 0x140e <__trampolines_end+0x1096>
    13d0:	00 3f       	cpi	r16, 0xF0	; 240
    13d2:	ff c0       	rjmp	.+510    	; 0x15d2 <__trampolines_end+0x125a>
    13d4:	00 0f       	add	r16, r16
    13d6:	ff f0       	brie	.+62     	; 0x1416 <__trampolines_end+0x109e>
    13d8:	00 1f       	adc	r16, r16
    13da:	ff e0       	ldi	r31, 0x0F	; 15
	...
    13e4:	03 ff       	sbrs	r16, 3
    13e6:	80 00       	.word	0x0080	; ????
	...
    13f0:	ff e0       	ldi	r31, 0x0F	; 15
    13f2:	00 00       	nop
    13f4:	ff f0       	brie	.+62     	; 0x1434 <__trampolines_end+0x10bc>
    13f6:	00 07       	cpc	r16, r16
    13f8:	ff fc       	.word	0xfcff	; ????
    13fa:	00 01       	movw	r0, r0
    13fc:	ff f0       	brie	.+62     	; 0x143c <__trampolines_end+0x10c4>
    13fe:	00 0f       	add	r16, r16
    1400:	ff c0       	rjmp	.+510    	; 0x1600 <__trampolines_end+0x1288>
    1402:	00 0f       	add	r16, r16
    1404:	ff e0       	ldi	r31, 0x0F	; 15
    1406:	00 0f       	add	r16, r16
    1408:	ff c0       	rjmp	.+510    	; 0x1608 <__trampolines_end+0x1290>
    140a:	00 07       	cpc	r16, r16
    140c:	ff e0       	ldi	r31, 0x0F	; 15
	...
    1416:	01 ff       	sbrs	r16, 1
    1418:	c0 00       	.word	0x00c0	; ????
	...
    1422:	ff e0       	ldi	r31, 0x0F	; 15
    1424:	00 01       	movw	r0, r0
    1426:	ff f0       	brie	.+62     	; 0x1466 <__trampolines_end+0x10ee>
    1428:	00 03       	mulsu	r16, r16
    142a:	ff fc       	.word	0xfcff	; ????
    142c:	00 00       	nop
    142e:	ff f0       	brie	.+62     	; 0x146e <__trampolines_end+0x10f6>
    1430:	00 1f       	adc	r16, r16
    1432:	ff 80       	ldd	r15, Y+7	; 0x07
    1434:	00 07       	cpc	r16, r16
    1436:	ff e0       	ldi	r31, 0x0F	; 15
    1438:	00 1f       	adc	r16, r16
    143a:	ff 80       	ldd	r15, Y+7	; 0x07
    143c:	00 03       	mulsu	r16, r16
    143e:	ff f0       	brie	.+62     	; 0x147e <__trampolines_end+0x1106>
	...
    1448:	01 ff       	sbrs	r16, 1
    144a:	c0 00       	.word	0x00c0	; ????
	...
    1454:	ff e0       	ldi	r31, 0x0F	; 15
    1456:	00 01       	movw	r0, r0
    1458:	ff e0       	ldi	r31, 0x0F	; 15
    145a:	00 03       	mulsu	r16, r16
    145c:	ff f8       	.word	0xf8ff	; ????
    145e:	00 00       	nop
    1460:	ff f0       	brie	.+62     	; 0x14a0 <__trampolines_end+0x1128>
    1462:	00 1f       	adc	r16, r16
    1464:	ff 00       	.word	0x00ff	; ????
    1466:	00 03       	mulsu	r16, r16
    1468:	ff e0       	ldi	r31, 0x0F	; 15
    146a:	00 1f       	adc	r16, r16
    146c:	ff 00       	.word	0x00ff	; ????
    146e:	00 01       	movw	r0, r0
    1470:	ff f0       	brie	.+62     	; 0x14b0 <__trampolines_end+0x1138>
	...
    147a:	00 ff       	sbrs	r16, 0
    147c:	c0 00       	.word	0x00c0	; ????
	...
    1486:	ff e0       	ldi	r31, 0x0F	; 15
    1488:	00 01       	movw	r0, r0
    148a:	ff c0       	rjmp	.+510    	; 0x168a <__trampolines_end+0x1312>
    148c:	00 01       	movw	r0, r0
    148e:	ff f0       	brie	.+62     	; 0x14ce <__trampolines_end+0x1156>
    1490:	00 00       	nop
    1492:	7f f0       	brie	.+30     	; 0x14b2 <__trampolines_end+0x113a>
    1494:	00 3f       	cpi	r16, 0xF0	; 240
    1496:	fe 00       	.word	0x00fe	; ????
    1498:	00 01       	movw	r0, r0
    149a:	ff f0       	brie	.+62     	; 0x14da <__trampolines_end+0x1162>
    149c:	00 3f       	cpi	r16, 0xF0	; 240
    149e:	fe 00       	.word	0x00fe	; ????
    14a0:	00 00       	nop
    14a2:	ff f8       	.word	0xf8ff	; ????
	...
    14ac:	00 ff       	sbrs	r16, 0
    14ae:	e0 00       	.word	0x00e0	; ????
	...
    14b8:	ff e0       	ldi	r31, 0x0F	; 15
    14ba:	00 01       	movw	r0, r0
    14bc:	ff c0       	rjmp	.+510    	; 0x16bc <__trampolines_end+0x1344>
    14be:	00 01       	movw	r0, r0
    14c0:	ff f0       	brie	.+62     	; 0x1500 <__trampolines_end+0x1188>
    14c2:	00 00       	nop
    14c4:	7f f8       	.word	0xf87f	; ????
    14c6:	00 3f       	cpi	r16, 0xF0	; 240
    14c8:	fc 00       	.word	0x00fc	; ????
    14ca:	00 00       	nop
    14cc:	ff f0       	brie	.+62     	; 0x150c <__trampolines_end+0x1194>
    14ce:	00 3f       	cpi	r16, 0xF0	; 240
    14d0:	fc 00       	.word	0x00fc	; ????
    14d2:	00 00       	nop
    14d4:	7f f8       	.word	0xf87f	; ????
	...
    14de:	00 ff       	sbrs	r16, 0
    14e0:	e0 00       	.word	0x00e0	; ????
	...
    14ea:	ff e0       	ldi	r31, 0x0F	; 15
    14ec:	00 03       	mulsu	r16, r16
    14ee:	ff c0       	rjmp	.+510    	; 0x16ee <__trampolines_end+0x1376>
    14f0:	00 01       	movw	r0, r0
    14f2:	ff f0       	brie	.+62     	; 0x1532 <__trampolines_end+0x11ba>
    14f4:	00 00       	nop
    14f6:	3f f8       	.word	0xf83f	; ????
    14f8:	00 3f       	cpi	r16, 0xF0	; 240
    14fa:	fc 00       	.word	0x00fc	; ????
    14fc:	00 00       	nop
    14fe:	7f f8       	.word	0xf87f	; ????
    1500:	00 7f       	andi	r16, 0xF0	; 240
    1502:	f8 00       	.word	0x00f8	; ????
    1504:	00 00       	nop
    1506:	3f fc       	.word	0xfc3f	; ????
	...
    1510:	00 7f       	andi	r16, 0xF0	; 240
    1512:	f0 00       	.word	0x00f0	; ????
	...
    151c:	ff e0       	ldi	r31, 0x0F	; 15
    151e:	00 03       	mulsu	r16, r16
    1520:	ff 80       	ldd	r15, Y+7	; 0x07
    1522:	00 00       	nop
    1524:	ff e0       	ldi	r31, 0x0F	; 15
    1526:	00 00       	nop
    1528:	3f f8       	.word	0xf83f	; ????
    152a:	00 7f       	andi	r16, 0xF0	; 240
    152c:	f8 00       	.word	0x00f8	; ????
    152e:	00 00       	nop
    1530:	7f f8       	.word	0xf87f	; ????
    1532:	00 7f       	andi	r16, 0xF0	; 240
    1534:	f8 00       	.word	0x00f8	; ????
    1536:	00 00       	nop
    1538:	3f fc       	.word	0xfc3f	; ????
	...
    1542:	00 7f       	andi	r16, 0xF0	; 240
    1544:	f0 00       	.word	0x00f0	; ????
	...
    154e:	ff e0       	ldi	r31, 0x0F	; 15
    1550:	00 03       	mulsu	r16, r16
    1552:	ff 80       	ldd	r15, Y+7	; 0x07
    1554:	00 00       	nop
    1556:	ff e0       	ldi	r31, 0x0F	; 15
    1558:	00 00       	nop
    155a:	3f f8       	.word	0xf83f	; ????
    155c:	00 7f       	andi	r16, 0xF0	; 240
    155e:	f0 00       	.word	0x00f0	; ????
    1560:	00 00       	nop
    1562:	7f f8       	.word	0xf87f	; ????
    1564:	00 7f       	andi	r16, 0xF0	; 240
    1566:	f0 00       	.word	0x00f0	; ????
    1568:	00 00       	nop
    156a:	1f fc       	.word	0xfc1f	; ????
	...
    1574:	00 7f       	andi	r16, 0xF0	; 240
    1576:	f0 00       	.word	0x00f0	; ????
	...
    1580:	ff e0       	ldi	r31, 0x0F	; 15
    1582:	00 03       	mulsu	r16, r16
    1584:	ff 80       	ldd	r15, Y+7	; 0x07
    1586:	00 00       	nop
    1588:	ff e0       	ldi	r31, 0x0F	; 15
    158a:	00 00       	nop
    158c:	3f f8       	.word	0xf83f	; ????
    158e:	00 ff       	sbrs	r16, 0
    1590:	f0 00       	.word	0x00f0	; ????
    1592:	00 00       	nop
    1594:	3f f8       	.word	0xf83f	; ????
    1596:	00 7f       	andi	r16, 0xF0	; 240
    1598:	f0 00       	.word	0x00f0	; ????
    159a:	00 00       	nop
    159c:	10 00       	.word	0x0010	; ????
	...
    15a6:	00 3f       	cpi	r16, 0xF0	; 240
    15a8:	f8 00       	.word	0x00f8	; ????
	...
    15b2:	ff e0       	ldi	r31, 0x0F	; 15
    15b4:	00 03       	mulsu	r16, r16
    15b6:	ff 80       	ldd	r15, Y+7	; 0x07
    15b8:	00 00       	nop
    15ba:	ff e0       	ldi	r31, 0x0F	; 15
    15bc:	00 00       	nop
    15be:	3f f8       	.word	0xf83f	; ????
    15c0:	00 ff       	sbrs	r16, 0
    15c2:	f0 00       	.word	0x00f0	; ????
    15c4:	00 00       	nop
    15c6:	3f f8       	.word	0xf83f	; ????
    15c8:	00 ff       	sbrs	r16, 0
    15ca:	e0 00       	.word	0x00e0	; ????
	...
    15d8:	00 3f       	cpi	r16, 0xF0	; 240
    15da:	f8 00       	.word	0x00f8	; ????
	...
    15e4:	ff e0       	ldi	r31, 0x0F	; 15
    15e6:	00 03       	mulsu	r16, r16
    15e8:	ff 80       	ldd	r15, Y+7	; 0x07
    15ea:	00 00       	nop
    15ec:	ff e0       	ldi	r31, 0x0F	; 15
    15ee:	00 00       	nop
    15f0:	3f f8       	.word	0xf83f	; ????
    15f2:	00 ff       	sbrs	r16, 0
    15f4:	e0 00       	.word	0x00e0	; ????
    15f6:	ff ff       	.word	0xffff	; ????
    15f8:	ff fc       	.word	0xfcff	; ????
    15fa:	00 ff       	sbrs	r16, 0
    15fc:	e0 00       	.word	0x00e0	; ????
	...
    160a:	00 1f       	adc	r16, r16
    160c:	fc 00       	.word	0x00fc	; ????
	...
    1616:	ff e0       	ldi	r31, 0x0F	; 15
    1618:	00 03       	mulsu	r16, r16
    161a:	ff 80       	ldd	r15, Y+7	; 0x07
    161c:	00 00       	nop
    161e:	ff e0       	ldi	r31, 0x0F	; 15
    1620:	00 00       	nop
    1622:	3f f8       	.word	0xf83f	; ????
    1624:	00 ff       	sbrs	r16, 0
    1626:	e0 00       	.word	0x00e0	; ????
    1628:	ff ff       	.word	0xffff	; ????
    162a:	ff fc       	.word	0xfcff	; ????
    162c:	00 ff       	sbrs	r16, 0
    162e:	e0 00       	.word	0x00e0	; ????
	...
    163c:	00 1f       	adc	r16, r16
    163e:	fc 00       	.word	0x00fc	; ????
	...
    1648:	ff e0       	ldi	r31, 0x0F	; 15
    164a:	00 03       	mulsu	r16, r16
    164c:	ff 80       	ldd	r15, Y+7	; 0x07
    164e:	00 00       	nop
    1650:	ff e0       	ldi	r31, 0x0F	; 15
    1652:	00 00       	nop
    1654:	3f f8       	.word	0xf83f	; ????
    1656:	00 ff       	sbrs	r16, 0
    1658:	e0 00       	.word	0x00e0	; ????
    165a:	ff ff       	.word	0xffff	; ????
    165c:	ff fc       	.word	0xfcff	; ????
    165e:	00 ff       	sbrs	r16, 0
    1660:	e0 00       	.word	0x00e0	; ????
	...
    166e:	00 0f       	add	r16, r16
    1670:	fe 00       	.word	0x00fe	; ????
	...
    167a:	ff e0       	ldi	r31, 0x0F	; 15
    167c:	00 03       	mulsu	r16, r16
    167e:	ff 80       	ldd	r15, Y+7	; 0x07
    1680:	00 00       	nop
    1682:	ff e0       	ldi	r31, 0x0F	; 15
    1684:	00 00       	nop
    1686:	3f f8       	.word	0xf83f	; ????
    1688:	00 ff       	sbrs	r16, 0
    168a:	e0 00       	.word	0x00e0	; ????
    168c:	ff ff       	.word	0xffff	; ????
    168e:	ff fc       	.word	0xfcff	; ????
    1690:	00 ff       	sbrs	r16, 0
    1692:	c0 00       	.word	0x00c0	; ????
	...
    16a0:	00 0f       	add	r16, r16
    16a2:	fe 00       	.word	0x00fe	; ????
	...
    16ac:	ff e0       	ldi	r31, 0x0F	; 15
    16ae:	00 03       	mulsu	r16, r16
    16b0:	ff 80       	ldd	r15, Y+7	; 0x07
    16b2:	00 00       	nop
    16b4:	ff e0       	ldi	r31, 0x0F	; 15
    16b6:	00 00       	nop
    16b8:	3f f8       	.word	0xf83f	; ????
    16ba:	00 ff       	sbrs	r16, 0
    16bc:	e0 00       	.word	0x00e0	; ????
    16be:	ff ff       	.word	0xffff	; ????
    16c0:	ff fc       	.word	0xfcff	; ????
    16c2:	00 ff       	sbrs	r16, 0
    16c4:	c0 00       	.word	0x00c0	; ????
	...
    16d2:	00 07       	cpc	r16, r16
    16d4:	ff 00       	.word	0x00ff	; ????
	...
    16de:	ff e0       	ldi	r31, 0x0F	; 15
    16e0:	00 03       	mulsu	r16, r16
    16e2:	ff 80       	ldd	r15, Y+7	; 0x07
    16e4:	00 00       	nop
    16e6:	ff e0       	ldi	r31, 0x0F	; 15
    16e8:	00 00       	nop
    16ea:	3f f8       	.word	0xf83f	; ????
    16ec:	00 ff       	sbrs	r16, 0
    16ee:	e0 00       	.word	0x00e0	; ????
    16f0:	ff ff       	.word	0xffff	; ????
    16f2:	ff fc       	.word	0xfcff	; ????
    16f4:	00 ff       	sbrs	r16, 0
    16f6:	c0 00       	.word	0x00c0	; ????
	...
    1704:	00 07       	cpc	r16, r16
    1706:	ff 00       	.word	0x00ff	; ????
	...
    1710:	ff e0       	ldi	r31, 0x0F	; 15
    1712:	00 03       	mulsu	r16, r16
    1714:	ff 80       	ldd	r15, Y+7	; 0x07
    1716:	00 00       	nop
    1718:	ff e0       	ldi	r31, 0x0F	; 15
    171a:	00 00       	nop
    171c:	3f f8       	.word	0xf83f	; ????
    171e:	00 ff       	sbrs	r16, 0
    1720:	e0 00       	.word	0x00e0	; ????
    1722:	ff ff       	.word	0xffff	; ????
    1724:	ff fc       	.word	0xfcff	; ????
    1726:	00 ff       	sbrs	r16, 0
    1728:	c0 00       	.word	0x00c0	; ????
	...
    1736:	00 03       	mulsu	r16, r16
    1738:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    1742:	ff e0       	ldi	r31, 0x0F	; 15
    1744:	00 03       	mulsu	r16, r16
    1746:	ff 80       	ldd	r15, Y+7	; 0x07
    1748:	00 00       	nop
    174a:	ff e0       	ldi	r31, 0x0F	; 15
    174c:	00 00       	nop
    174e:	3f f8       	.word	0xf83f	; ????
    1750:	00 ff       	sbrs	r16, 0
    1752:	e0 00       	.word	0x00e0	; ????
    1754:	ff ff       	.word	0xffff	; ????
    1756:	ff fc       	.word	0xfcff	; ????
    1758:	00 ff       	sbrs	r16, 0
    175a:	c0 00       	.word	0x00c0	; ????
	...
    1768:	00 03       	mulsu	r16, r16
    176a:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    1774:	ff e0       	ldi	r31, 0x0F	; 15
    1776:	00 03       	mulsu	r16, r16
    1778:	ff 80       	ldd	r15, Y+7	; 0x07
    177a:	00 00       	nop
    177c:	ff e0       	ldi	r31, 0x0F	; 15
    177e:	00 00       	nop
    1780:	3f f8       	.word	0xf83f	; ????
    1782:	00 ff       	sbrs	r16, 0
    1784:	e0 00       	.word	0x00e0	; ????
    1786:	00 00       	nop
    1788:	00 00       	nop
    178a:	00 ff       	sbrs	r16, 0
    178c:	c0 00       	.word	0x00c0	; ????
	...
    179a:	00 01       	movw	r0, r0
    179c:	ff c0       	rjmp	.+510    	; 0x199c <__trampolines_end+0x1624>
	...
    17a6:	ff e0       	ldi	r31, 0x0F	; 15
    17a8:	00 03       	mulsu	r16, r16
    17aa:	ff 80       	ldd	r15, Y+7	; 0x07
    17ac:	00 00       	nop
    17ae:	ff e0       	ldi	r31, 0x0F	; 15
    17b0:	00 00       	nop
    17b2:	3f f8       	.word	0xf83f	; ????
    17b4:	00 ff       	sbrs	r16, 0
    17b6:	e0 00       	.word	0x00e0	; ????
    17b8:	00 00       	nop
    17ba:	00 00       	nop
    17bc:	00 ff       	sbrs	r16, 0
    17be:	c0 00       	.word	0x00c0	; ????
	...
    17cc:	00 01       	movw	r0, r0
    17ce:	ff c0       	rjmp	.+510    	; 0x19ce <__trampolines_end+0x1656>
	...
    17d8:	ff e0       	ldi	r31, 0x0F	; 15
    17da:	00 03       	mulsu	r16, r16
    17dc:	ff 80       	ldd	r15, Y+7	; 0x07
    17de:	00 00       	nop
    17e0:	ff e0       	ldi	r31, 0x0F	; 15
    17e2:	00 00       	nop
    17e4:	3f f8       	.word	0xf83f	; ????
    17e6:	00 ff       	sbrs	r16, 0
    17e8:	e0 00       	.word	0x00e0	; ????
    17ea:	00 00       	nop
    17ec:	00 00       	nop
    17ee:	00 ff       	sbrs	r16, 0
    17f0:	e0 00       	.word	0x00e0	; ????
	...
    17fe:	00 00       	nop
    1800:	ff e0       	ldi	r31, 0x0F	; 15
	...
    180a:	ff e0       	ldi	r31, 0x0F	; 15
    180c:	00 03       	mulsu	r16, r16
    180e:	ff 80       	ldd	r15, Y+7	; 0x07
    1810:	00 00       	nop
    1812:	ff e0       	ldi	r31, 0x0F	; 15
    1814:	00 00       	nop
    1816:	3f f8       	.word	0xf83f	; ????
    1818:	00 ff       	sbrs	r16, 0
    181a:	e0 00       	.word	0x00e0	; ????
    181c:	00 00       	nop
    181e:	00 00       	nop
    1820:	00 ff       	sbrs	r16, 0
    1822:	e0 00       	.word	0x00e0	; ????
	...
    1830:	00 00       	nop
    1832:	ff f0       	brie	.+62     	; 0x1872 <__trampolines_end+0x14fa>
	...
    183c:	ff e0       	ldi	r31, 0x0F	; 15
    183e:	00 03       	mulsu	r16, r16
    1840:	ff 80       	ldd	r15, Y+7	; 0x07
    1842:	00 00       	nop
    1844:	ff e0       	ldi	r31, 0x0F	; 15
    1846:	00 00       	nop
    1848:	3f f8       	.word	0xf83f	; ????
    184a:	00 ff       	sbrs	r16, 0
    184c:	e0 00       	.word	0x00e0	; ????
    184e:	00 00       	nop
    1850:	00 00       	nop
    1852:	00 ff       	sbrs	r16, 0
    1854:	e0 00       	.word	0x00e0	; ????
	...
    1862:	00 00       	nop
    1864:	7f f0       	brie	.+30     	; 0x1884 <__trampolines_end+0x150c>
	...
    186e:	ff e0       	ldi	r31, 0x0F	; 15
    1870:	00 03       	mulsu	r16, r16
    1872:	ff 80       	ldd	r15, Y+7	; 0x07
    1874:	00 00       	nop
    1876:	ff e0       	ldi	r31, 0x0F	; 15
    1878:	00 00       	nop
    187a:	3f f8       	.word	0xf83f	; ????
    187c:	00 ff       	sbrs	r16, 0
    187e:	f0 00       	.word	0x00f0	; ????
    1880:	00 00       	nop
    1882:	00 00       	nop
    1884:	00 ff       	sbrs	r16, 0
    1886:	f0 00       	.word	0x00f0	; ????
	...
    1894:	00 00       	nop
    1896:	3f f8       	.word	0xf83f	; ????
	...
    18a0:	ff e0       	ldi	r31, 0x0F	; 15
    18a2:	00 03       	mulsu	r16, r16
    18a4:	ff 80       	ldd	r15, Y+7	; 0x07
    18a6:	00 00       	nop
    18a8:	ff e0       	ldi	r31, 0x0F	; 15
    18aa:	00 00       	nop
    18ac:	3f f8       	.word	0xf83f	; ????
    18ae:	00 7f       	andi	r16, 0xF0	; 240
    18b0:	f0 00       	.word	0x00f0	; ????
    18b2:	00 00       	nop
    18b4:	00 00       	nop
    18b6:	00 7f       	andi	r16, 0xF0	; 240
    18b8:	f0 00       	.word	0x00f0	; ????
	...
    18c6:	00 00       	nop
    18c8:	3f f8       	.word	0xf83f	; ????
	...
    18d2:	ff e0       	ldi	r31, 0x0F	; 15
    18d4:	00 03       	mulsu	r16, r16
    18d6:	ff 80       	ldd	r15, Y+7	; 0x07
    18d8:	00 00       	nop
    18da:	ff e0       	ldi	r31, 0x0F	; 15
    18dc:	00 00       	nop
    18de:	3f f8       	.word	0xf83f	; ????
    18e0:	00 7f       	andi	r16, 0xF0	; 240
    18e2:	f0 00       	.word	0x00f0	; ????
    18e4:	00 00       	nop
    18e6:	00 00       	nop
    18e8:	00 7f       	andi	r16, 0xF0	; 240
    18ea:	f8 00       	.word	0x00f8	; ????
	...
    18f8:	00 00       	nop
    18fa:	1f fc       	.word	0xfc1f	; ????
	...
    1904:	7f f0       	brie	.+30     	; 0x1924 <__trampolines_end+0x15ac>
    1906:	00 03       	mulsu	r16, r16
    1908:	ff 80       	ldd	r15, Y+7	; 0x07
    190a:	00 00       	nop
    190c:	ff e0       	ldi	r31, 0x0F	; 15
    190e:	00 00       	nop
    1910:	3f f8       	.word	0xf83f	; ????
    1912:	00 7f       	andi	r16, 0xF0	; 240
    1914:	f8 00       	.word	0x00f8	; ????
    1916:	00 00       	nop
    1918:	00 00       	nop
    191a:	00 7f       	andi	r16, 0xF0	; 240
    191c:	f8 00       	.word	0x00f8	; ????
	...
    192a:	00 00       	nop
    192c:	1f fe       	.word	0xfe1f	; ????
	...
    1936:	7f f0       	brie	.+30     	; 0x1956 <__trampolines_end+0x15de>
    1938:	00 03       	mulsu	r16, r16
    193a:	ff 80       	ldd	r15, Y+7	; 0x07
    193c:	00 00       	nop
    193e:	ff e0       	ldi	r31, 0x0F	; 15
    1940:	00 00       	nop
    1942:	3f f8       	.word	0xf83f	; ????
    1944:	00 7f       	andi	r16, 0xF0	; 240
    1946:	fc 00       	.word	0x00fc	; ????
    1948:	00 00       	nop
    194a:	00 00       	nop
    194c:	00 7f       	andi	r16, 0xF0	; 240
    194e:	fc 00       	.word	0x00fc	; ????
	...
    195c:	00 00       	nop
    195e:	0f fe       	.word	0xfe0f	; ????
	...
    1968:	7f f8       	.word	0xf87f	; ????
    196a:	00 03       	mulsu	r16, r16
    196c:	ff 80       	ldd	r15, Y+7	; 0x07
    196e:	00 00       	nop
    1970:	ff e0       	ldi	r31, 0x0F	; 15
    1972:	00 00       	nop
    1974:	3f f8       	.word	0xf83f	; ????
    1976:	00 3f       	cpi	r16, 0xF0	; 240
    1978:	fc 00       	.word	0x00fc	; ????
    197a:	00 00       	nop
    197c:	ff f0       	brie	.+62     	; 0x19bc <__trampolines_end+0x1644>
    197e:	00 3f       	cpi	r16, 0xF0	; 240
    1980:	fc 00       	.word	0x00fc	; ????
    1982:	00 00       	nop
    1984:	7f f8       	.word	0xf87f	; ????
	...
    198e:	00 00       	nop
    1990:	07 ff       	sbrs	r16, 7
	...
    199a:	7f f8       	.word	0xf87f	; ????
    199c:	00 03       	mulsu	r16, r16
    199e:	ff 80       	ldd	r15, Y+7	; 0x07
    19a0:	00 00       	nop
    19a2:	ff e0       	ldi	r31, 0x0F	; 15
    19a4:	00 00       	nop
    19a6:	3f f8       	.word	0xf83f	; ????
    19a8:	00 3f       	cpi	r16, 0xF0	; 240
    19aa:	fe 00       	.word	0x00fe	; ????
    19ac:	00 01       	movw	r0, r0
    19ae:	ff f0       	brie	.+62     	; 0x19ee <__trampolines_end+0x1676>
    19b0:	00 3f       	cpi	r16, 0xF0	; 240
    19b2:	fe 00       	.word	0x00fe	; ????
    19b4:	00 00       	nop
    19b6:	ff f8       	.word	0xf8ff	; ????
	...
    19c0:	00 00       	nop
    19c2:	07 ff       	sbrs	r16, 7
    19c4:	80 00       	.word	0x0080	; ????
    19c6:	00 00       	nop
    19c8:	00 00       	nop
    19ca:	00 00       	nop
    19cc:	7f fc       	.word	0xfc7f	; ????
    19ce:	00 03       	mulsu	r16, r16
    19d0:	ff 80       	ldd	r15, Y+7	; 0x07
    19d2:	00 00       	nop
    19d4:	ff e0       	ldi	r31, 0x0F	; 15
    19d6:	00 00       	nop
    19d8:	3f f8       	.word	0xf83f	; ????
    19da:	00 1f       	adc	r16, r16
    19dc:	ff 00       	.word	0x00ff	; ????
    19de:	00 03       	mulsu	r16, r16
    19e0:	ff e0       	ldi	r31, 0x0F	; 15
    19e2:	00 1f       	adc	r16, r16
    19e4:	ff 00       	.word	0x00ff	; ????
    19e6:	00 01       	movw	r0, r0
    19e8:	ff f0       	brie	.+62     	; 0x1a28 <__trampolines_end+0x16b0>
	...
    19f2:	00 00       	nop
    19f4:	03 ff       	sbrs	r16, 3
    19f6:	80 00       	.word	0x0080	; ????
    19f8:	00 00       	nop
    19fa:	00 00       	nop
    19fc:	00 00       	nop
    19fe:	3f fe       	.word	0xfe3f	; ????
    1a00:	00 03       	mulsu	r16, r16
    1a02:	ff 80       	ldd	r15, Y+7	; 0x07
    1a04:	00 00       	nop
    1a06:	ff e0       	ldi	r31, 0x0F	; 15
    1a08:	00 00       	nop
    1a0a:	3f f8       	.word	0xf83f	; ????
    1a0c:	00 1f       	adc	r16, r16
    1a0e:	ff 80       	ldd	r15, Y+7	; 0x07
    1a10:	00 07       	cpc	r16, r16
    1a12:	ff e0       	ldi	r31, 0x0F	; 15
    1a14:	00 1f       	adc	r16, r16
    1a16:	ff 80       	ldd	r15, Y+7	; 0x07
    1a18:	00 03       	mulsu	r16, r16
    1a1a:	ff f0       	brie	.+62     	; 0x1a5a <__trampolines_end+0x16e2>
	...
    1a24:	00 00       	nop
    1a26:	01 ff       	sbrs	r16, 1
    1a28:	c0 00       	.word	0x00c0	; ????
    1a2a:	00 00       	nop
    1a2c:	00 00       	nop
    1a2e:	00 00       	nop
    1a30:	3f ff       	.word	0xff3f	; ????
    1a32:	e0 03       	fmuls	r22, r16
    1a34:	ff 80       	ldd	r15, Y+7	; 0x07
    1a36:	00 00       	nop
    1a38:	ff e0       	ldi	r31, 0x0F	; 15
    1a3a:	00 00       	nop
    1a3c:	3f f8       	.word	0xf83f	; ????
    1a3e:	00 0f       	add	r16, r16
    1a40:	ff e0       	ldi	r31, 0x0F	; 15
    1a42:	00 1f       	adc	r16, r16
    1a44:	ff e0       	ldi	r31, 0x0F	; 15
    1a46:	00 0f       	add	r16, r16
    1a48:	ff e0       	ldi	r31, 0x0F	; 15
    1a4a:	00 0f       	add	r16, r16
    1a4c:	ff e0       	ldi	r31, 0x0F	; 15
	...
    1a56:	00 00       	nop
    1a58:	01 ff       	sbrs	r16, 1
    1a5a:	e0 00       	.word	0x00e0	; ????
    1a5c:	00 00       	nop
    1a5e:	00 00       	nop
    1a60:	00 00       	nop
    1a62:	1f ff       	.word	0xff1f	; ????
    1a64:	e0 03       	fmuls	r22, r16
    1a66:	ff 80       	ldd	r15, Y+7	; 0x07
    1a68:	00 00       	nop
    1a6a:	ff e0       	ldi	r31, 0x0F	; 15
    1a6c:	00 00       	nop
    1a6e:	3f f8       	.word	0xf83f	; ????
    1a70:	00 0f       	add	r16, r16
    1a72:	ff f0       	brie	.+62     	; 0x1ab2 <__trampolines_end+0x173a>
    1a74:	00 7f       	andi	r16, 0xF0	; 240
    1a76:	ff c0       	rjmp	.+510    	; 0x1c76 <__trampolines_end+0x18fe>
    1a78:	00 07       	cpc	r16, r16
    1a7a:	ff f0       	brie	.+62     	; 0x1aba <__trampolines_end+0x1742>
    1a7c:	00 1f       	adc	r16, r16
    1a7e:	ff e0       	ldi	r31, 0x0F	; 15
	...
    1a88:	00 00       	nop
    1a8a:	00 ff       	sbrs	r16, 0
    1a8c:	e0 00       	.word	0x00e0	; ????
    1a8e:	00 00       	nop
    1a90:	00 00       	nop
    1a92:	00 00       	nop
    1a94:	1f ff       	.word	0xff1f	; ????
    1a96:	e0 03       	fmuls	r22, r16
    1a98:	ff 80       	ldd	r15, Y+7	; 0x07
    1a9a:	00 00       	nop
    1a9c:	ff e0       	ldi	r31, 0x0F	; 15
    1a9e:	00 00       	nop
    1aa0:	3f f8       	.word	0xf83f	; ????
    1aa2:	00 07       	cpc	r16, r16
    1aa4:	ff ff       	.word	0xffff	; ????
    1aa6:	07 ff       	sbrs	r16, 7
    1aa8:	ff 80       	ldd	r15, Y+7	; 0x07
    1aaa:	00 07       	cpc	r16, r16
    1aac:	ff ff       	.word	0xffff	; ????
    1aae:	01 ff       	sbrs	r16, 1
    1ab0:	ff c0       	rjmp	.+510    	; 0x1cb0 <__trampolines_end+0x1938>
	...
    1aba:	00 00       	nop
    1abc:	00 7f       	andi	r16, 0xF0	; 240
    1abe:	f0 00       	.word	0x00f0	; ????
    1ac0:	00 00       	nop
    1ac2:	00 00       	nop
    1ac4:	00 00       	nop
    1ac6:	1f ff       	.word	0xff1f	; ????
    1ac8:	e0 03       	fmuls	r22, r16
    1aca:	ff 80       	ldd	r15, Y+7	; 0x07
    1acc:	00 00       	nop
    1ace:	ff e0       	ldi	r31, 0x0F	; 15
    1ad0:	00 00       	nop
    1ad2:	3f f8       	.word	0xf83f	; ????
    1ad4:	00 03       	mulsu	r16, r16
    1ad6:	ff ff       	.word	0xffff	; ????
    1ad8:	ff ff       	.word	0xffff	; ????
    1ada:	ff 00       	.word	0x00ff	; ????
    1adc:	00 03       	mulsu	r16, r16
    1ade:	ff ff       	.word	0xffff	; ????
    1ae0:	ff ff       	.word	0xffff	; ????
    1ae2:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    1aec:	00 00       	nop
    1aee:	00 7f       	andi	r16, 0xF0	; 240
    1af0:	f8 00       	.word	0x00f8	; ????
    1af2:	00 00       	nop
    1af4:	00 00       	nop
    1af6:	00 00       	nop
    1af8:	0f ff       	.word	0xff0f	; ????
    1afa:	e0 03       	fmuls	r22, r16
    1afc:	ff 80       	ldd	r15, Y+7	; 0x07
    1afe:	00 00       	nop
    1b00:	ff e0       	ldi	r31, 0x0F	; 15
    1b02:	00 00       	nop
    1b04:	3f f8       	.word	0xf83f	; ????
    1b06:	00 03       	mulsu	r16, r16
    1b08:	ff ff       	.word	0xffff	; ????
    1b0a:	ff ff       	.word	0xffff	; ????
    1b0c:	ff 00       	.word	0x00ff	; ????
    1b0e:	00 01       	movw	r0, r0
    1b10:	ff ff       	.word	0xffff	; ????
    1b12:	ff ff       	.word	0xffff	; ????
    1b14:	ff 00       	.word	0x00ff	; ????
	...
    1b1e:	00 00       	nop
    1b20:	00 3f       	cpi	r16, 0xF0	; 240
    1b22:	fc 00       	.word	0x00fc	; ????
    1b24:	00 00       	nop
    1b26:	00 00       	nop
    1b28:	00 00       	nop
    1b2a:	07 ff       	sbrs	r16, 7
    1b2c:	e0 03       	fmuls	r22, r16
    1b2e:	ff 80       	ldd	r15, Y+7	; 0x07
    1b30:	00 00       	nop
    1b32:	ff e0       	ldi	r31, 0x0F	; 15
    1b34:	00 00       	nop
    1b36:	3f f8       	.word	0xf83f	; ????
    1b38:	00 01       	movw	r0, r0
    1b3a:	ff ff       	.word	0xffff	; ????
    1b3c:	ff ff       	.word	0xffff	; ????
    1b3e:	fe 00       	.word	0x00fe	; ????
    1b40:	00 00       	nop
    1b42:	ff ff       	.word	0xffff	; ????
    1b44:	ff ff       	.word	0xffff	; ????
    1b46:	ff 00       	.word	0x00ff	; ????
	...
    1b50:	00 00       	nop
    1b52:	00 1f       	adc	r16, r16
    1b54:	fc 00       	.word	0x00fc	; ????
    1b56:	00 00       	nop
    1b58:	00 00       	nop
    1b5a:	00 00       	nop
    1b5c:	03 ff       	sbrs	r16, 3
    1b5e:	e0 03       	fmuls	r22, r16
    1b60:	ff 80       	ldd	r15, Y+7	; 0x07
    1b62:	00 00       	nop
    1b64:	ff e0       	ldi	r31, 0x0F	; 15
    1b66:	00 00       	nop
    1b68:	3f f8       	.word	0xf83f	; ????
    1b6a:	00 00       	nop
    1b6c:	7f ff       	.word	0xff7f	; ????
    1b6e:	ff ff       	.word	0xffff	; ????
    1b70:	fc 00       	.word	0x00fc	; ????
    1b72:	00 00       	nop
    1b74:	7f ff       	.word	0xff7f	; ????
    1b76:	ff ff       	.word	0xffff	; ????
    1b78:	fc 00       	.word	0x00fc	; ????
	...
    1b82:	00 00       	nop
    1b84:	00 ff       	sbrs	r16, 0
    1b86:	fe 00       	.word	0x00fe	; ????
    1b88:	00 00       	nop
    1b8a:	00 00       	nop
    1b8c:	00 00       	nop
    1b8e:	01 ff       	sbrs	r16, 1
    1b90:	e0 03       	fmuls	r22, r16
    1b92:	ff 80       	ldd	r15, Y+7	; 0x07
    1b94:	00 00       	nop
    1b96:	ff e0       	ldi	r31, 0x0F	; 15
    1b98:	00 00       	nop
    1b9a:	3f f8       	.word	0xf83f	; ????
    1b9c:	00 00       	nop
    1b9e:	3f ff       	.word	0xff3f	; ????
    1ba0:	ff ff       	.word	0xffff	; ????
    1ba2:	f0 00       	.word	0x00f0	; ????
    1ba4:	00 00       	nop
    1ba6:	3f ff       	.word	0xff3f	; ????
    1ba8:	ff ff       	.word	0xffff	; ????
    1baa:	f8 00       	.word	0x00f8	; ????
	...
    1bb4:	00 00       	nop
    1bb6:	03 ff       	sbrs	r16, 3
    1bb8:	ff 00       	.word	0x00ff	; ????
    1bba:	00 00       	nop
    1bbc:	00 00       	nop
    1bbe:	00 00       	nop
    1bc0:	00 ff       	sbrs	r16, 0
    1bc2:	e0 03       	fmuls	r22, r16
    1bc4:	ff 80       	ldd	r15, Y+7	; 0x07
    1bc6:	00 00       	nop
    1bc8:	ff e0       	ldi	r31, 0x0F	; 15
    1bca:	00 00       	nop
    1bcc:	3f f8       	.word	0xf83f	; ????
    1bce:	00 00       	nop
    1bd0:	1f ff       	.word	0xff1f	; ????
    1bd2:	ff ff       	.word	0xffff	; ????
    1bd4:	e0 00       	.word	0x00e0	; ????
    1bd6:	00 00       	nop
    1bd8:	1f ff       	.word	0xff1f	; ????
    1bda:	ff ff       	.word	0xffff	; ????
    1bdc:	f0 00       	.word	0x00f0	; ????
	...
    1be6:	00 00       	nop
    1be8:	0f f7       	brid	.-62     	; 0x1bac <__trampolines_end+0x1834>
    1bea:	ff 80       	ldd	r15, Y+7	; 0x07
    1bec:	00 00       	nop
    1bee:	00 00       	nop
    1bf0:	00 00       	nop
    1bf2:	00 3f       	cpi	r16, 0xF0	; 240
    1bf4:	e0 03       	fmuls	r22, r16
    1bf6:	ff 80       	ldd	r15, Y+7	; 0x07
    1bf8:	00 00       	nop
    1bfa:	ff e0       	ldi	r31, 0x0F	; 15
    1bfc:	00 00       	nop
    1bfe:	3f f8       	.word	0xf83f	; ????
    1c00:	00 00       	nop
    1c02:	07 ff       	sbrs	r16, 7
    1c04:	ff ff       	.word	0xffff	; ????
    1c06:	80 00       	.word	0x0080	; ????
    1c08:	00 00       	nop
    1c0a:	07 ff       	sbrs	r16, 7
    1c0c:	ff ff       	.word	0xffff	; ????
    1c0e:	c0 00       	.word	0x00c0	; ????
	...
    1c18:	00 00       	nop
    1c1a:	1f e3       	ldi	r17, 0x3F	; 63
    1c1c:	ff 80       	ldd	r15, Y+7	; 0x07
    1c1e:	00 00       	nop
    1c20:	00 00       	nop
    1c22:	00 00       	nop
    1c24:	00 0f       	add	r16, r16
    1c26:	e0 03       	fmuls	r22, r16
    1c28:	ff 80       	ldd	r15, Y+7	; 0x07
    1c2a:	00 00       	nop
    1c2c:	ff e0       	ldi	r31, 0x0F	; 15
    1c2e:	00 00       	nop
    1c30:	3f f8       	.word	0xf83f	; ????
    1c32:	00 00       	nop
    1c34:	03 ff       	sbrs	r16, 3
    1c36:	ff ff       	.word	0xffff	; ????
    1c38:	00 00       	nop
    1c3a:	00 00       	nop
    1c3c:	01 ff       	sbrs	r16, 1
    1c3e:	ff ff       	.word	0xffff	; ????
	...
    1c4c:	7f 81       	ldd	r23, Y+7	; 0x07
    1c4e:	ff c0       	rjmp	.+510    	; 0x1e4e <__trampolines_end+0x1ad6>
	...
    1c64:	00 00       	nop
    1c66:	00 7f       	andi	r16, 0xF0	; 240
    1c68:	ff f8       	.word	0xf8ff	; ????
    1c6a:	00 00       	nop
    1c6c:	00 00       	nop
    1c6e:	00 3f       	cpi	r16, 0xF0	; 240
    1c70:	ff f8       	.word	0xf8ff	; ????
	...
    1c7a:	00 00       	nop
    1c7c:	00 01       	movw	r0, r0
    1c7e:	fe 00       	.word	0x00fe	; ????
    1c80:	ff e0       	ldi	r31, 0x0F	; 15
	...
    1c96:	00 00       	nop
    1c98:	00 07       	cpc	r16, r16
    1c9a:	ff 80       	ldd	r15, Y+7	; 0x07
    1c9c:	00 00       	nop
    1c9e:	00 00       	nop
    1ca0:	00 03       	mulsu	r16, r16
    1ca2:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    1cac:	00 00       	nop
    1cae:	00 03       	mulsu	r16, r16
    1cb0:	fc 00       	.word	0x00fc	; ????
    1cb2:	ff f0       	brie	.+62     	; 0x1cf2 <__trampolines_end+0x197a>
	...
    1ce0:	00 0f       	add	r16, r16
    1ce2:	f8 00       	.word	0x00f8	; ????
    1ce4:	7f f8       	.word	0xf87f	; ????
	...
    1d12:	00 1f       	adc	r16, r16
    1d14:	e0 00       	.word	0x00e0	; ????
    1d16:	3f fc       	.word	0xfc3f	; ????
	...
    1d44:	00 3f       	cpi	r16, 0xF0	; 240
    1d46:	c0 00       	.word	0x00c0	; ????
    1d48:	1f fe       	.word	0xfe1f	; ????
	...
    1d76:	00 7f       	andi	r16, 0xF0	; 240
    1d78:	80 00       	.word	0x0080	; ????
    1d7a:	0f ff       	.word	0xff0f	; ????
	...
    1da8:	00 ff       	sbrs	r16, 0
    1daa:	00 00       	nop
    1dac:	07 ff       	sbrs	r16, 7
    1dae:	80 00       	.word	0x0080	; ????
	...
    1dd8:	00 00       	nop
    1dda:	01 fe       	sbrs	r0, 1
    1ddc:	00 00       	nop
    1dde:	03 ff       	sbrs	r16, 3
    1de0:	c0 00       	.word	0x00c0	; ????
	...
    1e0a:	00 00       	nop
    1e0c:	03 fc       	sbrc	r0, 3
    1e0e:	00 00       	nop
    1e10:	03 ff       	sbrs	r16, 3
    1e12:	e0 00       	.word	0x00e0	; ????
	...
    1e3c:	00 00       	nop
    1e3e:	07 fc       	sbrc	r0, 7
    1e40:	00 00       	nop
    1e42:	01 ff       	sbrs	r16, 1
    1e44:	e0 00       	.word	0x00e0	; ????
	...
    1e6e:	00 00       	nop
    1e70:	0f f8       	.word	0xf80f	; ????
    1e72:	00 00       	nop
    1e74:	00 ff       	sbrs	r16, 0
    1e76:	f0 00       	.word	0x00f0	; ????
	...
    1ea0:	00 00       	nop
    1ea2:	1f f0       	brie	.+6      	; 0x1eaa <__trampolines_end+0x1b32>
    1ea4:	00 00       	nop
    1ea6:	00 7f       	andi	r16, 0xF0	; 240
    1ea8:	f8 00       	.word	0x00f8	; ????
	...
    1ed2:	00 00       	nop
    1ed4:	1f f0       	brie	.+6      	; 0x1edc <__trampolines_end+0x1b64>
    1ed6:	00 00       	nop
    1ed8:	00 3f       	cpi	r16, 0xF0	; 240
    1eda:	fc 00       	.word	0x00fc	; ????
	...
    1f04:	00 00       	nop
    1f06:	3f e0       	ldi	r19, 0x0F	; 15
    1f08:	00 00       	nop
    1f0a:	00 1f       	adc	r16, r16
    1f0c:	fe 00       	.word	0x00fe	; ????
	...
    1f36:	00 00       	nop
    1f38:	7f e0       	ldi	r23, 0x0F	; 15
    1f3a:	00 00       	nop
    1f3c:	00 0f       	add	r16, r16
    1f3e:	ff 00       	.word	0x00ff	; ????
	...
    1f68:	00 00       	nop
    1f6a:	7f c0       	rjmp	.+254    	; 0x206a <__trampolines_end+0x1cf2>
    1f6c:	00 00       	nop
    1f6e:	00 07       	cpc	r16, r16
    1f70:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    1f9a:	00 00       	nop
    1f9c:	ff c0       	rjmp	.+510    	; 0x219c <__trampolines_end+0x1e24>
    1f9e:	00 00       	nop
    1fa0:	00 03       	mulsu	r16, r16
    1fa2:	ff e0       	ldi	r31, 0x0F	; 15
	...
    1fb0:	00 00       	nop
    1fb2:	00 80       	ld	r0, Z
	...
    1fcc:	00 00       	nop
    1fce:	ff c0       	rjmp	.+510    	; 0x21ce <__trampolines_end+0x1e56>
    1fd0:	00 00       	nop
    1fd2:	00 01       	movw	r0, r0
    1fd4:	ff f0       	brie	.+62     	; 0x2014 <__trampolines_end+0x1c9c>
	...
    1fe2:	00 00       	nop
    1fe4:	00 40       	sbci	r16, 0x00	; 0
	...
    1ffe:	00 00       	nop
    2000:	ff c0       	rjmp	.+510    	; 0x2200 <__trampolines_end+0x1e88>
    2002:	00 00       	nop
    2004:	00 00       	nop
    2006:	ff f8       	.word	0xf8ff	; ????
	...
    2014:	00 00       	nop
    2016:	00 10       	cpse	r0, r0
	...
    2030:	00 00       	nop
    2032:	ff 80       	ldd	r15, Y+7	; 0x07
    2034:	00 00       	nop
    2036:	00 00       	nop
    2038:	7f fc       	.word	0xfc7f	; ????
	...
    2046:	00 00       	nop
    2048:	00 08       	sbc	r0, r0
	...
    2062:	00 01       	movw	r0, r0
    2064:	ff 80       	ldd	r15, Y+7	; 0x07
    2066:	00 00       	nop
    2068:	00 00       	nop
    206a:	3f fe       	.word	0xfe3f	; ????
	...
    2078:	00 00       	nop
    207a:	00 04       	cpc	r0, r0
	...
    2094:	00 01       	movw	r0, r0
    2096:	ff 80       	ldd	r15, Y+7	; 0x07
    2098:	00 00       	nop
    209a:	00 00       	nop
    209c:	0f ff       	.word	0xff0f	; ????
	...
    20aa:	00 00       	nop
    20ac:	00 02       	muls	r16, r16
	...
    20c6:	00 01       	movw	r0, r0
    20c8:	ff 80       	ldd	r15, Y+7	; 0x07
    20ca:	00 00       	nop
    20cc:	00 00       	nop
    20ce:	07 ff       	sbrs	r16, 7
    20d0:	80 00       	.word	0x0080	; ????
	...
    20de:	00 01       	movw	r0, r0
	...
    20f8:	00 01       	movw	r0, r0
    20fa:	ff 80       	ldd	r15, Y+7	; 0x07
    20fc:	00 00       	nop
    20fe:	00 00       	nop
    2100:	03 ff       	sbrs	r16, 3
    2102:	e0 00       	.word	0x00e0	; ????
	...
    2110:	00 01       	movw	r0, r0
    2112:	80 00       	.word	0x0080	; ????
	...
    2128:	00 00       	nop
    212a:	00 01       	movw	r0, r0
    212c:	ff c0       	rjmp	.+510    	; 0x232c <__trampolines_end+0x1fb4>
    212e:	00 00       	nop
    2130:	00 00       	nop
    2132:	01 ff       	sbrs	r16, 1
    2134:	f0 00       	.word	0x00f0	; ????
	...
    2142:	00 00       	nop
    2144:	c0 00       	.word	0x00c0	; ????
	...
    215a:	00 00       	nop
    215c:	00 01       	movw	r0, r0
    215e:	ff c0       	rjmp	.+510    	; 0x235e <__trampolines_end+0x1fe6>
    2160:	00 00       	nop
    2162:	00 00       	nop
    2164:	00 ff       	sbrs	r16, 0
    2166:	f8 00       	.word	0x00f8	; ????
	...
    2174:	00 00       	nop
    2176:	60 00       	.word	0x0060	; ????
	...
    218c:	00 00       	nop
    218e:	00 01       	movw	r0, r0
    2190:	ff c0       	rjmp	.+510    	; 0x2390 <__trampolines_end+0x2018>
    2192:	00 00       	nop
    2194:	00 00       	nop
    2196:	00 7f       	andi	r16, 0xF0	; 240
    2198:	fc 00       	.word	0x00fc	; ????
	...
    21a6:	00 00       	nop
    21a8:	60 00       	.word	0x0060	; ????
	...
    21c2:	ff c0       	rjmp	.+510    	; 0x23c2 <__trampolines_end+0x204a>
    21c4:	00 00       	nop
    21c6:	00 00       	nop
    21c8:	00 1f       	adc	r16, r16
    21ca:	ff 00       	.word	0x00ff	; ????
	...
    21d8:	00 00       	nop
    21da:	30 00       	.word	0x0030	; ????
	...
    21f4:	ff e0       	ldi	r31, 0x0F	; 15
    21f6:	00 00       	nop
    21f8:	00 00       	nop
    21fa:	00 0f       	add	r16, r16
    21fc:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    220a:	00 00       	nop
    220c:	18 00       	.word	0x0018	; ????
	...
    2226:	ff e0       	ldi	r31, 0x0F	; 15
    2228:	00 00       	nop
    222a:	00 00       	nop
    222c:	00 07       	cpc	r16, r16
    222e:	ff c0       	rjmp	.+510    	; 0x242e <__trampolines_end+0x20b6>
	...
    223c:	00 00       	nop
    223e:	18 00       	.word	0x0018	; ????
	...
    2258:	7f f0       	brie	.+30     	; 0x2278 <__trampolines_end+0x1f00>
    225a:	00 00       	nop
    225c:	00 00       	nop
    225e:	00 01       	movw	r0, r0
    2260:	ff f0       	brie	.+62     	; 0x22a0 <__trampolines_end+0x1f28>
	...
    226e:	00 00       	nop
    2270:	1c 00       	.word	0x001c	; ????
	...
    228a:	7f f0       	brie	.+30     	; 0x22aa <__trampolines_end+0x1f32>
    228c:	00 00       	nop
    228e:	00 00       	nop
    2290:	00 00       	nop
    2292:	ff f8       	.word	0xf8ff	; ????
	...
    22a0:	00 00       	nop
    22a2:	0c 00       	.word	0x000c	; ????
	...
    22bc:	7f f8       	.word	0xf87f	; ????
    22be:	00 00       	nop
    22c0:	00 00       	nop
    22c2:	00 00       	nop
    22c4:	7f fc       	.word	0xfc7f	; ????
	...
    22d2:	00 00       	nop
    22d4:	0e 00       	.word	0x000e	; ????
	...
    22ee:	3f fc       	.word	0xfc3f	; ????
    22f0:	00 00       	nop
    22f2:	00 00       	nop
    22f4:	00 00       	nop
    22f6:	1f ff       	.word	0xff1f	; ????
	...
    2304:	00 00       	nop
    2306:	06 00       	.word	0x0006	; ????
	...
    2320:	1f fc       	.word	0xfc1f	; ????
    2322:	00 00       	nop
    2324:	00 00       	nop
    2326:	00 00       	nop
    2328:	0f ff       	.word	0xff0f	; ????
    232a:	80 00       	.word	0x0080	; ????
	...
    2338:	06 00       	.word	0x0006	; ????
	...
    2352:	1f fe       	.word	0xfe1f	; ????
    2354:	00 00       	nop
    2356:	00 00       	nop
    2358:	00 00       	nop
    235a:	07 ff       	sbrs	r16, 7
    235c:	e0 00       	.word	0x00e0	; ????
	...
    236a:	07 00       	.word	0x0007	; ????
	...
    2384:	0f ff       	.word	0xff0f	; ????
    2386:	00 00       	nop
    2388:	00 00       	nop
    238a:	00 00       	nop
    238c:	01 ff       	sbrs	r16, 1
    238e:	f8 00       	.word	0x00f8	; ????
	...
    239c:	03 00       	.word	0x0003	; ????
	...
    23b6:	07 ff       	sbrs	r16, 7
    23b8:	80 00       	.word	0x0080	; ????
    23ba:	00 00       	nop
    23bc:	00 00       	nop
    23be:	00 ff       	sbrs	r16, 0
    23c0:	fc 00       	.word	0x00fc	; ????
	...
    23ce:	03 00       	.word	0x0003	; ????
	...
    23e8:	03 ff       	sbrs	r16, 3
    23ea:	c0 00       	.word	0x00c0	; ????
    23ec:	00 00       	nop
    23ee:	00 00       	nop
    23f0:	00 3f       	cpi	r16, 0xF0	; 240
    23f2:	ff 00       	.word	0x00ff	; ????
	...
    2400:	03 80       	ldd	r0, Z+3	; 0x03
	...
    241a:	03 ff       	sbrs	r16, 3
    241c:	e0 00       	.word	0x00e0	; ????
    241e:	00 00       	nop
    2420:	00 00       	nop
    2422:	00 1f       	adc	r16, r16
    2424:	ff c0       	rjmp	.+510    	; 0x2624 <__trampolines_end+0x22ac>
	...
    2432:	03 80       	ldd	r0, Z+3	; 0x03
	...
    244c:	01 ff       	sbrs	r16, 1
    244e:	f0 00       	.word	0x00f0	; ????
    2450:	00 00       	nop
    2452:	00 00       	nop
    2454:	00 07       	cpc	r16, r16
    2456:	ff e0       	ldi	r31, 0x0F	; 15
	...
    2464:	03 80       	ldd	r0, Z+3	; 0x03
	...
    247e:	00 ff       	sbrs	r16, 0
    2480:	fc 00       	.word	0x00fc	; ????
    2482:	00 00       	nop
    2484:	00 00       	nop
    2486:	00 01       	movw	r0, r0
    2488:	ff f8       	.word	0xf8ff	; ????
	...
    2496:	03 80       	ldd	r0, Z+3	; 0x03
	...
    24b0:	00 7f       	andi	r16, 0xF0	; 240
    24b2:	fe 00       	.word	0x00fe	; ????
    24b4:	00 00       	nop
    24b6:	00 00       	nop
    24b8:	00 00       	nop
    24ba:	ff fe       	.word	0xfeff	; ????
	...
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <__trampolines_end+0x2158>
	...
    24e2:	00 1f       	adc	r16, r16
    24e4:	ff 00       	.word	0x00ff	; ????
    24e6:	00 00       	nop
    24e8:	00 00       	nop
    24ea:	00 00       	nop
    24ec:	3f ff       	.word	0xff3f	; ????
    24ee:	80 00       	.word	0x0080	; ????
	...
    24f8:	00 00       	nop
    24fa:	43 c0       	rjmp	.+134    	; 0x2582 <__trampolines_end+0x220a>
	...
    2514:	00 0f       	add	r16, r16
    2516:	ff c0       	rjmp	.+510    	; 0x2716 <__trampolines_end+0x239e>
    2518:	00 00       	nop
    251a:	00 00       	nop
    251c:	00 00       	nop
    251e:	0f ff       	.word	0xff0f	; ????
    2520:	e0 00       	.word	0x00e0	; ????
	...
    252a:	00 00       	nop
    252c:	83 c0       	rjmp	.+262    	; 0x2634 <__trampolines_end+0x22bc>
	...
    2546:	00 07       	cpc	r16, r16
    2548:	ff e0       	ldi	r31, 0x0F	; 15
    254a:	00 00       	nop
    254c:	00 00       	nop
    254e:	00 00       	nop
    2550:	07 ff       	sbrs	r16, 7
    2552:	f8 00       	.word	0x00f8	; ????
	...
    255c:	00 01       	movw	r0, r0
    255e:	03 c0       	rjmp	.+6      	; 0x2566 <__trampolines_end+0x21ee>
	...
    2578:	00 01       	movw	r0, r0
    257a:	ff f8       	.word	0xf8ff	; ????
    257c:	00 00       	nop
    257e:	00 00       	nop
    2580:	00 00       	nop
    2582:	01 ff       	sbrs	r16, 1
    2584:	fe 00       	.word	0x00fe	; ????
	...
    258e:	00 02       	muls	r16, r16
    2590:	03 c0       	rjmp	.+6      	; 0x2598 <__trampolines_end+0x2220>
	...
    25aa:	00 00       	nop
    25ac:	ff fe       	.word	0xfeff	; ????
    25ae:	00 00       	nop
    25b0:	00 00       	nop
    25b2:	00 00       	nop
    25b4:	00 7f       	andi	r16, 0xF0	; 240
    25b6:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    25c0:	00 04       	cpc	r0, r0
    25c2:	01 c0       	rjmp	.+2      	; 0x25c6 <__trampolines_end+0x224e>
	...
    25dc:	00 00       	nop
    25de:	3f ff       	.word	0xff3f	; ????
    25e0:	80 00       	.word	0x0080	; ????
    25e2:	00 00       	nop
    25e4:	00 00       	nop
    25e6:	00 1f       	adc	r16, r16
    25e8:	ff f0       	brie	.+62     	; 0x2628 <__trampolines_end+0x22b0>
	...
    25f2:	00 08       	sbc	r0, r0
    25f4:	03 c0       	rjmp	.+6      	; 0x25fc <__trampolines_end+0x2284>
	...
    260e:	00 00       	nop
    2610:	1f ff       	.word	0xff1f	; ????
    2612:	e0 00       	.word	0x00e0	; ????
    2614:	00 00       	nop
    2616:	00 00       	nop
    2618:	00 07       	cpc	r16, r16
    261a:	ff fc       	.word	0xfcff	; ????
	...
    2624:	00 30       	cpi	r16, 0x00	; 0
    2626:	03 c0       	rjmp	.+6      	; 0x262e <__trampolines_end+0x22b6>
	...
    2640:	00 00       	nop
    2642:	07 ff       	sbrs	r16, 7
    2644:	f8 00       	.word	0x00f8	; ????
    2646:	00 00       	nop
    2648:	00 00       	nop
    264a:	00 01       	movw	r0, r0
    264c:	ff ff       	.word	0xffff	; ????
	...
    2656:	00 60       	ori	r16, 0x00	; 0
    2658:	03 c0       	rjmp	.+6      	; 0x2660 <__trampolines_end+0x22e8>
	...
    2672:	00 00       	nop
    2674:	01 ff       	sbrs	r16, 1
    2676:	fe 00       	.word	0x00fe	; ????
    2678:	00 00       	nop
    267a:	00 00       	nop
    267c:	00 00       	nop
    267e:	3f ff       	.word	0xff3f	; ????
    2680:	c0 00       	.word	0x00c0	; ????
    2682:	00 00       	nop
    2684:	00 00       	nop
    2686:	00 00       	nop
    2688:	01 80       	ldd	r0, Z+1	; 0x01
    268a:	03 c0       	rjmp	.+6      	; 0x2692 <__trampolines_end+0x231a>
	...
    26a4:	00 00       	nop
    26a6:	00 7f       	andi	r16, 0xF0	; 240
    26a8:	ff c0       	rjmp	.+510    	; 0x28a8 <__trampolines_end+0x2530>
    26aa:	00 00       	nop
    26ac:	00 00       	nop
    26ae:	00 00       	nop
    26b0:	0f ff       	.word	0xff0f	; ????
    26b2:	fc 00       	.word	0x00fc	; ????
    26b4:	00 00       	nop
    26b6:	00 00       	nop
    26b8:	00 00       	nop
    26ba:	07 00       	.word	0x0007	; ????
    26bc:	03 c0       	rjmp	.+6      	; 0x26c4 <__trampolines_end+0x234c>
	...
    26d6:	00 00       	nop
    26d8:	00 1f       	adc	r16, r16
    26da:	ff f0       	brie	.+62     	; 0x271a <__trampolines_end+0x23a2>
    26dc:	00 00       	nop
    26de:	00 00       	nop
    26e0:	00 00       	nop
    26e2:	03 ff       	sbrs	r16, 3
    26e4:	ff 80       	ldd	r15, Y+7	; 0x07
    26e6:	00 00       	nop
    26e8:	00 00       	nop
    26ea:	00 00       	nop
    26ec:	1e 00       	.word	0x001e	; ????
    26ee:	03 c0       	rjmp	.+6      	; 0x26f6 <__trampolines_end+0x237e>
	...
    2708:	00 00       	nop
    270a:	00 07       	cpc	r16, r16
    270c:	ff fe       	.word	0xfeff	; ????
    270e:	00 00       	nop
    2710:	00 00       	nop
    2712:	00 00       	nop
    2714:	00 7f       	andi	r16, 0xF0	; 240
    2716:	ff f0       	brie	.+62     	; 0x2756 <__trampolines_end+0x23de>
    2718:	00 00       	nop
    271a:	00 00       	nop
    271c:	00 00       	nop
    271e:	f8 00       	.word	0x00f8	; ????
    2720:	03 c0       	rjmp	.+6      	; 0x2728 <__trampolines_end+0x23b0>
	...
    273a:	00 00       	nop
    273c:	00 01       	movw	r0, r0
    273e:	ff ff       	.word	0xffff	; ????
    2740:	c0 00       	.word	0x00c0	; ????
    2742:	00 00       	nop
    2744:	00 00       	nop
    2746:	00 1f       	adc	r16, r16
    2748:	ff ff       	.word	0xffff	; ????
    274a:	00 00       	nop
    274c:	00 00       	nop
    274e:	00 03       	mulsu	r16, r16
    2750:	e0 00       	.word	0x00e0	; ????
    2752:	03 c0       	rjmp	.+6      	; 0x275a <__trampolines_end+0x23e2>
	...
    2770:	3f ff       	.word	0xff3f	; ????
    2772:	f0 00       	.word	0x00f0	; ????
    2774:	00 00       	nop
    2776:	00 00       	nop
    2778:	00 81       	ld	r16, Z
    277a:	ff ff       	.word	0xffff	; ????
    277c:	f0 00       	.word	0x00f0	; ????
    277e:	00 00       	nop
    2780:	00 1f       	adc	r16, r16
    2782:	80 00       	.word	0x0080	; ????
    2784:	07 80       	ldd	r0, Z+7	; 0x07
	...
    27a2:	07 ff       	sbrs	r16, 7
    27a4:	ff 00       	.word	0x00ff	; ????
    27a6:	00 00       	nop
    27a8:	00 00       	nop
    27aa:	00 80       	ld	r0, Z
    27ac:	7f ff       	.word	0xff7f	; ????
    27ae:	ff c0       	rjmp	.+510    	; 0x29ae <__trampolines_end+0x2636>
    27b0:	00 00       	nop
    27b2:	03 fe       	sbrs	r0, 3
    27b4:	00 00       	nop
    27b6:	07 80       	ldd	r0, Z+7	; 0x07
	...
    27d4:	01 ff       	sbrs	r16, 1
    27d6:	ff f0       	brie	.+62     	; 0x2816 <__trampolines_end+0x249e>
    27d8:	00 00       	nop
    27da:	00 00       	nop
    27dc:	00 00       	nop
    27de:	07 ff       	sbrs	r16, 7
    27e0:	ff ff       	.word	0xffff	; ????
    27e2:	c0 01       	movw	r24, r0
    27e4:	fe f8       	.word	0xf8fe	; ????
    27e6:	00 00       	nop
    27e8:	07 80       	ldd	r0, Z+7	; 0x07
	...
    2806:	00 1f       	adc	r16, r16
    2808:	ff ff       	.word	0xffff	; ????
    280a:	00 00       	nop
    280c:	00 00       	nop
    280e:	00 00       	nop
    2810:	00 7f       	andi	r16, 0xF0	; 240
    2812:	ff ff       	.word	0xffff	; ????
    2814:	ff ff       	.word	0xffff	; ????
    2816:	ff c0       	rjmp	.+510    	; 0x2a16 <__trampolines_end+0x269e>
    2818:	00 00       	nop
    281a:	07 80       	ldd	r0, Z+7	; 0x07
	...
    2838:	00 03       	mulsu	r16, r16
    283a:	ff ff       	.word	0xffff	; ????
    283c:	f8 00       	.word	0x00f8	; ????
    283e:	00 00       	nop
    2840:	00 00       	nop
    2842:	00 0f       	add	r16, r16
    2844:	ff ff       	.word	0xffff	; ????
    2846:	ff ff       	.word	0xffff	; ????
    2848:	fe 00       	.word	0x00fe	; ????
    284a:	00 00       	nop
    284c:	0f 80       	ldd	r0, Y+7	; 0x07
	...
    286a:	00 00       	nop
    286c:	3f ff       	.word	0xff3f	; ????
    286e:	ff 80       	ldd	r15, Y+7	; 0x07
    2870:	00 00       	nop
    2872:	01 00       	.word	0x0001	; ????
    2874:	00 00       	nop
    2876:	3f ff       	.word	0xff3f	; ????
    2878:	ff ff       	.word	0xffff	; ????
    287a:	e0 00       	.word	0x00e0	; ????
    287c:	00 00       	nop
    287e:	0f 00       	.word	0x000f	; ????
	...
    289c:	00 00       	nop
    289e:	07 ff       	sbrs	r16, 7
    28a0:	ff ff       	.word	0xffff	; ????
    28a2:	00 00       	nop
    28a4:	01 00       	.word	0x0001	; ????
    28a6:	00 00       	nop
    28a8:	00 3f       	cpi	r16, 0xF0	; 240
    28aa:	ff d1       	rcall	.+1022   	; 0x2caa <__trampolines_end+0x2932>
    28ac:	00 00       	nop
    28ae:	00 00       	nop
    28b0:	0f 00       	.word	0x000f	; ????
	...
    28ce:	00 00       	nop
    28d0:	00 7f       	andi	r16, 0xF0	; 240
    28d2:	ff ff       	.word	0xffff	; ????
    28d4:	fc 00       	.word	0x00fc	; ????
    28d6:	01 00       	.word	0x0001	; ????
    28d8:	00 00       	nop
    28da:	00 01       	movw	r0, r0
    28dc:	ff fc       	.word	0xfcff	; ????
    28de:	00 00       	nop
    28e0:	00 00       	nop
    28e2:	1f 00       	.word	0x001f	; ????
	...
    2900:	00 00       	nop
    2902:	00 01       	movw	r0, r0
    2904:	ff ff       	.word	0xffff	; ????
    2906:	ff ff       	.word	0xffff	; ????
    2908:	01 00       	.word	0x0001	; ????
    290a:	00 00       	nop
    290c:	07 ff       	sbrs	r16, 7
    290e:	ff 00       	.word	0x00ff	; ????
    2910:	00 00       	nop
    2912:	00 00       	nop
    2914:	1f 00       	.word	0x001f	; ????
	...
    2936:	1f ff       	.word	0xff1f	; ????
    2938:	ff ff       	.word	0xffff	; ????
    293a:	ff ff       	.word	0xffff	; ????
    293c:	ff ff       	.word	0xffff	; ????
    293e:	ff ff       	.word	0xffff	; ????
    2940:	e0 00       	.word	0x00e0	; ????
    2942:	00 00       	nop
    2944:	00 00       	nop
    2946:	1e 00       	.word	0x001e	; ????
	...
    2968:	00 3f       	cpi	r16, 0xF0	; 240
    296a:	ff ff       	.word	0xffff	; ????
    296c:	ff ff       	.word	0xffff	; ????
    296e:	ff ff       	.word	0xffff	; ????
    2970:	ff f8       	.word	0xf8ff	; ????
    2972:	00 00       	nop
    2974:	00 00       	nop
    2976:	00 00       	nop
    2978:	3e 00       	.word	0x003e	; ????
	...
    299a:	00 00       	nop
    299c:	1f ff       	.word	0xff1f	; ????
    299e:	ff ff       	.word	0xffff	; ????
    29a0:	ff ff       	.word	0xffff	; ????
    29a2:	f8 00       	.word	0x00f8	; ????
    29a4:	00 00       	nop
    29a6:	00 00       	nop
    29a8:	00 00       	nop
    29aa:	3c 00       	.word	0x003c	; ????
	...
    29cc:	00 00       	nop
    29ce:	00 01       	movw	r0, r0
    29d0:	ff ff       	.word	0xffff	; ????
    29d2:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    29dc:	7c 00       	.word	0x007c	; ????
	...
    2a02:	01 00       	.word	0x0001	; ????
	...
    2a0c:	00 00       	nop
    2a0e:	7c 00       	.word	0x007c	; ????
	...
    2a34:	01 00       	.word	0x0001	; ????
	...
    2a3e:	00 00       	nop
    2a40:	f8 00       	.word	0x00f8	; ????
	...
    2a66:	02 00       	.word	0x0002	; ????
	...
    2a70:	00 00       	nop
    2a72:	f8 00       	.word	0x00f8	; ????
	...
    2a98:	01 00       	.word	0x0001	; ????
	...
    2aa2:	00 01       	movw	r0, r0
    2aa4:	f0 00       	.word	0x00f0	; ????
	...
    2aca:	03 00       	.word	0x0003	; ????
	...
    2ad4:	00 03       	mulsu	r16, r16
    2ad6:	f0 00       	.word	0x00f0	; ????
	...
    2afc:	01 00       	.word	0x0001	; ????
	...
    2b06:	00 03       	mulsu	r16, r16
    2b08:	e0 00       	.word	0x00e0	; ????
	...
    2b2e:	01 00       	.word	0x0001	; ????
	...
    2b38:	00 07       	cpc	r16, r16
    2b3a:	e0 00       	.word	0x00e0	; ????
	...
    2b60:	01 00       	.word	0x0001	; ????
	...
    2b6a:	00 07       	cpc	r16, r16
    2b6c:	c0 00       	.word	0x00c0	; ????
	...
    2b92:	01 00       	.word	0x0001	; ????
	...
    2b9c:	00 0f       	add	r16, r16
    2b9e:	c0 00       	.word	0x00c0	; ????
	...
    2bc4:	01 80       	ldd	r0, Z+1	; 0x01
	...
    2bce:	00 1f       	adc	r16, r16
    2bd0:	80 00       	.word	0x0080	; ????
	...
    2bf6:	01 80       	ldd	r0, Z+1	; 0x01
	...
    2c00:	00 3f       	cpi	r16, 0xF0	; 240
	...
    2c26:	00 00       	nop
    2c28:	00 80       	ld	r0, Z
	...
    2c32:	00 7f       	andi	r16, 0xF0	; 240
	...
    2c58:	00 00       	nop
    2c5a:	00 c0       	rjmp	.+0      	; 0x2c5c <__trampolines_end+0x28e4>
	...
    2c64:	00 7e       	andi	r16, 0xE0	; 224
	...
    2c8a:	00 00       	nop
    2c8c:	00 c0       	rjmp	.+0      	; 0x2c8e <__trampolines_end+0x2916>
	...
    2c96:	00 fc       	sbrc	r0, 0
	...
    2cbc:	00 00       	nop
    2cbe:	00 c0       	rjmp	.+0      	; 0x2cc0 <__trampolines_end+0x2948>
	...
    2cc8:	01 fc       	sbrc	r0, 1
	...
    2cee:	00 00       	nop
    2cf0:	00 60       	ori	r16, 0x00	; 0
	...
    2cfa:	03 f8       	bld	r0, 3
	...
    2d20:	00 00       	nop
    2d22:	00 60       	ori	r16, 0x00	; 0
	...
    2d2c:	07 f0       	brie	.+0      	; 0x2d2e <__trampolines_end+0x29b6>
	...
    2d52:	00 00       	nop
    2d54:	00 70       	andi	r16, 0x00	; 0
	...
    2d5e:	0f e0       	ldi	r16, 0x0F	; 15
	...
    2d84:	00 00       	nop
    2d86:	00 30       	cpi	r16, 0x00	; 0
	...
    2d90:	1f c0       	rjmp	.+62     	; 0x2dd0 <__trampolines_end+0x2a58>
	...
    2db6:	00 00       	nop
    2db8:	00 38       	cpi	r16, 0x80	; 128
	...
    2dc2:	3f 80       	ldd	r3, Y+7	; 0x07
	...
    2de8:	00 00       	nop
    2dea:	00 18       	sub	r0, r0
	...
    2df4:	7f 00       	.word	0x007f	; ????
	...
    2e1a:	00 00       	nop
    2e1c:	00 1c       	adc	r0, r0
	...
    2e26:	fe 00       	.word	0x00fe	; ????
	...
    2e4c:	00 00       	nop
    2e4e:	00 0e       	add	r0, r16
    2e50:	00 00       	nop
    2e52:	00 00       	nop
    2e54:	00 00       	nop
    2e56:	00 01       	movw	r0, r0
    2e58:	fc 00       	.word	0x00fc	; ????
	...
    2e7e:	00 00       	nop
    2e80:	00 0f       	add	r16, r16
    2e82:	00 00       	nop
    2e84:	00 00       	nop
    2e86:	00 00       	nop
    2e88:	00 07       	cpc	r16, r16
    2e8a:	f8 00       	.word	0x00f8	; ????
	...
    2eb0:	00 00       	nop
    2eb2:	00 07       	cpc	r16, r16
    2eb4:	80 00       	.word	0x0080	; ????
    2eb6:	00 00       	nop
    2eb8:	00 00       	nop
    2eba:	00 0f       	add	r16, r16
    2ebc:	f0 00       	.word	0x00f0	; ????
	...
    2ee2:	00 00       	nop
    2ee4:	00 03       	mulsu	r16, r16
    2ee6:	c0 00       	.word	0x00c0	; ????
    2ee8:	00 00       	nop
    2eea:	00 00       	nop
    2eec:	00 1f       	adc	r16, r16
    2eee:	e0 00       	.word	0x00e0	; ????
	...
    2f14:	00 00       	nop
    2f16:	00 01       	movw	r0, r0
    2f18:	e0 00       	.word	0x00e0	; ????
    2f1a:	00 00       	nop
    2f1c:	00 00       	nop
    2f1e:	00 7f       	andi	r16, 0xF0	; 240
    2f20:	c0 00       	.word	0x00c0	; ????
	...
    2f46:	00 00       	nop
    2f48:	00 01       	movw	r0, r0
    2f4a:	f0 00       	.word	0x00f0	; ????
    2f4c:	00 00       	nop
    2f4e:	00 00       	nop
    2f50:	01 ff       	sbrs	r16, 1
    2f52:	80 00       	.word	0x0080	; ????
	...
    2f7c:	f8 00       	.word	0x00f8	; ????
    2f7e:	00 00       	nop
    2f80:	00 00       	nop
    2f82:	03 fe       	sbrs	r0, 3
	...
    2fac:	00 00       	nop
    2fae:	7e 00       	.word	0x007e	; ????
    2fb0:	00 00       	nop
    2fb2:	00 00       	nop
    2fb4:	0f fc       	.word	0xfc0f	; ????
	...
    2fde:	00 00       	nop
    2fe0:	3f 00       	.word	0x003f	; ????
    2fe2:	00 00       	nop
    2fe4:	00 00       	nop
    2fe6:	3f f0       	brie	.+14     	; 0x2ff6 <__trampolines_end+0x2c7e>
	...
    3010:	00 00       	nop
    3012:	1f c0       	rjmp	.+62     	; 0x3052 <__trampolines_end+0x2cda>
    3014:	00 00       	nop
    3016:	00 00       	nop
    3018:	ff e0       	ldi	r31, 0x0F	; 15
	...
    3042:	00 00       	nop
    3044:	07 f0       	brie	.+0      	; 0x3046 <__trampolines_end+0x2cce>
    3046:	00 00       	nop
    3048:	00 07       	cpc	r16, r16
    304a:	ff 80       	ldd	r15, Y+7	; 0x07
	...
    3074:	00 00       	nop
    3076:	03 fc       	sbrc	r0, 3
    3078:	00 00       	nop
    307a:	00 3f       	cpi	r16, 0xF0	; 240
    307c:	fe 00       	.word	0x00fe	; ????
	...
    30a6:	00 00       	nop
    30a8:	00 ff       	sbrs	r16, 0
    30aa:	c0 00       	.word	0x00c0	; ????
    30ac:	03 ff       	sbrs	r16, 3
    30ae:	f8 00       	.word	0x00f8	; ????
	...
    30d8:	00 00       	nop
    30da:	00 7f       	andi	r16, 0xF0	; 240
    30dc:	ff c3       	rjmp	.+2046   	; 0x38dc <adc_disable_clock+0x16>
    30de:	ff ff       	.word	0xffff	; ????
    30e0:	e0 00       	.word	0x00e0	; ????
	...
    310a:	00 00       	nop
    310c:	00 1f       	adc	r16, r16
    310e:	ff ff       	.word	0xffff	; ????
    3110:	ff ff       	.word	0xffff	; ????
	...
    313e:	00 03       	mulsu	r16, r16
    3140:	ff ff       	.word	0xffff	; ????
    3142:	ff fc       	.word	0xfcff	; ????
	...
    3170:	00 00       	nop
    3172:	ff ff       	.word	0xffff	; ????
    3174:	ff c0       	rjmp	.+510    	; 0x3374 <__do_copy_data+0xa>
	...
    31a2:	00 00       	nop
    31a4:	07 ff       	sbrs	r16, 7
    31a6:	f8 00       	.word	0x00f8	; ????
	...

00003258 <__c.2161>:
    3258:	6e 61 6e 00                                         nan.

0000325c <__c.2159>:
    325c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
    326c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
    327c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
    328c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
    329c:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
    32ac:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
    32bc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
    32cc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
    32dc:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
    32ec:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
    32fc:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
    330c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
    331c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
    332c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
    333c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
    334c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000335a <__ctors_end>:
    335a:	11 24       	eor	r1, r1
    335c:	1f be       	out	0x3f, r1	; 63
    335e:	cf ef       	ldi	r28, 0xFF	; 255
    3360:	cd bf       	out	0x3d, r28	; 61
    3362:	df e9       	ldi	r29, 0x9F	; 159
    3364:	de bf       	out	0x3e, r29	; 62
    3366:	00 e0       	ldi	r16, 0x00	; 0
    3368:	0c bf       	out	0x3c, r16	; 60

0000336a <__do_copy_data>:
    336a:	1c e5       	ldi	r17, 0x5C	; 92
    336c:	a0 e0       	ldi	r26, 0x00	; 0
    336e:	b0 e2       	ldi	r27, 0x20	; 32
    3370:	ee ef       	ldi	r30, 0xFE	; 254
    3372:	fb e6       	ldi	r31, 0x6B	; 107
    3374:	00 e0       	ldi	r16, 0x00	; 0
    3376:	0b bf       	out	0x3b, r16	; 59
    3378:	02 c0       	rjmp	.+4      	; 0x337e <__do_copy_data+0x14>
    337a:	07 90       	elpm	r0, Z+
    337c:	0d 92       	st	X+, r0
    337e:	a0 36       	cpi	r26, 0x60	; 96
    3380:	b1 07       	cpc	r27, r17
    3382:	d9 f7       	brne	.-10     	; 0x337a <__do_copy_data+0x10>

00003384 <__do_clear_bss>:
    3384:	2b e8       	ldi	r18, 0x8B	; 139
    3386:	a0 e6       	ldi	r26, 0x60	; 96
    3388:	bc e5       	ldi	r27, 0x5C	; 92
    338a:	01 c0       	rjmp	.+2      	; 0x338e <.do_clear_bss_start>

0000338c <.do_clear_bss_loop>:
    338c:	1d 92       	st	X+, r1

0000338e <.do_clear_bss_start>:
    338e:	a7 39       	cpi	r26, 0x97	; 151
    3390:	b2 07       	cpc	r27, r18
    3392:	e1 f7       	brne	.-8      	; 0x338c <.do_clear_bss_loop>
    3394:	0e 94 2d 2f 	call	0x5e5a	; 0x5e5a <main>
    3398:	0c 94 fd 35 	jmp	0x6bfa	; 0x6bfa <_exit>

0000339c <__bad_interrupt>:
    339c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000033a0 <getLargeCharacterImage>:
    33a0:	99 27       	eor	r25, r25
    33a2:	87 fd       	sbrc	r24, 7
    33a4:	90 95       	com	r25
    33a6:	a9 2f       	mov	r26, r25
    33a8:	b9 2f       	mov	r27, r25
    33aa:	fc 01       	movw	r30, r24
    33ac:	b0 97       	sbiw	r30, 0x20	; 32
    33ae:	ef 35       	cpi	r30, 0x5F	; 95
    33b0:	f1 05       	cpc	r31, r1
    33b2:	08 f0       	brcs	.+2      	; 0x33b6 <getLargeCharacterImage+0x16>
    33b4:	3e c2       	rjmp	.+1148   	; 0x3832 <getLargeCharacterImage+0x492>
    33b6:	e2 50       	subi	r30, 0x02	; 2
    33b8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ba:	0c 94 c3 33 	jmp	0x6786	; 0x6786 <__tablejump2__>
    33be:	82 e0       	ldi	r24, 0x02	; 2
    33c0:	fb 01       	movw	r30, r22
    33c2:	80 83       	st	Z, r24
    33c4:	8f ee       	ldi	r24, 0xEF	; 239
    33c6:	91 e5       	ldi	r25, 0x51	; 81
    33c8:	08 95       	ret
    33ca:	82 e0       	ldi	r24, 0x02	; 2
    33cc:	fb 01       	movw	r30, r22
    33ce:	80 83       	st	Z, r24
    33d0:	89 e9       	ldi	r24, 0x99	; 153
    33d2:	91 e5       	ldi	r25, 0x51	; 81
    33d4:	08 95       	ret
    33d6:	83 e0       	ldi	r24, 0x03	; 3
    33d8:	fb 01       	movw	r30, r22
    33da:	80 83       	st	Z, r24
    33dc:	88 e1       	ldi	r24, 0x18	; 24
    33de:	91 e5       	ldi	r25, 0x51	; 81
    33e0:	08 95       	ret
    33e2:	84 e0       	ldi	r24, 0x04	; 4
    33e4:	fb 01       	movw	r30, r22
    33e6:	80 83       	st	Z, r24
    33e8:	8c e6       	ldi	r24, 0x6C	; 108
    33ea:	90 e5       	ldi	r25, 0x50	; 80
    33ec:	08 95       	ret
    33ee:	83 e0       	ldi	r24, 0x03	; 3
    33f0:	fb 01       	movw	r30, r22
    33f2:	80 83       	st	Z, r24
    33f4:	8b ee       	ldi	r24, 0xEB	; 235
    33f6:	9f e4       	ldi	r25, 0x4F	; 79
    33f8:	08 95       	ret
    33fa:	86 e0       	ldi	r24, 0x06	; 6
    33fc:	fb 01       	movw	r30, r22
    33fe:	80 83       	st	Z, r24
    3400:	89 ee       	ldi	r24, 0xE9	; 233
    3402:	9e e4       	ldi	r25, 0x4E	; 78
    3404:	08 95       	ret
    3406:	84 e0       	ldi	r24, 0x04	; 4
    3408:	fb 01       	movw	r30, r22
    340a:	80 83       	st	Z, r24
    340c:	8d e3       	ldi	r24, 0x3D	; 61
    340e:	9e e4       	ldi	r25, 0x4E	; 78
    3410:	08 95       	ret
    3412:	82 e0       	ldi	r24, 0x02	; 2
    3414:	fb 01       	movw	r30, r22
    3416:	80 83       	st	Z, r24
    3418:	87 ee       	ldi	r24, 0xE7	; 231
    341a:	9d e4       	ldi	r25, 0x4D	; 77
    341c:	08 95       	ret
    341e:	82 e0       	ldi	r24, 0x02	; 2
    3420:	fb 01       	movw	r30, r22
    3422:	80 83       	st	Z, r24
    3424:	81 e9       	ldi	r24, 0x91	; 145
    3426:	9d e4       	ldi	r25, 0x4D	; 77
    3428:	08 95       	ret
    342a:	82 e0       	ldi	r24, 0x02	; 2
    342c:	fb 01       	movw	r30, r22
    342e:	80 83       	st	Z, r24
    3430:	8b e3       	ldi	r24, 0x3B	; 59
    3432:	9d e4       	ldi	r25, 0x4D	; 77
    3434:	08 95       	ret
    3436:	83 e0       	ldi	r24, 0x03	; 3
    3438:	fb 01       	movw	r30, r22
    343a:	80 83       	st	Z, r24
    343c:	8a eb       	ldi	r24, 0xBA	; 186
    343e:	9c e4       	ldi	r25, 0x4C	; 76
    3440:	08 95       	ret
    3442:	84 e0       	ldi	r24, 0x04	; 4
    3444:	fb 01       	movw	r30, r22
    3446:	80 83       	st	Z, r24
    3448:	8e e0       	ldi	r24, 0x0E	; 14
    344a:	9c e4       	ldi	r25, 0x4C	; 76
    344c:	08 95       	ret
    344e:	82 e0       	ldi	r24, 0x02	; 2
    3450:	fb 01       	movw	r30, r22
    3452:	80 83       	st	Z, r24
    3454:	88 eb       	ldi	r24, 0xB8	; 184
    3456:	9b e4       	ldi	r25, 0x4B	; 75
    3458:	08 95       	ret
    345a:	82 e0       	ldi	r24, 0x02	; 2
    345c:	fb 01       	movw	r30, r22
    345e:	80 83       	st	Z, r24
    3460:	82 e6       	ldi	r24, 0x62	; 98
    3462:	9b e4       	ldi	r25, 0x4B	; 75
    3464:	08 95       	ret
    3466:	82 e0       	ldi	r24, 0x02	; 2
    3468:	fb 01       	movw	r30, r22
    346a:	80 83       	st	Z, r24
    346c:	8c e0       	ldi	r24, 0x0C	; 12
    346e:	9b e4       	ldi	r25, 0x4B	; 75
    3470:	08 95       	ret
    3472:	83 e0       	ldi	r24, 0x03	; 3
    3474:	fb 01       	movw	r30, r22
    3476:	80 83       	st	Z, r24
    3478:	8b e8       	ldi	r24, 0x8B	; 139
    347a:	9a e4       	ldi	r25, 0x4A	; 74
    347c:	08 95       	ret
    347e:	83 e0       	ldi	r24, 0x03	; 3
    3480:	fb 01       	movw	r30, r22
    3482:	80 83       	st	Z, r24
    3484:	8a e0       	ldi	r24, 0x0A	; 10
    3486:	9a e4       	ldi	r25, 0x4A	; 74
    3488:	08 95       	ret
    348a:	83 e0       	ldi	r24, 0x03	; 3
    348c:	fb 01       	movw	r30, r22
    348e:	80 83       	st	Z, r24
    3490:	89 e8       	ldi	r24, 0x89	; 137
    3492:	99 e4       	ldi	r25, 0x49	; 73
    3494:	08 95       	ret
    3496:	83 e0       	ldi	r24, 0x03	; 3
    3498:	fb 01       	movw	r30, r22
    349a:	80 83       	st	Z, r24
    349c:	88 e0       	ldi	r24, 0x08	; 8
    349e:	99 e4       	ldi	r25, 0x49	; 73
    34a0:	08 95       	ret
    34a2:	83 e0       	ldi	r24, 0x03	; 3
    34a4:	fb 01       	movw	r30, r22
    34a6:	80 83       	st	Z, r24
    34a8:	87 e8       	ldi	r24, 0x87	; 135
    34aa:	98 e4       	ldi	r25, 0x48	; 72
    34ac:	08 95       	ret
    34ae:	83 e0       	ldi	r24, 0x03	; 3
    34b0:	fb 01       	movw	r30, r22
    34b2:	80 83       	st	Z, r24
    34b4:	86 e0       	ldi	r24, 0x06	; 6
    34b6:	98 e4       	ldi	r25, 0x48	; 72
    34b8:	08 95       	ret
    34ba:	83 e0       	ldi	r24, 0x03	; 3
    34bc:	fb 01       	movw	r30, r22
    34be:	80 83       	st	Z, r24
    34c0:	85 e8       	ldi	r24, 0x85	; 133
    34c2:	97 e4       	ldi	r25, 0x47	; 71
    34c4:	08 95       	ret
    34c6:	83 e0       	ldi	r24, 0x03	; 3
    34c8:	fb 01       	movw	r30, r22
    34ca:	80 83       	st	Z, r24
    34cc:	84 e0       	ldi	r24, 0x04	; 4
    34ce:	97 e4       	ldi	r25, 0x47	; 71
    34d0:	08 95       	ret
    34d2:	83 e0       	ldi	r24, 0x03	; 3
    34d4:	fb 01       	movw	r30, r22
    34d6:	80 83       	st	Z, r24
    34d8:	83 e8       	ldi	r24, 0x83	; 131
    34da:	96 e4       	ldi	r25, 0x46	; 70
    34dc:	08 95       	ret
    34de:	83 e0       	ldi	r24, 0x03	; 3
    34e0:	fb 01       	movw	r30, r22
    34e2:	80 83       	st	Z, r24
    34e4:	82 e0       	ldi	r24, 0x02	; 2
    34e6:	96 e4       	ldi	r25, 0x46	; 70
    34e8:	08 95       	ret
    34ea:	83 e0       	ldi	r24, 0x03	; 3
    34ec:	fb 01       	movw	r30, r22
    34ee:	80 83       	st	Z, r24
    34f0:	81 e8       	ldi	r24, 0x81	; 129
    34f2:	95 e4       	ldi	r25, 0x45	; 69
    34f4:	08 95       	ret
    34f6:	82 e0       	ldi	r24, 0x02	; 2
    34f8:	fb 01       	movw	r30, r22
    34fa:	80 83       	st	Z, r24
    34fc:	8b e2       	ldi	r24, 0x2B	; 43
    34fe:	95 e4       	ldi	r25, 0x45	; 69
    3500:	08 95       	ret
    3502:	82 e0       	ldi	r24, 0x02	; 2
    3504:	fb 01       	movw	r30, r22
    3506:	80 83       	st	Z, r24
    3508:	85 ed       	ldi	r24, 0xD5	; 213
    350a:	94 e4       	ldi	r25, 0x44	; 68
    350c:	08 95       	ret
    350e:	84 e0       	ldi	r24, 0x04	; 4
    3510:	fb 01       	movw	r30, r22
    3512:	80 83       	st	Z, r24
    3514:	89 e2       	ldi	r24, 0x29	; 41
    3516:	94 e4       	ldi	r25, 0x44	; 68
    3518:	08 95       	ret
    351a:	84 e0       	ldi	r24, 0x04	; 4
    351c:	fb 01       	movw	r30, r22
    351e:	80 83       	st	Z, r24
    3520:	8d e7       	ldi	r24, 0x7D	; 125
    3522:	93 e4       	ldi	r25, 0x43	; 67
    3524:	08 95       	ret
    3526:	84 e0       	ldi	r24, 0x04	; 4
    3528:	fb 01       	movw	r30, r22
    352a:	80 83       	st	Z, r24
    352c:	81 ed       	ldi	r24, 0xD1	; 209
    352e:	92 e4       	ldi	r25, 0x42	; 66
    3530:	08 95       	ret
    3532:	83 e0       	ldi	r24, 0x03	; 3
    3534:	fb 01       	movw	r30, r22
    3536:	80 83       	st	Z, r24
    3538:	80 e5       	ldi	r24, 0x50	; 80
    353a:	92 e4       	ldi	r25, 0x42	; 66
    353c:	08 95       	ret
    353e:	85 e0       	ldi	r24, 0x05	; 5
    3540:	fb 01       	movw	r30, r22
    3542:	80 83       	st	Z, r24
    3544:	89 e7       	ldi	r24, 0x79	; 121
    3546:	91 e4       	ldi	r25, 0x41	; 65
    3548:	08 95       	ret
    354a:	84 e0       	ldi	r24, 0x04	; 4
    354c:	fb 01       	movw	r30, r22
    354e:	80 83       	st	Z, r24
    3550:	8d ec       	ldi	r24, 0xCD	; 205
    3552:	90 e4       	ldi	r25, 0x40	; 64
    3554:	08 95       	ret
    3556:	84 e0       	ldi	r24, 0x04	; 4
    3558:	fb 01       	movw	r30, r22
    355a:	80 83       	st	Z, r24
    355c:	81 e2       	ldi	r24, 0x21	; 33
    355e:	90 e4       	ldi	r25, 0x40	; 64
    3560:	08 95       	ret
    3562:	83 e0       	ldi	r24, 0x03	; 3
    3564:	fb 01       	movw	r30, r22
    3566:	80 83       	st	Z, r24
    3568:	80 ea       	ldi	r24, 0xA0	; 160
    356a:	9f e3       	ldi	r25, 0x3F	; 63
    356c:	08 95       	ret
    356e:	84 e0       	ldi	r24, 0x04	; 4
    3570:	fb 01       	movw	r30, r22
    3572:	80 83       	st	Z, r24
    3574:	84 ef       	ldi	r24, 0xF4	; 244
    3576:	9e e3       	ldi	r25, 0x3E	; 62
    3578:	08 95       	ret
    357a:	83 e0       	ldi	r24, 0x03	; 3
    357c:	fb 01       	movw	r30, r22
    357e:	80 83       	st	Z, r24
    3580:	83 e7       	ldi	r24, 0x73	; 115
    3582:	9e e3       	ldi	r25, 0x3E	; 62
    3584:	08 95       	ret
    3586:	83 e0       	ldi	r24, 0x03	; 3
    3588:	fb 01       	movw	r30, r22
    358a:	80 83       	st	Z, r24
    358c:	82 ef       	ldi	r24, 0xF2	; 242
    358e:	9d e3       	ldi	r25, 0x3D	; 61
    3590:	08 95       	ret
    3592:	84 e0       	ldi	r24, 0x04	; 4
    3594:	fb 01       	movw	r30, r22
    3596:	80 83       	st	Z, r24
    3598:	86 e4       	ldi	r24, 0x46	; 70
    359a:	9d e3       	ldi	r25, 0x3D	; 61
    359c:	08 95       	ret
    359e:	84 e0       	ldi	r24, 0x04	; 4
    35a0:	fb 01       	movw	r30, r22
    35a2:	80 83       	st	Z, r24
    35a4:	8a e9       	ldi	r24, 0x9A	; 154
    35a6:	9c e3       	ldi	r25, 0x3C	; 60
    35a8:	08 95       	ret
    35aa:	83 e0       	ldi	r24, 0x03	; 3
    35ac:	fb 01       	movw	r30, r22
    35ae:	80 83       	st	Z, r24
    35b0:	89 e1       	ldi	r24, 0x19	; 25
    35b2:	9c e3       	ldi	r25, 0x3C	; 60
    35b4:	08 95       	ret
    35b6:	83 e0       	ldi	r24, 0x03	; 3
    35b8:	fb 01       	movw	r30, r22
    35ba:	80 83       	st	Z, r24
    35bc:	88 e9       	ldi	r24, 0x98	; 152
    35be:	9b e3       	ldi	r25, 0x3B	; 59
    35c0:	08 95       	ret
    35c2:	84 e0       	ldi	r24, 0x04	; 4
    35c4:	fb 01       	movw	r30, r22
    35c6:	80 83       	st	Z, r24
    35c8:	8c ee       	ldi	r24, 0xEC	; 236
    35ca:	9a e3       	ldi	r25, 0x3A	; 58
    35cc:	08 95       	ret
    35ce:	83 e0       	ldi	r24, 0x03	; 3
    35d0:	fb 01       	movw	r30, r22
    35d2:	80 83       	st	Z, r24
    35d4:	8b e6       	ldi	r24, 0x6B	; 107
    35d6:	9a e3       	ldi	r25, 0x3A	; 58
    35d8:	08 95       	ret
    35da:	84 e0       	ldi	r24, 0x04	; 4
    35dc:	fb 01       	movw	r30, r22
    35de:	80 83       	st	Z, r24
    35e0:	8f eb       	ldi	r24, 0xBF	; 191
    35e2:	99 e3       	ldi	r25, 0x39	; 57
    35e4:	08 95       	ret
    35e6:	84 e0       	ldi	r24, 0x04	; 4
    35e8:	fb 01       	movw	r30, r22
    35ea:	80 83       	st	Z, r24
    35ec:	83 e1       	ldi	r24, 0x13	; 19
    35ee:	99 e3       	ldi	r25, 0x39	; 57
    35f0:	08 95       	ret
    35f2:	84 e0       	ldi	r24, 0x04	; 4
    35f4:	fb 01       	movw	r30, r22
    35f6:	80 83       	st	Z, r24
    35f8:	87 e6       	ldi	r24, 0x67	; 103
    35fa:	98 e3       	ldi	r25, 0x38	; 56
    35fc:	08 95       	ret
    35fe:	83 e0       	ldi	r24, 0x03	; 3
    3600:	fb 01       	movw	r30, r22
    3602:	80 83       	st	Z, r24
    3604:	86 ee       	ldi	r24, 0xE6	; 230
    3606:	97 e3       	ldi	r25, 0x37	; 55
    3608:	08 95       	ret
    360a:	84 e0       	ldi	r24, 0x04	; 4
    360c:	fb 01       	movw	r30, r22
    360e:	80 83       	st	Z, r24
    3610:	8a e3       	ldi	r24, 0x3A	; 58
    3612:	97 e3       	ldi	r25, 0x37	; 55
    3614:	08 95       	ret
    3616:	84 e0       	ldi	r24, 0x04	; 4
    3618:	fb 01       	movw	r30, r22
    361a:	80 83       	st	Z, r24
    361c:	8e e8       	ldi	r24, 0x8E	; 142
    361e:	96 e3       	ldi	r25, 0x36	; 54
    3620:	08 95       	ret
    3622:	83 e0       	ldi	r24, 0x03	; 3
    3624:	fb 01       	movw	r30, r22
    3626:	80 83       	st	Z, r24
    3628:	8d e0       	ldi	r24, 0x0D	; 13
    362a:	96 e3       	ldi	r25, 0x36	; 54
    362c:	08 95       	ret
    362e:	83 e0       	ldi	r24, 0x03	; 3
    3630:	fb 01       	movw	r30, r22
    3632:	80 83       	st	Z, r24
    3634:	8c e8       	ldi	r24, 0x8C	; 140
    3636:	95 e3       	ldi	r25, 0x35	; 53
    3638:	08 95       	ret
    363a:	84 e0       	ldi	r24, 0x04	; 4
    363c:	fb 01       	movw	r30, r22
    363e:	80 83       	st	Z, r24
    3640:	80 ee       	ldi	r24, 0xE0	; 224
    3642:	94 e3       	ldi	r25, 0x34	; 52
    3644:	08 95       	ret
    3646:	83 e0       	ldi	r24, 0x03	; 3
    3648:	fb 01       	movw	r30, r22
    364a:	80 83       	st	Z, r24
    364c:	8f e5       	ldi	r24, 0x5F	; 95
    364e:	94 e3       	ldi	r25, 0x34	; 52
    3650:	08 95       	ret
    3652:	85 e0       	ldi	r24, 0x05	; 5
    3654:	fb 01       	movw	r30, r22
    3656:	80 83       	st	Z, r24
    3658:	88 e8       	ldi	r24, 0x88	; 136
    365a:	93 e3       	ldi	r25, 0x33	; 51
    365c:	08 95       	ret
    365e:	84 e0       	ldi	r24, 0x04	; 4
    3660:	fb 01       	movw	r30, r22
    3662:	80 83       	st	Z, r24
    3664:	8c ed       	ldi	r24, 0xDC	; 220
    3666:	92 e3       	ldi	r25, 0x32	; 50
    3668:	08 95       	ret
    366a:	84 e0       	ldi	r24, 0x04	; 4
    366c:	fb 01       	movw	r30, r22
    366e:	80 83       	st	Z, r24
    3670:	80 e3       	ldi	r24, 0x30	; 48
    3672:	92 e3       	ldi	r25, 0x32	; 50
    3674:	08 95       	ret
    3676:	83 e0       	ldi	r24, 0x03	; 3
    3678:	fb 01       	movw	r30, r22
    367a:	80 83       	st	Z, r24
    367c:	8f ea       	ldi	r24, 0xAF	; 175
    367e:	91 e3       	ldi	r25, 0x31	; 49
    3680:	08 95       	ret
    3682:	82 e0       	ldi	r24, 0x02	; 2
    3684:	fb 01       	movw	r30, r22
    3686:	80 83       	st	Z, r24
    3688:	89 e5       	ldi	r24, 0x59	; 89
    368a:	91 e3       	ldi	r25, 0x31	; 49
    368c:	08 95       	ret
    368e:	83 e0       	ldi	r24, 0x03	; 3
    3690:	fb 01       	movw	r30, r22
    3692:	80 83       	st	Z, r24
    3694:	88 ed       	ldi	r24, 0xD8	; 216
    3696:	90 e3       	ldi	r25, 0x30	; 48
    3698:	08 95       	ret
    369a:	82 e0       	ldi	r24, 0x02	; 2
    369c:	fb 01       	movw	r30, r22
    369e:	80 83       	st	Z, r24
    36a0:	82 e8       	ldi	r24, 0x82	; 130
    36a2:	90 e3       	ldi	r25, 0x30	; 48
    36a4:	08 95       	ret
    36a6:	84 e0       	ldi	r24, 0x04	; 4
    36a8:	fb 01       	movw	r30, r22
    36aa:	80 83       	st	Z, r24
    36ac:	86 ed       	ldi	r24, 0xD6	; 214
    36ae:	9f e2       	ldi	r25, 0x2F	; 47
    36b0:	08 95       	ret
    36b2:	83 e0       	ldi	r24, 0x03	; 3
    36b4:	fb 01       	movw	r30, r22
    36b6:	80 83       	st	Z, r24
    36b8:	85 e5       	ldi	r24, 0x55	; 85
    36ba:	9f e2       	ldi	r25, 0x2F	; 47
    36bc:	08 95       	ret
    36be:	83 e0       	ldi	r24, 0x03	; 3
    36c0:	fb 01       	movw	r30, r22
    36c2:	80 83       	st	Z, r24
    36c4:	84 ed       	ldi	r24, 0xD4	; 212
    36c6:	9e e2       	ldi	r25, 0x2E	; 46
    36c8:	08 95       	ret
    36ca:	83 e0       	ldi	r24, 0x03	; 3
    36cc:	fb 01       	movw	r30, r22
    36ce:	80 83       	st	Z, r24
    36d0:	83 e5       	ldi	r24, 0x53	; 83
    36d2:	9e e2       	ldi	r25, 0x2E	; 46
    36d4:	08 95       	ret
    36d6:	83 e0       	ldi	r24, 0x03	; 3
    36d8:	fb 01       	movw	r30, r22
    36da:	80 83       	st	Z, r24
    36dc:	82 ed       	ldi	r24, 0xD2	; 210
    36de:	9d e2       	ldi	r25, 0x2D	; 45
    36e0:	08 95       	ret
    36e2:	83 e0       	ldi	r24, 0x03	; 3
    36e4:	fb 01       	movw	r30, r22
    36e6:	80 83       	st	Z, r24
    36e8:	81 e5       	ldi	r24, 0x51	; 81
    36ea:	9d e2       	ldi	r25, 0x2D	; 45
    36ec:	08 95       	ret
    36ee:	83 e0       	ldi	r24, 0x03	; 3
    36f0:	fb 01       	movw	r30, r22
    36f2:	80 83       	st	Z, r24
    36f4:	80 ed       	ldi	r24, 0xD0	; 208
    36f6:	9c e2       	ldi	r25, 0x2C	; 44
    36f8:	08 95       	ret
    36fa:	83 e0       	ldi	r24, 0x03	; 3
    36fc:	fb 01       	movw	r30, r22
    36fe:	80 83       	st	Z, r24
    3700:	8f e4       	ldi	r24, 0x4F	; 79
    3702:	9c e2       	ldi	r25, 0x2C	; 44
    3704:	08 95       	ret
    3706:	82 e0       	ldi	r24, 0x02	; 2
    3708:	fb 01       	movw	r30, r22
    370a:	80 83       	st	Z, r24
    370c:	89 ef       	ldi	r24, 0xF9	; 249
    370e:	9b e2       	ldi	r25, 0x2B	; 43
    3710:	08 95       	ret
    3712:	83 e0       	ldi	r24, 0x03	; 3
    3714:	fb 01       	movw	r30, r22
    3716:	80 83       	st	Z, r24
    3718:	88 e7       	ldi	r24, 0x78	; 120
    371a:	9b e2       	ldi	r25, 0x2B	; 43
    371c:	08 95       	ret
    371e:	83 e0       	ldi	r24, 0x03	; 3
    3720:	fb 01       	movw	r30, r22
    3722:	80 83       	st	Z, r24
    3724:	87 ef       	ldi	r24, 0xF7	; 247
    3726:	9a e2       	ldi	r25, 0x2A	; 42
    3728:	08 95       	ret
    372a:	82 e0       	ldi	r24, 0x02	; 2
    372c:	fb 01       	movw	r30, r22
    372e:	80 83       	st	Z, r24
    3730:	81 ea       	ldi	r24, 0xA1	; 161
    3732:	9a e2       	ldi	r25, 0x2A	; 42
    3734:	08 95       	ret
    3736:	82 e0       	ldi	r24, 0x02	; 2
    3738:	fb 01       	movw	r30, r22
    373a:	80 83       	st	Z, r24
    373c:	8b e4       	ldi	r24, 0x4B	; 75
    373e:	9a e2       	ldi	r25, 0x2A	; 42
    3740:	08 95       	ret
    3742:	83 e0       	ldi	r24, 0x03	; 3
    3744:	fb 01       	movw	r30, r22
    3746:	80 83       	st	Z, r24
    3748:	8a ec       	ldi	r24, 0xCA	; 202
    374a:	99 e2       	ldi	r25, 0x29	; 41
    374c:	08 95       	ret
    374e:	82 e0       	ldi	r24, 0x02	; 2
    3750:	fb 01       	movw	r30, r22
    3752:	80 83       	st	Z, r24
    3754:	84 e7       	ldi	r24, 0x74	; 116
    3756:	99 e2       	ldi	r25, 0x29	; 41
    3758:	08 95       	ret
    375a:	85 e0       	ldi	r24, 0x05	; 5
    375c:	fb 01       	movw	r30, r22
    375e:	80 83       	st	Z, r24
    3760:	8d e9       	ldi	r24, 0x9D	; 157
    3762:	98 e2       	ldi	r25, 0x28	; 40
    3764:	08 95       	ret
    3766:	83 e0       	ldi	r24, 0x03	; 3
    3768:	fb 01       	movw	r30, r22
    376a:	80 83       	st	Z, r24
    376c:	8c e1       	ldi	r24, 0x1C	; 28
    376e:	98 e2       	ldi	r25, 0x28	; 40
    3770:	08 95       	ret
    3772:	83 e0       	ldi	r24, 0x03	; 3
    3774:	fb 01       	movw	r30, r22
    3776:	80 83       	st	Z, r24
    3778:	8b e9       	ldi	r24, 0x9B	; 155
    377a:	97 e2       	ldi	r25, 0x27	; 39
    377c:	08 95       	ret
    377e:	83 e0       	ldi	r24, 0x03	; 3
    3780:	fb 01       	movw	r30, r22
    3782:	80 83       	st	Z, r24
    3784:	8a e1       	ldi	r24, 0x1A	; 26
    3786:	97 e2       	ldi	r25, 0x27	; 39
    3788:	08 95       	ret
    378a:	83 e0       	ldi	r24, 0x03	; 3
    378c:	fb 01       	movw	r30, r22
    378e:	80 83       	st	Z, r24
    3790:	89 e9       	ldi	r24, 0x99	; 153
    3792:	96 e2       	ldi	r25, 0x26	; 38
    3794:	08 95       	ret
    3796:	82 e0       	ldi	r24, 0x02	; 2
    3798:	fb 01       	movw	r30, r22
    379a:	80 83       	st	Z, r24
    379c:	83 e4       	ldi	r24, 0x43	; 67
    379e:	96 e2       	ldi	r25, 0x26	; 38
    37a0:	08 95       	ret
    37a2:	83 e0       	ldi	r24, 0x03	; 3
    37a4:	fb 01       	movw	r30, r22
    37a6:	80 83       	st	Z, r24
    37a8:	82 ec       	ldi	r24, 0xC2	; 194
    37aa:	95 e2       	ldi	r25, 0x25	; 37
    37ac:	08 95       	ret
    37ae:	82 e0       	ldi	r24, 0x02	; 2
    37b0:	fb 01       	movw	r30, r22
    37b2:	80 83       	st	Z, r24
    37b4:	8c e6       	ldi	r24, 0x6C	; 108
    37b6:	95 e2       	ldi	r25, 0x25	; 37
    37b8:	08 95       	ret
    37ba:	83 e0       	ldi	r24, 0x03	; 3
    37bc:	fb 01       	movw	r30, r22
    37be:	80 83       	st	Z, r24
    37c0:	8b ee       	ldi	r24, 0xEB	; 235
    37c2:	94 e2       	ldi	r25, 0x24	; 36
    37c4:	08 95       	ret
    37c6:	83 e0       	ldi	r24, 0x03	; 3
    37c8:	fb 01       	movw	r30, r22
    37ca:	80 83       	st	Z, r24
    37cc:	8a e6       	ldi	r24, 0x6A	; 106
    37ce:	94 e2       	ldi	r25, 0x24	; 36
    37d0:	08 95       	ret
    37d2:	84 e0       	ldi	r24, 0x04	; 4
    37d4:	fb 01       	movw	r30, r22
    37d6:	80 83       	st	Z, r24
    37d8:	8e eb       	ldi	r24, 0xBE	; 190
    37da:	93 e2       	ldi	r25, 0x23	; 35
    37dc:	08 95       	ret
    37de:	83 e0       	ldi	r24, 0x03	; 3
    37e0:	fb 01       	movw	r30, r22
    37e2:	80 83       	st	Z, r24
    37e4:	8d e3       	ldi	r24, 0x3D	; 61
    37e6:	93 e2       	ldi	r25, 0x23	; 35
    37e8:	08 95       	ret
    37ea:	83 e0       	ldi	r24, 0x03	; 3
    37ec:	fb 01       	movw	r30, r22
    37ee:	80 83       	st	Z, r24
    37f0:	8c eb       	ldi	r24, 0xBC	; 188
    37f2:	92 e2       	ldi	r25, 0x22	; 34
    37f4:	08 95       	ret
    37f6:	83 e0       	ldi	r24, 0x03	; 3
    37f8:	fb 01       	movw	r30, r22
    37fa:	80 83       	st	Z, r24
    37fc:	8b e3       	ldi	r24, 0x3B	; 59
    37fe:	92 e2       	ldi	r25, 0x22	; 34
    3800:	08 95       	ret
    3802:	83 e0       	ldi	r24, 0x03	; 3
    3804:	fb 01       	movw	r30, r22
    3806:	80 83       	st	Z, r24
    3808:	8a eb       	ldi	r24, 0xBA	; 186
    380a:	91 e2       	ldi	r25, 0x21	; 33
    380c:	08 95       	ret
    380e:	83 e0       	ldi	r24, 0x03	; 3
    3810:	fb 01       	movw	r30, r22
    3812:	80 83       	st	Z, r24
    3814:	89 e3       	ldi	r24, 0x39	; 57
    3816:	91 e2       	ldi	r25, 0x21	; 33
    3818:	08 95       	ret
    381a:	83 e0       	ldi	r24, 0x03	; 3
    381c:	fb 01       	movw	r30, r22
    381e:	80 83       	st	Z, r24
    3820:	88 eb       	ldi	r24, 0xB8	; 184
    3822:	90 e2       	ldi	r25, 0x20	; 32
    3824:	08 95       	ret
    3826:	84 e0       	ldi	r24, 0x04	; 4
    3828:	fb 01       	movw	r30, r22
    382a:	80 83       	st	Z, r24
    382c:	8c e0       	ldi	r24, 0x0C	; 12
    382e:	90 e2       	ldi	r25, 0x20	; 32
    3830:	08 95       	ret
    3832:	82 e0       	ldi	r24, 0x02	; 2
    3834:	fb 01       	movw	r30, r22
    3836:	80 83       	st	Z, r24
    3838:	85 e4       	ldi	r24, 0x45	; 69
    383a:	92 e5       	ldi	r25, 0x52	; 82
    383c:	08 95       	ret

0000383e <adc_init>:
	
}*/

void adc_init(void){
	
	adc_read_configuration(&MY_ADC, &adc_conf);
    383e:	6a e9       	ldi	r22, 0x9A	; 154
    3840:	7c e5       	ldi	r23, 0x5C	; 92
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	92 e0       	ldi	r25, 0x02	; 2
    3846:	bf d0       	rcall	.+382    	; 0x39c6 <adc_read_configuration>
	adcch_read_configuration(&MY_ADC, ADC_CH0, &adcch_conf);
    3848:	40 ea       	ldi	r20, 0xA0	; 160
    384a:	5c e5       	ldi	r21, 0x5C	; 92
    384c:	61 e0       	ldi	r22, 0x01	; 1
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	92 e0       	ldi	r25, 0x02	; 2
    3852:	f5 d0       	rcall	.+490    	; 0x3a3e <adcch_read_configuration>
static inline void adc_set_conversion_parameters(struct adc_config *conf,
		enum adc_sign sign, enum adc_resolution res,
		enum adc_reference ref)
{
	/* Preserve all but conversion and resolution config. */
	conf->ctrlb &= ~(ADC_CONMODE_bm | ADC_RESOLUTION_gm);
    3854:	ea e9       	ldi	r30, 0x9A	; 154
    3856:	fc e5       	ldi	r31, 0x5C	; 92
    3858:	80 81       	ld	r24, Z
	conf->ctrlb |= (uint8_t)res | (uint8_t)sign;

	conf->refctrl &= ~ADC_REFSEL_gm;
    385a:	ab e9       	ldi	r26, 0x9B	; 155
    385c:	bc e5       	ldi	r27, 0x5C	; 92
    385e:	9c 91       	ld	r25, X
    3860:	9f 78       	andi	r25, 0x8F	; 143
    3862:	9c 93       	st	X, r25
	Assert(base_ev_ch <= 3);
#endif

	switch (trig) {
	case ADC_TRIG_MANUAL:
		conf->ctrlb &= ~ADC_FREERUN_bm;
    3864:	81 7e       	andi	r24, 0xE1	; 225
    3866:	80 61       	ori	r24, 0x10	; 16
    3868:	80 83       	st	Z, r24
		conf->evctrl = ADC_EVACT_NONE_gc;
    386a:	10 92 9c 5c 	sts	0x5C9C, r1
		psc = ADC_PRESCALER_DIV256_gc;
	} else {
		psc = ADC_PRESCALER_DIV512_gc;
	}

	conf->prescaler = psc;
    386e:	85 e0       	ldi	r24, 0x05	; 5
    3870:	80 93 9d 5c 	sts	0x5C9D, r24
	//adcch_enable_interrupt(&adcch_conf);
	//adcch_set_input(&adcch_conf, multiplexer, ADCCH_NEG_NONE, 1);
	//adcch_enable_oversampling(&adcch_conf,ADC_SAMPNUM_1024X,16);
	//adcch_set_input(&adcch_conf, ADCCH_POS_PIN9, ADCCH_NEG_NONE, 1);
	//adcch_set_pin_scan(&adcch_conf, ADCCH_POS_PIN8, ADCCH_POS_PIN9);
	adc_write_configuration(&MY_ADC, &adc_conf);
    3874:	bf 01       	movw	r22, r30
    3876:	80 e0       	ldi	r24, 0x00	; 0
    3878:	92 e0       	ldi	r25, 0x02	; 2
    387a:	66 d0       	rcall	.+204    	; 0x3948 <adc_write_configuration>
	adcch_write_configuration(&MY_ADC, ADC_CH0, &adcch_conf);
    387c:	40 ea       	ldi	r20, 0xA0	; 160
    387e:	5c e5       	ldi	r21, 0x5C	; 92
    3880:	61 e0       	ldi	r22, 0x01	; 1
    3882:	80 e0       	ldi	r24, 0x00	; 0
    3884:	92 e0       	ldi	r25, 0x02	; 2
    3886:	bf d0       	rcall	.+382    	; 0x3a06 <adcch_write_configuration>
	
	ioport_configure_port_pin(&PORTF, PIN0_bm, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
    3888:	41 e0       	ldi	r20, 0x01	; 1
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	61 e0       	ldi	r22, 0x01	; 1
    388e:	80 ea       	ldi	r24, 0xA0	; 160
    3890:	96 e0       	ldi	r25, 0x06	; 6
    3892:	0e 94 3e 2a 	call	0x547c	; 0x547c <ioport_configure_port_pin>
	ioport_configure_port_pin(&PORTF, PIN1_bm, IOPORT_INIT_LOW | IOPORT_DIR_OUTPUT);
    3896:	41 e0       	ldi	r20, 0x01	; 1
    3898:	50 e0       	ldi	r21, 0x00	; 0
    389a:	62 e0       	ldi	r22, 0x02	; 2
    389c:	80 ea       	ldi	r24, 0xA0	; 160
    389e:	96 e0       	ldi	r25, 0x06	; 6
    38a0:	0c 94 3e 2a 	jmp	0x547c	; 0x547c <ioport_configure_port_pin>
    38a4:	08 95       	ret

000038a6 <adc_enable_clock>:
void adc_enable_clock(ADC_t *adc);

void adc_enable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    38a6:	81 15       	cp	r24, r1
    38a8:	92 40       	sbci	r25, 0x02	; 2
    38aa:	61 f4       	brne	.+24     	; 0x38c4 <adc_enable_clock+0x1e>
		Assert(adca_enable_count < 0xff);
		if (!adca_enable_count++) {
    38ac:	80 91 60 5c 	lds	r24, 0x5C60
    38b0:	91 e0       	ldi	r25, 0x01	; 1
    38b2:	98 0f       	add	r25, r24
    38b4:	90 93 60 5c 	sts	0x5C60, r25
    38b8:	81 11       	cpse	r24, r1
    38ba:	04 c0       	rjmp	.+8      	; 0x38c4 <adc_enable_clock+0x1e>
			sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    38bc:	62 e0       	ldi	r22, 0x02	; 2
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	0c 94 17 2a 	jmp	0x542e	; 0x542e <sysclk_enable_module>
    38c4:	08 95       	ret

000038c6 <adc_disable_clock>:
void adc_disable_clock(ADC_t *adc);

void adc_disable_clock(ADC_t *adc)
{
#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)(&ADCA)) {
    38c6:	81 15       	cp	r24, r1
    38c8:	92 40       	sbci	r25, 0x02	; 2
    38ca:	59 f4       	brne	.+22     	; 0x38e2 <adc_disable_clock+0x1c>
		Assert(adca_enable_count);
		if (!--adca_enable_count) {
    38cc:	80 91 60 5c 	lds	r24, 0x5C60
    38d0:	81 50       	subi	r24, 0x01	; 1
    38d2:	80 93 60 5c 	sts	0x5C60, r24
    38d6:	81 11       	cpse	r24, r1
    38d8:	04 c0       	rjmp	.+8      	; 0x38e2 <adc_disable_clock+0x1c>
			sysclk_disable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    38da:	62 e0       	ldi	r22, 0x02	; 2
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	0c 94 23 2a 	jmp	0x5446	; 0x5446 <sysclk_disable_module>
    38e2:	08 95       	ret

000038e4 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    38e4:	1f 92       	push	r1
    38e6:	0f 92       	push	r0
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	0f 92       	push	r0
    38ec:	11 24       	eor	r1, r1
    38ee:	0b b6       	in	r0, 0x3b	; 59
    38f0:	0f 92       	push	r0
    38f2:	2f 93       	push	r18
    38f4:	3f 93       	push	r19
    38f6:	4f 93       	push	r20
    38f8:	5f 93       	push	r21
    38fa:	6f 93       	push	r22
    38fc:	7f 93       	push	r23
    38fe:	8f 93       	push	r24
    3900:	9f 93       	push	r25
    3902:	af 93       	push	r26
    3904:	bf 93       	push	r27
    3906:	ef 93       	push	r30
    3908:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    390a:	e0 e0       	ldi	r30, 0x00	; 0
    390c:	f2 e0       	ldi	r31, 0x02	; 2
    390e:	44 a1       	ldd	r20, Z+36	; 0x24
    3910:	55 a1       	ldd	r21, Z+37	; 0x25
    3912:	e0 91 a4 5c 	lds	r30, 0x5CA4
    3916:	f0 91 a5 5c 	lds	r31, 0x5CA5
    391a:	61 e0       	ldi	r22, 0x01	; 1
    391c:	80 e0       	ldi	r24, 0x00	; 0
    391e:	92 e0       	ldi	r25, 0x02	; 2
    3920:	19 95       	eicall
}
    3922:	ff 91       	pop	r31
    3924:	ef 91       	pop	r30
    3926:	bf 91       	pop	r27
    3928:	af 91       	pop	r26
    392a:	9f 91       	pop	r25
    392c:	8f 91       	pop	r24
    392e:	7f 91       	pop	r23
    3930:	6f 91       	pop	r22
    3932:	5f 91       	pop	r21
    3934:	4f 91       	pop	r20
    3936:	3f 91       	pop	r19
    3938:	2f 91       	pop	r18
    393a:	0f 90       	pop	r0
    393c:	0b be       	out	0x3b, r0	; 59
    393e:	0f 90       	pop	r0
    3940:	0f be       	out	0x3f, r0	; 63
    3942:	0f 90       	pop	r0
    3944:	1f 90       	pop	r1
    3946:	18 95       	reti

00003948 <adc_write_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_write_configuration(ADC_t *adc, const struct adc_config *conf)
{
    3948:	df 92       	push	r13
    394a:	ef 92       	push	r14
    394c:	ff 92       	push	r15
    394e:	0f 93       	push	r16
    3950:	1f 93       	push	r17
    3952:	cf 93       	push	r28
    3954:	df 93       	push	r29
    3956:	ec 01       	movw	r28, r24
    3958:	8b 01       	movw	r16, r22
	uint16_t cal;
	uint8_t enable;
	irqflags_t flags;

#ifdef ADCA
	if ((uintptr_t)adc == (uintptr_t)&ADCA) {
    395a:	c1 15       	cp	r28, r1
    395c:	82 e0       	ldi	r24, 0x02	; 2
    395e:	d8 07       	cpc	r29, r24
    3960:	51 f5       	brne	.+84     	; 0x39b6 <adc_write_configuration+0x6e>
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    3962:	61 e2       	ldi	r22, 0x21	; 33
    3964:	70 e0       	ldi	r23, 0x00	; 0
    3966:	82 e0       	ldi	r24, 0x02	; 2
    3968:	0e 94 2e 2a 	call	0x545c	; 0x545c <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    396c:	e8 2e       	mov	r14, r24
    396e:	f1 2c       	mov	r15, r1
    3970:	60 e2       	ldi	r22, 0x20	; 32
    3972:	70 e0       	ldi	r23, 0x00	; 0
    3974:	82 e0       	ldi	r24, 0x02	; 2
    3976:	0e 94 2e 2a 	call	0x545c	; 0x545c <nvm_read_byte>
		data <<= 8;
    397a:	fe 2c       	mov	r15, r14
    397c:	ee 24       	eor	r14, r14
		data |= nvm_read_production_signature_row(ADCACAL0);
    397e:	e8 2a       	or	r14, r24

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3980:	df b6       	in	r13, 0x3f	; 63
	cpu_irq_disable();
    3982:	f8 94       	cli
		Assert(0);
		return;
	}

	flags = cpu_irq_save();
	adc_enable_clock(adc);
    3984:	ce 01       	movw	r24, r28
    3986:	8f df       	rcall	.-226    	; 0x38a6 <adc_enable_clock>
	enable = adc->CTRLA & ADC_ENABLE_bm;
    3988:	28 81       	ld	r18, Y
    398a:	21 70       	andi	r18, 0x01	; 1

	adc->CTRLA = ADC_FLUSH_bm;
    398c:	82 e0       	ldi	r24, 0x02	; 2
    398e:	88 83       	st	Y, r24
	adc->CAL = cal;
    3990:	ec 86       	std	Y+12, r14	; 0x0c
    3992:	fd 86       	std	Y+13, r15	; 0x0d
	adc->CMP = conf->cmp;
    3994:	f8 01       	movw	r30, r16
    3996:	84 81       	ldd	r24, Z+4	; 0x04
    3998:	95 81       	ldd	r25, Z+5	; 0x05
    399a:	88 8f       	std	Y+24, r24	; 0x18
    399c:	99 8f       	std	Y+25, r25	; 0x19
	adc->REFCTRL = conf->refctrl;
    399e:	81 81       	ldd	r24, Z+1	; 0x01
    39a0:	8a 83       	std	Y+2, r24	; 0x02
	adc->PRESCALER = conf->prescaler;
    39a2:	83 81       	ldd	r24, Z+3	; 0x03
    39a4:	8c 83       	std	Y+4, r24	; 0x04
	adc->EVCTRL = conf->evctrl;
    39a6:	82 81       	ldd	r24, Z+2	; 0x02
    39a8:	8b 83       	std	Y+3, r24	; 0x03
	adc->CTRLB = conf->ctrlb;
    39aa:	80 81       	ld	r24, Z
    39ac:	89 83       	std	Y+1, r24	; 0x01

	adc->CTRLA = enable;
    39ae:	28 83       	st	Y, r18

	adc_disable_clock(adc);
    39b0:	ce 01       	movw	r24, r28
    39b2:	89 df       	rcall	.-238    	; 0x38c6 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    39b4:	df be       	out	0x3f, r13	; 63

	cpu_irq_restore(flags);
}
    39b6:	df 91       	pop	r29
    39b8:	cf 91       	pop	r28
    39ba:	1f 91       	pop	r17
    39bc:	0f 91       	pop	r16
    39be:	ff 90       	pop	r15
    39c0:	ef 90       	pop	r14
    39c2:	df 90       	pop	r13
    39c4:	08 95       	ret

000039c6 <adc_read_configuration>:
 *
 * \param adc Pointer to ADC module.
 * \param conf Pointer to ADC module configuration.
 */
void adc_read_configuration(ADC_t *adc, struct adc_config *conf)
{
    39c6:	ff 92       	push	r15
    39c8:	0f 93       	push	r16
    39ca:	1f 93       	push	r17
    39cc:	cf 93       	push	r28
    39ce:	df 93       	push	r29
    39d0:	ec 01       	movw	r28, r24
    39d2:	8b 01       	movw	r16, r22

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    39d4:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    39d6:	f8 94       	cli
	irqflags_t flags = cpu_irq_save();

	adc_enable_clock(adc);
    39d8:	66 df       	rcall	.-308    	; 0x38a6 <adc_enable_clock>

	conf->cmp = adc->CMP;
    39da:	88 8d       	ldd	r24, Y+24	; 0x18
    39dc:	99 8d       	ldd	r25, Y+25	; 0x19
    39de:	f8 01       	movw	r30, r16
    39e0:	84 83       	std	Z+4, r24	; 0x04
    39e2:	95 83       	std	Z+5, r25	; 0x05
	conf->refctrl = adc->REFCTRL;
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	81 83       	std	Z+1, r24	; 0x01
	conf->prescaler = adc->PRESCALER;
    39e8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ea:	83 83       	std	Z+3, r24	; 0x03
	conf->evctrl = adc->EVCTRL;
    39ec:	8b 81       	ldd	r24, Y+3	; 0x03
    39ee:	82 83       	std	Z+2, r24	; 0x02
	conf->ctrlb = adc->CTRLB;
    39f0:	89 81       	ldd	r24, Y+1	; 0x01
    39f2:	80 83       	st	Z, r24

	adc_disable_clock(adc);
    39f4:	ce 01       	movw	r24, r28
    39f6:	67 df       	rcall	.-306    	; 0x38c6 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    39f8:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    39fa:	df 91       	pop	r29
    39fc:	cf 91       	pop	r28
    39fe:	1f 91       	pop	r17
    3a00:	0f 91       	pop	r16
    3a02:	ff 90       	pop	r15
    3a04:	08 95       	ret

00003a06 <adcch_write_configuration>:
 * is called if callbacks are enabled and interrupts are enabled in the
 * channel configuration.
 */
void adcch_write_configuration(ADC_t *adc, uint8_t ch_mask,
		const struct adc_channel_config *ch_conf)
{
    3a06:	ff 92       	push	r15
    3a08:	0f 93       	push	r16
    3a0a:	1f 93       	push	r17
    3a0c:	cf 93       	push	r28
    3a0e:	df 93       	push	r29
    3a10:	ec 01       	movw	r28, r24
    3a12:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3a14:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    3a16:	f8 94       	cli
			return;
		}
	}
#endif

	adc_enable_clock(adc);
    3a18:	46 df       	rcall	.-372    	; 0x38a6 <adc_enable_clock>
	adc_ch->CTRL = ch_conf->ctrl;
    3a1a:	f8 01       	movw	r30, r16
    3a1c:	80 81       	ld	r24, Z
    3a1e:	88 a3       	std	Y+32, r24	; 0x20
	adc_ch->INTCTRL = ch_conf->intctrl;
    3a20:	82 81       	ldd	r24, Z+2	; 0x02
    3a22:	8a a3       	std	Y+34, r24	; 0x22
	adc_ch->MUXCTRL = ch_conf->muxctrl;
    3a24:	81 81       	ldd	r24, Z+1	; 0x01
    3a26:	89 a3       	std	Y+33, r24	; 0x21
	adc_ch->SCAN = ch_conf->scan;
    3a28:	83 81       	ldd	r24, Z+3	; 0x03
    3a2a:	8e a3       	std	Y+38, r24	; 0x26
	adc_disable_clock(adc);
    3a2c:	ce 01       	movw	r24, r28
    3a2e:	4b df       	rcall	.-362    	; 0x38c6 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a30:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3a32:	df 91       	pop	r29
    3a34:	cf 91       	pop	r28
    3a36:	1f 91       	pop	r17
    3a38:	0f 91       	pop	r16
    3a3a:	ff 90       	pop	r15
    3a3c:	08 95       	ret

00003a3e <adcch_read_configuration>:
 * can be given in mask)
 * \param ch_conf Pointer to ADC channel configuration.
 */
void adcch_read_configuration(ADC_t *adc, uint8_t ch_mask,
		struct adc_channel_config *ch_conf)
{
    3a3e:	ff 92       	push	r15
    3a40:	0f 93       	push	r16
    3a42:	1f 93       	push	r17
    3a44:	cf 93       	push	r28
    3a46:	df 93       	push	r29
    3a48:	ec 01       	movw	r28, r24
    3a4a:	8a 01       	movw	r16, r20

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    3a4c:	ff b6       	in	r15, 0x3f	; 63
	cpu_irq_disable();
    3a4e:	f8 94       	cli

	adc_ch = adc_get_channel(adc, ch_mask);

	flags = cpu_irq_save();

	adc_enable_clock(adc);
    3a50:	2a df       	rcall	.-428    	; 0x38a6 <adc_enable_clock>
	ch_conf->ctrl = adc_ch->CTRL;
    3a52:	88 a1       	ldd	r24, Y+32	; 0x20
    3a54:	f8 01       	movw	r30, r16
    3a56:	80 83       	st	Z, r24
	ch_conf->intctrl = adc_ch->INTCTRL;
    3a58:	8a a1       	ldd	r24, Y+34	; 0x22
    3a5a:	82 83       	std	Z+2, r24	; 0x02
	ch_conf->muxctrl = adc_ch->MUXCTRL;
    3a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    3a5e:	81 83       	std	Z+1, r24	; 0x01
	ch_conf->scan = adc_ch->SCAN;
    3a60:	8e a1       	ldd	r24, Y+38	; 0x26
    3a62:	83 83       	std	Z+3, r24	; 0x03
	adc_disable_clock(adc);
    3a64:	ce 01       	movw	r24, r28
    3a66:	2f df       	rcall	.-418    	; 0x38c6 <adc_disable_clock>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    3a68:	ff be       	out	0x3f, r15	; 63

	cpu_irq_restore(flags);
}
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	1f 91       	pop	r17
    3a70:	0f 91       	pop	r16
    3a72:	ff 90       	pop	r15
    3a74:	08 95       	ret

00003a76 <getCharacterImage>:
    3a76:	99 27       	eor	r25, r25
    3a78:	87 fd       	sbrc	r24, 7
    3a7a:	90 95       	com	r25
    3a7c:	a9 2f       	mov	r26, r25
    3a7e:	b9 2f       	mov	r27, r25
    3a80:	fc 01       	movw	r30, r24
    3a82:	b0 97       	sbiw	r30, 0x20	; 32
    3a84:	ef 35       	cpi	r30, 0x5F	; 95
    3a86:	f1 05       	cpc	r31, r1
    3a88:	08 f0       	brcs	.+2      	; 0x3a8c <getCharacterImage+0x16>
    3a8a:	3e c2       	rjmp	.+1148   	; 0x3f08 <getCharacterImage+0x492>
    3a8c:	e3 5a       	subi	r30, 0xA3	; 163
    3a8e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a90:	0c 94 c3 33 	jmp	0x6786	; 0x6786 <__tablejump2__>
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	fb 01       	movw	r30, r22
    3a98:	80 83       	st	Z, r24
    3a9a:	8a e1       	ldi	r24, 0x1A	; 26
    3a9c:	9c e5       	ldi	r25, 0x5C	; 92
    3a9e:	08 95       	ret
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	fb 01       	movw	r30, r22
    3aa4:	80 83       	st	Z, r24
    3aa6:	89 e0       	ldi	r24, 0x09	; 9
    3aa8:	9c e5       	ldi	r25, 0x5C	; 92
    3aaa:	08 95       	ret
    3aac:	81 e0       	ldi	r24, 0x01	; 1
    3aae:	fb 01       	movw	r30, r22
    3ab0:	80 83       	st	Z, r24
    3ab2:	88 ef       	ldi	r24, 0xF8	; 248
    3ab4:	9b e5       	ldi	r25, 0x5B	; 91
    3ab6:	08 95       	ret
    3ab8:	82 e0       	ldi	r24, 0x02	; 2
    3aba:	fb 01       	movw	r30, r22
    3abc:	80 83       	st	Z, r24
    3abe:	86 ed       	ldi	r24, 0xD6	; 214
    3ac0:	9b e5       	ldi	r25, 0x5B	; 91
    3ac2:	08 95       	ret
    3ac4:	82 e0       	ldi	r24, 0x02	; 2
    3ac6:	fb 01       	movw	r30, r22
    3ac8:	80 83       	st	Z, r24
    3aca:	84 eb       	ldi	r24, 0xB4	; 180
    3acc:	9b e5       	ldi	r25, 0x5B	; 91
    3ace:	08 95       	ret
    3ad0:	82 e0       	ldi	r24, 0x02	; 2
    3ad2:	fb 01       	movw	r30, r22
    3ad4:	80 83       	st	Z, r24
    3ad6:	82 e9       	ldi	r24, 0x92	; 146
    3ad8:	9b e5       	ldi	r25, 0x5B	; 91
    3ada:	08 95       	ret
    3adc:	82 e0       	ldi	r24, 0x02	; 2
    3ade:	fb 01       	movw	r30, r22
    3ae0:	80 83       	st	Z, r24
    3ae2:	80 e7       	ldi	r24, 0x70	; 112
    3ae4:	9b e5       	ldi	r25, 0x5B	; 91
    3ae6:	08 95       	ret
    3ae8:	81 e0       	ldi	r24, 0x01	; 1
    3aea:	fb 01       	movw	r30, r22
    3aec:	80 83       	st	Z, r24
    3aee:	8f e5       	ldi	r24, 0x5F	; 95
    3af0:	9b e5       	ldi	r25, 0x5B	; 91
    3af2:	08 95       	ret
    3af4:	81 e0       	ldi	r24, 0x01	; 1
    3af6:	fb 01       	movw	r30, r22
    3af8:	80 83       	st	Z, r24
    3afa:	8e e4       	ldi	r24, 0x4E	; 78
    3afc:	9b e5       	ldi	r25, 0x5B	; 91
    3afe:	08 95       	ret
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	fb 01       	movw	r30, r22
    3b04:	80 83       	st	Z, r24
    3b06:	8d e3       	ldi	r24, 0x3D	; 61
    3b08:	9b e5       	ldi	r25, 0x5B	; 91
    3b0a:	08 95       	ret
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	fb 01       	movw	r30, r22
    3b10:	80 83       	st	Z, r24
    3b12:	8c e2       	ldi	r24, 0x2C	; 44
    3b14:	9b e5       	ldi	r25, 0x5B	; 91
    3b16:	08 95       	ret
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	fb 01       	movw	r30, r22
    3b1c:	80 83       	st	Z, r24
    3b1e:	8b e1       	ldi	r24, 0x1B	; 27
    3b20:	9b e5       	ldi	r25, 0x5B	; 91
    3b22:	08 95       	ret
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	fb 01       	movw	r30, r22
    3b28:	80 83       	st	Z, r24
    3b2a:	8a e0       	ldi	r24, 0x0A	; 10
    3b2c:	9b e5       	ldi	r25, 0x5B	; 91
    3b2e:	08 95       	ret
    3b30:	81 e0       	ldi	r24, 0x01	; 1
    3b32:	fb 01       	movw	r30, r22
    3b34:	80 83       	st	Z, r24
    3b36:	89 ef       	ldi	r24, 0xF9	; 249
    3b38:	9a e5       	ldi	r25, 0x5A	; 90
    3b3a:	08 95       	ret
    3b3c:	81 e0       	ldi	r24, 0x01	; 1
    3b3e:	fb 01       	movw	r30, r22
    3b40:	80 83       	st	Z, r24
    3b42:	88 ee       	ldi	r24, 0xE8	; 232
    3b44:	9a e5       	ldi	r25, 0x5A	; 90
    3b46:	08 95       	ret
    3b48:	81 e0       	ldi	r24, 0x01	; 1
    3b4a:	fb 01       	movw	r30, r22
    3b4c:	80 83       	st	Z, r24
    3b4e:	87 ed       	ldi	r24, 0xD7	; 215
    3b50:	9a e5       	ldi	r25, 0x5A	; 90
    3b52:	08 95       	ret
    3b54:	82 e0       	ldi	r24, 0x02	; 2
    3b56:	fb 01       	movw	r30, r22
    3b58:	80 83       	st	Z, r24
    3b5a:	85 eb       	ldi	r24, 0xB5	; 181
    3b5c:	9a e5       	ldi	r25, 0x5A	; 90
    3b5e:	08 95       	ret
    3b60:	82 e0       	ldi	r24, 0x02	; 2
    3b62:	fb 01       	movw	r30, r22
    3b64:	80 83       	st	Z, r24
    3b66:	83 e9       	ldi	r24, 0x93	; 147
    3b68:	9a e5       	ldi	r25, 0x5A	; 90
    3b6a:	08 95       	ret
    3b6c:	82 e0       	ldi	r24, 0x02	; 2
    3b6e:	fb 01       	movw	r30, r22
    3b70:	80 83       	st	Z, r24
    3b72:	81 e7       	ldi	r24, 0x71	; 113
    3b74:	9a e5       	ldi	r25, 0x5A	; 90
    3b76:	08 95       	ret
    3b78:	82 e0       	ldi	r24, 0x02	; 2
    3b7a:	fb 01       	movw	r30, r22
    3b7c:	80 83       	st	Z, r24
    3b7e:	8f e4       	ldi	r24, 0x4F	; 79
    3b80:	9a e5       	ldi	r25, 0x5A	; 90
    3b82:	08 95       	ret
    3b84:	82 e0       	ldi	r24, 0x02	; 2
    3b86:	fb 01       	movw	r30, r22
    3b88:	80 83       	st	Z, r24
    3b8a:	8d e2       	ldi	r24, 0x2D	; 45
    3b8c:	9a e5       	ldi	r25, 0x5A	; 90
    3b8e:	08 95       	ret
    3b90:	82 e0       	ldi	r24, 0x02	; 2
    3b92:	fb 01       	movw	r30, r22
    3b94:	80 83       	st	Z, r24
    3b96:	8b e0       	ldi	r24, 0x0B	; 11
    3b98:	9a e5       	ldi	r25, 0x5A	; 90
    3b9a:	08 95       	ret
    3b9c:	82 e0       	ldi	r24, 0x02	; 2
    3b9e:	fb 01       	movw	r30, r22
    3ba0:	80 83       	st	Z, r24
    3ba2:	89 ee       	ldi	r24, 0xE9	; 233
    3ba4:	99 e5       	ldi	r25, 0x59	; 89
    3ba6:	08 95       	ret
    3ba8:	82 e0       	ldi	r24, 0x02	; 2
    3baa:	fb 01       	movw	r30, r22
    3bac:	80 83       	st	Z, r24
    3bae:	87 ec       	ldi	r24, 0xC7	; 199
    3bb0:	99 e5       	ldi	r25, 0x59	; 89
    3bb2:	08 95       	ret
    3bb4:	82 e0       	ldi	r24, 0x02	; 2
    3bb6:	fb 01       	movw	r30, r22
    3bb8:	80 83       	st	Z, r24
    3bba:	85 ea       	ldi	r24, 0xA5	; 165
    3bbc:	99 e5       	ldi	r25, 0x59	; 89
    3bbe:	08 95       	ret
    3bc0:	82 e0       	ldi	r24, 0x02	; 2
    3bc2:	fb 01       	movw	r30, r22
    3bc4:	80 83       	st	Z, r24
    3bc6:	83 e8       	ldi	r24, 0x83	; 131
    3bc8:	99 e5       	ldi	r25, 0x59	; 89
    3bca:	08 95       	ret
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	fb 01       	movw	r30, r22
    3bd0:	80 83       	st	Z, r24
    3bd2:	82 e7       	ldi	r24, 0x72	; 114
    3bd4:	99 e5       	ldi	r25, 0x59	; 89
    3bd6:	08 95       	ret
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	fb 01       	movw	r30, r22
    3bdc:	80 83       	st	Z, r24
    3bde:	81 e6       	ldi	r24, 0x61	; 97
    3be0:	99 e5       	ldi	r25, 0x59	; 89
    3be2:	08 95       	ret
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	fb 01       	movw	r30, r22
    3be8:	80 83       	st	Z, r24
    3bea:	80 e5       	ldi	r24, 0x50	; 80
    3bec:	99 e5       	ldi	r25, 0x59	; 89
    3bee:	08 95       	ret
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	fb 01       	movw	r30, r22
    3bf4:	80 83       	st	Z, r24
    3bf6:	8f e3       	ldi	r24, 0x3F	; 63
    3bf8:	99 e5       	ldi	r25, 0x59	; 89
    3bfa:	08 95       	ret
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	fb 01       	movw	r30, r22
    3c00:	80 83       	st	Z, r24
    3c02:	8e e2       	ldi	r24, 0x2E	; 46
    3c04:	99 e5       	ldi	r25, 0x59	; 89
    3c06:	08 95       	ret
    3c08:	81 e0       	ldi	r24, 0x01	; 1
    3c0a:	fb 01       	movw	r30, r22
    3c0c:	80 83       	st	Z, r24
    3c0e:	8d e1       	ldi	r24, 0x1D	; 29
    3c10:	99 e5       	ldi	r25, 0x59	; 89
    3c12:	08 95       	ret
    3c14:	82 e0       	ldi	r24, 0x02	; 2
    3c16:	fb 01       	movw	r30, r22
    3c18:	80 83       	st	Z, r24
    3c1a:	8b ef       	ldi	r24, 0xFB	; 251
    3c1c:	98 e5       	ldi	r25, 0x58	; 88
    3c1e:	08 95       	ret
    3c20:	82 e0       	ldi	r24, 0x02	; 2
    3c22:	fb 01       	movw	r30, r22
    3c24:	80 83       	st	Z, r24
    3c26:	89 ed       	ldi	r24, 0xD9	; 217
    3c28:	98 e5       	ldi	r25, 0x58	; 88
    3c2a:	08 95       	ret
    3c2c:	82 e0       	ldi	r24, 0x02	; 2
    3c2e:	fb 01       	movw	r30, r22
    3c30:	80 83       	st	Z, r24
    3c32:	87 eb       	ldi	r24, 0xB7	; 183
    3c34:	98 e5       	ldi	r25, 0x58	; 88
    3c36:	08 95       	ret
    3c38:	82 e0       	ldi	r24, 0x02	; 2
    3c3a:	fb 01       	movw	r30, r22
    3c3c:	80 83       	st	Z, r24
    3c3e:	85 e9       	ldi	r24, 0x95	; 149
    3c40:	98 e5       	ldi	r25, 0x58	; 88
    3c42:	08 95       	ret
    3c44:	82 e0       	ldi	r24, 0x02	; 2
    3c46:	fb 01       	movw	r30, r22
    3c48:	80 83       	st	Z, r24
    3c4a:	83 e7       	ldi	r24, 0x73	; 115
    3c4c:	98 e5       	ldi	r25, 0x58	; 88
    3c4e:	08 95       	ret
    3c50:	82 e0       	ldi	r24, 0x02	; 2
    3c52:	fb 01       	movw	r30, r22
    3c54:	80 83       	st	Z, r24
    3c56:	81 e5       	ldi	r24, 0x51	; 81
    3c58:	98 e5       	ldi	r25, 0x58	; 88
    3c5a:	08 95       	ret
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	fb 01       	movw	r30, r22
    3c60:	80 83       	st	Z, r24
    3c62:	80 e4       	ldi	r24, 0x40	; 64
    3c64:	98 e5       	ldi	r25, 0x58	; 88
    3c66:	08 95       	ret
    3c68:	82 e0       	ldi	r24, 0x02	; 2
    3c6a:	fb 01       	movw	r30, r22
    3c6c:	80 83       	st	Z, r24
    3c6e:	8e e1       	ldi	r24, 0x1E	; 30
    3c70:	98 e5       	ldi	r25, 0x58	; 88
    3c72:	08 95       	ret
    3c74:	82 e0       	ldi	r24, 0x02	; 2
    3c76:	fb 01       	movw	r30, r22
    3c78:	80 83       	st	Z, r24
    3c7a:	8c ef       	ldi	r24, 0xFC	; 252
    3c7c:	97 e5       	ldi	r25, 0x57	; 87
    3c7e:	08 95       	ret
    3c80:	81 e0       	ldi	r24, 0x01	; 1
    3c82:	fb 01       	movw	r30, r22
    3c84:	80 83       	st	Z, r24
    3c86:	8b ee       	ldi	r24, 0xEB	; 235
    3c88:	97 e5       	ldi	r25, 0x57	; 87
    3c8a:	08 95       	ret
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	fb 01       	movw	r30, r22
    3c90:	80 83       	st	Z, r24
    3c92:	8a ed       	ldi	r24, 0xDA	; 218
    3c94:	97 e5       	ldi	r25, 0x57	; 87
    3c96:	08 95       	ret
    3c98:	82 e0       	ldi	r24, 0x02	; 2
    3c9a:	fb 01       	movw	r30, r22
    3c9c:	80 83       	st	Z, r24
    3c9e:	88 eb       	ldi	r24, 0xB8	; 184
    3ca0:	97 e5       	ldi	r25, 0x57	; 87
    3ca2:	08 95       	ret
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	fb 01       	movw	r30, r22
    3ca8:	80 83       	st	Z, r24
    3caa:	87 ea       	ldi	r24, 0xA7	; 167
    3cac:	97 e5       	ldi	r25, 0x57	; 87
    3cae:	08 95       	ret
    3cb0:	82 e0       	ldi	r24, 0x02	; 2
    3cb2:	fb 01       	movw	r30, r22
    3cb4:	80 83       	st	Z, r24
    3cb6:	85 e8       	ldi	r24, 0x85	; 133
    3cb8:	97 e5       	ldi	r25, 0x57	; 87
    3cba:	08 95       	ret
    3cbc:	82 e0       	ldi	r24, 0x02	; 2
    3cbe:	fb 01       	movw	r30, r22
    3cc0:	80 83       	st	Z, r24
    3cc2:	83 e6       	ldi	r24, 0x63	; 99
    3cc4:	97 e5       	ldi	r25, 0x57	; 87
    3cc6:	08 95       	ret
    3cc8:	82 e0       	ldi	r24, 0x02	; 2
    3cca:	fb 01       	movw	r30, r22
    3ccc:	80 83       	st	Z, r24
    3cce:	81 e4       	ldi	r24, 0x41	; 65
    3cd0:	97 e5       	ldi	r25, 0x57	; 87
    3cd2:	08 95       	ret
    3cd4:	82 e0       	ldi	r24, 0x02	; 2
    3cd6:	fb 01       	movw	r30, r22
    3cd8:	80 83       	st	Z, r24
    3cda:	8f e1       	ldi	r24, 0x1F	; 31
    3cdc:	97 e5       	ldi	r25, 0x57	; 87
    3cde:	08 95       	ret
    3ce0:	82 e0       	ldi	r24, 0x02	; 2
    3ce2:	fb 01       	movw	r30, r22
    3ce4:	80 83       	st	Z, r24
    3ce6:	8d ef       	ldi	r24, 0xFD	; 253
    3ce8:	96 e5       	ldi	r25, 0x56	; 86
    3cea:	08 95       	ret
    3cec:	82 e0       	ldi	r24, 0x02	; 2
    3cee:	fb 01       	movw	r30, r22
    3cf0:	80 83       	st	Z, r24
    3cf2:	8b ed       	ldi	r24, 0xDB	; 219
    3cf4:	96 e5       	ldi	r25, 0x56	; 86
    3cf6:	08 95       	ret
    3cf8:	82 e0       	ldi	r24, 0x02	; 2
    3cfa:	fb 01       	movw	r30, r22
    3cfc:	80 83       	st	Z, r24
    3cfe:	89 eb       	ldi	r24, 0xB9	; 185
    3d00:	96 e5       	ldi	r25, 0x56	; 86
    3d02:	08 95       	ret
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	fb 01       	movw	r30, r22
    3d08:	80 83       	st	Z, r24
    3d0a:	88 ea       	ldi	r24, 0xA8	; 168
    3d0c:	96 e5       	ldi	r25, 0x56	; 86
    3d0e:	08 95       	ret
    3d10:	82 e0       	ldi	r24, 0x02	; 2
    3d12:	fb 01       	movw	r30, r22
    3d14:	80 83       	st	Z, r24
    3d16:	86 e8       	ldi	r24, 0x86	; 134
    3d18:	96 e5       	ldi	r25, 0x56	; 86
    3d1a:	08 95       	ret
    3d1c:	82 e0       	ldi	r24, 0x02	; 2
    3d1e:	fb 01       	movw	r30, r22
    3d20:	80 83       	st	Z, r24
    3d22:	84 e6       	ldi	r24, 0x64	; 100
    3d24:	96 e5       	ldi	r25, 0x56	; 86
    3d26:	08 95       	ret
    3d28:	82 e0       	ldi	r24, 0x02	; 2
    3d2a:	fb 01       	movw	r30, r22
    3d2c:	80 83       	st	Z, r24
    3d2e:	82 e4       	ldi	r24, 0x42	; 66
    3d30:	96 e5       	ldi	r25, 0x56	; 86
    3d32:	08 95       	ret
    3d34:	82 e0       	ldi	r24, 0x02	; 2
    3d36:	fb 01       	movw	r30, r22
    3d38:	80 83       	st	Z, r24
    3d3a:	80 e2       	ldi	r24, 0x20	; 32
    3d3c:	96 e5       	ldi	r25, 0x56	; 86
    3d3e:	08 95       	ret
    3d40:	82 e0       	ldi	r24, 0x02	; 2
    3d42:	fb 01       	movw	r30, r22
    3d44:	80 83       	st	Z, r24
    3d46:	8e ef       	ldi	r24, 0xFE	; 254
    3d48:	95 e5       	ldi	r25, 0x55	; 85
    3d4a:	08 95       	ret
    3d4c:	82 e0       	ldi	r24, 0x02	; 2
    3d4e:	fb 01       	movw	r30, r22
    3d50:	80 83       	st	Z, r24
    3d52:	8c ed       	ldi	r24, 0xDC	; 220
    3d54:	95 e5       	ldi	r25, 0x55	; 85
    3d56:	08 95       	ret
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	fb 01       	movw	r30, r22
    3d5c:	80 83       	st	Z, r24
    3d5e:	8b ec       	ldi	r24, 0xCB	; 203
    3d60:	95 e5       	ldi	r25, 0x55	; 85
    3d62:	08 95       	ret
    3d64:	81 e0       	ldi	r24, 0x01	; 1
    3d66:	fb 01       	movw	r30, r22
    3d68:	80 83       	st	Z, r24
    3d6a:	8a eb       	ldi	r24, 0xBA	; 186
    3d6c:	95 e5       	ldi	r25, 0x55	; 85
    3d6e:	08 95       	ret
    3d70:	81 e0       	ldi	r24, 0x01	; 1
    3d72:	fb 01       	movw	r30, r22
    3d74:	80 83       	st	Z, r24
    3d76:	89 ea       	ldi	r24, 0xA9	; 169
    3d78:	95 e5       	ldi	r25, 0x55	; 85
    3d7a:	08 95       	ret
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	fb 01       	movw	r30, r22
    3d80:	80 83       	st	Z, r24
    3d82:	88 e9       	ldi	r24, 0x98	; 152
    3d84:	95 e5       	ldi	r25, 0x55	; 85
    3d86:	08 95       	ret
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	fb 01       	movw	r30, r22
    3d8c:	80 83       	st	Z, r24
    3d8e:	87 e8       	ldi	r24, 0x87	; 135
    3d90:	95 e5       	ldi	r25, 0x55	; 85
    3d92:	08 95       	ret
    3d94:	81 e0       	ldi	r24, 0x01	; 1
    3d96:	fb 01       	movw	r30, r22
    3d98:	80 83       	st	Z, r24
    3d9a:	86 e7       	ldi	r24, 0x76	; 118
    3d9c:	95 e5       	ldi	r25, 0x55	; 85
    3d9e:	08 95       	ret
    3da0:	82 e0       	ldi	r24, 0x02	; 2
    3da2:	fb 01       	movw	r30, r22
    3da4:	80 83       	st	Z, r24
    3da6:	84 e5       	ldi	r24, 0x54	; 84
    3da8:	95 e5       	ldi	r25, 0x55	; 85
    3daa:	08 95       	ret
    3dac:	82 e0       	ldi	r24, 0x02	; 2
    3dae:	fb 01       	movw	r30, r22
    3db0:	80 83       	st	Z, r24
    3db2:	82 e3       	ldi	r24, 0x32	; 50
    3db4:	95 e5       	ldi	r25, 0x55	; 85
    3db6:	08 95       	ret
    3db8:	81 e0       	ldi	r24, 0x01	; 1
    3dba:	fb 01       	movw	r30, r22
    3dbc:	80 83       	st	Z, r24
    3dbe:	81 e2       	ldi	r24, 0x21	; 33
    3dc0:	95 e5       	ldi	r25, 0x55	; 85
    3dc2:	08 95       	ret
    3dc4:	82 e0       	ldi	r24, 0x02	; 2
    3dc6:	fb 01       	movw	r30, r22
    3dc8:	80 83       	st	Z, r24
    3dca:	8f ef       	ldi	r24, 0xFF	; 255
    3dcc:	94 e5       	ldi	r25, 0x54	; 84
    3dce:	08 95       	ret
    3dd0:	81 e0       	ldi	r24, 0x01	; 1
    3dd2:	fb 01       	movw	r30, r22
    3dd4:	80 83       	st	Z, r24
    3dd6:	8e ee       	ldi	r24, 0xEE	; 238
    3dd8:	94 e5       	ldi	r25, 0x54	; 84
    3dda:	08 95       	ret
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	fb 01       	movw	r30, r22
    3de0:	80 83       	st	Z, r24
    3de2:	8d ed       	ldi	r24, 0xDD	; 221
    3de4:	94 e5       	ldi	r25, 0x54	; 84
    3de6:	08 95       	ret
    3de8:	82 e0       	ldi	r24, 0x02	; 2
    3dea:	fb 01       	movw	r30, r22
    3dec:	80 83       	st	Z, r24
    3dee:	8b eb       	ldi	r24, 0xBB	; 187
    3df0:	94 e5       	ldi	r25, 0x54	; 84
    3df2:	08 95       	ret
    3df4:	82 e0       	ldi	r24, 0x02	; 2
    3df6:	fb 01       	movw	r30, r22
    3df8:	80 83       	st	Z, r24
    3dfa:	89 e9       	ldi	r24, 0x99	; 153
    3dfc:	94 e5       	ldi	r25, 0x54	; 84
    3dfe:	08 95       	ret
    3e00:	81 e0       	ldi	r24, 0x01	; 1
    3e02:	fb 01       	movw	r30, r22
    3e04:	80 83       	st	Z, r24
    3e06:	88 e8       	ldi	r24, 0x88	; 136
    3e08:	94 e5       	ldi	r25, 0x54	; 84
    3e0a:	08 95       	ret
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	fb 01       	movw	r30, r22
    3e10:	80 83       	st	Z, r24
    3e12:	87 e7       	ldi	r24, 0x77	; 119
    3e14:	94 e5       	ldi	r25, 0x54	; 84
    3e16:	08 95       	ret
    3e18:	82 e0       	ldi	r24, 0x02	; 2
    3e1a:	fb 01       	movw	r30, r22
    3e1c:	80 83       	st	Z, r24
    3e1e:	85 e5       	ldi	r24, 0x55	; 85
    3e20:	94 e5       	ldi	r25, 0x54	; 84
    3e22:	08 95       	ret
    3e24:	81 e0       	ldi	r24, 0x01	; 1
    3e26:	fb 01       	movw	r30, r22
    3e28:	80 83       	st	Z, r24
    3e2a:	84 e4       	ldi	r24, 0x44	; 68
    3e2c:	94 e5       	ldi	r25, 0x54	; 84
    3e2e:	08 95       	ret
    3e30:	82 e0       	ldi	r24, 0x02	; 2
    3e32:	fb 01       	movw	r30, r22
    3e34:	80 83       	st	Z, r24
    3e36:	82 e2       	ldi	r24, 0x22	; 34
    3e38:	94 e5       	ldi	r25, 0x54	; 84
    3e3a:	08 95       	ret
    3e3c:	82 e0       	ldi	r24, 0x02	; 2
    3e3e:	fb 01       	movw	r30, r22
    3e40:	80 83       	st	Z, r24
    3e42:	80 e0       	ldi	r24, 0x00	; 0
    3e44:	94 e5       	ldi	r25, 0x54	; 84
    3e46:	08 95       	ret
    3e48:	82 e0       	ldi	r24, 0x02	; 2
    3e4a:	fb 01       	movw	r30, r22
    3e4c:	80 83       	st	Z, r24
    3e4e:	8e ed       	ldi	r24, 0xDE	; 222
    3e50:	93 e5       	ldi	r25, 0x53	; 83
    3e52:	08 95       	ret
    3e54:	82 e0       	ldi	r24, 0x02	; 2
    3e56:	fb 01       	movw	r30, r22
    3e58:	80 83       	st	Z, r24
    3e5a:	8c eb       	ldi	r24, 0xBC	; 188
    3e5c:	93 e5       	ldi	r25, 0x53	; 83
    3e5e:	08 95       	ret
    3e60:	82 e0       	ldi	r24, 0x02	; 2
    3e62:	fb 01       	movw	r30, r22
    3e64:	80 83       	st	Z, r24
    3e66:	8a e9       	ldi	r24, 0x9A	; 154
    3e68:	93 e5       	ldi	r25, 0x53	; 83
    3e6a:	08 95       	ret
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	fb 01       	movw	r30, r22
    3e70:	80 83       	st	Z, r24
    3e72:	89 e8       	ldi	r24, 0x89	; 137
    3e74:	93 e5       	ldi	r25, 0x53	; 83
    3e76:	08 95       	ret
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	fb 01       	movw	r30, r22
    3e7c:	80 83       	st	Z, r24
    3e7e:	88 e7       	ldi	r24, 0x78	; 120
    3e80:	93 e5       	ldi	r25, 0x53	; 83
    3e82:	08 95       	ret
    3e84:	81 e0       	ldi	r24, 0x01	; 1
    3e86:	fb 01       	movw	r30, r22
    3e88:	80 83       	st	Z, r24
    3e8a:	87 e6       	ldi	r24, 0x67	; 103
    3e8c:	93 e5       	ldi	r25, 0x53	; 83
    3e8e:	08 95       	ret
    3e90:	82 e0       	ldi	r24, 0x02	; 2
    3e92:	fb 01       	movw	r30, r22
    3e94:	80 83       	st	Z, r24
    3e96:	85 e4       	ldi	r24, 0x45	; 69
    3e98:	93 e5       	ldi	r25, 0x53	; 83
    3e9a:	08 95       	ret
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	fb 01       	movw	r30, r22
    3ea0:	80 83       	st	Z, r24
    3ea2:	84 e3       	ldi	r24, 0x34	; 52
    3ea4:	93 e5       	ldi	r25, 0x53	; 83
    3ea6:	08 95       	ret
    3ea8:	82 e0       	ldi	r24, 0x02	; 2
    3eaa:	fb 01       	movw	r30, r22
    3eac:	80 83       	st	Z, r24
    3eae:	82 e1       	ldi	r24, 0x12	; 18
    3eb0:	93 e5       	ldi	r25, 0x53	; 83
    3eb2:	08 95       	ret
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	fb 01       	movw	r30, r22
    3eb8:	80 83       	st	Z, r24
    3eba:	81 e0       	ldi	r24, 0x01	; 1
    3ebc:	93 e5       	ldi	r25, 0x53	; 83
    3ebe:	08 95       	ret
    3ec0:	81 e0       	ldi	r24, 0x01	; 1
    3ec2:	fb 01       	movw	r30, r22
    3ec4:	80 83       	st	Z, r24
    3ec6:	80 ef       	ldi	r24, 0xF0	; 240
    3ec8:	92 e5       	ldi	r25, 0x52	; 82
    3eca:	08 95       	ret
    3ecc:	81 e0       	ldi	r24, 0x01	; 1
    3ece:	fb 01       	movw	r30, r22
    3ed0:	80 83       	st	Z, r24
    3ed2:	8f ed       	ldi	r24, 0xDF	; 223
    3ed4:	92 e5       	ldi	r25, 0x52	; 82
    3ed6:	08 95       	ret
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	fb 01       	movw	r30, r22
    3edc:	80 83       	st	Z, r24
    3ede:	8e ec       	ldi	r24, 0xCE	; 206
    3ee0:	92 e5       	ldi	r25, 0x52	; 82
    3ee2:	08 95       	ret
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
    3ee6:	fb 01       	movw	r30, r22
    3ee8:	80 83       	st	Z, r24
    3eea:	8d eb       	ldi	r24, 0xBD	; 189
    3eec:	92 e5       	ldi	r25, 0x52	; 82
    3eee:	08 95       	ret
    3ef0:	81 e0       	ldi	r24, 0x01	; 1
    3ef2:	fb 01       	movw	r30, r22
    3ef4:	80 83       	st	Z, r24
    3ef6:	8c ea       	ldi	r24, 0xAC	; 172
    3ef8:	92 e5       	ldi	r25, 0x52	; 82
    3efa:	08 95       	ret
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	fb 01       	movw	r30, r22
    3f00:	80 83       	st	Z, r24
    3f02:	8b e9       	ldi	r24, 0x9B	; 155
    3f04:	92 e5       	ldi	r25, 0x52	; 82
    3f06:	08 95       	ret
    3f08:	82 e0       	ldi	r24, 0x02	; 2
    3f0a:	fb 01       	movw	r30, r22
    3f0c:	80 83       	st	Z, r24
    3f0e:	8b e2       	ldi	r24, 0x2B	; 43
    3f10:	9c e5       	ldi	r25, 0x5C	; 92
    3f12:	08 95       	ret

00003f14 <playSnake>:
#include "fonts.h"

int16_t i, j;
bool released = true;

void playSnake(void){
    3f14:	2f 92       	push	r2
    3f16:	3f 92       	push	r3
    3f18:	4f 92       	push	r4
    3f1a:	5f 92       	push	r5
    3f1c:	6f 92       	push	r6
    3f1e:	7f 92       	push	r7
    3f20:	8f 92       	push	r8
    3f22:	9f 92       	push	r9
    3f24:	af 92       	push	r10
    3f26:	bf 92       	push	r11
    3f28:	cf 92       	push	r12
    3f2a:	df 92       	push	r13
    3f2c:	ef 92       	push	r14
    3f2e:	ff 92       	push	r15
    3f30:	0f 93       	push	r16
    3f32:	1f 93       	push	r17
    3f34:	cf 93       	push	r28
    3f36:	df 93       	push	r29
    3f38:	cd b7       	in	r28, 0x3d	; 61
    3f3a:	de b7       	in	r29, 0x3e	; 62
    3f3c:	c8 59       	subi	r28, 0x98	; 152
    3f3e:	d1 40       	sbci	r29, 0x01	; 1
    3f40:	cd bf       	out	0x3d, r28	; 61
    3f42:	de bf       	out	0x3e, r29	; 62
	bool newBait=true, lost = false;
	int16_t baitX =0, baitY =0, tailX,tailY;
	
	//ioport_configure_port_pin(&PORTF, PIN1_bm, IOPORT_DIR_INPUT);
	//ioport_configure_port_pin(&PORTF, PIN2_bm, IOPORT_DIR_INPUT);
	MLCDClearAll();
    3f44:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <MLCDClearAll>
	
	for(i=0;i<length;i++){
		positionX[i]=column;
    3f48:	89 e1       	ldi	r24, 0x19	; 25
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	89 83       	std	Y+1, r24	; 0x01
    3f4e:	9a 83       	std	Y+2, r25	; 0x02
		positionY[i]=row;
    3f50:	89 e7       	ldi	r24, 0x79	; 121
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	c7 53       	subi	r28, 0x37	; 55
    3f56:	df 4f       	sbci	r29, 0xFF	; 255
    3f58:	88 83       	st	Y, r24
    3f5a:	99 83       	std	Y+1, r25	; 0x01
    3f5c:	c9 5c       	subi	r28, 0xC9	; 201
    3f5e:	d0 40       	sbci	r29, 0x00	; 0
	//ioport_configure_port_pin(&PORTF, PIN1_bm, IOPORT_DIR_INPUT);
	//ioport_configure_port_pin(&PORTF, PIN2_bm, IOPORT_DIR_INPUT);
	MLCDClearAll();
	
	for(i=0;i<length;i++){
		positionX[i]=column;
    3f60:	2a e1       	ldi	r18, 0x1A	; 26
    3f62:	30 e0       	ldi	r19, 0x00	; 0
    3f64:	2b 83       	std	Y+3, r18	; 0x03
    3f66:	3c 83       	std	Y+4, r19	; 0x04
		positionY[i]=row;
    3f68:	c5 53       	subi	r28, 0x35	; 53
    3f6a:	df 4f       	sbci	r29, 0xFF	; 255
    3f6c:	88 83       	st	Y, r24
    3f6e:	99 83       	std	Y+1, r25	; 0x01
    3f70:	cb 5c       	subi	r28, 0xCB	; 203
    3f72:	d0 40       	sbci	r29, 0x00	; 0
	//ioport_configure_port_pin(&PORTF, PIN1_bm, IOPORT_DIR_INPUT);
	//ioport_configure_port_pin(&PORTF, PIN2_bm, IOPORT_DIR_INPUT);
	MLCDClearAll();
	
	for(i=0;i<length;i++){
		positionX[i]=column;
    3f74:	2b e1       	ldi	r18, 0x1B	; 27
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	2d 83       	std	Y+5, r18	; 0x05
    3f7a:	3e 83       	std	Y+6, r19	; 0x06
		positionY[i]=row;
    3f7c:	c3 53       	subi	r28, 0x33	; 51
    3f7e:	df 4f       	sbci	r29, 0xFF	; 255
    3f80:	88 83       	st	Y, r24
    3f82:	99 83       	std	Y+1, r25	; 0x01
    3f84:	cd 5c       	subi	r28, 0xCD	; 205
    3f86:	d0 40       	sbci	r29, 0x00	; 0
	//ioport_configure_port_pin(&PORTF, PIN1_bm, IOPORT_DIR_INPUT);
	//ioport_configure_port_pin(&PORTF, PIN2_bm, IOPORT_DIR_INPUT);
	MLCDClearAll();
	
	for(i=0;i<length;i++){
		positionX[i]=column;
    3f88:	2c e1       	ldi	r18, 0x1C	; 28
    3f8a:	30 e0       	ldi	r19, 0x00	; 0
    3f8c:	2f 83       	std	Y+7, r18	; 0x07
    3f8e:	38 87       	std	Y+8, r19	; 0x08
		positionY[i]=row;
    3f90:	c1 53       	subi	r28, 0x31	; 49
    3f92:	df 4f       	sbci	r29, 0xFF	; 255
    3f94:	88 83       	st	Y, r24
    3f96:	99 83       	std	Y+1, r25	; 0x01
    3f98:	cf 5c       	subi	r28, 0xCF	; 207
    3f9a:	d0 40       	sbci	r29, 0x00	; 0
    3f9c:	84 e0       	ldi	r24, 0x04	; 4
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	80 93 a8 5c 	sts	0x5CA8, r24
    3fa4:	90 93 a9 5c 	sts	0x5CA9, r25
    3fa8:	cf 56       	subi	r28, 0x6F	; 111
    3faa:	de 4f       	sbci	r29, 0xFE	; 254
    3fac:	18 82       	st	Y, r1
    3fae:	19 82       	std	Y+1, r1	; 0x01
    3fb0:	c1 59       	subi	r28, 0x91	; 145
    3fb2:	d1 40       	sbci	r29, 0x01	; 1
    3fb4:	c1 2c       	mov	r12, r1
    3fb6:	d1 2c       	mov	r13, r1
    3fb8:	bb 24       	eor	r11, r11
    3fba:	b3 94       	inc	r11
    3fbc:	21 2c       	mov	r2, r1
    3fbe:	68 94       	set
    3fc0:	33 24       	eor	r3, r3
    3fc2:	32 f8       	bld	r3, 2
    3fc4:	9e 01       	movw	r18, r28
    3fc6:	2f 5f       	subi	r18, 0xFF	; 255
    3fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    3fca:	49 01       	movw	r8, r18
    3fcc:	3e 01       	movw	r6, r28
    3fce:	39 ec       	ldi	r19, 0xC9	; 201
    3fd0:	63 0e       	add	r6, r19
    3fd2:	71 1c       	adc	r7, r1
    3fd4:	cb 56       	subi	r28, 0x6B	; 107
    3fd6:	de 4f       	sbci	r29, 0xFE	; 254
    3fd8:	88 82       	st	Y, r8
    3fda:	c5 59       	subi	r28, 0x95	; 149
    3fdc:	d1 40       	sbci	r29, 0x01	; 1
    3fde:	ca 56       	subi	r28, 0x6A	; 106
    3fe0:	de 4f       	sbci	r29, 0xFE	; 254
    3fe2:	98 82       	st	Y, r9
    3fe4:	c6 59       	subi	r28, 0x96	; 150
    3fe6:	d1 40       	sbci	r29, 0x01	; 1
    3fe8:	c9 56       	subi	r28, 0x69	; 105
    3fea:	de 4f       	sbci	r29, 0xFE	; 254
    3fec:	68 82       	st	Y, r6
    3fee:	c7 59       	subi	r28, 0x97	; 151
    3ff0:	d1 40       	sbci	r29, 0x01	; 1
    3ff2:	c8 56       	subi	r28, 0x68	; 104
    3ff4:	de 4f       	sbci	r29, 0xFE	; 254
    3ff6:	78 82       	st	Y, r7
    3ff8:	c8 59       	subi	r28, 0x98	; 152
    3ffa:	d1 40       	sbci	r29, 0x01	; 1

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    3ffc:	0f 2e       	mov	r0, r31
    3ffe:	f0 ea       	ldi	r31, 0xA0	; 160
    4000:	4f 2e       	mov	r4, r31
    4002:	f6 e0       	ldi	r31, 0x06	; 6
    4004:	5f 2e       	mov	r5, r31
    4006:	f0 2d       	mov	r31, r0
		column++;
	}
	
	while(1){
		srand(positionX[0]);
    4008:	e9 80       	ldd	r14, Y+1	; 0x01
    400a:	fa 80       	ldd	r15, Y+2	; 0x02
    400c:	c7 01       	movw	r24, r14
    400e:	0e 94 38 34 	call	0x6870	; 0x6870 <srand>
		
		if(newBait){
    4012:	bb 20       	and	r11, r11
    4014:	09 f4       	brne	.+2      	; 0x4018 <playSnake+0x104>
    4016:	95 c0       	rjmp	.+298    	; 0x4142 <playSnake+0x22e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    4018:	82 e0       	ldi	r24, 0x02	; 2
    401a:	80 93 e5 07 	sts	0x07E5, r24
    401e:	03 2d       	mov	r16, r3
    4020:	10 e0       	ldi	r17, 0x00	; 0
    4022:	00 0f       	add	r16, r16
    4024:	11 1f       	adc	r17, r17
    4026:	08 0d       	add	r16, r8
    4028:	19 1d       	adc	r17, r9
			bool overlap = false;
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
				baitX = rand()%50+1;
				for(i=0;i<length;i++){
    402a:	c3 2c       	mov	r12, r3
    402c:	d1 2c       	mov	r13, r1
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    402e:	68 94       	set
    4030:	bb 24       	eor	r11, r11
    4032:	b1 f8       	bld	r11, 1
    4034:	a3 2c       	mov	r10, r3
    4036:	cd 56       	subi	r28, 0x6D	; 109
    4038:	de 4f       	sbci	r29, 0xFE	; 254
    403a:	88 82       	st	Y, r8
    403c:	99 82       	std	Y+1, r9	; 0x01
    403e:	c3 59       	subi	r28, 0x93	; 147
    4040:	d1 40       	sbci	r29, 0x01	; 1
    4042:	92 2c       	mov	r9, r2
    4044:	16 01       	movw	r2, r12
		if(newBait){
			LED_Off(LED1);
			bool overlap = false;
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
    4046:	0e 94 35 34 	call	0x686a	; 0x686a <rand>
    404a:	6e e1       	ldi	r22, 0x1E	; 30
    404c:	70 e0       	ldi	r23, 0x00	; 0
    404e:	0e 94 8e 33 	call	0x671c	; 0x671c <__divmodhi4>
    4052:	6c 01       	movw	r12, r24
    4054:	cc 0c       	add	r12, r12
    4056:	dd 1c       	adc	r13, r13
    4058:	cc 0c       	add	r12, r12
    405a:	dd 1c       	adc	r13, r13
    405c:	cc 0c       	add	r12, r12
    405e:	dd 1c       	adc	r13, r13
    4060:	4f ef       	ldi	r20, 0xFF	; 255
    4062:	c4 1a       	sub	r12, r20
    4064:	d4 0a       	sbc	r13, r20
				baitX = rand()%50+1;
    4066:	0e 94 35 34 	call	0x686a	; 0x686a <rand>
    406a:	62 e3       	ldi	r22, 0x32	; 50
    406c:	70 e0       	ldi	r23, 0x00	; 0
    406e:	0e 94 8e 33 	call	0x671c	; 0x671c <__divmodhi4>
    4072:	01 96       	adiw	r24, 0x01	; 1
				for(i=0;i<length;i++){
    4074:	10 92 a8 5c 	sts	0x5CA8, r1
    4078:	10 92 a9 5c 	sts	0x5CA9, r1
    407c:	12 14       	cp	r1, r2
    407e:	13 04       	cpc	r1, r3
    4080:	8c f5       	brge	.+98     	; 0x40e4 <playSnake+0x1d0>
    4082:	cb 56       	subi	r28, 0x6B	; 107
    4084:	de 4f       	sbci	r29, 0xFE	; 254
    4086:	e8 81       	ld	r30, Y
    4088:	c5 59       	subi	r28, 0x95	; 149
    408a:	d1 40       	sbci	r29, 0x01	; 1
    408c:	ca 56       	subi	r28, 0x6A	; 106
    408e:	de 4f       	sbci	r29, 0xFE	; 254
    4090:	f8 81       	ld	r31, Y
    4092:	c6 59       	subi	r28, 0x96	; 150
    4094:	d1 40       	sbci	r29, 0x01	; 1
    4096:	c9 56       	subi	r28, 0x69	; 105
    4098:	de 4f       	sbci	r29, 0xFE	; 254
    409a:	a8 81       	ld	r26, Y
    409c:	c7 59       	subi	r28, 0x97	; 151
    409e:	d1 40       	sbci	r29, 0x01	; 1
    40a0:	c8 56       	subi	r28, 0x68	; 104
    40a2:	de 4f       	sbci	r29, 0xFE	; 254
    40a4:	b8 81       	ld	r27, Y
    40a6:	c8 59       	subi	r28, 0x98	; 152
    40a8:	d1 40       	sbci	r29, 0x01	; 1
		
		if(newBait){
			LED_Off(LED1);
			bool overlap = false;
			do{
				overlap = false;
    40aa:	40 e0       	ldi	r20, 0x00	; 0
				baitY = (rand()%30)*8 + 1;
				baitX = rand()%50+1;
				for(i=0;i<length;i++){
					if(baitX == positionX[i] && baitY == positionY[i])	overlap = true;
    40ac:	21 91       	ld	r18, Z+
    40ae:	31 91       	ld	r19, Z+
    40b0:	28 17       	cp	r18, r24
    40b2:	39 07       	cpc	r19, r25
    40b4:	31 f4       	brne	.+12     	; 0x40c2 <playSnake+0x1ae>
    40b6:	2d 91       	ld	r18, X+
    40b8:	3c 91       	ld	r19, X
    40ba:	11 97       	sbiw	r26, 0x01	; 1
    40bc:	2c 15       	cp	r18, r12
    40be:	3d 05       	cpc	r19, r13
    40c0:	19 f0       	breq	.+6      	; 0x40c8 <playSnake+0x1b4>
					//if(baitY == positionY[i])	overlap = true;
					if(overlap)	LED_On(LED1);
    40c2:	44 23       	and	r20, r20
    40c4:	21 f0       	breq	.+8      	; 0x40ce <playSnake+0x1ba>
    40c6:	01 c0       	rjmp	.+2      	; 0x40ca <playSnake+0x1b6>
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
				baitX = rand()%50+1;
				for(i=0;i<length;i++){
					if(baitX == positionX[i] && baitY == positionY[i])	overlap = true;
    40c8:	41 e0       	ldi	r20, 0x01	; 1
    40ca:	b0 92 e6 07 	sts	0x07E6, r11
    40ce:	12 96       	adiw	r26, 0x02	; 2
			bool overlap = false;
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
				baitX = rand()%50+1;
				for(i=0;i<length;i++){
    40d0:	e0 17       	cp	r30, r16
    40d2:	f1 07       	cpc	r31, r17
    40d4:	59 f7       	brne	.-42     	; 0x40ac <playSnake+0x198>
    40d6:	20 92 a8 5c 	sts	0x5CA8, r2
    40da:	30 92 a9 5c 	sts	0x5CA9, r3
					if(baitX == positionX[i] && baitY == positionY[i])	overlap = true;
					//if(baitY == positionY[i])	overlap = true;
					if(overlap)	LED_On(LED1);
				}
			}while(overlap);
    40de:	41 11       	cpse	r20, r1
    40e0:	b2 cf       	rjmp	.-156    	; 0x4046 <playSnake+0x132>
    40e2:	16 c0       	rjmp	.+44     	; 0x4110 <playSnake+0x1fc>
    40e4:	3a 2c       	mov	r3, r10
    40e6:	29 2c       	mov	r2, r9
    40e8:	cf 56       	subi	r28, 0x6F	; 111
    40ea:	de 4f       	sbci	r29, 0xFE	; 254
    40ec:	c8 82       	st	Y, r12
    40ee:	d9 82       	std	Y+1, r13	; 0x01
    40f0:	c1 59       	subi	r28, 0x91	; 145
    40f2:	d1 40       	sbci	r29, 0x01	; 1
    40f4:	6c 01       	movw	r12, r24
    40f6:	cd 56       	subi	r28, 0x6D	; 109
    40f8:	de 4f       	sbci	r29, 0xFE	; 254
    40fa:	88 80       	ld	r8, Y
    40fc:	99 80       	ldd	r9, Y+1	; 0x01
    40fe:	c3 59       	subi	r28, 0x93	; 147
    4100:	d1 40       	sbci	r29, 0x01	; 1
			LED_Off(LED1);
			bool overlap = false;
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
				baitX = rand()%50+1;
    4102:	68 2f       	mov	r22, r24
		if(newBait){
			LED_Off(LED1);
			bool overlap = false;
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
    4104:	cf 56       	subi	r28, 0x6F	; 111
    4106:	de 4f       	sbci	r29, 0xFE	; 254
    4108:	88 81       	ld	r24, Y
    410a:	c1 59       	subi	r28, 0x91	; 145
    410c:	d1 40       	sbci	r29, 0x01	; 1
    410e:	15 c0       	rjmp	.+42     	; 0x413a <playSnake+0x226>
    4110:	3a 2c       	mov	r3, r10
    4112:	29 2c       	mov	r2, r9
    4114:	cf 56       	subi	r28, 0x6F	; 111
    4116:	de 4f       	sbci	r29, 0xFE	; 254
    4118:	c8 82       	st	Y, r12
    411a:	d9 82       	std	Y+1, r13	; 0x01
    411c:	c1 59       	subi	r28, 0x91	; 145
    411e:	d1 40       	sbci	r29, 0x01	; 1
    4120:	6c 01       	movw	r12, r24
    4122:	cd 56       	subi	r28, 0x6D	; 109
    4124:	de 4f       	sbci	r29, 0xFE	; 254
    4126:	88 80       	ld	r8, Y
    4128:	99 80       	ldd	r9, Y+1	; 0x01
    412a:	c3 59       	subi	r28, 0x93	; 147
    412c:	d1 40       	sbci	r29, 0x01	; 1
				baitX = rand()%50+1;
    412e:	68 2f       	mov	r22, r24
		if(newBait){
			LED_Off(LED1);
			bool overlap = false;
			do{
				overlap = false;
				baitY = (rand()%30)*8 + 1;
    4130:	cf 56       	subi	r28, 0x6F	; 111
    4132:	de 4f       	sbci	r29, 0xFE	; 254
    4134:	88 81       	ld	r24, Y
    4136:	c1 59       	subi	r28, 0x91	; 145
    4138:	d1 40       	sbci	r29, 0x01	; 1
					if(baitX == positionX[i] && baitY == positionY[i])	overlap = true;
					//if(baitY == positionY[i])	overlap = true;
					if(overlap)	LED_On(LED1);
				}
			}while(overlap);
			MLCDDrawSnakeBait(baitY, baitX, false);
    413a:	40 e0       	ldi	r20, 0x00	; 0
    413c:	0e 94 e5 2e 	call	0x5dca	; 0x5dca <MLCDDrawSnakeBait>
			newBait = false;
    4140:	b1 2c       	mov	r11, r1
		}
		
		for(i=0;i<length;i++){
    4142:	10 92 a8 5c 	sts	0x5CA8, r1
    4146:	10 92 a9 5c 	sts	0x5CA9, r1
    414a:	03 2d       	mov	r16, r3
    414c:	10 e0       	ldi	r17, 0x00	; 0
    414e:	10 16       	cp	r1, r16
    4150:	11 06       	cpc	r1, r17
    4152:	e4 f4       	brge	.+56     	; 0x418c <playSnake+0x278>
    4154:	80 e0       	ldi	r24, 0x00	; 0
    4156:	90 e0       	ldi	r25, 0x00	; 0
			
			MLCDDrawSquare(1,positionY[i],positionX[i],true);
    4158:	88 0f       	add	r24, r24
    415a:	99 1f       	adc	r25, r25
    415c:	f4 01       	movw	r30, r8
    415e:	e8 0f       	add	r30, r24
    4160:	f9 1f       	adc	r31, r25
    4162:	d3 01       	movw	r26, r6
    4164:	a8 0f       	add	r26, r24
    4166:	b9 1f       	adc	r27, r25
    4168:	21 e0       	ldi	r18, 0x01	; 1
    416a:	40 81       	ld	r20, Z
    416c:	6c 91       	ld	r22, X
    416e:	81 e0       	ldi	r24, 0x01	; 1
    4170:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <MLCDDrawSquare>
			}while(overlap);
			MLCDDrawSnakeBait(baitY, baitX, false);
			newBait = false;
		}
		
		for(i=0;i<length;i++){
    4174:	80 91 a8 5c 	lds	r24, 0x5CA8
    4178:	90 91 a9 5c 	lds	r25, 0x5CA9
    417c:	01 96       	adiw	r24, 0x01	; 1
    417e:	80 93 a8 5c 	sts	0x5CA8, r24
    4182:	90 93 a9 5c 	sts	0x5CA9, r25
    4186:	80 17       	cp	r24, r16
    4188:	91 07       	cpc	r25, r17
    418a:	34 f3       	brlt	.-52     	; 0x4158 <playSnake+0x244>
			
			MLCDDrawSquare(1,positionY[i],positionX[i],true);
		}
		tailX = positionX[0];
		tailY = positionY[0];
    418c:	d3 01       	movw	r26, r6
    418e:	0d 90       	ld	r0, X+
    4190:	bc 91       	ld	r27, X
    4192:	a0 2d       	mov	r26, r0
    4194:	cd 56       	subi	r28, 0x6D	; 109
    4196:	de 4f       	sbci	r29, 0xFE	; 254
    4198:	a8 83       	st	Y, r26
    419a:	b9 83       	std	Y+1, r27	; 0x01
    419c:	c3 59       	subi	r28, 0x93	; 147
    419e:	d1 40       	sbci	r29, 0x01	; 1
		
		for(i=0;i<length-1;i++){
    41a0:	10 92 a8 5c 	sts	0x5CA8, r1
    41a4:	10 92 a9 5c 	sts	0x5CA9, r1
    41a8:	a8 01       	movw	r20, r16
    41aa:	41 50       	subi	r20, 0x01	; 1
    41ac:	51 09       	sbc	r21, r1
    41ae:	14 16       	cp	r1, r20
    41b0:	15 06       	cpc	r1, r21
    41b2:	04 f5       	brge	.+64     	; 0x41f4 <playSnake+0x2e0>
    41b4:	f4 01       	movw	r30, r8
    41b6:	d3 01       	movw	r26, r6
    41b8:	63 2d       	mov	r22, r3
    41ba:	70 e0       	ldi	r23, 0x00	; 0
    41bc:	9b 01       	movw	r18, r22
    41be:	22 0f       	add	r18, r18
    41c0:	33 1f       	adc	r19, r19
    41c2:	8f ef       	ldi	r24, 0xFF	; 255
    41c4:	9f ef       	ldi	r25, 0xFF	; 255
    41c6:	8c 0f       	add	r24, r28
    41c8:	9d 1f       	adc	r25, r29
    41ca:	28 0f       	add	r18, r24
    41cc:	39 1f       	adc	r19, r25
			
			positionX[i] = positionX[i+1];
    41ce:	82 81       	ldd	r24, Z+2	; 0x02
    41d0:	93 81       	ldd	r25, Z+3	; 0x03
    41d2:	81 93       	st	Z+, r24
    41d4:	91 93       	st	Z+, r25
			positionY[i] = positionY[i+1];
    41d6:	12 96       	adiw	r26, 0x02	; 2
    41d8:	8d 91       	ld	r24, X+
    41da:	9c 91       	ld	r25, X
    41dc:	13 97       	sbiw	r26, 0x03	; 3
    41de:	8d 93       	st	X+, r24
    41e0:	9d 93       	st	X+, r25
			MLCDDrawSquare(1,positionY[i],positionX[i],true);
		}
		tailX = positionX[0];
		tailY = positionY[0];
		
		for(i=0;i<length-1;i++){
    41e2:	e2 17       	cp	r30, r18
    41e4:	f3 07       	cpc	r31, r19
    41e6:	99 f7       	brne	.-26     	; 0x41ce <playSnake+0x2ba>
    41e8:	61 50       	subi	r22, 0x01	; 1
    41ea:	71 09       	sbc	r23, r1
    41ec:	60 93 a8 5c 	sts	0x5CA8, r22
    41f0:	70 93 a9 5c 	sts	0x5CA9, r23
			
			positionX[i] = positionX[i+1];
			positionY[i] = positionY[i+1];
		}
		
		if(positionY[length-1]==baitY && positionX[length-1]==baitX){
    41f4:	fa 01       	movw	r30, r20
    41f6:	ee 0f       	add	r30, r30
    41f8:	ff 1f       	adc	r31, r31
    41fa:	e6 0d       	add	r30, r6
    41fc:	f7 1d       	adc	r31, r7
    41fe:	80 81       	ld	r24, Z
    4200:	91 81       	ldd	r25, Z+1	; 0x01
    4202:	cf 56       	subi	r28, 0x6F	; 111
    4204:	de 4f       	sbci	r29, 0xFE	; 254
    4206:	a8 81       	ld	r26, Y
    4208:	b9 81       	ldd	r27, Y+1	; 0x01
    420a:	c1 59       	subi	r28, 0x91	; 145
    420c:	d1 40       	sbci	r29, 0x01	; 1
    420e:	8a 17       	cp	r24, r26
    4210:	9b 07       	cpc	r25, r27
    4212:	09 f0       	breq	.+2      	; 0x4216 <playSnake+0x302>
    4214:	5f c0       	rjmp	.+190    	; 0x42d4 <playSnake+0x3c0>
    4216:	fa 01       	movw	r30, r20
    4218:	ee 0f       	add	r30, r30
    421a:	ff 1f       	adc	r31, r31
    421c:	e8 0d       	add	r30, r8
    421e:	f9 1d       	adc	r31, r9
    4220:	80 81       	ld	r24, Z
    4222:	91 81       	ldd	r25, Z+1	; 0x01
    4224:	8c 15       	cp	r24, r12
    4226:	9d 05       	cpc	r25, r13
    4228:	09 f0       	breq	.+2      	; 0x422c <playSnake+0x318>
    422a:	54 c0       	rjmp	.+168    	; 0x42d4 <playSnake+0x3c0>
			length++;
    422c:	33 94       	inc	r3
			newBait=true;
			for(i=length-1;i>0;i--){
    422e:	83 2d       	mov	r24, r3
    4230:	90 e0       	ldi	r25, 0x00	; 0
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	80 93 a8 5c 	sts	0x5CA8, r24
    4238:	90 93 a9 5c 	sts	0x5CA9, r25
    423c:	18 16       	cp	r1, r24
    423e:	19 06       	cpc	r1, r25
    4240:	e4 f5       	brge	.+120    	; 0x42ba <playSnake+0x3a6>
    4242:	23 2d       	mov	r18, r3
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	bc 01       	movw	r22, r24
    4248:	66 0f       	add	r22, r22
    424a:	77 1f       	adc	r23, r23
    424c:	f4 01       	movw	r30, r8
    424e:	e6 0f       	add	r30, r22
    4250:	f7 1f       	adc	r31, r23
    4252:	22 0f       	add	r18, r18
    4254:	33 1f       	adc	r19, r19
    4256:	c4 01       	movw	r24, r8
    4258:	82 0f       	add	r24, r18
    425a:	93 1f       	adc	r25, r19
    425c:	66 0d       	add	r22, r6
    425e:	77 1d       	adc	r23, r7
    4260:	a9 01       	movw	r20, r18
    4262:	5e 01       	movw	r10, r28
    4264:	b3 e0       	ldi	r27, 0x03	; 3
    4266:	ab 0e       	add	r10, r27
    4268:	b1 1c       	adc	r11, r1
    426a:	31 95       	neg	r19
    426c:	21 95       	neg	r18
    426e:	31 09       	sbc	r19, r1
    4270:	32 97       	sbiw	r30, 0x02	; 2
    4272:	d9 01       	movw	r26, r18
    4274:	ae 0f       	add	r26, r30
    4276:	bf 1f       	adc	r27, r31
    4278:	a4 0f       	add	r26, r20
    427a:	b5 1f       	adc	r27, r21
				
				positionX[i] = positionX[i-1];
    427c:	0d 91       	ld	r16, X+
    427e:	1c 91       	ld	r17, X
    4280:	02 97       	sbiw	r24, 0x02	; 2
    4282:	dc 01       	movw	r26, r24
    4284:	a2 0f       	add	r26, r18
    4286:	b3 1f       	adc	r27, r19
    4288:	a4 0f       	add	r26, r20
    428a:	b5 1f       	adc	r27, r21
    428c:	0d 93       	st	X+, r16
    428e:	1c 93       	st	X, r17
    4290:	62 50       	subi	r22, 0x02	; 2
    4292:	71 09       	sbc	r23, r1
    4294:	db 01       	movw	r26, r22
    4296:	a2 0f       	add	r26, r18
    4298:	b3 1f       	adc	r27, r19
    429a:	a4 0f       	add	r26, r20
    429c:	b5 1f       	adc	r27, r21
				positionY[i] = positionY[i-1];
    429e:	0d 91       	ld	r16, X+
    42a0:	1c 91       	ld	r17, X
    42a2:	11 97       	sbiw	r26, 0x01	; 1
    42a4:	12 96       	adiw	r26, 0x02	; 2
    42a6:	0d 93       	st	X+, r16
    42a8:	1c 93       	st	X, r17
    42aa:	13 97       	sbiw	r26, 0x03	; 3
		}
		
		if(positionY[length-1]==baitY && positionX[length-1]==baitX){
			length++;
			newBait=true;
			for(i=length-1;i>0;i--){
    42ac:	8a 15       	cp	r24, r10
    42ae:	9b 05       	cpc	r25, r11
    42b0:	f9 f6       	brne	.-66     	; 0x4270 <playSnake+0x35c>
    42b2:	10 92 a8 5c 	sts	0x5CA8, r1
    42b6:	10 92 a9 5c 	sts	0x5CA9, r1
				
				positionX[i] = positionX[i-1];
				positionY[i] = positionY[i-1];
			}
			positionX[0] = tailX;
    42ba:	e9 82       	std	Y+1, r14	; 0x01
    42bc:	fa 82       	std	Y+2, r15	; 0x02
			positionY[0] = tailY;
    42be:	cd 56       	subi	r28, 0x6D	; 109
    42c0:	de 4f       	sbci	r29, 0xFE	; 254
    42c2:	28 81       	ld	r18, Y
    42c4:	39 81       	ldd	r19, Y+1	; 0x01
    42c6:	c3 59       	subi	r28, 0x93	; 147
    42c8:	d1 40       	sbci	r29, 0x01	; 1
    42ca:	f3 01       	movw	r30, r6
    42cc:	20 83       	st	Z, r18
    42ce:	31 83       	std	Z+1, r19	; 0x01
			positionY[i] = positionY[i+1];
		}
		
		if(positionY[length-1]==baitY && positionX[length-1]==baitX){
			length++;
			newBait=true;
    42d0:	bb 24       	eor	r11, r11
    42d2:	b3 94       	inc	r11
			}
			positionX[0] = tailX;
			positionY[0] = tailY;
		}
		
		switch(direction){
    42d4:	31 e0       	ldi	r19, 0x01	; 1
    42d6:	23 16       	cp	r2, r19
    42d8:	09 f4       	brne	.+2      	; 0x42dc <playSnake+0x3c8>
    42da:	85 c0       	rjmp	.+266    	; 0x43e6 <playSnake+0x4d2>
    42dc:	23 16       	cp	r2, r19
    42de:	48 f0       	brcs	.+18     	; 0x42f2 <playSnake+0x3de>
    42e0:	42 e0       	ldi	r20, 0x02	; 2
    42e2:	24 16       	cp	r2, r20
    42e4:	09 f4       	brne	.+2      	; 0x42e8 <playSnake+0x3d4>
    42e6:	f5 c0       	rjmp	.+490    	; 0x44d2 <playSnake+0x5be>
    42e8:	53 e0       	ldi	r21, 0x03	; 3
    42ea:	25 16       	cp	r2, r21
    42ec:	09 f4       	brne	.+2      	; 0x42f0 <playSnake+0x3dc>
    42ee:	66 c1       	rjmp	.+716    	; 0x45bc <playSnake+0x6a8>
    42f0:	df c1       	rjmp	.+958    	; 0x46b0 <playSnake+0x79c>
			case DIR_RIGHT:
			
			positionX[length-1]++;
    42f2:	03 2d       	mov	r16, r3
    42f4:	10 e0       	ldi	r17, 0x00	; 0
    42f6:	01 50       	subi	r16, 0x01	; 1
    42f8:	11 09       	sbc	r17, r1
    42fa:	f8 01       	movw	r30, r16
    42fc:	ee 0f       	add	r30, r30
    42fe:	ff 1f       	adc	r31, r31
    4300:	e8 0d       	add	r30, r8
    4302:	f9 1d       	adc	r31, r9
    4304:	20 81       	ld	r18, Z
    4306:	31 81       	ldd	r19, Z+1	; 0x01
    4308:	2f 5f       	subi	r18, 0xFF	; 255
    430a:	3f 4f       	sbci	r19, 0xFF	; 255
			if(positionX[length-1]%(MLCD_BYTES_LINE+1) == 0)	positionX[length-1] = 1;
    430c:	c9 01       	movw	r24, r18
    430e:	63 e3       	ldi	r22, 0x33	; 51
    4310:	70 e0       	ldi	r23, 0x00	; 0
    4312:	0e 94 8e 33 	call	0x671c	; 0x671c <__divmodhi4>
    4316:	89 2b       	or	r24, r25
    4318:	41 f0       	breq	.+16     	; 0x432a <playSnake+0x416>
		}
		
		switch(direction){
			case DIR_RIGHT:
			
			positionX[length-1]++;
    431a:	f8 01       	movw	r30, r16
    431c:	ee 0f       	add	r30, r30
    431e:	ff 1f       	adc	r31, r31
    4320:	e8 0d       	add	r30, r8
    4322:	f9 1d       	adc	r31, r9
    4324:	20 83       	st	Z, r18
    4326:	31 83       	std	Z+1, r19	; 0x01
    4328:	09 c0       	rjmp	.+18     	; 0x433c <playSnake+0x428>
			if(positionX[length-1]%(MLCD_BYTES_LINE+1) == 0)	positionX[length-1] = 1;
    432a:	f8 01       	movw	r30, r16
    432c:	ee 0f       	add	r30, r30
    432e:	ff 1f       	adc	r31, r31
    4330:	e8 0d       	add	r30, r8
    4332:	f9 1d       	adc	r31, r9
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	80 83       	st	Z, r24
    433a:	91 83       	std	Z+1, r25	; 0x01
			
			for(i=0;i<length-1;i++){
    433c:	10 92 a8 5c 	sts	0x5CA8, r1
    4340:	10 92 a9 5c 	sts	0x5CA9, r1
    4344:	10 16       	cp	r1, r16
    4346:	11 06       	cpc	r1, r17
    4348:	0c f0       	brlt	.+2      	; 0x434c <playSnake+0x438>
    434a:	b4 c1       	rjmp	.+872    	; 0x46b4 <playSnake+0x7a0>
				if(positionX[length-1] == positionX[i] && positionY[length-1] == positionY[i])	lost = true;
    434c:	f8 01       	movw	r30, r16
    434e:	ee 0f       	add	r30, r30
    4350:	ff 1f       	adc	r31, r31
    4352:	e8 0d       	add	r30, r8
    4354:	f9 1d       	adc	r31, r9
    4356:	20 81       	ld	r18, Z
    4358:	31 81       	ldd	r19, Z+1	; 0x01
    435a:	cb 56       	subi	r28, 0x6B	; 107
    435c:	de 4f       	sbci	r29, 0xFE	; 254
    435e:	e8 81       	ld	r30, Y
    4360:	c5 59       	subi	r28, 0x95	; 149
    4362:	d1 40       	sbci	r29, 0x01	; 1
    4364:	ca 56       	subi	r28, 0x6A	; 106
    4366:	de 4f       	sbci	r29, 0xFE	; 254
    4368:	f8 81       	ld	r31, Y
    436a:	c6 59       	subi	r28, 0x96	; 150
    436c:	d1 40       	sbci	r29, 0x01	; 1
    436e:	83 2d       	mov	r24, r3
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	88 0f       	add	r24, r24
    4374:	99 1f       	adc	r25, r25
    4376:	6f ef       	ldi	r22, 0xFF	; 255
    4378:	7f ef       	ldi	r23, 0xFF	; 255
    437a:	6c 0f       	add	r22, r28
    437c:	7d 1f       	adc	r23, r29
    437e:	86 0f       	add	r24, r22
    4380:	97 1f       	adc	r25, r23
    4382:	f1 2c       	mov	r15, r1
    4384:	00 0f       	add	r16, r16
    4386:	11 1f       	adc	r17, r17
    4388:	06 0d       	add	r16, r6
    438a:	17 1d       	adc	r17, r7
    438c:	cd 56       	subi	r28, 0x6D	; 109
    438e:	de 4f       	sbci	r29, 0xFE	; 254
    4390:	68 82       	st	Y, r6
    4392:	79 82       	std	Y+1, r7	; 0x01
    4394:	c3 59       	subi	r28, 0x93	; 147
    4396:	d1 40       	sbci	r29, 0x01	; 1
    4398:	41 91       	ld	r20, Z+
    439a:	51 91       	ld	r21, Z+
    439c:	24 17       	cp	r18, r20
    439e:	35 07       	cpc	r19, r21
    43a0:	81 f4       	brne	.+32     	; 0x43c2 <playSnake+0x4ae>
    43a2:	d8 01       	movw	r26, r16
    43a4:	6d 91       	ld	r22, X+
    43a6:	7c 91       	ld	r23, X
    43a8:	cd 56       	subi	r28, 0x6D	; 109
    43aa:	de 4f       	sbci	r29, 0xFE	; 254
    43ac:	a8 81       	ld	r26, Y
    43ae:	b9 81       	ldd	r27, Y+1	; 0x01
    43b0:	c3 59       	subi	r28, 0x93	; 147
    43b2:	d1 40       	sbci	r29, 0x01	; 1
    43b4:	4d 91       	ld	r20, X+
    43b6:	5c 91       	ld	r21, X
    43b8:	64 17       	cp	r22, r20
    43ba:	75 07       	cpc	r23, r21
    43bc:	11 f4       	brne	.+4      	; 0x43c2 <playSnake+0x4ae>
    43be:	ff 24       	eor	r15, r15
    43c0:	f3 94       	inc	r15
    43c2:	cd 56       	subi	r28, 0x6D	; 109
    43c4:	de 4f       	sbci	r29, 0xFE	; 254
    43c6:	48 81       	ld	r20, Y
    43c8:	59 81       	ldd	r21, Y+1	; 0x01
    43ca:	c3 59       	subi	r28, 0x93	; 147
    43cc:	d1 40       	sbci	r29, 0x01	; 1
    43ce:	4e 5f       	subi	r20, 0xFE	; 254
    43d0:	5f 4f       	sbci	r21, 0xFF	; 255
    43d2:	cd 56       	subi	r28, 0x6D	; 109
    43d4:	de 4f       	sbci	r29, 0xFE	; 254
    43d6:	48 83       	st	Y, r20
    43d8:	59 83       	std	Y+1, r21	; 0x01
    43da:	c3 59       	subi	r28, 0x93	; 147
    43dc:	d1 40       	sbci	r29, 0x01	; 1
			case DIR_RIGHT:
			
			positionX[length-1]++;
			if(positionX[length-1]%(MLCD_BYTES_LINE+1) == 0)	positionX[length-1] = 1;
			
			for(i=0;i<length-1;i++){
    43de:	e8 17       	cp	r30, r24
    43e0:	f9 07       	cpc	r31, r25
    43e2:	d1 f6       	brne	.-76     	; 0x4398 <playSnake+0x484>
    43e4:	6e c1       	rjmp	.+732    	; 0x46c2 <playSnake+0x7ae>
			}
			
			break;
			case DIR_UP:
			
			positionY[length-1]=positionY[length-1]-8;
    43e6:	43 2d       	mov	r20, r3
    43e8:	50 e0       	ldi	r21, 0x00	; 0
    43ea:	41 50       	subi	r20, 0x01	; 1
    43ec:	51 09       	sbc	r21, r1
    43ee:	fa 01       	movw	r30, r20
    43f0:	ee 0f       	add	r30, r30
    43f2:	ff 1f       	adc	r31, r31
    43f4:	e6 0d       	add	r30, r6
    43f6:	f7 1d       	adc	r31, r7
    43f8:	80 81       	ld	r24, Z
    43fa:	91 81       	ldd	r25, Z+1	; 0x01
    43fc:	08 97       	sbiw	r24, 0x08	; 8
			if(positionY[length-1] < 1)	positionY[length-1] = MLCD_YRES-7;
    43fe:	18 16       	cp	r1, r24
    4400:	19 06       	cpc	r1, r25
    4402:	44 f4       	brge	.+16     	; 0x4414 <playSnake+0x500>
			}
			
			break;
			case DIR_UP:
			
			positionY[length-1]=positionY[length-1]-8;
    4404:	fa 01       	movw	r30, r20
    4406:	ee 0f       	add	r30, r30
    4408:	ff 1f       	adc	r31, r31
    440a:	e6 0d       	add	r30, r6
    440c:	f7 1d       	adc	r31, r7
    440e:	80 83       	st	Z, r24
    4410:	91 83       	std	Z+1, r25	; 0x01
    4412:	09 c0       	rjmp	.+18     	; 0x4426 <playSnake+0x512>
			if(positionY[length-1] < 1)	positionY[length-1] = MLCD_YRES-7;
    4414:	fa 01       	movw	r30, r20
    4416:	ee 0f       	add	r30, r30
    4418:	ff 1f       	adc	r31, r31
    441a:	e6 0d       	add	r30, r6
    441c:	f7 1d       	adc	r31, r7
    441e:	89 ee       	ldi	r24, 0xE9	; 233
    4420:	90 e0       	ldi	r25, 0x00	; 0
    4422:	80 83       	st	Z, r24
    4424:	91 83       	std	Z+1, r25	; 0x01
			
			for(i=0;i<length-1;i++){
    4426:	10 92 a8 5c 	sts	0x5CA8, r1
    442a:	10 92 a9 5c 	sts	0x5CA9, r1
    442e:	14 16       	cp	r1, r20
    4430:	15 06       	cpc	r1, r21
    4432:	0c f0       	brlt	.+2      	; 0x4436 <playSnake+0x522>
    4434:	41 c1       	rjmp	.+642    	; 0x46b8 <playSnake+0x7a4>
				if(positionX[length-1] == positionX[i] && positionY[length-1] == positionY[i])	lost = true;
    4436:	fa 01       	movw	r30, r20
    4438:	ee 0f       	add	r30, r30
    443a:	ff 1f       	adc	r31, r31
    443c:	e8 0d       	add	r30, r8
    443e:	f9 1d       	adc	r31, r9
    4440:	20 81       	ld	r18, Z
    4442:	31 81       	ldd	r19, Z+1	; 0x01
    4444:	cb 56       	subi	r28, 0x6B	; 107
    4446:	de 4f       	sbci	r29, 0xFE	; 254
    4448:	e8 81       	ld	r30, Y
    444a:	c5 59       	subi	r28, 0x95	; 149
    444c:	d1 40       	sbci	r29, 0x01	; 1
    444e:	ca 56       	subi	r28, 0x6A	; 106
    4450:	de 4f       	sbci	r29, 0xFE	; 254
    4452:	f8 81       	ld	r31, Y
    4454:	c6 59       	subi	r28, 0x96	; 150
    4456:	d1 40       	sbci	r29, 0x01	; 1
    4458:	83 2d       	mov	r24, r3
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	88 0f       	add	r24, r24
    445e:	99 1f       	adc	r25, r25
    4460:	6f ef       	ldi	r22, 0xFF	; 255
    4462:	7f ef       	ldi	r23, 0xFF	; 255
    4464:	6c 0f       	add	r22, r28
    4466:	7d 1f       	adc	r23, r29
    4468:	86 0f       	add	r24, r22
    446a:	97 1f       	adc	r25, r23
    446c:	f1 2c       	mov	r15, r1
    446e:	8a 01       	movw	r16, r20
    4470:	00 0f       	add	r16, r16
    4472:	11 1f       	adc	r17, r17
    4474:	06 0d       	add	r16, r6
    4476:	17 1d       	adc	r17, r7
    4478:	cd 56       	subi	r28, 0x6D	; 109
    447a:	de 4f       	sbci	r29, 0xFE	; 254
    447c:	68 82       	st	Y, r6
    447e:	79 82       	std	Y+1, r7	; 0x01
    4480:	c3 59       	subi	r28, 0x93	; 147
    4482:	d1 40       	sbci	r29, 0x01	; 1
    4484:	41 91       	ld	r20, Z+
    4486:	51 91       	ld	r21, Z+
    4488:	24 17       	cp	r18, r20
    448a:	35 07       	cpc	r19, r21
    448c:	81 f4       	brne	.+32     	; 0x44ae <playSnake+0x59a>
    448e:	d8 01       	movw	r26, r16
    4490:	6d 91       	ld	r22, X+
    4492:	7c 91       	ld	r23, X
    4494:	cd 56       	subi	r28, 0x6D	; 109
    4496:	de 4f       	sbci	r29, 0xFE	; 254
    4498:	a8 81       	ld	r26, Y
    449a:	b9 81       	ldd	r27, Y+1	; 0x01
    449c:	c3 59       	subi	r28, 0x93	; 147
    449e:	d1 40       	sbci	r29, 0x01	; 1
    44a0:	4d 91       	ld	r20, X+
    44a2:	5c 91       	ld	r21, X
    44a4:	64 17       	cp	r22, r20
    44a6:	75 07       	cpc	r23, r21
    44a8:	11 f4       	brne	.+4      	; 0x44ae <playSnake+0x59a>
    44aa:	ff 24       	eor	r15, r15
    44ac:	f3 94       	inc	r15
    44ae:	cd 56       	subi	r28, 0x6D	; 109
    44b0:	de 4f       	sbci	r29, 0xFE	; 254
    44b2:	48 81       	ld	r20, Y
    44b4:	59 81       	ldd	r21, Y+1	; 0x01
    44b6:	c3 59       	subi	r28, 0x93	; 147
    44b8:	d1 40       	sbci	r29, 0x01	; 1
    44ba:	4e 5f       	subi	r20, 0xFE	; 254
    44bc:	5f 4f       	sbci	r21, 0xFF	; 255
    44be:	cd 56       	subi	r28, 0x6D	; 109
    44c0:	de 4f       	sbci	r29, 0xFE	; 254
    44c2:	48 83       	st	Y, r20
    44c4:	59 83       	std	Y+1, r21	; 0x01
    44c6:	c3 59       	subi	r28, 0x93	; 147
    44c8:	d1 40       	sbci	r29, 0x01	; 1
			case DIR_UP:
			
			positionY[length-1]=positionY[length-1]-8;
			if(positionY[length-1] < 1)	positionY[length-1] = MLCD_YRES-7;
			
			for(i=0;i<length-1;i++){
    44ca:	e8 17       	cp	r30, r24
    44cc:	f9 07       	cpc	r31, r25
    44ce:	d1 f6       	brne	.-76     	; 0x4484 <playSnake+0x570>
    44d0:	f8 c0       	rjmp	.+496    	; 0x46c2 <playSnake+0x7ae>
			}
			
			break;
			case DIR_LEFT:
			
			positionX[length-1]--;
    44d2:	43 2d       	mov	r20, r3
    44d4:	50 e0       	ldi	r21, 0x00	; 0
    44d6:	41 50       	subi	r20, 0x01	; 1
    44d8:	51 09       	sbc	r21, r1
    44da:	fa 01       	movw	r30, r20
    44dc:	ee 0f       	add	r30, r30
    44de:	ff 1f       	adc	r31, r31
    44e0:	e8 0d       	add	r30, r8
    44e2:	f9 1d       	adc	r31, r9
    44e4:	80 81       	ld	r24, Z
    44e6:	91 81       	ldd	r25, Z+1	; 0x01
    44e8:	01 97       	sbiw	r24, 0x01	; 1
			if(positionX[length-1] == 0)	positionX[length-1] = MLCD_BYTES_LINE;
    44ea:	00 97       	sbiw	r24, 0x00	; 0
    44ec:	41 f0       	breq	.+16     	; 0x44fe <playSnake+0x5ea>
			}
			
			break;
			case DIR_LEFT:
			
			positionX[length-1]--;
    44ee:	fa 01       	movw	r30, r20
    44f0:	ee 0f       	add	r30, r30
    44f2:	ff 1f       	adc	r31, r31
    44f4:	e8 0d       	add	r30, r8
    44f6:	f9 1d       	adc	r31, r9
    44f8:	80 83       	st	Z, r24
    44fa:	91 83       	std	Z+1, r25	; 0x01
    44fc:	09 c0       	rjmp	.+18     	; 0x4510 <playSnake+0x5fc>
			if(positionX[length-1] == 0)	positionX[length-1] = MLCD_BYTES_LINE;
    44fe:	fa 01       	movw	r30, r20
    4500:	ee 0f       	add	r30, r30
    4502:	ff 1f       	adc	r31, r31
    4504:	e8 0d       	add	r30, r8
    4506:	f9 1d       	adc	r31, r9
    4508:	62 e3       	ldi	r22, 0x32	; 50
    450a:	70 e0       	ldi	r23, 0x00	; 0
    450c:	60 83       	st	Z, r22
    450e:	71 83       	std	Z+1, r23	; 0x01
			
			for(i=0;i<length-1;i++){
    4510:	10 92 a8 5c 	sts	0x5CA8, r1
    4514:	10 92 a9 5c 	sts	0x5CA9, r1
    4518:	14 16       	cp	r1, r20
    451a:	15 06       	cpc	r1, r21
    451c:	0c f0       	brlt	.+2      	; 0x4520 <playSnake+0x60c>
    451e:	ce c0       	rjmp	.+412    	; 0x46bc <playSnake+0x7a8>
				if(positionX[length-1] == positionX[i] && positionY[length-1] == positionY[i])	lost = true;
    4520:	fa 01       	movw	r30, r20
    4522:	ee 0f       	add	r30, r30
    4524:	ff 1f       	adc	r31, r31
    4526:	e8 0d       	add	r30, r8
    4528:	f9 1d       	adc	r31, r9
    452a:	20 81       	ld	r18, Z
    452c:	31 81       	ldd	r19, Z+1	; 0x01
    452e:	cb 56       	subi	r28, 0x6B	; 107
    4530:	de 4f       	sbci	r29, 0xFE	; 254
    4532:	e8 81       	ld	r30, Y
    4534:	c5 59       	subi	r28, 0x95	; 149
    4536:	d1 40       	sbci	r29, 0x01	; 1
    4538:	ca 56       	subi	r28, 0x6A	; 106
    453a:	de 4f       	sbci	r29, 0xFE	; 254
    453c:	f8 81       	ld	r31, Y
    453e:	c6 59       	subi	r28, 0x96	; 150
    4540:	d1 40       	sbci	r29, 0x01	; 1
    4542:	83 2d       	mov	r24, r3
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	88 0f       	add	r24, r24
    4548:	99 1f       	adc	r25, r25
    454a:	6f ef       	ldi	r22, 0xFF	; 255
    454c:	7f ef       	ldi	r23, 0xFF	; 255
    454e:	6c 0f       	add	r22, r28
    4550:	7d 1f       	adc	r23, r29
    4552:	86 0f       	add	r24, r22
    4554:	97 1f       	adc	r25, r23
    4556:	f1 2c       	mov	r15, r1
    4558:	8a 01       	movw	r16, r20
    455a:	00 0f       	add	r16, r16
    455c:	11 1f       	adc	r17, r17
    455e:	06 0d       	add	r16, r6
    4560:	17 1d       	adc	r17, r7
    4562:	cd 56       	subi	r28, 0x6D	; 109
    4564:	de 4f       	sbci	r29, 0xFE	; 254
    4566:	68 82       	st	Y, r6
    4568:	79 82       	std	Y+1, r7	; 0x01
    456a:	c3 59       	subi	r28, 0x93	; 147
    456c:	d1 40       	sbci	r29, 0x01	; 1
    456e:	41 91       	ld	r20, Z+
    4570:	51 91       	ld	r21, Z+
    4572:	24 17       	cp	r18, r20
    4574:	35 07       	cpc	r19, r21
    4576:	81 f4       	brne	.+32     	; 0x4598 <playSnake+0x684>
    4578:	d8 01       	movw	r26, r16
    457a:	6d 91       	ld	r22, X+
    457c:	7c 91       	ld	r23, X
    457e:	cd 56       	subi	r28, 0x6D	; 109
    4580:	de 4f       	sbci	r29, 0xFE	; 254
    4582:	a8 81       	ld	r26, Y
    4584:	b9 81       	ldd	r27, Y+1	; 0x01
    4586:	c3 59       	subi	r28, 0x93	; 147
    4588:	d1 40       	sbci	r29, 0x01	; 1
    458a:	4d 91       	ld	r20, X+
    458c:	5c 91       	ld	r21, X
    458e:	64 17       	cp	r22, r20
    4590:	75 07       	cpc	r23, r21
    4592:	11 f4       	brne	.+4      	; 0x4598 <playSnake+0x684>
    4594:	ff 24       	eor	r15, r15
    4596:	f3 94       	inc	r15
    4598:	cd 56       	subi	r28, 0x6D	; 109
    459a:	de 4f       	sbci	r29, 0xFE	; 254
    459c:	48 81       	ld	r20, Y
    459e:	59 81       	ldd	r21, Y+1	; 0x01
    45a0:	c3 59       	subi	r28, 0x93	; 147
    45a2:	d1 40       	sbci	r29, 0x01	; 1
    45a4:	4e 5f       	subi	r20, 0xFE	; 254
    45a6:	5f 4f       	sbci	r21, 0xFF	; 255
    45a8:	cd 56       	subi	r28, 0x6D	; 109
    45aa:	de 4f       	sbci	r29, 0xFE	; 254
    45ac:	48 83       	st	Y, r20
    45ae:	59 83       	std	Y+1, r21	; 0x01
    45b0:	c3 59       	subi	r28, 0x93	; 147
    45b2:	d1 40       	sbci	r29, 0x01	; 1
			case DIR_LEFT:
			
			positionX[length-1]--;
			if(positionX[length-1] == 0)	positionX[length-1] = MLCD_BYTES_LINE;
			
			for(i=0;i<length-1;i++){
    45b4:	e8 17       	cp	r30, r24
    45b6:	f9 07       	cpc	r31, r25
    45b8:	d1 f6       	brne	.-76     	; 0x456e <playSnake+0x65a>
    45ba:	83 c0       	rjmp	.+262    	; 0x46c2 <playSnake+0x7ae>
			}
			
			break;
			case DIR_DOWN:
			
			positionY[length-1]=positionY[length-1]+8;
    45bc:	03 2d       	mov	r16, r3
    45be:	10 e0       	ldi	r17, 0x00	; 0
    45c0:	01 50       	subi	r16, 0x01	; 1
    45c2:	11 09       	sbc	r17, r1
    45c4:	f8 01       	movw	r30, r16
    45c6:	ee 0f       	add	r30, r30
    45c8:	ff 1f       	adc	r31, r31
    45ca:	e6 0d       	add	r30, r6
    45cc:	f7 1d       	adc	r31, r7
    45ce:	20 81       	ld	r18, Z
    45d0:	31 81       	ldd	r19, Z+1	; 0x01
    45d2:	28 5f       	subi	r18, 0xF8	; 248
    45d4:	3f 4f       	sbci	r19, 0xFF	; 255
			if(positionY[length-1]%(MLCD_YRES+1) == 0)	positionY[length-1] = 1;
    45d6:	c9 01       	movw	r24, r18
    45d8:	61 ef       	ldi	r22, 0xF1	; 241
    45da:	70 e0       	ldi	r23, 0x00	; 0
    45dc:	0e 94 8e 33 	call	0x671c	; 0x671c <__divmodhi4>
    45e0:	89 2b       	or	r24, r25
    45e2:	41 f0       	breq	.+16     	; 0x45f4 <playSnake+0x6e0>
			}
			
			break;
			case DIR_DOWN:
			
			positionY[length-1]=positionY[length-1]+8;
    45e4:	f8 01       	movw	r30, r16
    45e6:	ee 0f       	add	r30, r30
    45e8:	ff 1f       	adc	r31, r31
    45ea:	e6 0d       	add	r30, r6
    45ec:	f7 1d       	adc	r31, r7
    45ee:	20 83       	st	Z, r18
    45f0:	31 83       	std	Z+1, r19	; 0x01
    45f2:	09 c0       	rjmp	.+18     	; 0x4606 <playSnake+0x6f2>
			if(positionY[length-1]%(MLCD_YRES+1) == 0)	positionY[length-1] = 1;
    45f4:	f8 01       	movw	r30, r16
    45f6:	ee 0f       	add	r30, r30
    45f8:	ff 1f       	adc	r31, r31
    45fa:	e6 0d       	add	r30, r6
    45fc:	f7 1d       	adc	r31, r7
    45fe:	81 e0       	ldi	r24, 0x01	; 1
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	80 83       	st	Z, r24
    4604:	91 83       	std	Z+1, r25	; 0x01
			
			for(i=0;i<length-1;i++){
    4606:	10 92 a8 5c 	sts	0x5CA8, r1
    460a:	10 92 a9 5c 	sts	0x5CA9, r1
    460e:	10 16       	cp	r1, r16
    4610:	11 06       	cpc	r1, r17
    4612:	0c f0       	brlt	.+2      	; 0x4616 <playSnake+0x702>
    4614:	55 c0       	rjmp	.+170    	; 0x46c0 <playSnake+0x7ac>
				if(positionX[length-1] == positionX[i] && positionY[length-1] == positionY[i])	lost = true;
    4616:	f8 01       	movw	r30, r16
    4618:	ee 0f       	add	r30, r30
    461a:	ff 1f       	adc	r31, r31
    461c:	e8 0d       	add	r30, r8
    461e:	f9 1d       	adc	r31, r9
    4620:	20 81       	ld	r18, Z
    4622:	31 81       	ldd	r19, Z+1	; 0x01
    4624:	cb 56       	subi	r28, 0x6B	; 107
    4626:	de 4f       	sbci	r29, 0xFE	; 254
    4628:	e8 81       	ld	r30, Y
    462a:	c5 59       	subi	r28, 0x95	; 149
    462c:	d1 40       	sbci	r29, 0x01	; 1
    462e:	ca 56       	subi	r28, 0x6A	; 106
    4630:	de 4f       	sbci	r29, 0xFE	; 254
    4632:	f8 81       	ld	r31, Y
    4634:	c6 59       	subi	r28, 0x96	; 150
    4636:	d1 40       	sbci	r29, 0x01	; 1
    4638:	83 2d       	mov	r24, r3
    463a:	90 e0       	ldi	r25, 0x00	; 0
    463c:	88 0f       	add	r24, r24
    463e:	99 1f       	adc	r25, r25
    4640:	6f ef       	ldi	r22, 0xFF	; 255
    4642:	7f ef       	ldi	r23, 0xFF	; 255
    4644:	6c 0f       	add	r22, r28
    4646:	7d 1f       	adc	r23, r29
    4648:	86 0f       	add	r24, r22
    464a:	97 1f       	adc	r25, r23
    464c:	f1 2c       	mov	r15, r1
    464e:	00 0f       	add	r16, r16
    4650:	11 1f       	adc	r17, r17
    4652:	06 0d       	add	r16, r6
    4654:	17 1d       	adc	r17, r7
    4656:	cd 56       	subi	r28, 0x6D	; 109
    4658:	de 4f       	sbci	r29, 0xFE	; 254
    465a:	68 82       	st	Y, r6
    465c:	79 82       	std	Y+1, r7	; 0x01
    465e:	c3 59       	subi	r28, 0x93	; 147
    4660:	d1 40       	sbci	r29, 0x01	; 1
    4662:	41 91       	ld	r20, Z+
    4664:	51 91       	ld	r21, Z+
    4666:	24 17       	cp	r18, r20
    4668:	35 07       	cpc	r19, r21
    466a:	81 f4       	brne	.+32     	; 0x468c <playSnake+0x778>
    466c:	d8 01       	movw	r26, r16
    466e:	6d 91       	ld	r22, X+
    4670:	7c 91       	ld	r23, X
    4672:	cd 56       	subi	r28, 0x6D	; 109
    4674:	de 4f       	sbci	r29, 0xFE	; 254
    4676:	a8 81       	ld	r26, Y
    4678:	b9 81       	ldd	r27, Y+1	; 0x01
    467a:	c3 59       	subi	r28, 0x93	; 147
    467c:	d1 40       	sbci	r29, 0x01	; 1
    467e:	4d 91       	ld	r20, X+
    4680:	5c 91       	ld	r21, X
    4682:	64 17       	cp	r22, r20
    4684:	75 07       	cpc	r23, r21
    4686:	11 f4       	brne	.+4      	; 0x468c <playSnake+0x778>
    4688:	ff 24       	eor	r15, r15
    468a:	f3 94       	inc	r15
    468c:	cd 56       	subi	r28, 0x6D	; 109
    468e:	de 4f       	sbci	r29, 0xFE	; 254
    4690:	48 81       	ld	r20, Y
    4692:	59 81       	ldd	r21, Y+1	; 0x01
    4694:	c3 59       	subi	r28, 0x93	; 147
    4696:	d1 40       	sbci	r29, 0x01	; 1
    4698:	4e 5f       	subi	r20, 0xFE	; 254
    469a:	5f 4f       	sbci	r21, 0xFF	; 255
    469c:	cd 56       	subi	r28, 0x6D	; 109
    469e:	de 4f       	sbci	r29, 0xFE	; 254
    46a0:	48 83       	st	Y, r20
    46a2:	59 83       	std	Y+1, r21	; 0x01
    46a4:	c3 59       	subi	r28, 0x93	; 147
    46a6:	d1 40       	sbci	r29, 0x01	; 1
			case DIR_DOWN:
			
			positionY[length-1]=positionY[length-1]+8;
			if(positionY[length-1]%(MLCD_YRES+1) == 0)	positionY[length-1] = 1;
			
			for(i=0;i<length-1;i++){
    46a8:	e8 17       	cp	r30, r24
    46aa:	f9 07       	cpc	r31, r25
    46ac:	d1 f6       	brne	.-76     	; 0x4662 <playSnake+0x74e>
    46ae:	09 c0       	rjmp	.+18     	; 0x46c2 <playSnake+0x7ae>
			}
			positionX[0] = tailX;
			positionY[0] = tailY;
		}
		
		switch(direction){
    46b0:	f1 2c       	mov	r15, r1
    46b2:	07 c0       	rjmp	.+14     	; 0x46c2 <playSnake+0x7ae>
			case DIR_RIGHT:
			
			positionX[length-1]++;
			if(positionX[length-1]%(MLCD_BYTES_LINE+1) == 0)	positionX[length-1] = 1;
			
			for(i=0;i<length-1;i++){
    46b4:	f1 2c       	mov	r15, r1
    46b6:	05 c0       	rjmp	.+10     	; 0x46c2 <playSnake+0x7ae>
			case DIR_UP:
			
			positionY[length-1]=positionY[length-1]-8;
			if(positionY[length-1] < 1)	positionY[length-1] = MLCD_YRES-7;
			
			for(i=0;i<length-1;i++){
    46b8:	f1 2c       	mov	r15, r1
    46ba:	03 c0       	rjmp	.+6      	; 0x46c2 <playSnake+0x7ae>
			case DIR_LEFT:
			
			positionX[length-1]--;
			if(positionX[length-1] == 0)	positionX[length-1] = MLCD_BYTES_LINE;
			
			for(i=0;i<length-1;i++){
    46bc:	f1 2c       	mov	r15, r1
    46be:	01 c0       	rjmp	.+2      	; 0x46c2 <playSnake+0x7ae>
			case DIR_DOWN:
			
			positionY[length-1]=positionY[length-1]+8;
			if(positionY[length-1]%(MLCD_YRES+1) == 0)	positionY[length-1] = 1;
			
			for(i=0;i<length-1;i++){
    46c0:	f1 2c       	mov	r15, r1
			default:
			
			break;
		}
		
		for(i=0;i<length;i++){
    46c2:	10 92 a8 5c 	sts	0x5CA8, r1
    46c6:	10 92 a9 5c 	sts	0x5CA9, r1
    46ca:	03 2d       	mov	r16, r3
    46cc:	10 e0       	ldi	r17, 0x00	; 0
    46ce:	10 16       	cp	r1, r16
    46d0:	11 06       	cpc	r1, r17
    46d2:	dc f4       	brge	.+54     	; 0x470a <playSnake+0x7f6>
    46d4:	e0 e0       	ldi	r30, 0x00	; 0
    46d6:	f0 e0       	ldi	r31, 0x00	; 0
			
			MLCDDrawSquare(1,positionY[i],positionX[i],false);
    46d8:	ee 0f       	add	r30, r30
    46da:	ff 1f       	adc	r31, r31
    46dc:	d4 01       	movw	r26, r8
    46de:	ae 0f       	add	r26, r30
    46e0:	bf 1f       	adc	r27, r31
    46e2:	e6 0d       	add	r30, r6
    46e4:	f7 1d       	adc	r31, r7
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	4c 91       	ld	r20, X
    46ea:	60 81       	ld	r22, Z
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	0e 94 66 2e 	call	0x5ccc	; 0x5ccc <MLCDDrawSquare>
			default:
			
			break;
		}
		
		for(i=0;i<length;i++){
    46f2:	e0 91 a8 5c 	lds	r30, 0x5CA8
    46f6:	f0 91 a9 5c 	lds	r31, 0x5CA9
    46fa:	31 96       	adiw	r30, 0x01	; 1
    46fc:	e0 93 a8 5c 	sts	0x5CA8, r30
    4700:	f0 93 a9 5c 	sts	0x5CA9, r31
    4704:	e0 17       	cp	r30, r16
    4706:	f1 07       	cpc	r31, r17
    4708:	3c f3       	brlt	.-50     	; 0x46d8 <playSnake+0x7c4>
			
			MLCDDrawSquare(1,positionY[i],positionX[i],false);
		}
		
		MLCDRefreshFrame();
    470a:	0e 94 b0 2d 	call	0x5b60	; 0x5b60 <MLCDRefreshFrame>
		
		if(lost){
    470e:	ff 20       	and	r15, r15
    4710:	a1 f0       	breq	.+40     	; 0x473a <playSnake+0x826>
			
			MLCDWriteString("You Lost!",FONT_SIZE_NORMAL,20,19,false);
    4712:	00 e0       	ldi	r16, 0x00	; 0
    4714:	23 e1       	ldi	r18, 0x13	; 19
    4716:	44 e1       	ldi	r20, 0x14	; 20
    4718:	61 e1       	ldi	r22, 0x11	; 17
    471a:	8d e4       	ldi	r24, 0x4D	; 77
    471c:	9c e5       	ldi	r25, 0x5C	; 92
    471e:	0e 94 09 2e 	call	0x5c12	; 0x5c12 <MLCDWriteString>
			//MLCDWriteString("Score: ",37,19,false);
			//MLCDWriteString((char)length,37,26,false);
			MLCDRefreshFrame();
    4722:	0e 94 b0 2d 	call	0x5b60	; 0x5b60 <MLCDRefreshFrame>
    4726:	80 e0       	ldi	r24, 0x00	; 0
    4728:	90 e0       	ldi	r25, 0x00	; 0
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	do { barrier(); } while (--n);
    472a:	01 96       	adiw	r24, 0x01	; 1
    472c:	82 3c       	cpi	r24, 0xC2	; 194
    472e:	52 ea       	ldi	r21, 0xA2	; 162
    4730:	95 07       	cpc	r25, r21
    4732:	d9 f7       	brne	.-10     	; 0x472a <playSnake+0x816>
			delay_ms(2000);
			MLCDClearAll();
    4734:	0e 94 e2 2c 	call	0x59c4	; 0x59c4 <MLCDClearAll>
    4738:	52 c0       	rjmp	.+164    	; 0x47de <playSnake+0x8ca>
			return;
		}
		
		for(i=1;i>0;i++){
    473a:	81 e0       	ldi	r24, 0x01	; 1
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	80 93 a8 5c 	sts	0x5CA8, r24
    4742:	90 93 a9 5c 	sts	0x5CA9, r25
    4746:	30 91 0a 20 	lds	r19, 0x200A

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    474a:	d2 01       	movw	r26, r4
    474c:	18 96       	adiw	r26, 0x08	; 8
    474e:	2c 91       	ld	r18, X
    4750:	18 97       	sbiw	r26, 0x08	; 8
			if(gpio_pin_is_high(MLCD_PB0) && gpio_pin_is_high(MLCD_PB2)){
    4752:	22 ff       	sbrs	r18, 2
    4754:	04 c0       	rjmp	.+8      	; 0x475e <playSnake+0x84a>
    4756:	18 96       	adiw	r26, 0x08	; 8
    4758:	2c 91       	ld	r18, X
    475a:	24 fd       	sbrc	r18, 4
    475c:	03 c0       	rjmp	.+6      	; 0x4764 <playSnake+0x850>
				released = true;
			}
			if(released && gpio_pin_is_low(MLCD_PB2)){
    475e:	33 23       	and	r19, r19
    4760:	91 f1       	breq	.+100    	; 0x47c6 <playSnake+0x8b2>
    4762:	01 c0       	rjmp	.+2      	; 0x4766 <playSnake+0x852>
			return;
		}
		
		for(i=1;i>0;i++){
			if(gpio_pin_is_high(MLCD_PB0) && gpio_pin_is_high(MLCD_PB2)){
				released = true;
    4764:	31 e0       	ldi	r19, 0x01	; 1
    4766:	f2 01       	movw	r30, r4
    4768:	20 85       	ldd	r18, Z+8	; 0x08
			}
			if(released && gpio_pin_is_low(MLCD_PB2)){
    476a:	24 fd       	sbrc	r18, 4
    476c:	13 c0       	rjmp	.+38     	; 0x4794 <playSnake+0x880>
    476e:	80 93 a8 5c 	sts	0x5CA8, r24
    4772:	90 93 a9 5c 	sts	0x5CA9, r25
    4776:	30 93 0a 20 	sts	0x200A, r19
				direction++;
    477a:	23 94       	inc	r2
				if(direction%4 == 0) direction = 0;
    477c:	82 2d       	mov	r24, r2
    477e:	83 70       	andi	r24, 0x03	; 3
    4780:	09 f4       	brne	.+2      	; 0x4784 <playSnake+0x870>
    4782:	21 2c       	mov	r2, r1
    4784:	80 e0       	ldi	r24, 0x00	; 0
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	01 96       	adiw	r24, 0x01	; 1
    478a:	81 31       	cpi	r24, 0x11	; 17
    478c:	f4 e0       	ldi	r31, 0x04	; 4
    478e:	9f 07       	cpc	r25, r31
    4790:	d9 f7       	brne	.-10     	; 0x4788 <playSnake+0x874>
    4792:	3a cc       	rjmp	.-1932   	; 0x4008 <playSnake+0xf4>
    4794:	20 85       	ldd	r18, Z+8	; 0x08
					}
				}*/
				delay_ms(50);
				break;
			}
			if(released && gpio_pin_is_low(MLCD_PB0)){
    4796:	22 fd       	sbrc	r18, 2
    4798:	16 c0       	rjmp	.+44     	; 0x47c6 <playSnake+0x8b2>
    479a:	80 93 a8 5c 	sts	0x5CA8, r24
    479e:	90 93 a9 5c 	sts	0x5CA9, r25
    47a2:	30 93 0a 20 	sts	0x200A, r19
				
				direction--;
    47a6:	2a 94       	dec	r2
    47a8:	b3 e0       	ldi	r27, 0x03	; 3
    47aa:	b2 15       	cp	r27, r2
    47ac:	20 f4       	brcc	.+8      	; 0x47b6 <playSnake+0x8a2>
    47ae:	0f 2e       	mov	r0, r31
    47b0:	f3 e0       	ldi	r31, 0x03	; 3
    47b2:	2f 2e       	mov	r2, r31
    47b4:	f0 2d       	mov	r31, r0
    47b6:	80 e0       	ldi	r24, 0x00	; 0
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	01 96       	adiw	r24, 0x01	; 1
    47bc:	81 31       	cpi	r24, 0x11	; 17
    47be:	e4 e0       	ldi	r30, 0x04	; 4
    47c0:	9e 07       	cpc	r25, r30
    47c2:	d9 f7       	brne	.-10     	; 0x47ba <playSnake+0x8a6>
    47c4:	21 cc       	rjmp	.-1982   	; 0x4008 <playSnake+0xf4>
			delay_ms(2000);
			MLCDClearAll();
			return;
		}
		
		for(i=1;i>0;i++){
    47c6:	01 96       	adiw	r24, 0x01	; 1
    47c8:	18 16       	cp	r1, r24
    47ca:	19 06       	cpc	r1, r25
    47cc:	0c f4       	brge	.+2      	; 0x47d0 <playSnake+0x8bc>
    47ce:	bd cf       	rjmp	.-134    	; 0x474a <playSnake+0x836>
    47d0:	80 93 a8 5c 	sts	0x5CA8, r24
    47d4:	90 93 a9 5c 	sts	0x5CA9, r25
    47d8:	30 93 0a 20 	sts	0x200A, r19
    47dc:	15 cc       	rjmp	.-2006   	; 0x4008 <playSnake+0xf4>
			}
		}
		
	}
	
    47de:	c8 56       	subi	r28, 0x68	; 104
    47e0:	de 4f       	sbci	r29, 0xFE	; 254
    47e2:	cd bf       	out	0x3d, r28	; 61
    47e4:	de bf       	out	0x3e, r29	; 62
    47e6:	df 91       	pop	r29
    47e8:	cf 91       	pop	r28
    47ea:	1f 91       	pop	r17
    47ec:	0f 91       	pop	r16
    47ee:	ff 90       	pop	r15
    47f0:	ef 90       	pop	r14
    47f2:	df 90       	pop	r13
    47f4:	cf 90       	pop	r12
    47f6:	bf 90       	pop	r11
    47f8:	af 90       	pop	r10
    47fa:	9f 90       	pop	r9
    47fc:	8f 90       	pop	r8
    47fe:	7f 90       	pop	r7
    4800:	6f 90       	pop	r6
    4802:	5f 90       	pop	r5
    4804:	4f 90       	pop	r4
    4806:	3f 90       	pop	r3
    4808:	2f 90       	pop	r2
    480a:	08 95       	ret

0000480c <reverseByte>:
    480c:	98 2f       	mov	r25, r24
    480e:	99 0f       	add	r25, r25
    4810:	9a 7a       	andi	r25, 0xAA	; 170
    4812:	86 95       	lsr	r24
    4814:	85 75       	andi	r24, 0x55	; 85
    4816:	98 2b       	or	r25, r24
    4818:	89 2f       	mov	r24, r25
    481a:	88 0f       	add	r24, r24
    481c:	88 0f       	add	r24, r24
    481e:	8c 7c       	andi	r24, 0xCC	; 204
    4820:	96 95       	lsr	r25
    4822:	96 95       	lsr	r25
    4824:	93 73       	andi	r25, 0x33	; 51
    4826:	89 2b       	or	r24, r25
    4828:	82 95       	swap	r24
    482a:	08 95       	ret

0000482c <spi_master_init>:
		spi_read_single(spi, data);
		data++;
	}
	
	return STATUS_OK;
}
    482c:	cf 93       	push	r28
    482e:	df 93       	push	r29
    4830:	ec 01       	movw	r28, r24
    4832:	c0 3c       	cpi	r28, 0xC0	; 192
    4834:	28 e0       	ldi	r18, 0x08	; 8
    4836:	d2 07       	cpc	r29, r18
    4838:	21 f4       	brne	.+8      	; 0x4842 <spi_master_init+0x16>
    483a:	68 e0       	ldi	r22, 0x08	; 8
    483c:	83 e0       	ldi	r24, 0x03	; 3
    483e:	f7 d5       	rcall	.+3054   	; 0x542e <sysclk_enable_module>
    4840:	06 c0       	rjmp	.+12     	; 0x484e <spi_master_init+0x22>
    4842:	80 3c       	cpi	r24, 0xC0	; 192
    4844:	99 40       	sbci	r25, 0x09	; 9
    4846:	19 f4       	brne	.+6      	; 0x484e <spi_master_init+0x22>
    4848:	68 e0       	ldi	r22, 0x08	; 8
    484a:	84 e0       	ldi	r24, 0x04	; 4
    484c:	f0 d5       	rcall	.+3040   	; 0x542e <sysclk_enable_module>
    484e:	88 81       	ld	r24, Y
    4850:	80 61       	ori	r24, 0x10	; 16
    4852:	88 83       	st	Y, r24
    4854:	df 91       	pop	r29
    4856:	cf 91       	pop	r28
    4858:	08 95       	ret

0000485a <spi_master_setup_device>:
    485a:	ff 92       	push	r15
    485c:	0f 93       	push	r16
    485e:	1f 93       	push	r17
    4860:	cf 93       	push	r28
    4862:	df 93       	push	r29
    4864:	ec 01       	movw	r28, r24
    4866:	f4 2e       	mov	r15, r20
    4868:	b9 01       	movw	r22, r18
    486a:	a8 01       	movw	r20, r16
    486c:	08 e4       	ldi	r16, 0x48	; 72
    486e:	18 ee       	ldi	r17, 0xE8	; 232
    4870:	21 e0       	ldi	r18, 0x01	; 1
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	4c d0       	rcall	.+152    	; 0x490e <spi_xmega_set_baud_div>
    4876:	88 23       	and	r24, r24
    4878:	4c f0       	brlt	.+18     	; 0x488c <spi_master_setup_device+0x32>
    487a:	88 81       	ld	r24, Y
    487c:	9f 2d       	mov	r25, r15
    487e:	99 0f       	add	r25, r25
    4880:	99 0f       	add	r25, r25
    4882:	9c 70       	andi	r25, 0x0C	; 12
    4884:	83 7f       	andi	r24, 0xF3	; 243
    4886:	f9 2e       	mov	r15, r25
    4888:	f8 2a       	or	r15, r24
    488a:	f8 82       	st	Y, r15
    488c:	df 91       	pop	r29
    488e:	cf 91       	pop	r28
    4890:	1f 91       	pop	r17
    4892:	0f 91       	pop	r16
    4894:	ff 90       	pop	r15
    4896:	08 95       	ret

00004898 <spi_write_packet>:
    4898:	fc 01       	movw	r30, r24
    489a:	db 01       	movw	r26, r22
    489c:	46 0f       	add	r20, r22
    489e:	57 1f       	adc	r21, r23
    48a0:	05 c0       	rjmp	.+10     	; 0x48ac <spi_write_packet+0x14>
    48a2:	8d 91       	ld	r24, X+
    48a4:	83 83       	std	Z+3, r24	; 0x03
    48a6:	82 81       	ldd	r24, Z+2	; 0x02
    48a8:	88 23       	and	r24, r24
    48aa:	ec f7       	brge	.-6      	; 0x48a6 <spi_write_packet+0xe>
    48ac:	a4 17       	cp	r26, r20
    48ae:	b5 07       	cpc	r27, r21
    48b0:	c1 f7       	brne	.-16     	; 0x48a2 <spi_write_packet+0xa>
    48b2:	80 e0       	ldi	r24, 0x00	; 0
    48b4:	08 95       	ret

000048b6 <spi_select_device>:
 * \param device SPI device
 *
 */
void spi_select_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_low(device->id);
    48b6:	fb 01       	movw	r30, r22
    48b8:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    48ba:	e8 2f       	mov	r30, r24
    48bc:	e6 95       	lsr	r30
    48be:	e6 95       	lsr	r30
    48c0:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    48c2:	40 e2       	ldi	r20, 0x20	; 32
    48c4:	e4 9f       	mul	r30, r20
    48c6:	f0 01       	movw	r30, r0
    48c8:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    48ca:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    48cc:	87 70       	andi	r24, 0x07	; 7
    48ce:	21 e0       	ldi	r18, 0x01	; 1
    48d0:	30 e0       	ldi	r19, 0x00	; 0
    48d2:	a9 01       	movw	r20, r18
    48d4:	02 c0       	rjmp	.+4      	; 0x48da <spi_select_device+0x24>
    48d6:	44 0f       	add	r20, r20
    48d8:	55 1f       	adc	r21, r21
    48da:	8a 95       	dec	r24
    48dc:	e2 f7       	brpl	.-8      	; 0x48d6 <spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    48de:	46 83       	std	Z+6, r20	; 0x06
    48e0:	08 95       	ret

000048e2 <spi_deselect_device>:
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
void spi_deselect_device(SPI_t *spi, struct spi_device *device)
{
	ioport_set_pin_high(device->id);
    48e2:	fb 01       	movw	r30, r22
    48e4:	80 81       	ld	r24, Z
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    48e6:	e8 2f       	mov	r30, r24
    48e8:	e6 95       	lsr	r30
    48ea:	e6 95       	lsr	r30
    48ec:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    48ee:	40 e2       	ldi	r20, 0x20	; 32
    48f0:	e4 9f       	mul	r30, r20
    48f2:	f0 01       	movw	r30, r0
    48f4:	11 24       	eor	r1, r1
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    48f6:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    48f8:	87 70       	andi	r24, 0x07	; 7
    48fa:	21 e0       	ldi	r18, 0x01	; 1
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	a9 01       	movw	r20, r18
    4900:	02 c0       	rjmp	.+4      	; 0x4906 <spi_deselect_device+0x24>
    4902:	44 0f       	add	r20, r20
    4904:	55 1f       	adc	r21, r21
    4906:	8a 95       	dec	r24
    4908:	e2 f7       	brpl	.-8      	; 0x4902 <spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    490a:	45 83       	std	Z+5, r20	; 0x05
    490c:	08 95       	ret

0000490e <spi_xmega_set_baud_div>:
    490e:	cf 92       	push	r12
    4910:	df 92       	push	r13
    4912:	ef 92       	push	r14
    4914:	ff 92       	push	r15
    4916:	0f 93       	push	r16
    4918:	1f 93       	push	r17
    491a:	cf 93       	push	r28
    491c:	df 93       	push	r29
    491e:	ec 01       	movw	r28, r24
    4920:	6a 01       	movw	r12, r20
    4922:	7b 01       	movw	r14, r22
    4924:	db 01       	movw	r26, r22
    4926:	ca 01       	movw	r24, r20
    4928:	01 97       	sbiw	r24, 0x01	; 1
    492a:	a1 09       	sbc	r26, r1
    492c:	b1 09       	sbc	r27, r1
    492e:	bc 01       	movw	r22, r24
    4930:	cd 01       	movw	r24, r26
    4932:	60 0f       	add	r22, r16
    4934:	71 1f       	adc	r23, r17
    4936:	82 1f       	adc	r24, r18
    4938:	93 1f       	adc	r25, r19
    493a:	a7 01       	movw	r20, r14
    493c:	96 01       	movw	r18, r12
    493e:	0e 94 a1 33 	call	0x6742	; 0x6742 <__udivmodsi4>
    4942:	21 38       	cpi	r18, 0x81	; 129
    4944:	31 05       	cpc	r19, r1
    4946:	41 05       	cpc	r20, r1
    4948:	51 05       	cpc	r21, r1
    494a:	f8 f4       	brcc	.+62     	; 0x498a <spi_xmega_set_baud_div+0x7c>
    494c:	21 34       	cpi	r18, 0x41	; 65
    494e:	60 f4       	brcc	.+24     	; 0x4968 <spi_xmega_set_baud_div+0x5a>
    4950:	21 32       	cpi	r18, 0x21	; 33
    4952:	60 f4       	brcc	.+24     	; 0x496c <spi_xmega_set_baud_div+0x5e>
    4954:	21 31       	cpi	r18, 0x11	; 17
    4956:	60 f4       	brcc	.+24     	; 0x4970 <spi_xmega_set_baud_div+0x62>
    4958:	29 30       	cpi	r18, 0x09	; 9
    495a:	60 f4       	brcc	.+24     	; 0x4974 <spi_xmega_set_baud_div+0x66>
    495c:	25 30       	cpi	r18, 0x05	; 5
    495e:	60 f4       	brcc	.+24     	; 0x4978 <spi_xmega_set_baud_div+0x6a>
    4960:	23 30       	cpi	r18, 0x03	; 3
    4962:	60 f0       	brcs	.+24     	; 0x497c <spi_xmega_set_baud_div+0x6e>
    4964:	90 e0       	ldi	r25, 0x00	; 0
    4966:	0b c0       	rjmp	.+22     	; 0x497e <spi_xmega_set_baud_div+0x70>
    4968:	93 e0       	ldi	r25, 0x03	; 3
    496a:	09 c0       	rjmp	.+18     	; 0x497e <spi_xmega_set_baud_div+0x70>
    496c:	92 e0       	ldi	r25, 0x02	; 2
    496e:	07 c0       	rjmp	.+14     	; 0x497e <spi_xmega_set_baud_div+0x70>
    4970:	92 e8       	ldi	r25, 0x82	; 130
    4972:	05 c0       	rjmp	.+10     	; 0x497e <spi_xmega_set_baud_div+0x70>
    4974:	91 e0       	ldi	r25, 0x01	; 1
    4976:	03 c0       	rjmp	.+6      	; 0x497e <spi_xmega_set_baud_div+0x70>
    4978:	91 e8       	ldi	r25, 0x81	; 129
    497a:	01 c0       	rjmp	.+2      	; 0x497e <spi_xmega_set_baud_div+0x70>
    497c:	90 e8       	ldi	r25, 0x80	; 128
    497e:	88 81       	ld	r24, Y
    4980:	8c 77       	andi	r24, 0x7C	; 124
    4982:	89 2b       	or	r24, r25
    4984:	88 83       	st	Y, r24
    4986:	81 e0       	ldi	r24, 0x01	; 1
    4988:	01 c0       	rjmp	.+2      	; 0x498c <spi_xmega_set_baud_div+0x7e>
    498a:	8f ef       	ldi	r24, 0xFF	; 255
    498c:	df 91       	pop	r29
    498e:	cf 91       	pop	r28
    4990:	1f 91       	pop	r17
    4992:	0f 91       	pop	r16
    4994:	ff 90       	pop	r15
    4996:	ef 90       	pop	r14
    4998:	df 90       	pop	r13
    499a:	cf 90       	pop	r12
    499c:	08 95       	ret

0000499e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
    499e:	1f 92       	push	r1
    49a0:	0f 92       	push	r0
    49a2:	0f b6       	in	r0, 0x3f	; 63
    49a4:	0f 92       	push	r0
    49a6:	11 24       	eor	r1, r1
    49a8:	0b b6       	in	r0, 0x3b	; 59
    49aa:	0f 92       	push	r0
    49ac:	2f 93       	push	r18
    49ae:	3f 93       	push	r19
    49b0:	4f 93       	push	r20
    49b2:	5f 93       	push	r21
    49b4:	6f 93       	push	r22
    49b6:	7f 93       	push	r23
    49b8:	8f 93       	push	r24
    49ba:	9f 93       	push	r25
    49bc:	af 93       	push	r26
    49be:	bf 93       	push	r27
    49c0:	ef 93       	push	r30
    49c2:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
    49c4:	e0 91 97 5c 	lds	r30, 0x5C97
    49c8:	f0 91 98 5c 	lds	r31, 0x5C98
    49cc:	30 97       	sbiw	r30, 0x00	; 0
    49ce:	09 f0       	breq	.+2      	; 0x49d2 <__vector_14+0x34>
		tc_tcc0_ovf_callback();
    49d0:	19 95       	eicall
	}
}
    49d2:	ff 91       	pop	r31
    49d4:	ef 91       	pop	r30
    49d6:	bf 91       	pop	r27
    49d8:	af 91       	pop	r26
    49da:	9f 91       	pop	r25
    49dc:	8f 91       	pop	r24
    49de:	7f 91       	pop	r23
    49e0:	6f 91       	pop	r22
    49e2:	5f 91       	pop	r21
    49e4:	4f 91       	pop	r20
    49e6:	3f 91       	pop	r19
    49e8:	2f 91       	pop	r18
    49ea:	0f 90       	pop	r0
    49ec:	0b be       	out	0x3b, r0	; 59
    49ee:	0f 90       	pop	r0
    49f0:	0f be       	out	0x3f, r0	; 63
    49f2:	0f 90       	pop	r0
    49f4:	1f 90       	pop	r1
    49f6:	18 95       	reti

000049f8 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
    49f8:	1f 92       	push	r1
    49fa:	0f 92       	push	r0
    49fc:	0f b6       	in	r0, 0x3f	; 63
    49fe:	0f 92       	push	r0
    4a00:	11 24       	eor	r1, r1
    4a02:	0b b6       	in	r0, 0x3b	; 59
    4a04:	0f 92       	push	r0
    4a06:	2f 93       	push	r18
    4a08:	3f 93       	push	r19
    4a0a:	4f 93       	push	r20
    4a0c:	5f 93       	push	r21
    4a0e:	6f 93       	push	r22
    4a10:	7f 93       	push	r23
    4a12:	8f 93       	push	r24
    4a14:	9f 93       	push	r25
    4a16:	af 93       	push	r26
    4a18:	bf 93       	push	r27
    4a1a:	ef 93       	push	r30
    4a1c:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
    4a1e:	e0 91 95 5c 	lds	r30, 0x5C95
    4a22:	f0 91 96 5c 	lds	r31, 0x5C96
    4a26:	30 97       	sbiw	r30, 0x00	; 0
    4a28:	09 f0       	breq	.+2      	; 0x4a2c <__vector_15+0x34>
		tc_tcc0_err_callback();
    4a2a:	19 95       	eicall
	}
}
    4a2c:	ff 91       	pop	r31
    4a2e:	ef 91       	pop	r30
    4a30:	bf 91       	pop	r27
    4a32:	af 91       	pop	r26
    4a34:	9f 91       	pop	r25
    4a36:	8f 91       	pop	r24
    4a38:	7f 91       	pop	r23
    4a3a:	6f 91       	pop	r22
    4a3c:	5f 91       	pop	r21
    4a3e:	4f 91       	pop	r20
    4a40:	3f 91       	pop	r19
    4a42:	2f 91       	pop	r18
    4a44:	0f 90       	pop	r0
    4a46:	0b be       	out	0x3b, r0	; 59
    4a48:	0f 90       	pop	r0
    4a4a:	0f be       	out	0x3f, r0	; 63
    4a4c:	0f 90       	pop	r0
    4a4e:	1f 90       	pop	r1
    4a50:	18 95       	reti

00004a52 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
    4a52:	1f 92       	push	r1
    4a54:	0f 92       	push	r0
    4a56:	0f b6       	in	r0, 0x3f	; 63
    4a58:	0f 92       	push	r0
    4a5a:	11 24       	eor	r1, r1
    4a5c:	0b b6       	in	r0, 0x3b	; 59
    4a5e:	0f 92       	push	r0
    4a60:	2f 93       	push	r18
    4a62:	3f 93       	push	r19
    4a64:	4f 93       	push	r20
    4a66:	5f 93       	push	r21
    4a68:	6f 93       	push	r22
    4a6a:	7f 93       	push	r23
    4a6c:	8f 93       	push	r24
    4a6e:	9f 93       	push	r25
    4a70:	af 93       	push	r26
    4a72:	bf 93       	push	r27
    4a74:	ef 93       	push	r30
    4a76:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
    4a78:	e0 91 93 5c 	lds	r30, 0x5C93
    4a7c:	f0 91 94 5c 	lds	r31, 0x5C94
    4a80:	30 97       	sbiw	r30, 0x00	; 0
    4a82:	09 f0       	breq	.+2      	; 0x4a86 <__vector_16+0x34>
		tc_tcc0_cca_callback();
    4a84:	19 95       	eicall
	}
}
    4a86:	ff 91       	pop	r31
    4a88:	ef 91       	pop	r30
    4a8a:	bf 91       	pop	r27
    4a8c:	af 91       	pop	r26
    4a8e:	9f 91       	pop	r25
    4a90:	8f 91       	pop	r24
    4a92:	7f 91       	pop	r23
    4a94:	6f 91       	pop	r22
    4a96:	5f 91       	pop	r21
    4a98:	4f 91       	pop	r20
    4a9a:	3f 91       	pop	r19
    4a9c:	2f 91       	pop	r18
    4a9e:	0f 90       	pop	r0
    4aa0:	0b be       	out	0x3b, r0	; 59
    4aa2:	0f 90       	pop	r0
    4aa4:	0f be       	out	0x3f, r0	; 63
    4aa6:	0f 90       	pop	r0
    4aa8:	1f 90       	pop	r1
    4aaa:	18 95       	reti

00004aac <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
    4aac:	1f 92       	push	r1
    4aae:	0f 92       	push	r0
    4ab0:	0f b6       	in	r0, 0x3f	; 63
    4ab2:	0f 92       	push	r0
    4ab4:	11 24       	eor	r1, r1
    4ab6:	0b b6       	in	r0, 0x3b	; 59
    4ab8:	0f 92       	push	r0
    4aba:	2f 93       	push	r18
    4abc:	3f 93       	push	r19
    4abe:	4f 93       	push	r20
    4ac0:	5f 93       	push	r21
    4ac2:	6f 93       	push	r22
    4ac4:	7f 93       	push	r23
    4ac6:	8f 93       	push	r24
    4ac8:	9f 93       	push	r25
    4aca:	af 93       	push	r26
    4acc:	bf 93       	push	r27
    4ace:	ef 93       	push	r30
    4ad0:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    4ad2:	e0 91 91 5c 	lds	r30, 0x5C91
    4ad6:	f0 91 92 5c 	lds	r31, 0x5C92
    4ada:	30 97       	sbiw	r30, 0x00	; 0
    4adc:	09 f0       	breq	.+2      	; 0x4ae0 <__vector_17+0x34>
		tc_tcc0_ccb_callback();
    4ade:	19 95       	eicall
	}
}
    4ae0:	ff 91       	pop	r31
    4ae2:	ef 91       	pop	r30
    4ae4:	bf 91       	pop	r27
    4ae6:	af 91       	pop	r26
    4ae8:	9f 91       	pop	r25
    4aea:	8f 91       	pop	r24
    4aec:	7f 91       	pop	r23
    4aee:	6f 91       	pop	r22
    4af0:	5f 91       	pop	r21
    4af2:	4f 91       	pop	r20
    4af4:	3f 91       	pop	r19
    4af6:	2f 91       	pop	r18
    4af8:	0f 90       	pop	r0
    4afa:	0b be       	out	0x3b, r0	; 59
    4afc:	0f 90       	pop	r0
    4afe:	0f be       	out	0x3f, r0	; 63
    4b00:	0f 90       	pop	r0
    4b02:	1f 90       	pop	r1
    4b04:	18 95       	reti

00004b06 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    4b06:	1f 92       	push	r1
    4b08:	0f 92       	push	r0
    4b0a:	0f b6       	in	r0, 0x3f	; 63
    4b0c:	0f 92       	push	r0
    4b0e:	11 24       	eor	r1, r1
    4b10:	0b b6       	in	r0, 0x3b	; 59
    4b12:	0f 92       	push	r0
    4b14:	2f 93       	push	r18
    4b16:	3f 93       	push	r19
    4b18:	4f 93       	push	r20
    4b1a:	5f 93       	push	r21
    4b1c:	6f 93       	push	r22
    4b1e:	7f 93       	push	r23
    4b20:	8f 93       	push	r24
    4b22:	9f 93       	push	r25
    4b24:	af 93       	push	r26
    4b26:	bf 93       	push	r27
    4b28:	ef 93       	push	r30
    4b2a:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    4b2c:	e0 91 8f 5c 	lds	r30, 0x5C8F
    4b30:	f0 91 90 5c 	lds	r31, 0x5C90
    4b34:	30 97       	sbiw	r30, 0x00	; 0
    4b36:	09 f0       	breq	.+2      	; 0x4b3a <__vector_18+0x34>
		tc_tcc0_ccc_callback();
    4b38:	19 95       	eicall
	}
}
    4b3a:	ff 91       	pop	r31
    4b3c:	ef 91       	pop	r30
    4b3e:	bf 91       	pop	r27
    4b40:	af 91       	pop	r26
    4b42:	9f 91       	pop	r25
    4b44:	8f 91       	pop	r24
    4b46:	7f 91       	pop	r23
    4b48:	6f 91       	pop	r22
    4b4a:	5f 91       	pop	r21
    4b4c:	4f 91       	pop	r20
    4b4e:	3f 91       	pop	r19
    4b50:	2f 91       	pop	r18
    4b52:	0f 90       	pop	r0
    4b54:	0b be       	out	0x3b, r0	; 59
    4b56:	0f 90       	pop	r0
    4b58:	0f be       	out	0x3f, r0	; 63
    4b5a:	0f 90       	pop	r0
    4b5c:	1f 90       	pop	r1
    4b5e:	18 95       	reti

00004b60 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    4b60:	1f 92       	push	r1
    4b62:	0f 92       	push	r0
    4b64:	0f b6       	in	r0, 0x3f	; 63
    4b66:	0f 92       	push	r0
    4b68:	11 24       	eor	r1, r1
    4b6a:	0b b6       	in	r0, 0x3b	; 59
    4b6c:	0f 92       	push	r0
    4b6e:	2f 93       	push	r18
    4b70:	3f 93       	push	r19
    4b72:	4f 93       	push	r20
    4b74:	5f 93       	push	r21
    4b76:	6f 93       	push	r22
    4b78:	7f 93       	push	r23
    4b7a:	8f 93       	push	r24
    4b7c:	9f 93       	push	r25
    4b7e:	af 93       	push	r26
    4b80:	bf 93       	push	r27
    4b82:	ef 93       	push	r30
    4b84:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    4b86:	e0 91 8d 5c 	lds	r30, 0x5C8D
    4b8a:	f0 91 8e 5c 	lds	r31, 0x5C8E
    4b8e:	30 97       	sbiw	r30, 0x00	; 0
    4b90:	09 f0       	breq	.+2      	; 0x4b94 <__vector_19+0x34>
		tc_tcc0_ccd_callback();
    4b92:	19 95       	eicall
	}
}
    4b94:	ff 91       	pop	r31
    4b96:	ef 91       	pop	r30
    4b98:	bf 91       	pop	r27
    4b9a:	af 91       	pop	r26
    4b9c:	9f 91       	pop	r25
    4b9e:	8f 91       	pop	r24
    4ba0:	7f 91       	pop	r23
    4ba2:	6f 91       	pop	r22
    4ba4:	5f 91       	pop	r21
    4ba6:	4f 91       	pop	r20
    4ba8:	3f 91       	pop	r19
    4baa:	2f 91       	pop	r18
    4bac:	0f 90       	pop	r0
    4bae:	0b be       	out	0x3b, r0	; 59
    4bb0:	0f 90       	pop	r0
    4bb2:	0f be       	out	0x3f, r0	; 63
    4bb4:	0f 90       	pop	r0
    4bb6:	1f 90       	pop	r1
    4bb8:	18 95       	reti

00004bba <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    4bba:	1f 92       	push	r1
    4bbc:	0f 92       	push	r0
    4bbe:	0f b6       	in	r0, 0x3f	; 63
    4bc0:	0f 92       	push	r0
    4bc2:	11 24       	eor	r1, r1
    4bc4:	0b b6       	in	r0, 0x3b	; 59
    4bc6:	0f 92       	push	r0
    4bc8:	2f 93       	push	r18
    4bca:	3f 93       	push	r19
    4bcc:	4f 93       	push	r20
    4bce:	5f 93       	push	r21
    4bd0:	6f 93       	push	r22
    4bd2:	7f 93       	push	r23
    4bd4:	8f 93       	push	r24
    4bd6:	9f 93       	push	r25
    4bd8:	af 93       	push	r26
    4bda:	bf 93       	push	r27
    4bdc:	ef 93       	push	r30
    4bde:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    4be0:	e0 91 8b 5c 	lds	r30, 0x5C8B
    4be4:	f0 91 8c 5c 	lds	r31, 0x5C8C
    4be8:	30 97       	sbiw	r30, 0x00	; 0
    4bea:	09 f0       	breq	.+2      	; 0x4bee <__vector_20+0x34>
		tc_tcc1_ovf_callback();
    4bec:	19 95       	eicall
	}
}
    4bee:	ff 91       	pop	r31
    4bf0:	ef 91       	pop	r30
    4bf2:	bf 91       	pop	r27
    4bf4:	af 91       	pop	r26
    4bf6:	9f 91       	pop	r25
    4bf8:	8f 91       	pop	r24
    4bfa:	7f 91       	pop	r23
    4bfc:	6f 91       	pop	r22
    4bfe:	5f 91       	pop	r21
    4c00:	4f 91       	pop	r20
    4c02:	3f 91       	pop	r19
    4c04:	2f 91       	pop	r18
    4c06:	0f 90       	pop	r0
    4c08:	0b be       	out	0x3b, r0	; 59
    4c0a:	0f 90       	pop	r0
    4c0c:	0f be       	out	0x3f, r0	; 63
    4c0e:	0f 90       	pop	r0
    4c10:	1f 90       	pop	r1
    4c12:	18 95       	reti

00004c14 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    4c14:	1f 92       	push	r1
    4c16:	0f 92       	push	r0
    4c18:	0f b6       	in	r0, 0x3f	; 63
    4c1a:	0f 92       	push	r0
    4c1c:	11 24       	eor	r1, r1
    4c1e:	0b b6       	in	r0, 0x3b	; 59
    4c20:	0f 92       	push	r0
    4c22:	2f 93       	push	r18
    4c24:	3f 93       	push	r19
    4c26:	4f 93       	push	r20
    4c28:	5f 93       	push	r21
    4c2a:	6f 93       	push	r22
    4c2c:	7f 93       	push	r23
    4c2e:	8f 93       	push	r24
    4c30:	9f 93       	push	r25
    4c32:	af 93       	push	r26
    4c34:	bf 93       	push	r27
    4c36:	ef 93       	push	r30
    4c38:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    4c3a:	e0 91 89 5c 	lds	r30, 0x5C89
    4c3e:	f0 91 8a 5c 	lds	r31, 0x5C8A
    4c42:	30 97       	sbiw	r30, 0x00	; 0
    4c44:	09 f0       	breq	.+2      	; 0x4c48 <__vector_21+0x34>
		tc_tcc1_err_callback();
    4c46:	19 95       	eicall
	}
}
    4c48:	ff 91       	pop	r31
    4c4a:	ef 91       	pop	r30
    4c4c:	bf 91       	pop	r27
    4c4e:	af 91       	pop	r26
    4c50:	9f 91       	pop	r25
    4c52:	8f 91       	pop	r24
    4c54:	7f 91       	pop	r23
    4c56:	6f 91       	pop	r22
    4c58:	5f 91       	pop	r21
    4c5a:	4f 91       	pop	r20
    4c5c:	3f 91       	pop	r19
    4c5e:	2f 91       	pop	r18
    4c60:	0f 90       	pop	r0
    4c62:	0b be       	out	0x3b, r0	; 59
    4c64:	0f 90       	pop	r0
    4c66:	0f be       	out	0x3f, r0	; 63
    4c68:	0f 90       	pop	r0
    4c6a:	1f 90       	pop	r1
    4c6c:	18 95       	reti

00004c6e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    4c6e:	1f 92       	push	r1
    4c70:	0f 92       	push	r0
    4c72:	0f b6       	in	r0, 0x3f	; 63
    4c74:	0f 92       	push	r0
    4c76:	11 24       	eor	r1, r1
    4c78:	0b b6       	in	r0, 0x3b	; 59
    4c7a:	0f 92       	push	r0
    4c7c:	2f 93       	push	r18
    4c7e:	3f 93       	push	r19
    4c80:	4f 93       	push	r20
    4c82:	5f 93       	push	r21
    4c84:	6f 93       	push	r22
    4c86:	7f 93       	push	r23
    4c88:	8f 93       	push	r24
    4c8a:	9f 93       	push	r25
    4c8c:	af 93       	push	r26
    4c8e:	bf 93       	push	r27
    4c90:	ef 93       	push	r30
    4c92:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    4c94:	e0 91 87 5c 	lds	r30, 0x5C87
    4c98:	f0 91 88 5c 	lds	r31, 0x5C88
    4c9c:	30 97       	sbiw	r30, 0x00	; 0
    4c9e:	09 f0       	breq	.+2      	; 0x4ca2 <__vector_22+0x34>
		tc_tcc1_cca_callback();
    4ca0:	19 95       	eicall
	}
}
    4ca2:	ff 91       	pop	r31
    4ca4:	ef 91       	pop	r30
    4ca6:	bf 91       	pop	r27
    4ca8:	af 91       	pop	r26
    4caa:	9f 91       	pop	r25
    4cac:	8f 91       	pop	r24
    4cae:	7f 91       	pop	r23
    4cb0:	6f 91       	pop	r22
    4cb2:	5f 91       	pop	r21
    4cb4:	4f 91       	pop	r20
    4cb6:	3f 91       	pop	r19
    4cb8:	2f 91       	pop	r18
    4cba:	0f 90       	pop	r0
    4cbc:	0b be       	out	0x3b, r0	; 59
    4cbe:	0f 90       	pop	r0
    4cc0:	0f be       	out	0x3f, r0	; 63
    4cc2:	0f 90       	pop	r0
    4cc4:	1f 90       	pop	r1
    4cc6:	18 95       	reti

00004cc8 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    4cc8:	1f 92       	push	r1
    4cca:	0f 92       	push	r0
    4ccc:	0f b6       	in	r0, 0x3f	; 63
    4cce:	0f 92       	push	r0
    4cd0:	11 24       	eor	r1, r1
    4cd2:	0b b6       	in	r0, 0x3b	; 59
    4cd4:	0f 92       	push	r0
    4cd6:	2f 93       	push	r18
    4cd8:	3f 93       	push	r19
    4cda:	4f 93       	push	r20
    4cdc:	5f 93       	push	r21
    4cde:	6f 93       	push	r22
    4ce0:	7f 93       	push	r23
    4ce2:	8f 93       	push	r24
    4ce4:	9f 93       	push	r25
    4ce6:	af 93       	push	r26
    4ce8:	bf 93       	push	r27
    4cea:	ef 93       	push	r30
    4cec:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    4cee:	e0 91 85 5c 	lds	r30, 0x5C85
    4cf2:	f0 91 86 5c 	lds	r31, 0x5C86
    4cf6:	30 97       	sbiw	r30, 0x00	; 0
    4cf8:	09 f0       	breq	.+2      	; 0x4cfc <__vector_23+0x34>
		tc_tcc1_ccb_callback();
    4cfa:	19 95       	eicall
	}
}
    4cfc:	ff 91       	pop	r31
    4cfe:	ef 91       	pop	r30
    4d00:	bf 91       	pop	r27
    4d02:	af 91       	pop	r26
    4d04:	9f 91       	pop	r25
    4d06:	8f 91       	pop	r24
    4d08:	7f 91       	pop	r23
    4d0a:	6f 91       	pop	r22
    4d0c:	5f 91       	pop	r21
    4d0e:	4f 91       	pop	r20
    4d10:	3f 91       	pop	r19
    4d12:	2f 91       	pop	r18
    4d14:	0f 90       	pop	r0
    4d16:	0b be       	out	0x3b, r0	; 59
    4d18:	0f 90       	pop	r0
    4d1a:	0f be       	out	0x3f, r0	; 63
    4d1c:	0f 90       	pop	r0
    4d1e:	1f 90       	pop	r1
    4d20:	18 95       	reti

00004d22 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    4d22:	1f 92       	push	r1
    4d24:	0f 92       	push	r0
    4d26:	0f b6       	in	r0, 0x3f	; 63
    4d28:	0f 92       	push	r0
    4d2a:	11 24       	eor	r1, r1
    4d2c:	0b b6       	in	r0, 0x3b	; 59
    4d2e:	0f 92       	push	r0
    4d30:	2f 93       	push	r18
    4d32:	3f 93       	push	r19
    4d34:	4f 93       	push	r20
    4d36:	5f 93       	push	r21
    4d38:	6f 93       	push	r22
    4d3a:	7f 93       	push	r23
    4d3c:	8f 93       	push	r24
    4d3e:	9f 93       	push	r25
    4d40:	af 93       	push	r26
    4d42:	bf 93       	push	r27
    4d44:	ef 93       	push	r30
    4d46:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    4d48:	e0 91 83 5c 	lds	r30, 0x5C83
    4d4c:	f0 91 84 5c 	lds	r31, 0x5C84
    4d50:	30 97       	sbiw	r30, 0x00	; 0
    4d52:	09 f0       	breq	.+2      	; 0x4d56 <__vector_77+0x34>
		tc_tcd0_ovf_callback();
    4d54:	19 95       	eicall
	}
}
    4d56:	ff 91       	pop	r31
    4d58:	ef 91       	pop	r30
    4d5a:	bf 91       	pop	r27
    4d5c:	af 91       	pop	r26
    4d5e:	9f 91       	pop	r25
    4d60:	8f 91       	pop	r24
    4d62:	7f 91       	pop	r23
    4d64:	6f 91       	pop	r22
    4d66:	5f 91       	pop	r21
    4d68:	4f 91       	pop	r20
    4d6a:	3f 91       	pop	r19
    4d6c:	2f 91       	pop	r18
    4d6e:	0f 90       	pop	r0
    4d70:	0b be       	out	0x3b, r0	; 59
    4d72:	0f 90       	pop	r0
    4d74:	0f be       	out	0x3f, r0	; 63
    4d76:	0f 90       	pop	r0
    4d78:	1f 90       	pop	r1
    4d7a:	18 95       	reti

00004d7c <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    4d7c:	1f 92       	push	r1
    4d7e:	0f 92       	push	r0
    4d80:	0f b6       	in	r0, 0x3f	; 63
    4d82:	0f 92       	push	r0
    4d84:	11 24       	eor	r1, r1
    4d86:	0b b6       	in	r0, 0x3b	; 59
    4d88:	0f 92       	push	r0
    4d8a:	2f 93       	push	r18
    4d8c:	3f 93       	push	r19
    4d8e:	4f 93       	push	r20
    4d90:	5f 93       	push	r21
    4d92:	6f 93       	push	r22
    4d94:	7f 93       	push	r23
    4d96:	8f 93       	push	r24
    4d98:	9f 93       	push	r25
    4d9a:	af 93       	push	r26
    4d9c:	bf 93       	push	r27
    4d9e:	ef 93       	push	r30
    4da0:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    4da2:	e0 91 81 5c 	lds	r30, 0x5C81
    4da6:	f0 91 82 5c 	lds	r31, 0x5C82
    4daa:	30 97       	sbiw	r30, 0x00	; 0
    4dac:	09 f0       	breq	.+2      	; 0x4db0 <__vector_78+0x34>
		tc_tcd0_err_callback();
    4dae:	19 95       	eicall
	}
}
    4db0:	ff 91       	pop	r31
    4db2:	ef 91       	pop	r30
    4db4:	bf 91       	pop	r27
    4db6:	af 91       	pop	r26
    4db8:	9f 91       	pop	r25
    4dba:	8f 91       	pop	r24
    4dbc:	7f 91       	pop	r23
    4dbe:	6f 91       	pop	r22
    4dc0:	5f 91       	pop	r21
    4dc2:	4f 91       	pop	r20
    4dc4:	3f 91       	pop	r19
    4dc6:	2f 91       	pop	r18
    4dc8:	0f 90       	pop	r0
    4dca:	0b be       	out	0x3b, r0	; 59
    4dcc:	0f 90       	pop	r0
    4dce:	0f be       	out	0x3f, r0	; 63
    4dd0:	0f 90       	pop	r0
    4dd2:	1f 90       	pop	r1
    4dd4:	18 95       	reti

00004dd6 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    4dd6:	1f 92       	push	r1
    4dd8:	0f 92       	push	r0
    4dda:	0f b6       	in	r0, 0x3f	; 63
    4ddc:	0f 92       	push	r0
    4dde:	11 24       	eor	r1, r1
    4de0:	0b b6       	in	r0, 0x3b	; 59
    4de2:	0f 92       	push	r0
    4de4:	2f 93       	push	r18
    4de6:	3f 93       	push	r19
    4de8:	4f 93       	push	r20
    4dea:	5f 93       	push	r21
    4dec:	6f 93       	push	r22
    4dee:	7f 93       	push	r23
    4df0:	8f 93       	push	r24
    4df2:	9f 93       	push	r25
    4df4:	af 93       	push	r26
    4df6:	bf 93       	push	r27
    4df8:	ef 93       	push	r30
    4dfa:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    4dfc:	e0 91 7f 5c 	lds	r30, 0x5C7F
    4e00:	f0 91 80 5c 	lds	r31, 0x5C80
    4e04:	30 97       	sbiw	r30, 0x00	; 0
    4e06:	09 f0       	breq	.+2      	; 0x4e0a <__vector_79+0x34>
		tc_tcd0_cca_callback();
    4e08:	19 95       	eicall
	}
}
    4e0a:	ff 91       	pop	r31
    4e0c:	ef 91       	pop	r30
    4e0e:	bf 91       	pop	r27
    4e10:	af 91       	pop	r26
    4e12:	9f 91       	pop	r25
    4e14:	8f 91       	pop	r24
    4e16:	7f 91       	pop	r23
    4e18:	6f 91       	pop	r22
    4e1a:	5f 91       	pop	r21
    4e1c:	4f 91       	pop	r20
    4e1e:	3f 91       	pop	r19
    4e20:	2f 91       	pop	r18
    4e22:	0f 90       	pop	r0
    4e24:	0b be       	out	0x3b, r0	; 59
    4e26:	0f 90       	pop	r0
    4e28:	0f be       	out	0x3f, r0	; 63
    4e2a:	0f 90       	pop	r0
    4e2c:	1f 90       	pop	r1
    4e2e:	18 95       	reti

00004e30 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    4e30:	1f 92       	push	r1
    4e32:	0f 92       	push	r0
    4e34:	0f b6       	in	r0, 0x3f	; 63
    4e36:	0f 92       	push	r0
    4e38:	11 24       	eor	r1, r1
    4e3a:	0b b6       	in	r0, 0x3b	; 59
    4e3c:	0f 92       	push	r0
    4e3e:	2f 93       	push	r18
    4e40:	3f 93       	push	r19
    4e42:	4f 93       	push	r20
    4e44:	5f 93       	push	r21
    4e46:	6f 93       	push	r22
    4e48:	7f 93       	push	r23
    4e4a:	8f 93       	push	r24
    4e4c:	9f 93       	push	r25
    4e4e:	af 93       	push	r26
    4e50:	bf 93       	push	r27
    4e52:	ef 93       	push	r30
    4e54:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    4e56:	e0 91 7d 5c 	lds	r30, 0x5C7D
    4e5a:	f0 91 7e 5c 	lds	r31, 0x5C7E
    4e5e:	30 97       	sbiw	r30, 0x00	; 0
    4e60:	09 f0       	breq	.+2      	; 0x4e64 <__vector_80+0x34>
		tc_tcd0_ccb_callback();
    4e62:	19 95       	eicall
	}
}
    4e64:	ff 91       	pop	r31
    4e66:	ef 91       	pop	r30
    4e68:	bf 91       	pop	r27
    4e6a:	af 91       	pop	r26
    4e6c:	9f 91       	pop	r25
    4e6e:	8f 91       	pop	r24
    4e70:	7f 91       	pop	r23
    4e72:	6f 91       	pop	r22
    4e74:	5f 91       	pop	r21
    4e76:	4f 91       	pop	r20
    4e78:	3f 91       	pop	r19
    4e7a:	2f 91       	pop	r18
    4e7c:	0f 90       	pop	r0
    4e7e:	0b be       	out	0x3b, r0	; 59
    4e80:	0f 90       	pop	r0
    4e82:	0f be       	out	0x3f, r0	; 63
    4e84:	0f 90       	pop	r0
    4e86:	1f 90       	pop	r1
    4e88:	18 95       	reti

00004e8a <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    4e8a:	1f 92       	push	r1
    4e8c:	0f 92       	push	r0
    4e8e:	0f b6       	in	r0, 0x3f	; 63
    4e90:	0f 92       	push	r0
    4e92:	11 24       	eor	r1, r1
    4e94:	0b b6       	in	r0, 0x3b	; 59
    4e96:	0f 92       	push	r0
    4e98:	2f 93       	push	r18
    4e9a:	3f 93       	push	r19
    4e9c:	4f 93       	push	r20
    4e9e:	5f 93       	push	r21
    4ea0:	6f 93       	push	r22
    4ea2:	7f 93       	push	r23
    4ea4:	8f 93       	push	r24
    4ea6:	9f 93       	push	r25
    4ea8:	af 93       	push	r26
    4eaa:	bf 93       	push	r27
    4eac:	ef 93       	push	r30
    4eae:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    4eb0:	e0 91 7b 5c 	lds	r30, 0x5C7B
    4eb4:	f0 91 7c 5c 	lds	r31, 0x5C7C
    4eb8:	30 97       	sbiw	r30, 0x00	; 0
    4eba:	09 f0       	breq	.+2      	; 0x4ebe <__vector_81+0x34>
		tc_tcd0_ccc_callback();
    4ebc:	19 95       	eicall
	}
}
    4ebe:	ff 91       	pop	r31
    4ec0:	ef 91       	pop	r30
    4ec2:	bf 91       	pop	r27
    4ec4:	af 91       	pop	r26
    4ec6:	9f 91       	pop	r25
    4ec8:	8f 91       	pop	r24
    4eca:	7f 91       	pop	r23
    4ecc:	6f 91       	pop	r22
    4ece:	5f 91       	pop	r21
    4ed0:	4f 91       	pop	r20
    4ed2:	3f 91       	pop	r19
    4ed4:	2f 91       	pop	r18
    4ed6:	0f 90       	pop	r0
    4ed8:	0b be       	out	0x3b, r0	; 59
    4eda:	0f 90       	pop	r0
    4edc:	0f be       	out	0x3f, r0	; 63
    4ede:	0f 90       	pop	r0
    4ee0:	1f 90       	pop	r1
    4ee2:	18 95       	reti

00004ee4 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    4ee4:	1f 92       	push	r1
    4ee6:	0f 92       	push	r0
    4ee8:	0f b6       	in	r0, 0x3f	; 63
    4eea:	0f 92       	push	r0
    4eec:	11 24       	eor	r1, r1
    4eee:	0b b6       	in	r0, 0x3b	; 59
    4ef0:	0f 92       	push	r0
    4ef2:	2f 93       	push	r18
    4ef4:	3f 93       	push	r19
    4ef6:	4f 93       	push	r20
    4ef8:	5f 93       	push	r21
    4efa:	6f 93       	push	r22
    4efc:	7f 93       	push	r23
    4efe:	8f 93       	push	r24
    4f00:	9f 93       	push	r25
    4f02:	af 93       	push	r26
    4f04:	bf 93       	push	r27
    4f06:	ef 93       	push	r30
    4f08:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    4f0a:	e0 91 79 5c 	lds	r30, 0x5C79
    4f0e:	f0 91 7a 5c 	lds	r31, 0x5C7A
    4f12:	30 97       	sbiw	r30, 0x00	; 0
    4f14:	09 f0       	breq	.+2      	; 0x4f18 <__vector_82+0x34>
		tc_tcd0_ccd_callback();
    4f16:	19 95       	eicall
	}
}
    4f18:	ff 91       	pop	r31
    4f1a:	ef 91       	pop	r30
    4f1c:	bf 91       	pop	r27
    4f1e:	af 91       	pop	r26
    4f20:	9f 91       	pop	r25
    4f22:	8f 91       	pop	r24
    4f24:	7f 91       	pop	r23
    4f26:	6f 91       	pop	r22
    4f28:	5f 91       	pop	r21
    4f2a:	4f 91       	pop	r20
    4f2c:	3f 91       	pop	r19
    4f2e:	2f 91       	pop	r18
    4f30:	0f 90       	pop	r0
    4f32:	0b be       	out	0x3b, r0	; 59
    4f34:	0f 90       	pop	r0
    4f36:	0f be       	out	0x3f, r0	; 63
    4f38:	0f 90       	pop	r0
    4f3a:	1f 90       	pop	r1
    4f3c:	18 95       	reti

00004f3e <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    4f3e:	1f 92       	push	r1
    4f40:	0f 92       	push	r0
    4f42:	0f b6       	in	r0, 0x3f	; 63
    4f44:	0f 92       	push	r0
    4f46:	11 24       	eor	r1, r1
    4f48:	0b b6       	in	r0, 0x3b	; 59
    4f4a:	0f 92       	push	r0
    4f4c:	2f 93       	push	r18
    4f4e:	3f 93       	push	r19
    4f50:	4f 93       	push	r20
    4f52:	5f 93       	push	r21
    4f54:	6f 93       	push	r22
    4f56:	7f 93       	push	r23
    4f58:	8f 93       	push	r24
    4f5a:	9f 93       	push	r25
    4f5c:	af 93       	push	r26
    4f5e:	bf 93       	push	r27
    4f60:	ef 93       	push	r30
    4f62:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    4f64:	e0 91 77 5c 	lds	r30, 0x5C77
    4f68:	f0 91 78 5c 	lds	r31, 0x5C78
    4f6c:	30 97       	sbiw	r30, 0x00	; 0
    4f6e:	09 f0       	breq	.+2      	; 0x4f72 <__vector_47+0x34>
		tc_tce0_ovf_callback();
    4f70:	19 95       	eicall
	}
}
    4f72:	ff 91       	pop	r31
    4f74:	ef 91       	pop	r30
    4f76:	bf 91       	pop	r27
    4f78:	af 91       	pop	r26
    4f7a:	9f 91       	pop	r25
    4f7c:	8f 91       	pop	r24
    4f7e:	7f 91       	pop	r23
    4f80:	6f 91       	pop	r22
    4f82:	5f 91       	pop	r21
    4f84:	4f 91       	pop	r20
    4f86:	3f 91       	pop	r19
    4f88:	2f 91       	pop	r18
    4f8a:	0f 90       	pop	r0
    4f8c:	0b be       	out	0x3b, r0	; 59
    4f8e:	0f 90       	pop	r0
    4f90:	0f be       	out	0x3f, r0	; 63
    4f92:	0f 90       	pop	r0
    4f94:	1f 90       	pop	r1
    4f96:	18 95       	reti

00004f98 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    4f98:	1f 92       	push	r1
    4f9a:	0f 92       	push	r0
    4f9c:	0f b6       	in	r0, 0x3f	; 63
    4f9e:	0f 92       	push	r0
    4fa0:	11 24       	eor	r1, r1
    4fa2:	0b b6       	in	r0, 0x3b	; 59
    4fa4:	0f 92       	push	r0
    4fa6:	2f 93       	push	r18
    4fa8:	3f 93       	push	r19
    4faa:	4f 93       	push	r20
    4fac:	5f 93       	push	r21
    4fae:	6f 93       	push	r22
    4fb0:	7f 93       	push	r23
    4fb2:	8f 93       	push	r24
    4fb4:	9f 93       	push	r25
    4fb6:	af 93       	push	r26
    4fb8:	bf 93       	push	r27
    4fba:	ef 93       	push	r30
    4fbc:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    4fbe:	e0 91 75 5c 	lds	r30, 0x5C75
    4fc2:	f0 91 76 5c 	lds	r31, 0x5C76
    4fc6:	30 97       	sbiw	r30, 0x00	; 0
    4fc8:	09 f0       	breq	.+2      	; 0x4fcc <__vector_48+0x34>
		tc_tce0_err_callback();
    4fca:	19 95       	eicall
	}
}
    4fcc:	ff 91       	pop	r31
    4fce:	ef 91       	pop	r30
    4fd0:	bf 91       	pop	r27
    4fd2:	af 91       	pop	r26
    4fd4:	9f 91       	pop	r25
    4fd6:	8f 91       	pop	r24
    4fd8:	7f 91       	pop	r23
    4fda:	6f 91       	pop	r22
    4fdc:	5f 91       	pop	r21
    4fde:	4f 91       	pop	r20
    4fe0:	3f 91       	pop	r19
    4fe2:	2f 91       	pop	r18
    4fe4:	0f 90       	pop	r0
    4fe6:	0b be       	out	0x3b, r0	; 59
    4fe8:	0f 90       	pop	r0
    4fea:	0f be       	out	0x3f, r0	; 63
    4fec:	0f 90       	pop	r0
    4fee:	1f 90       	pop	r1
    4ff0:	18 95       	reti

00004ff2 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    4ff2:	1f 92       	push	r1
    4ff4:	0f 92       	push	r0
    4ff6:	0f b6       	in	r0, 0x3f	; 63
    4ff8:	0f 92       	push	r0
    4ffa:	11 24       	eor	r1, r1
    4ffc:	0b b6       	in	r0, 0x3b	; 59
    4ffe:	0f 92       	push	r0
    5000:	2f 93       	push	r18
    5002:	3f 93       	push	r19
    5004:	4f 93       	push	r20
    5006:	5f 93       	push	r21
    5008:	6f 93       	push	r22
    500a:	7f 93       	push	r23
    500c:	8f 93       	push	r24
    500e:	9f 93       	push	r25
    5010:	af 93       	push	r26
    5012:	bf 93       	push	r27
    5014:	ef 93       	push	r30
    5016:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    5018:	e0 91 73 5c 	lds	r30, 0x5C73
    501c:	f0 91 74 5c 	lds	r31, 0x5C74
    5020:	30 97       	sbiw	r30, 0x00	; 0
    5022:	09 f0       	breq	.+2      	; 0x5026 <__vector_49+0x34>
		tc_tce0_cca_callback();
    5024:	19 95       	eicall
	}
}
    5026:	ff 91       	pop	r31
    5028:	ef 91       	pop	r30
    502a:	bf 91       	pop	r27
    502c:	af 91       	pop	r26
    502e:	9f 91       	pop	r25
    5030:	8f 91       	pop	r24
    5032:	7f 91       	pop	r23
    5034:	6f 91       	pop	r22
    5036:	5f 91       	pop	r21
    5038:	4f 91       	pop	r20
    503a:	3f 91       	pop	r19
    503c:	2f 91       	pop	r18
    503e:	0f 90       	pop	r0
    5040:	0b be       	out	0x3b, r0	; 59
    5042:	0f 90       	pop	r0
    5044:	0f be       	out	0x3f, r0	; 63
    5046:	0f 90       	pop	r0
    5048:	1f 90       	pop	r1
    504a:	18 95       	reti

0000504c <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    504c:	1f 92       	push	r1
    504e:	0f 92       	push	r0
    5050:	0f b6       	in	r0, 0x3f	; 63
    5052:	0f 92       	push	r0
    5054:	11 24       	eor	r1, r1
    5056:	0b b6       	in	r0, 0x3b	; 59
    5058:	0f 92       	push	r0
    505a:	2f 93       	push	r18
    505c:	3f 93       	push	r19
    505e:	4f 93       	push	r20
    5060:	5f 93       	push	r21
    5062:	6f 93       	push	r22
    5064:	7f 93       	push	r23
    5066:	8f 93       	push	r24
    5068:	9f 93       	push	r25
    506a:	af 93       	push	r26
    506c:	bf 93       	push	r27
    506e:	ef 93       	push	r30
    5070:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    5072:	e0 91 71 5c 	lds	r30, 0x5C71
    5076:	f0 91 72 5c 	lds	r31, 0x5C72
    507a:	30 97       	sbiw	r30, 0x00	; 0
    507c:	09 f0       	breq	.+2      	; 0x5080 <__vector_50+0x34>
		tc_tce0_ccb_callback();
    507e:	19 95       	eicall
	}
}
    5080:	ff 91       	pop	r31
    5082:	ef 91       	pop	r30
    5084:	bf 91       	pop	r27
    5086:	af 91       	pop	r26
    5088:	9f 91       	pop	r25
    508a:	8f 91       	pop	r24
    508c:	7f 91       	pop	r23
    508e:	6f 91       	pop	r22
    5090:	5f 91       	pop	r21
    5092:	4f 91       	pop	r20
    5094:	3f 91       	pop	r19
    5096:	2f 91       	pop	r18
    5098:	0f 90       	pop	r0
    509a:	0b be       	out	0x3b, r0	; 59
    509c:	0f 90       	pop	r0
    509e:	0f be       	out	0x3f, r0	; 63
    50a0:	0f 90       	pop	r0
    50a2:	1f 90       	pop	r1
    50a4:	18 95       	reti

000050a6 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    50a6:	1f 92       	push	r1
    50a8:	0f 92       	push	r0
    50aa:	0f b6       	in	r0, 0x3f	; 63
    50ac:	0f 92       	push	r0
    50ae:	11 24       	eor	r1, r1
    50b0:	0b b6       	in	r0, 0x3b	; 59
    50b2:	0f 92       	push	r0
    50b4:	2f 93       	push	r18
    50b6:	3f 93       	push	r19
    50b8:	4f 93       	push	r20
    50ba:	5f 93       	push	r21
    50bc:	6f 93       	push	r22
    50be:	7f 93       	push	r23
    50c0:	8f 93       	push	r24
    50c2:	9f 93       	push	r25
    50c4:	af 93       	push	r26
    50c6:	bf 93       	push	r27
    50c8:	ef 93       	push	r30
    50ca:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    50cc:	e0 91 6f 5c 	lds	r30, 0x5C6F
    50d0:	f0 91 70 5c 	lds	r31, 0x5C70
    50d4:	30 97       	sbiw	r30, 0x00	; 0
    50d6:	09 f0       	breq	.+2      	; 0x50da <__vector_51+0x34>
		tc_tce0_ccc_callback();
    50d8:	19 95       	eicall
	}
}
    50da:	ff 91       	pop	r31
    50dc:	ef 91       	pop	r30
    50de:	bf 91       	pop	r27
    50e0:	af 91       	pop	r26
    50e2:	9f 91       	pop	r25
    50e4:	8f 91       	pop	r24
    50e6:	7f 91       	pop	r23
    50e8:	6f 91       	pop	r22
    50ea:	5f 91       	pop	r21
    50ec:	4f 91       	pop	r20
    50ee:	3f 91       	pop	r19
    50f0:	2f 91       	pop	r18
    50f2:	0f 90       	pop	r0
    50f4:	0b be       	out	0x3b, r0	; 59
    50f6:	0f 90       	pop	r0
    50f8:	0f be       	out	0x3f, r0	; 63
    50fa:	0f 90       	pop	r0
    50fc:	1f 90       	pop	r1
    50fe:	18 95       	reti

00005100 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    5100:	1f 92       	push	r1
    5102:	0f 92       	push	r0
    5104:	0f b6       	in	r0, 0x3f	; 63
    5106:	0f 92       	push	r0
    5108:	11 24       	eor	r1, r1
    510a:	0b b6       	in	r0, 0x3b	; 59
    510c:	0f 92       	push	r0
    510e:	2f 93       	push	r18
    5110:	3f 93       	push	r19
    5112:	4f 93       	push	r20
    5114:	5f 93       	push	r21
    5116:	6f 93       	push	r22
    5118:	7f 93       	push	r23
    511a:	8f 93       	push	r24
    511c:	9f 93       	push	r25
    511e:	af 93       	push	r26
    5120:	bf 93       	push	r27
    5122:	ef 93       	push	r30
    5124:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    5126:	e0 91 6d 5c 	lds	r30, 0x5C6D
    512a:	f0 91 6e 5c 	lds	r31, 0x5C6E
    512e:	30 97       	sbiw	r30, 0x00	; 0
    5130:	09 f0       	breq	.+2      	; 0x5134 <__vector_52+0x34>
		tc_tce0_ccd_callback();
    5132:	19 95       	eicall
	}
}
    5134:	ff 91       	pop	r31
    5136:	ef 91       	pop	r30
    5138:	bf 91       	pop	r27
    513a:	af 91       	pop	r26
    513c:	9f 91       	pop	r25
    513e:	8f 91       	pop	r24
    5140:	7f 91       	pop	r23
    5142:	6f 91       	pop	r22
    5144:	5f 91       	pop	r21
    5146:	4f 91       	pop	r20
    5148:	3f 91       	pop	r19
    514a:	2f 91       	pop	r18
    514c:	0f 90       	pop	r0
    514e:	0b be       	out	0x3b, r0	; 59
    5150:	0f 90       	pop	r0
    5152:	0f be       	out	0x3f, r0	; 63
    5154:	0f 90       	pop	r0
    5156:	1f 90       	pop	r1
    5158:	18 95       	reti

0000515a <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    515a:	1f 92       	push	r1
    515c:	0f 92       	push	r0
    515e:	0f b6       	in	r0, 0x3f	; 63
    5160:	0f 92       	push	r0
    5162:	11 24       	eor	r1, r1
    5164:	0b b6       	in	r0, 0x3b	; 59
    5166:	0f 92       	push	r0
    5168:	2f 93       	push	r18
    516a:	3f 93       	push	r19
    516c:	4f 93       	push	r20
    516e:	5f 93       	push	r21
    5170:	6f 93       	push	r22
    5172:	7f 93       	push	r23
    5174:	8f 93       	push	r24
    5176:	9f 93       	push	r25
    5178:	af 93       	push	r26
    517a:	bf 93       	push	r27
    517c:	ef 93       	push	r30
    517e:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    5180:	e0 91 6b 5c 	lds	r30, 0x5C6B
    5184:	f0 91 6c 5c 	lds	r31, 0x5C6C
    5188:	30 97       	sbiw	r30, 0x00	; 0
    518a:	09 f0       	breq	.+2      	; 0x518e <__vector_108+0x34>
		tc_tcf0_ovf_callback();
    518c:	19 95       	eicall
	}
}
    518e:	ff 91       	pop	r31
    5190:	ef 91       	pop	r30
    5192:	bf 91       	pop	r27
    5194:	af 91       	pop	r26
    5196:	9f 91       	pop	r25
    5198:	8f 91       	pop	r24
    519a:	7f 91       	pop	r23
    519c:	6f 91       	pop	r22
    519e:	5f 91       	pop	r21
    51a0:	4f 91       	pop	r20
    51a2:	3f 91       	pop	r19
    51a4:	2f 91       	pop	r18
    51a6:	0f 90       	pop	r0
    51a8:	0b be       	out	0x3b, r0	; 59
    51aa:	0f 90       	pop	r0
    51ac:	0f be       	out	0x3f, r0	; 63
    51ae:	0f 90       	pop	r0
    51b0:	1f 90       	pop	r1
    51b2:	18 95       	reti

000051b4 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    51b4:	1f 92       	push	r1
    51b6:	0f 92       	push	r0
    51b8:	0f b6       	in	r0, 0x3f	; 63
    51ba:	0f 92       	push	r0
    51bc:	11 24       	eor	r1, r1
    51be:	0b b6       	in	r0, 0x3b	; 59
    51c0:	0f 92       	push	r0
    51c2:	2f 93       	push	r18
    51c4:	3f 93       	push	r19
    51c6:	4f 93       	push	r20
    51c8:	5f 93       	push	r21
    51ca:	6f 93       	push	r22
    51cc:	7f 93       	push	r23
    51ce:	8f 93       	push	r24
    51d0:	9f 93       	push	r25
    51d2:	af 93       	push	r26
    51d4:	bf 93       	push	r27
    51d6:	ef 93       	push	r30
    51d8:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    51da:	e0 91 69 5c 	lds	r30, 0x5C69
    51de:	f0 91 6a 5c 	lds	r31, 0x5C6A
    51e2:	30 97       	sbiw	r30, 0x00	; 0
    51e4:	09 f0       	breq	.+2      	; 0x51e8 <__vector_109+0x34>
		tc_tcf0_err_callback();
    51e6:	19 95       	eicall
	}
}
    51e8:	ff 91       	pop	r31
    51ea:	ef 91       	pop	r30
    51ec:	bf 91       	pop	r27
    51ee:	af 91       	pop	r26
    51f0:	9f 91       	pop	r25
    51f2:	8f 91       	pop	r24
    51f4:	7f 91       	pop	r23
    51f6:	6f 91       	pop	r22
    51f8:	5f 91       	pop	r21
    51fa:	4f 91       	pop	r20
    51fc:	3f 91       	pop	r19
    51fe:	2f 91       	pop	r18
    5200:	0f 90       	pop	r0
    5202:	0b be       	out	0x3b, r0	; 59
    5204:	0f 90       	pop	r0
    5206:	0f be       	out	0x3f, r0	; 63
    5208:	0f 90       	pop	r0
    520a:	1f 90       	pop	r1
    520c:	18 95       	reti

0000520e <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    520e:	1f 92       	push	r1
    5210:	0f 92       	push	r0
    5212:	0f b6       	in	r0, 0x3f	; 63
    5214:	0f 92       	push	r0
    5216:	11 24       	eor	r1, r1
    5218:	0b b6       	in	r0, 0x3b	; 59
    521a:	0f 92       	push	r0
    521c:	2f 93       	push	r18
    521e:	3f 93       	push	r19
    5220:	4f 93       	push	r20
    5222:	5f 93       	push	r21
    5224:	6f 93       	push	r22
    5226:	7f 93       	push	r23
    5228:	8f 93       	push	r24
    522a:	9f 93       	push	r25
    522c:	af 93       	push	r26
    522e:	bf 93       	push	r27
    5230:	ef 93       	push	r30
    5232:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    5234:	e0 91 67 5c 	lds	r30, 0x5C67
    5238:	f0 91 68 5c 	lds	r31, 0x5C68
    523c:	30 97       	sbiw	r30, 0x00	; 0
    523e:	09 f0       	breq	.+2      	; 0x5242 <__vector_110+0x34>
		tc_tcf0_cca_callback();
    5240:	19 95       	eicall
	}
}
    5242:	ff 91       	pop	r31
    5244:	ef 91       	pop	r30
    5246:	bf 91       	pop	r27
    5248:	af 91       	pop	r26
    524a:	9f 91       	pop	r25
    524c:	8f 91       	pop	r24
    524e:	7f 91       	pop	r23
    5250:	6f 91       	pop	r22
    5252:	5f 91       	pop	r21
    5254:	4f 91       	pop	r20
    5256:	3f 91       	pop	r19
    5258:	2f 91       	pop	r18
    525a:	0f 90       	pop	r0
    525c:	0b be       	out	0x3b, r0	; 59
    525e:	0f 90       	pop	r0
    5260:	0f be       	out	0x3f, r0	; 63
    5262:	0f 90       	pop	r0
    5264:	1f 90       	pop	r1
    5266:	18 95       	reti

00005268 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    5268:	1f 92       	push	r1
    526a:	0f 92       	push	r0
    526c:	0f b6       	in	r0, 0x3f	; 63
    526e:	0f 92       	push	r0
    5270:	11 24       	eor	r1, r1
    5272:	0b b6       	in	r0, 0x3b	; 59
    5274:	0f 92       	push	r0
    5276:	2f 93       	push	r18
    5278:	3f 93       	push	r19
    527a:	4f 93       	push	r20
    527c:	5f 93       	push	r21
    527e:	6f 93       	push	r22
    5280:	7f 93       	push	r23
    5282:	8f 93       	push	r24
    5284:	9f 93       	push	r25
    5286:	af 93       	push	r26
    5288:	bf 93       	push	r27
    528a:	ef 93       	push	r30
    528c:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    528e:	e0 91 65 5c 	lds	r30, 0x5C65
    5292:	f0 91 66 5c 	lds	r31, 0x5C66
    5296:	30 97       	sbiw	r30, 0x00	; 0
    5298:	09 f0       	breq	.+2      	; 0x529c <__vector_111+0x34>
		tc_tcf0_ccb_callback();
    529a:	19 95       	eicall
	}
}
    529c:	ff 91       	pop	r31
    529e:	ef 91       	pop	r30
    52a0:	bf 91       	pop	r27
    52a2:	af 91       	pop	r26
    52a4:	9f 91       	pop	r25
    52a6:	8f 91       	pop	r24
    52a8:	7f 91       	pop	r23
    52aa:	6f 91       	pop	r22
    52ac:	5f 91       	pop	r21
    52ae:	4f 91       	pop	r20
    52b0:	3f 91       	pop	r19
    52b2:	2f 91       	pop	r18
    52b4:	0f 90       	pop	r0
    52b6:	0b be       	out	0x3b, r0	; 59
    52b8:	0f 90       	pop	r0
    52ba:	0f be       	out	0x3f, r0	; 63
    52bc:	0f 90       	pop	r0
    52be:	1f 90       	pop	r1
    52c0:	18 95       	reti

000052c2 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    52c2:	1f 92       	push	r1
    52c4:	0f 92       	push	r0
    52c6:	0f b6       	in	r0, 0x3f	; 63
    52c8:	0f 92       	push	r0
    52ca:	11 24       	eor	r1, r1
    52cc:	0b b6       	in	r0, 0x3b	; 59
    52ce:	0f 92       	push	r0
    52d0:	2f 93       	push	r18
    52d2:	3f 93       	push	r19
    52d4:	4f 93       	push	r20
    52d6:	5f 93       	push	r21
    52d8:	6f 93       	push	r22
    52da:	7f 93       	push	r23
    52dc:	8f 93       	push	r24
    52de:	9f 93       	push	r25
    52e0:	af 93       	push	r26
    52e2:	bf 93       	push	r27
    52e4:	ef 93       	push	r30
    52e6:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    52e8:	e0 91 63 5c 	lds	r30, 0x5C63
    52ec:	f0 91 64 5c 	lds	r31, 0x5C64
    52f0:	30 97       	sbiw	r30, 0x00	; 0
    52f2:	09 f0       	breq	.+2      	; 0x52f6 <__vector_112+0x34>
		tc_tcf0_ccc_callback();
    52f4:	19 95       	eicall
	}
}
    52f6:	ff 91       	pop	r31
    52f8:	ef 91       	pop	r30
    52fa:	bf 91       	pop	r27
    52fc:	af 91       	pop	r26
    52fe:	9f 91       	pop	r25
    5300:	8f 91       	pop	r24
    5302:	7f 91       	pop	r23
    5304:	6f 91       	pop	r22
    5306:	5f 91       	pop	r21
    5308:	4f 91       	pop	r20
    530a:	3f 91       	pop	r19
    530c:	2f 91       	pop	r18
    530e:	0f 90       	pop	r0
    5310:	0b be       	out	0x3b, r0	; 59
    5312:	0f 90       	pop	r0
    5314:	0f be       	out	0x3f, r0	; 63
    5316:	0f 90       	pop	r0
    5318:	1f 90       	pop	r1
    531a:	18 95       	reti

0000531c <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    531c:	1f 92       	push	r1
    531e:	0f 92       	push	r0
    5320:	0f b6       	in	r0, 0x3f	; 63
    5322:	0f 92       	push	r0
    5324:	11 24       	eor	r1, r1
    5326:	0b b6       	in	r0, 0x3b	; 59
    5328:	0f 92       	push	r0
    532a:	2f 93       	push	r18
    532c:	3f 93       	push	r19
    532e:	4f 93       	push	r20
    5330:	5f 93       	push	r21
    5332:	6f 93       	push	r22
    5334:	7f 93       	push	r23
    5336:	8f 93       	push	r24
    5338:	9f 93       	push	r25
    533a:	af 93       	push	r26
    533c:	bf 93       	push	r27
    533e:	ef 93       	push	r30
    5340:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    5342:	e0 91 61 5c 	lds	r30, 0x5C61
    5346:	f0 91 62 5c 	lds	r31, 0x5C62
    534a:	30 97       	sbiw	r30, 0x00	; 0
    534c:	09 f0       	breq	.+2      	; 0x5350 <__vector_113+0x34>
		tc_tcf0_ccd_callback();
    534e:	19 95       	eicall
	}
}
    5350:	ff 91       	pop	r31
    5352:	ef 91       	pop	r30
    5354:	bf 91       	pop	r27
    5356:	af 91       	pop	r26
    5358:	9f 91       	pop	r25
    535a:	8f 91       	pop	r24
    535c:	7f 91       	pop	r23
    535e:	6f 91       	pop	r22
    5360:	5f 91       	pop	r21
    5362:	4f 91       	pop	r20
    5364:	3f 91       	pop	r19
    5366:	2f 91       	pop	r18
    5368:	0f 90       	pop	r0
    536a:	0b be       	out	0x3b, r0	; 59
    536c:	0f 90       	pop	r0
    536e:	0f be       	out	0x3f, r0	; 63
    5370:	0f 90       	pop	r0
    5372:	1f 90       	pop	r1
    5374:	18 95       	reti

00005376 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    5376:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    5378:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    537a:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    537c:	28 2f       	mov	r18, r24
    537e:	39 2f       	mov	r19, r25
    5380:	21 15       	cp	r18, r1
    5382:	88 e0       	ldi	r24, 0x08	; 8
    5384:	38 07       	cpc	r19, r24
    5386:	39 f4       	brne	.+14     	; 0x5396 <tc_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    5388:	61 e0       	ldi	r22, 0x01	; 1
    538a:	83 e0       	ldi	r24, 0x03	; 3
    538c:	50 d0       	rcall	.+160    	; 0x542e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    538e:	64 e0       	ldi	r22, 0x04	; 4
    5390:	83 e0       	ldi	r24, 0x03	; 3
    5392:	4d d0       	rcall	.+154    	; 0x542e <sysclk_enable_module>
    5394:	2d c0       	rjmp	.+90     	; 0x53f0 <tc_enable+0x7a>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    5396:	20 34       	cpi	r18, 0x40	; 64
    5398:	88 e0       	ldi	r24, 0x08	; 8
    539a:	38 07       	cpc	r19, r24
    539c:	39 f4       	brne	.+14     	; 0x53ac <tc_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    539e:	62 e0       	ldi	r22, 0x02	; 2
    53a0:	83 e0       	ldi	r24, 0x03	; 3
    53a2:	45 d0       	rcall	.+138    	; 0x542e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    53a4:	64 e0       	ldi	r22, 0x04	; 4
    53a6:	83 e0       	ldi	r24, 0x03	; 3
    53a8:	42 d0       	rcall	.+132    	; 0x542e <sysclk_enable_module>
    53aa:	22 c0       	rjmp	.+68     	; 0x53f0 <tc_enable+0x7a>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    53ac:	21 15       	cp	r18, r1
    53ae:	89 e0       	ldi	r24, 0x09	; 9
    53b0:	38 07       	cpc	r19, r24
    53b2:	39 f4       	brne	.+14     	; 0x53c2 <tc_enable+0x4c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    53b4:	61 e0       	ldi	r22, 0x01	; 1
    53b6:	84 e0       	ldi	r24, 0x04	; 4
    53b8:	3a d0       	rcall	.+116    	; 0x542e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    53ba:	64 e0       	ldi	r22, 0x04	; 4
    53bc:	84 e0       	ldi	r24, 0x04	; 4
    53be:	37 d0       	rcall	.+110    	; 0x542e <sysclk_enable_module>
    53c0:	17 c0       	rjmp	.+46     	; 0x53f0 <tc_enable+0x7a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    53c2:	21 15       	cp	r18, r1
    53c4:	8a e0       	ldi	r24, 0x0A	; 10
    53c6:	38 07       	cpc	r19, r24
    53c8:	39 f4       	brne	.+14     	; 0x53d8 <tc_enable+0x62>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    53ca:	61 e0       	ldi	r22, 0x01	; 1
    53cc:	85 e0       	ldi	r24, 0x05	; 5
    53ce:	2f d0       	rcall	.+94     	; 0x542e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    53d0:	64 e0       	ldi	r22, 0x04	; 4
    53d2:	85 e0       	ldi	r24, 0x05	; 5
    53d4:	2c d0       	rcall	.+88     	; 0x542e <sysclk_enable_module>
    53d6:	0c c0       	rjmp	.+24     	; 0x53f0 <tc_enable+0x7a>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    53d8:	21 15       	cp	r18, r1
    53da:	3b 40       	sbci	r19, 0x0B	; 11
    53dc:	39 f4       	brne	.+14     	; 0x53ec <tc_enable+0x76>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    53de:	61 e0       	ldi	r22, 0x01	; 1
    53e0:	86 e0       	ldi	r24, 0x06	; 6
    53e2:	25 d0       	rcall	.+74     	; 0x542e <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    53e4:	64 e0       	ldi	r22, 0x04	; 4
    53e6:	86 e0       	ldi	r24, 0x06	; 6
    53e8:	22 d0       	rcall	.+68     	; 0x542e <sysclk_enable_module>
    53ea:	02 c0       	rjmp	.+4      	; 0x53f0 <tc_enable+0x7a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    53ec:	cf bf       	out	0x3f, r28	; 63
    53ee:	09 c0       	rjmp	.+18     	; 0x5402 <tc_enable+0x8c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    53f0:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    53f2:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    53f4:	eb ea       	ldi	r30, 0xAB	; 171
    53f6:	fc e5       	ldi	r31, 0x5C	; 92
    53f8:	90 81       	ld	r25, Z
    53fa:	9f 5f       	subi	r25, 0xFF	; 255
    53fc:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    53fe:	8f bf       	out	0x3f, r24	; 63
    5400:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    5402:	cf 91       	pop	r28
    5404:	08 95       	ret

00005406 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    5406:	8f ef       	ldi	r24, 0xFF	; 255
    5408:	80 93 70 00 	sts	0x0070, r24
    540c:	80 93 71 00 	sts	0x0071, r24
    5410:	80 93 72 00 	sts	0x0072, r24
    5414:	80 93 73 00 	sts	0x0073, r24
    5418:	80 93 74 00 	sts	0x0074, r24
    541c:	80 93 75 00 	sts	0x0075, r24
    5420:	80 93 76 00 	sts	0x0076, r24
 * \param psbcdiv The prescaler B and C settings (one of the \c SYSCLK_PSBCDIV_*
 * definitions). These determine the clkPER2, clkPER and clkCPU frequencies.
 */
static inline void sysclk_set_prescalers(uint8_t psadiv, uint8_t psbcdiv)
{
	ccp_write_io((uint8_t *)&CLK.PSCTRL, psadiv | psbcdiv);
    5424:	6e e0       	ldi	r22, 0x0E	; 14
    5426:	81 e4       	ldi	r24, 0x41	; 65
    5428:	90 e0       	ldi	r25, 0x00	; 0
    542a:	22 c0       	rjmp	.+68     	; 0x5470 <ccp_write_io>
    542c:	08 95       	ret

0000542e <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    542e:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    5430:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    5432:	e8 2f       	mov	r30, r24
    5434:	f0 e0       	ldi	r31, 0x00	; 0
    5436:	e0 59       	subi	r30, 0x90	; 144
    5438:	ff 4f       	sbci	r31, 0xFF	; 255
    543a:	60 95       	com	r22
    543c:	80 81       	ld	r24, Z
    543e:	68 23       	and	r22, r24
    5440:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5442:	9f bf       	out	0x3f, r25	; 63
    5444:	08 95       	ret

00005446 <sysclk_disable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    5446:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
    5448:	f8 94       	cli

void sysclk_disable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) |= id;
    544a:	e8 2f       	mov	r30, r24
    544c:	f0 e0       	ldi	r31, 0x00	; 0
    544e:	e0 59       	subi	r30, 0x90	; 144
    5450:	ff 4f       	sbci	r31, 0xFF	; 255
    5452:	80 81       	ld	r24, Z
    5454:	68 2b       	or	r22, r24
    5456:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5458:	9f bf       	out	0x3f, r25	; 63
    545a:	08 95       	ret

0000545c <nvm_read_byte>:
    545c:	40 91 ca 01 	lds	r20, 0x01CA
    5460:	e6 2f       	mov	r30, r22
    5462:	f7 2f       	mov	r31, r23
    5464:	80 93 ca 01 	sts	0x01CA, r24
    5468:	84 91       	lpm	r24, Z
    546a:	40 93 ca 01 	sts	0x01CA, r20
    546e:	08 95       	ret

00005470 <ccp_write_io>:
    5470:	1b be       	out	0x3b, r1	; 59
    5472:	fc 01       	movw	r30, r24
    5474:	28 ed       	ldi	r18, 0xD8	; 216
    5476:	24 bf       	out	0x34, r18	; 52
    5478:	60 83       	st	Z, r22
    547a:	08 95       	ret

0000547c <ioport_configure_port_pin>:
    547c:	cf 93       	push	r28
    547e:	df 93       	push	r29
    5480:	fc 01       	movw	r30, r24
    5482:	70 96       	adiw	r30, 0x10	; 16
    5484:	20 e0       	ldi	r18, 0x00	; 0
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	c6 2f       	mov	r28, r22
    548a:	d0 e0       	ldi	r29, 0x00	; 0
    548c:	de 01       	movw	r26, r28
    548e:	02 2e       	mov	r0, r18
    5490:	02 c0       	rjmp	.+4      	; 0x5496 <ioport_configure_port_pin+0x1a>
    5492:	b5 95       	asr	r27
    5494:	a7 95       	ror	r26
    5496:	0a 94       	dec	r0
    5498:	e2 f7       	brpl	.-8      	; 0x5492 <ioport_configure_port_pin+0x16>
    549a:	a0 fd       	sbrc	r26, 0
    549c:	50 83       	st	Z, r21
    549e:	2f 5f       	subi	r18, 0xFF	; 255
    54a0:	3f 4f       	sbci	r19, 0xFF	; 255
    54a2:	31 96       	adiw	r30, 0x01	; 1
    54a4:	28 30       	cpi	r18, 0x08	; 8
    54a6:	31 05       	cpc	r19, r1
    54a8:	89 f7       	brne	.-30     	; 0x548c <ioport_configure_port_pin+0x10>
    54aa:	40 ff       	sbrs	r20, 0
    54ac:	0a c0       	rjmp	.+20     	; 0x54c2 <ioport_configure_port_pin+0x46>
    54ae:	41 ff       	sbrs	r20, 1
    54b0:	03 c0       	rjmp	.+6      	; 0x54b8 <ioport_configure_port_pin+0x3c>
    54b2:	fc 01       	movw	r30, r24
    54b4:	65 83       	std	Z+5, r22	; 0x05
    54b6:	02 c0       	rjmp	.+4      	; 0x54bc <ioport_configure_port_pin+0x40>
    54b8:	fc 01       	movw	r30, r24
    54ba:	66 83       	std	Z+6, r22	; 0x06
    54bc:	fc 01       	movw	r30, r24
    54be:	61 83       	std	Z+1, r22	; 0x01
    54c0:	02 c0       	rjmp	.+4      	; 0x54c6 <ioport_configure_port_pin+0x4a>
    54c2:	fc 01       	movw	r30, r24
    54c4:	62 83       	std	Z+2, r22	; 0x02
    54c6:	df 91       	pop	r29
    54c8:	cf 91       	pop	r28
    54ca:	08 95       	ret

000054cc <board_init>:
    54cc:	43 e0       	ldi	r20, 0x03	; 3
    54ce:	50 e0       	ldi	r21, 0x00	; 0
    54d0:	61 e0       	ldi	r22, 0x01	; 1
    54d2:	80 ee       	ldi	r24, 0xE0	; 224
    54d4:	97 e0       	ldi	r25, 0x07	; 7
    54d6:	d2 df       	rcall	.-92     	; 0x547c <ioport_configure_port_pin>
    54d8:	43 e0       	ldi	r20, 0x03	; 3
    54da:	50 e0       	ldi	r21, 0x00	; 0
    54dc:	62 e0       	ldi	r22, 0x02	; 2
    54de:	80 ee       	ldi	r24, 0xE0	; 224
    54e0:	97 e0       	ldi	r25, 0x07	; 7
    54e2:	cc df       	rcall	.-104    	; 0x547c <ioport_configure_port_pin>
    54e4:	43 e0       	ldi	r20, 0x03	; 3
    54e6:	50 e0       	ldi	r21, 0x00	; 0
    54e8:	60 e1       	ldi	r22, 0x10	; 16
    54ea:	80 e6       	ldi	r24, 0x60	; 96
    54ec:	96 e0       	ldi	r25, 0x06	; 6
    54ee:	c6 df       	rcall	.-116    	; 0x547c <ioport_configure_port_pin>
    54f0:	41 e0       	ldi	r20, 0x01	; 1
    54f2:	50 e4       	ldi	r21, 0x40	; 64
    54f4:	60 e2       	ldi	r22, 0x20	; 32
    54f6:	80 e6       	ldi	r24, 0x60	; 96
    54f8:	96 e0       	ldi	r25, 0x06	; 6
    54fa:	c0 df       	rcall	.-128    	; 0x547c <ioport_configure_port_pin>
    54fc:	40 e0       	ldi	r20, 0x00	; 0
    54fe:	5b e1       	ldi	r21, 0x1B	; 27
    5500:	62 e0       	ldi	r22, 0x02	; 2
    5502:	80 ea       	ldi	r24, 0xA0	; 160
    5504:	96 e0       	ldi	r25, 0x06	; 6
    5506:	ba df       	rcall	.-140    	; 0x547c <ioport_configure_port_pin>
    5508:	40 e0       	ldi	r20, 0x00	; 0
    550a:	5b e1       	ldi	r21, 0x1B	; 27
    550c:	64 e0       	ldi	r22, 0x04	; 4
    550e:	80 ea       	ldi	r24, 0xA0	; 160
    5510:	96 e0       	ldi	r25, 0x06	; 6
    5512:	b4 df       	rcall	.-152    	; 0x547c <ioport_configure_port_pin>
    5514:	43 e0       	ldi	r20, 0x03	; 3
    5516:	50 e0       	ldi	r21, 0x00	; 0
    5518:	68 e0       	ldi	r22, 0x08	; 8
    551a:	80 ea       	ldi	r24, 0xA0	; 160
    551c:	96 e0       	ldi	r25, 0x06	; 6
    551e:	ae df       	rcall	.-164    	; 0x547c <ioport_configure_port_pin>
    5520:	43 e0       	ldi	r20, 0x03	; 3
    5522:	50 e0       	ldi	r21, 0x00	; 0
    5524:	61 e0       	ldi	r22, 0x01	; 1
    5526:	80 e6       	ldi	r24, 0x60	; 96
    5528:	96 e0       	ldi	r25, 0x06	; 6
    552a:	a8 df       	rcall	.-176    	; 0x547c <ioport_configure_port_pin>
    552c:	43 e0       	ldi	r20, 0x03	; 3
    552e:	50 e0       	ldi	r21, 0x00	; 0
    5530:	68 e0       	ldi	r22, 0x08	; 8
    5532:	80 e0       	ldi	r24, 0x00	; 0
    5534:	96 e0       	ldi	r25, 0x06	; 6
    5536:	a2 df       	rcall	.-188    	; 0x547c <ioport_configure_port_pin>
    5538:	43 e0       	ldi	r20, 0x03	; 3
    553a:	50 e0       	ldi	r21, 0x00	; 0
    553c:	60 e2       	ldi	r22, 0x20	; 32
    553e:	80 e8       	ldi	r24, 0x80	; 128
    5540:	96 e0       	ldi	r25, 0x06	; 6
    5542:	9c df       	rcall	.-200    	; 0x547c <ioport_configure_port_pin>
    5544:	40 e0       	ldi	r20, 0x00	; 0
    5546:	5b e1       	ldi	r21, 0x1B	; 27
    5548:	60 e1       	ldi	r22, 0x10	; 16
    554a:	80 e8       	ldi	r24, 0x80	; 128
    554c:	96 e0       	ldi	r25, 0x06	; 6
    554e:	96 df       	rcall	.-212    	; 0x547c <ioport_configure_port_pin>
    5550:	43 e0       	ldi	r20, 0x03	; 3
    5552:	50 e0       	ldi	r21, 0x00	; 0
    5554:	62 e0       	ldi	r22, 0x02	; 2
    5556:	80 e6       	ldi	r24, 0x60	; 96
    5558:	96 e0       	ldi	r25, 0x06	; 6
    555a:	90 df       	rcall	.-224    	; 0x547c <ioport_configure_port_pin>
    555c:	43 e0       	ldi	r20, 0x03	; 3
    555e:	50 e0       	ldi	r21, 0x00	; 0
    5560:	68 e0       	ldi	r22, 0x08	; 8
    5562:	80 e6       	ldi	r24, 0x60	; 96
    5564:	96 e0       	ldi	r25, 0x06	; 6
    5566:	8a df       	rcall	.-236    	; 0x547c <ioport_configure_port_pin>
    5568:	40 e0       	ldi	r20, 0x00	; 0
    556a:	50 e0       	ldi	r21, 0x00	; 0
    556c:	64 e0       	ldi	r22, 0x04	; 4
    556e:	80 e6       	ldi	r24, 0x60	; 96
    5570:	96 e0       	ldi	r25, 0x06	; 6
    5572:	84 df       	rcall	.-248    	; 0x547c <ioport_configure_port_pin>
    5574:	40 e0       	ldi	r20, 0x00	; 0
    5576:	50 e0       	ldi	r21, 0x00	; 0
    5578:	61 e0       	ldi	r22, 0x01	; 1
    557a:	80 e0       	ldi	r24, 0x00	; 0
    557c:	96 e0       	ldi	r25, 0x06	; 6
    557e:	7e df       	rcall	.-260    	; 0x547c <ioport_configure_port_pin>
    5580:	40 e0       	ldi	r20, 0x00	; 0
    5582:	50 e0       	ldi	r21, 0x00	; 0
    5584:	62 e0       	ldi	r22, 0x02	; 2
    5586:	80 e0       	ldi	r24, 0x00	; 0
    5588:	96 e0       	ldi	r25, 0x06	; 6
    558a:	78 df       	rcall	.-272    	; 0x547c <ioport_configure_port_pin>
    558c:	40 e0       	ldi	r20, 0x00	; 0
    558e:	50 e0       	ldi	r21, 0x00	; 0
    5590:	64 e0       	ldi	r22, 0x04	; 4
    5592:	80 e0       	ldi	r24, 0x00	; 0
    5594:	96 e0       	ldi	r25, 0x06	; 6
    5596:	72 df       	rcall	.-284    	; 0x547c <ioport_configure_port_pin>
    5598:	41 e0       	ldi	r20, 0x01	; 1
    559a:	50 e0       	ldi	r21, 0x00	; 0
    559c:	61 e0       	ldi	r22, 0x01	; 1
    559e:	80 ea       	ldi	r24, 0xA0	; 160
    55a0:	96 e0       	ldi	r25, 0x06	; 6
    55a2:	6c df       	rcall	.-296    	; 0x547c <ioport_configure_port_pin>
    55a4:	43 e0       	ldi	r20, 0x03	; 3
    55a6:	50 e0       	ldi	r21, 0x00	; 0
    55a8:	68 e0       	ldi	r22, 0x08	; 8
    55aa:	80 e4       	ldi	r24, 0x40	; 64
    55ac:	96 e0       	ldi	r25, 0x06	; 6
    55ae:	66 df       	rcall	.-308    	; 0x547c <ioport_configure_port_pin>
    55b0:	40 e0       	ldi	r20, 0x00	; 0
    55b2:	50 e0       	ldi	r21, 0x00	; 0
    55b4:	64 e0       	ldi	r22, 0x04	; 4
    55b6:	80 e4       	ldi	r24, 0x40	; 64
    55b8:	96 e0       	ldi	r25, 0x06	; 6
    55ba:	60 df       	rcall	.-320    	; 0x547c <ioport_configure_port_pin>
    55bc:	43 e0       	ldi	r20, 0x03	; 3
    55be:	50 e0       	ldi	r21, 0x00	; 0
    55c0:	68 e0       	ldi	r22, 0x08	; 8
    55c2:	80 e6       	ldi	r24, 0x60	; 96
    55c4:	96 e0       	ldi	r25, 0x06	; 6
    55c6:	5a df       	rcall	.-332    	; 0x547c <ioport_configure_port_pin>
    55c8:	40 e0       	ldi	r20, 0x00	; 0
    55ca:	50 e0       	ldi	r21, 0x00	; 0
    55cc:	64 e0       	ldi	r22, 0x04	; 4
    55ce:	80 e6       	ldi	r24, 0x60	; 96
    55d0:	96 e0       	ldi	r25, 0x06	; 6
    55d2:	54 df       	rcall	.-344    	; 0x547c <ioport_configure_port_pin>
    55d4:	43 e0       	ldi	r20, 0x03	; 3
    55d6:	50 e0       	ldi	r21, 0x00	; 0
    55d8:	68 e0       	ldi	r22, 0x08	; 8
    55da:	80 e8       	ldi	r24, 0x80	; 128
    55dc:	96 e0       	ldi	r25, 0x06	; 6
    55de:	4e df       	rcall	.-356    	; 0x547c <ioport_configure_port_pin>
    55e0:	40 e0       	ldi	r20, 0x00	; 0
    55e2:	50 e0       	ldi	r21, 0x00	; 0
    55e4:	64 e0       	ldi	r22, 0x04	; 4
    55e6:	80 e8       	ldi	r24, 0x80	; 128
    55e8:	96 e0       	ldi	r25, 0x06	; 6
    55ea:	48 cf       	rjmp	.-368    	; 0x547c <ioport_configure_port_pin>
    55ec:	08 95       	ret

000055ee <pwm_set_frequency>:
 *
 * \param config Pointer to PWM configuration.
 * \param freq_hz Wanted PWM frequency in Hz.
 */
void pwm_set_frequency(struct pwm_config *config, uint16_t freq_hz)
{
    55ee:	cf 92       	push	r12
    55f0:	df 92       	push	r13
    55f2:	ef 92       	push	r14
    55f4:	ff 92       	push	r15
    55f6:	cf 93       	push	r28
    55f8:	df 93       	push	r29
    55fa:	ec 01       	movw	r28, r24
	/* Avoid division by zero. */
	Assert(freq_hz != 0);

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
    55fc:	6b 01       	movw	r12, r22
    55fe:	e1 2c       	mov	r14, r1
    5600:	f1 2c       	mov	r15, r1
    5602:	68 e4       	ldi	r22, 0x48	; 72
    5604:	78 ee       	ldi	r23, 0xE8	; 232
    5606:	81 e0       	ldi	r24, 0x01	; 1
    5608:	90 e0       	ldi	r25, 0x00	; 0
    560a:	a7 01       	movw	r20, r14
    560c:	96 01       	movw	r18, r12
    560e:	0e 94 a1 33 	call	0x6742	; 0x6742 <__udivmodsi4>
    5612:	ca 01       	movw	r24, r20
    5614:	b9 01       	movw	r22, r18
    5616:	2f ef       	ldi	r18, 0xFF	; 255
    5618:	3f ef       	ldi	r19, 0xFF	; 255
    561a:	40 e0       	ldi	r20, 0x00	; 0
    561c:	50 e0       	ldi	r21, 0x00	; 0
    561e:	0e 94 a1 33 	call	0x6742	; 0x6742 <__udivmodsi4>
	if (smallest_div < 1) {
    5622:	21 15       	cp	r18, r1
    5624:	31 05       	cpc	r19, r1
    5626:	29 f4       	brne	.+10     	; 0x5632 <pwm_set_frequency+0x44>
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
    5628:	81 e0       	ldi	r24, 0x01	; 1
    562a:	8c 83       	std	Y+4, r24	; 0x04

	/* Calculate the smallest divider for the requested frequency
	   related to the CPU frequency */
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
    562c:	21 e0       	ldi	r18, 0x01	; 1
    562e:	30 e0       	ldi	r19, 0x00	; 0
    5630:	2d c0       	rjmp	.+90     	; 0x568c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
    5632:	22 30       	cpi	r18, 0x02	; 2
    5634:	31 05       	cpc	r19, r1
    5636:	28 f4       	brcc	.+10     	; 0x5642 <pwm_set_frequency+0x54>
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
    5638:	82 e0       	ldi	r24, 0x02	; 2
    563a:	8c 83       	std	Y+4, r24	; 0x04
	smallest_div = cpu_hz / freq_hz / 0xFFFF;
	if (smallest_div < 1) {
		dividor = 1;
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
    563c:	22 e0       	ldi	r18, 0x02	; 2
    563e:	30 e0       	ldi	r19, 0x00	; 0
    5640:	25 c0       	rjmp	.+74     	; 0x568c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
    5642:	24 30       	cpi	r18, 0x04	; 4
    5644:	31 05       	cpc	r19, r1
    5646:	28 f4       	brcc	.+10     	; 0x5652 <pwm_set_frequency+0x64>
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
    5648:	83 e0       	ldi	r24, 0x03	; 3
    564a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV1;
	} else if (smallest_div < 2) {
		dividor = 2;
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
    564c:	24 e0       	ldi	r18, 0x04	; 4
    564e:	30 e0       	ldi	r19, 0x00	; 0
    5650:	1d c0       	rjmp	.+58     	; 0x568c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
    5652:	28 30       	cpi	r18, 0x08	; 8
    5654:	31 05       	cpc	r19, r1
    5656:	28 f4       	brcc	.+10     	; 0x5662 <pwm_set_frequency+0x74>
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
    5658:	84 e0       	ldi	r24, 0x04	; 4
    565a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV2;
	} else if (smallest_div < 4) {
		dividor = 4;
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
    565c:	28 e0       	ldi	r18, 0x08	; 8
    565e:	30 e0       	ldi	r19, 0x00	; 0
    5660:	15 c0       	rjmp	.+42     	; 0x568c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
    5662:	20 34       	cpi	r18, 0x40	; 64
    5664:	31 05       	cpc	r19, r1
    5666:	28 f4       	brcc	.+10     	; 0x5672 <pwm_set_frequency+0x84>
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
    5668:	85 e0       	ldi	r24, 0x05	; 5
    566a:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV4;
	} else if (smallest_div < 8) {
		dividor = 8;
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
    566c:	20 e4       	ldi	r18, 0x40	; 64
    566e:	30 e0       	ldi	r19, 0x00	; 0
    5670:	0d c0       	rjmp	.+26     	; 0x568c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
    5672:	2f 3f       	cpi	r18, 0xFF	; 255
    5674:	31 05       	cpc	r19, r1
    5676:	09 f0       	breq	.+2      	; 0x567a <pwm_set_frequency+0x8c>
    5678:	28 f4       	brcc	.+10     	; 0x5684 <pwm_set_frequency+0x96>
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
    567a:	86 e0       	ldi	r24, 0x06	; 6
    567c:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV8;
	} else if (smallest_div < 64) {
		dividor = 64;
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
    567e:	20 e0       	ldi	r18, 0x00	; 0
    5680:	31 e0       	ldi	r19, 0x01	; 1
    5682:	04 c0       	rjmp	.+8      	; 0x568c <pwm_set_frequency+0x9e>
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
		config->clk_sel = PWM_CLK_DIV1024;
    5684:	87 e0       	ldi	r24, 0x07	; 7
    5686:	8c 83       	std	Y+4, r24	; 0x04
		config->clk_sel = PWM_CLK_DIV64;
	} else if (smallest_div < 256) {
		dividor = 256;
		config->clk_sel = PWM_CLK_DIV256;
	} else {
		dividor = 1024;
    5688:	20 e0       	ldi	r18, 0x00	; 0
    568a:	34 e0       	ldi	r19, 0x04	; 4
		config->clk_sel = PWM_CLK_DIV1024;
	}

	/* Calculate the period from the just found divider */
	config->period = cpu_hz / dividor / freq_hz;
    568c:	40 e0       	ldi	r20, 0x00	; 0
    568e:	50 e0       	ldi	r21, 0x00	; 0
    5690:	68 e4       	ldi	r22, 0x48	; 72
    5692:	78 ee       	ldi	r23, 0xE8	; 232
    5694:	81 e0       	ldi	r24, 0x01	; 1
    5696:	90 e0       	ldi	r25, 0x00	; 0
    5698:	0e 94 a1 33 	call	0x6742	; 0x6742 <__udivmodsi4>
    569c:	ca 01       	movw	r24, r20
    569e:	b9 01       	movw	r22, r18
    56a0:	a7 01       	movw	r20, r14
    56a2:	96 01       	movw	r18, r12
    56a4:	0e 94 a1 33 	call	0x6742	; 0x6742 <__udivmodsi4>
    56a8:	2d 83       	std	Y+5, r18	; 0x05
    56aa:	3e 83       	std	Y+6, r19	; 0x06

	/* Make sure our period is at least 100 ticks so we are able to provide
	   a full range (0-100% duty cycle */
	if (config->period < 100) {
    56ac:	24 36       	cpi	r18, 0x64	; 100
    56ae:	31 05       	cpc	r19, r1
    56b0:	18 f4       	brcc	.+6      	; 0x56b8 <pwm_set_frequency+0xca>
		/* The period is too short. */
		config->clk_sel = PWM_CLK_OFF;
    56b2:	1c 82       	std	Y+4, r1	; 0x04
		config->period = 0;
    56b4:	1d 82       	std	Y+5, r1	; 0x05
    56b6:	1e 82       	std	Y+6, r1	; 0x06
		Assert(false);
	}
}
    56b8:	df 91       	pop	r29
    56ba:	cf 91       	pop	r28
    56bc:	ff 90       	pop	r15
    56be:	ef 90       	pop	r14
    56c0:	df 90       	pop	r13
    56c2:	cf 90       	pop	r12
    56c4:	08 95       	ret

000056c6 <pwm_init>:
 * \param channel \ref pwm_channel_t "CC channel" to use for this PWM.
 * \param freq_hz Frequency to use for this PWM.
  */
void pwm_init(struct pwm_config *config, enum pwm_tc_t tc,
		enum pwm_channel_t channel, uint16_t freq_hz)
{
    56c6:	0f 93       	push	r16
    56c8:	1f 93       	push	r17
    56ca:	cf 93       	push	r28
    56cc:	df 93       	push	r29
    56ce:	ec 01       	movw	r28, r24
    56d0:	89 01       	movw	r16, r18
	/* Number of channels for this TC */
	uint8_t num_chan = 0;
	UNUSED(num_chan);

	/* Set TC and correct I/O pin to output */
	switch (tc) {
    56d2:	62 30       	cpi	r22, 0x02	; 2
    56d4:	b9 f1       	breq	.+110    	; 0x5744 <pwm_init+0x7e>
    56d6:	28 f4       	brcc	.+10     	; 0x56e2 <pwm_init+0x1c>
    56d8:	66 23       	and	r22, r22
    56da:	51 f0       	breq	.+20     	; 0x56f0 <pwm_init+0x2a>
    56dc:	61 30       	cpi	r22, 0x01	; 1
    56de:	e9 f0       	breq	.+58     	; 0x571a <pwm_init+0x54>
    56e0:	6f c0       	rjmp	.+222    	; 0x57c0 <pwm_init+0xfa>
    56e2:	64 30       	cpi	r22, 0x04	; 4
    56e4:	09 f4       	brne	.+2      	; 0x56e8 <pwm_init+0x22>
    56e6:	43 c0       	rjmp	.+134    	; 0x576e <pwm_init+0xa8>
    56e8:	66 30       	cpi	r22, 0x06	; 6
    56ea:	09 f4       	brne	.+2      	; 0x56ee <pwm_init+0x28>
    56ec:	55 c0       	rjmp	.+170    	; 0x5798 <pwm_init+0xd2>
    56ee:	68 c0       	rjmp	.+208    	; 0x57c0 <pwm_init+0xfa>
#if defined(TCC0)
	case PWM_TCC0:
		config->tc = &TCC0;
    56f0:	80 e0       	ldi	r24, 0x00	; 0
    56f2:	98 e0       	ldi	r25, 0x08	; 8
    56f4:	88 83       	st	Y, r24
    56f6:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel-1));
    56f8:	e0 e4       	ldi	r30, 0x40	; 64
    56fa:	f6 e0       	ldi	r31, 0x06	; 6
    56fc:	50 81       	ld	r21, Z
    56fe:	21 e0       	ldi	r18, 0x01	; 1
    5700:	30 e0       	ldi	r19, 0x00	; 0
    5702:	8f ef       	ldi	r24, 0xFF	; 255
    5704:	84 0f       	add	r24, r20
    5706:	b9 01       	movw	r22, r18
    5708:	02 c0       	rjmp	.+4      	; 0x570e <pwm_init+0x48>
    570a:	66 0f       	add	r22, r22
    570c:	77 1f       	adc	r23, r23
    570e:	8a 95       	dec	r24
    5710:	e2 f7       	brpl	.-8      	; 0x570a <pwm_init+0x44>
    5712:	cb 01       	movw	r24, r22
    5714:	85 2b       	or	r24, r21
    5716:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    5718:	53 c0       	rjmp	.+166    	; 0x57c0 <pwm_init+0xfa>
#endif
#if defined(TCC1)
	case PWM_TCC1:
		config->tc = &TCC1;
    571a:	80 e4       	ldi	r24, 0x40	; 64
    571c:	98 e0       	ldi	r25, 0x08	; 8
    571e:	88 83       	st	Y, r24
    5720:	99 83       	std	Y+1, r25	; 0x01
		PORTC.DIR |= (1 << (channel+3));
    5722:	e0 e4       	ldi	r30, 0x40	; 64
    5724:	f6 e0       	ldi	r31, 0x06	; 6
    5726:	50 81       	ld	r21, Z
    5728:	21 e0       	ldi	r18, 0x01	; 1
    572a:	30 e0       	ldi	r19, 0x00	; 0
    572c:	83 e0       	ldi	r24, 0x03	; 3
    572e:	84 0f       	add	r24, r20
    5730:	b9 01       	movw	r22, r18
    5732:	02 c0       	rjmp	.+4      	; 0x5738 <pwm_init+0x72>
    5734:	66 0f       	add	r22, r22
    5736:	77 1f       	adc	r23, r23
    5738:	8a 95       	dec	r24
    573a:	e2 f7       	brpl	.-8      	; 0x5734 <pwm_init+0x6e>
    573c:	cb 01       	movw	r24, r22
    573e:	85 2b       	or	r24, r21
    5740:	80 83       	st	Z, r24
		num_chan = 2;
		break;
    5742:	3e c0       	rjmp	.+124    	; 0x57c0 <pwm_init+0xfa>
#endif
#if defined(TCD0)
	case PWM_TCD0:
		config->tc = &TCD0;
    5744:	80 e0       	ldi	r24, 0x00	; 0
    5746:	99 e0       	ldi	r25, 0x09	; 9
    5748:	88 83       	st	Y, r24
    574a:	99 83       	std	Y+1, r25	; 0x01
		PORTD.DIR |= (1 << (channel-1));
    574c:	e0 e6       	ldi	r30, 0x60	; 96
    574e:	f6 e0       	ldi	r31, 0x06	; 6
    5750:	50 81       	ld	r21, Z
    5752:	21 e0       	ldi	r18, 0x01	; 1
    5754:	30 e0       	ldi	r19, 0x00	; 0
    5756:	8f ef       	ldi	r24, 0xFF	; 255
    5758:	84 0f       	add	r24, r20
    575a:	b9 01       	movw	r22, r18
    575c:	02 c0       	rjmp	.+4      	; 0x5762 <pwm_init+0x9c>
    575e:	66 0f       	add	r22, r22
    5760:	77 1f       	adc	r23, r23
    5762:	8a 95       	dec	r24
    5764:	e2 f7       	brpl	.-8      	; 0x575e <pwm_init+0x98>
    5766:	cb 01       	movw	r24, r22
    5768:	85 2b       	or	r24, r21
    576a:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    576c:	29 c0       	rjmp	.+82     	; 0x57c0 <pwm_init+0xfa>
		break;
#endif

#if defined(TCE0)
	case PWM_TCE0:
		config->tc = &TCE0;
    576e:	80 e0       	ldi	r24, 0x00	; 0
    5770:	9a e0       	ldi	r25, 0x0A	; 10
    5772:	88 83       	st	Y, r24
    5774:	99 83       	std	Y+1, r25	; 0x01
		PORTE.DIR |= (1 << (channel-1));
    5776:	e0 e8       	ldi	r30, 0x80	; 128
    5778:	f6 e0       	ldi	r31, 0x06	; 6
    577a:	50 81       	ld	r21, Z
    577c:	21 e0       	ldi	r18, 0x01	; 1
    577e:	30 e0       	ldi	r19, 0x00	; 0
    5780:	8f ef       	ldi	r24, 0xFF	; 255
    5782:	84 0f       	add	r24, r20
    5784:	b9 01       	movw	r22, r18
    5786:	02 c0       	rjmp	.+4      	; 0x578c <pwm_init+0xc6>
    5788:	66 0f       	add	r22, r22
    578a:	77 1f       	adc	r23, r23
    578c:	8a 95       	dec	r24
    578e:	e2 f7       	brpl	.-8      	; 0x5788 <pwm_init+0xc2>
    5790:	cb 01       	movw	r24, r22
    5792:	85 2b       	or	r24, r21
    5794:	80 83       	st	Z, r24
		num_chan = 4;
		break;
    5796:	14 c0       	rjmp	.+40     	; 0x57c0 <pwm_init+0xfa>
		break;
#endif

#if defined(TCF0)
	case PWM_TCF0:
		config->tc = &TCF0;
    5798:	80 e0       	ldi	r24, 0x00	; 0
    579a:	9b e0       	ldi	r25, 0x0B	; 11
    579c:	88 83       	st	Y, r24
    579e:	99 83       	std	Y+1, r25	; 0x01
		PORTF.DIR |= (1 << (channel-1));
    57a0:	e0 ea       	ldi	r30, 0xA0	; 160
    57a2:	f6 e0       	ldi	r31, 0x06	; 6
    57a4:	50 81       	ld	r21, Z
    57a6:	21 e0       	ldi	r18, 0x01	; 1
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	8f ef       	ldi	r24, 0xFF	; 255
    57ac:	84 0f       	add	r24, r20
    57ae:	b9 01       	movw	r22, r18
    57b0:	02 c0       	rjmp	.+4      	; 0x57b6 <pwm_init+0xf0>
    57b2:	66 0f       	add	r22, r22
    57b4:	77 1f       	adc	r23, r23
    57b6:	8a 95       	dec	r24
    57b8:	e2 f7       	brpl	.-8      	; 0x57b2 <pwm_init+0xec>
    57ba:	cb 01       	movw	r24, r22
    57bc:	85 2b       	or	r24, r21
    57be:	80 83       	st	Z, r24
	}

	/* Make sure we are not given a channel number larger
	   than this TC can handle */
	Assert(channel <= num_chan);
	config->channel = channel;
    57c0:	4a 83       	std	Y+2, r20	; 0x02

	/* Set the correct cc_mask */
	switch (channel) {
    57c2:	42 30       	cpi	r20, 0x02	; 2
    57c4:	61 f0       	breq	.+24     	; 0x57de <pwm_init+0x118>
    57c6:	18 f4       	brcc	.+6      	; 0x57ce <pwm_init+0x108>
    57c8:	41 30       	cpi	r20, 0x01	; 1
    57ca:	31 f0       	breq	.+12     	; 0x57d8 <pwm_init+0x112>
    57cc:	10 c0       	rjmp	.+32     	; 0x57ee <pwm_init+0x128>
    57ce:	43 30       	cpi	r20, 0x03	; 3
    57d0:	49 f0       	breq	.+18     	; 0x57e4 <pwm_init+0x11e>
    57d2:	44 30       	cpi	r20, 0x04	; 4
    57d4:	51 f0       	breq	.+20     	; 0x57ea <pwm_init+0x124>
    57d6:	0b c0       	rjmp	.+22     	; 0x57ee <pwm_init+0x128>
	case PWM_CH_A:
		config->cc_mask = TC_CCAEN;
    57d8:	80 e1       	ldi	r24, 0x10	; 16
    57da:	8b 83       	std	Y+3, r24	; 0x03
		break;
    57dc:	08 c0       	rjmp	.+16     	; 0x57ee <pwm_init+0x128>
	case PWM_CH_B:
		config->cc_mask = TC_CCBEN;
    57de:	80 e2       	ldi	r24, 0x20	; 32
    57e0:	8b 83       	std	Y+3, r24	; 0x03
		break;
    57e2:	05 c0       	rjmp	.+10     	; 0x57ee <pwm_init+0x128>
	case PWM_CH_C:
		config->cc_mask = TC_CCCEN;
    57e4:	80 e4       	ldi	r24, 0x40	; 64
    57e6:	8b 83       	std	Y+3, r24	; 0x03
		break;
    57e8:	02 c0       	rjmp	.+4      	; 0x57ee <pwm_init+0x128>
	case PWM_CH_D:
		config->cc_mask = TC_CCDEN;
    57ea:	80 e8       	ldi	r24, 0x80	; 128
    57ec:	8b 83       	std	Y+3, r24	; 0x03
		Assert(false);
		break;
	}

	/* Enable peripheral clock for this TC */
	tc_enable(config->tc);
    57ee:	88 81       	ld	r24, Y
    57f0:	99 81       	ldd	r25, Y+1	; 0x01
    57f2:	c1 dd       	rcall	.-1150   	; 0x5376 <tc_enable>

	/* Set this TC's waveform generator in single slope mode */
	tc_set_wgm(config->tc, TC_WG_SS);
    57f4:	e8 81       	ld	r30, Y
    57f6:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    57f8:	81 81       	ldd	r24, Z+1	; 0x01
    57fa:	88 7f       	andi	r24, 0xF8	; 248
    57fc:	83 60       	ori	r24, 0x03	; 3
    57fe:	81 83       	std	Z+1, r24	; 0x01

	/* Default values (disable TC and set minimum period)*/
	config->period = 0;
    5800:	1d 82       	std	Y+5, r1	; 0x05
    5802:	1e 82       	std	Y+6, r1	; 0x06
	config->clk_sel = PWM_CLK_OFF;
    5804:	1c 82       	std	Y+4, r1	; 0x04
	tc_write_clock_source(config->tc, PWM_CLK_OFF);
    5806:	e8 81       	ld	r30, Y
    5808:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    580a:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    580c:	80 7f       	andi	r24, 0xF0	; 240
    580e:	80 83       	st	Z, r24

	/* Set the PWM frequency */
	pwm_set_frequency(config, freq_hz);
    5810:	b8 01       	movw	r22, r16
    5812:	ce 01       	movw	r24, r28
    5814:	ec de       	rcall	.-552    	; 0x55ee <pwm_set_frequency>
}
    5816:	df 91       	pop	r29
    5818:	cf 91       	pop	r28
    581a:	1f 91       	pop	r17
    581c:	0f 91       	pop	r16
    581e:	08 95       	ret

00005820 <pwm_start>:
 *
 * \param *config           Pointer to the PWM configuration struct
 * \param duty_cycle_scale  Duty cycle as a value between 0 and 100.
 */
void pwm_start(struct pwm_config *config, uint8_t duty_cycle_scale)
{
    5820:	cf 93       	push	r28
    5822:	df 93       	push	r29
    5824:	ec 01       	movw	r28, r24
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
			(uint16_t)(((uint32_t)config->period *
    5826:	ad 81       	ldd	r26, Y+5	; 0x05
    5828:	be 81       	ldd	r27, Y+6	; 0x06
    582a:	26 2f       	mov	r18, r22
    582c:	30 e0       	ldi	r19, 0x00	; 0
    582e:	b1 d7       	rcall	.+3938   	; 0x6792 <__umulhisi3>
			(uint32_t)duty_cycle_scale) / 100));
    5830:	24 e6       	ldi	r18, 0x64	; 100
    5832:	30 e0       	ldi	r19, 0x00	; 0
    5834:	40 e0       	ldi	r20, 0x00	; 0
    5836:	50 e0       	ldi	r21, 0x00	; 0
    5838:	84 d7       	rcall	.+3848   	; 0x6742 <__udivmodsi4>
 */
static inline void pwm_set_duty_cycle_percent(struct pwm_config *config,
		uint8_t duty_cycle_scale)
{
	Assert( duty_cycle_scale <= 100 );
	tc_write_cc_buffer(config->tc, (enum tc_cc_channel_t)config->channel,
    583a:	8a 81       	ldd	r24, Y+2	; 0x02
    583c:	e8 81       	ld	r30, Y
    583e:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param buffer_value Counter Buffer value
 */
static inline void tc_write_cc_buffer(volatile void *tc,
		enum tc_cc_channel_t channel_index, uint16_t buffer_value)
{
	if (tc_is_tc0(void *tc)) {
    5840:	e6 fd       	sbrc	r30, 6
    5842:	17 c0       	rjmp	.+46     	; 0x5872 <pwm_start+0x52>
		switch (channel_index) {
    5844:	82 30       	cpi	r24, 0x02	; 2
    5846:	61 f0       	breq	.+24     	; 0x5860 <pwm_start+0x40>
    5848:	18 f4       	brcc	.+6      	; 0x5850 <pwm_start+0x30>
    584a:	81 30       	cpi	r24, 0x01	; 1
    584c:	31 f0       	breq	.+12     	; 0x585a <pwm_start+0x3a>
    584e:	1b c0       	rjmp	.+54     	; 0x5886 <pwm_start+0x66>
    5850:	83 30       	cpi	r24, 0x03	; 3
    5852:	49 f0       	breq	.+18     	; 0x5866 <pwm_start+0x46>
    5854:	84 30       	cpi	r24, 0x04	; 4
    5856:	51 f0       	breq	.+20     	; 0x586c <pwm_start+0x4c>
    5858:	16 c0       	rjmp	.+44     	; 0x5886 <pwm_start+0x66>
		case TC_CCA:
			((TC0_t *)tc)->CCABUF = buffer_value;
    585a:	20 af       	std	Z+56, r18	; 0x38
    585c:	31 af       	std	Z+57, r19	; 0x39
    585e:	13 c0       	rjmp	.+38     	; 0x5886 <pwm_start+0x66>
			break;
		case TC_CCB:
			((TC0_t *)tc)->CCBBUF = buffer_value;
    5860:	22 af       	std	Z+58, r18	; 0x3a
    5862:	33 af       	std	Z+59, r19	; 0x3b
    5864:	10 c0       	rjmp	.+32     	; 0x5886 <pwm_start+0x66>
			break;
		case TC_CCC:
			((TC0_t *)tc)->CCCBUF = buffer_value;
    5866:	24 af       	std	Z+60, r18	; 0x3c
    5868:	35 af       	std	Z+61, r19	; 0x3d
    586a:	0d c0       	rjmp	.+26     	; 0x5886 <pwm_start+0x66>
			break;
		case TC_CCD:
			((TC0_t *)tc)->CCDBUF = buffer_value;
    586c:	26 af       	std	Z+62, r18	; 0x3e
    586e:	37 af       	std	Z+63, r19	; 0x3f
    5870:	0a c0       	rjmp	.+20     	; 0x5886 <pwm_start+0x66>
			break;
		}
	} else if (tc_is_tc1(void *tc)) {
			switch (channel_index) {
    5872:	81 30       	cpi	r24, 0x01	; 1
    5874:	19 f0       	breq	.+6      	; 0x587c <pwm_start+0x5c>
    5876:	82 30       	cpi	r24, 0x02	; 2
    5878:	21 f0       	breq	.+8      	; 0x5882 <pwm_start+0x62>
    587a:	05 c0       	rjmp	.+10     	; 0x5886 <pwm_start+0x66>
			case TC_CCA:
				((TC1_t *)tc)->CCABUF = buffer_value;
    587c:	20 af       	std	Z+56, r18	; 0x38
    587e:	31 af       	std	Z+57, r19	; 0x39
    5880:	02 c0       	rjmp	.+4      	; 0x5886 <pwm_start+0x66>
				break;
			case TC_CCB:
				((TC1_t *)tc)->CCBBUF = buffer_value;
    5882:	22 af       	std	Z+58, r18	; 0x3a
    5884:	33 af       	std	Z+59, r19	; 0x3b
	/* Set given duty cycle */
	pwm_set_duty_cycle_percent(config, duty_cycle_scale);
	/* Set correct TC period */
	tc_write_period(config->tc, config->period);
    5886:	8d 81       	ldd	r24, Y+5	; 0x05
    5888:	9e 81       	ldd	r25, Y+6	; 0x06
    588a:	e8 81       	ld	r30, Y
    588c:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    588e:	86 a3       	std	Z+38, r24	; 0x26
    5890:	97 a3       	std	Z+39, r25	; 0x27
	/* Enable CC channel for this TC */
	tc_enable_cc_channels(config->tc, config->cc_mask);
    5892:	8b 81       	ldd	r24, Y+3	; 0x03
    5894:	e8 81       	ld	r30, Y
    5896:	f9 81       	ldd	r31, Y+1	; 0x01
 * \param enablemask CC channel
 */
static inline void tc_enable_cc_channels(volatile void *tc,
		enum tc_cc_channel_mask_enable_t enablemask)
{
	if (tc_is_tc0(void *tc)) {
    5898:	e6 fd       	sbrc	r30, 6
    589a:	04 c0       	rjmp	.+8      	; 0x58a4 <pwm_start+0x84>
		((TC0_t *)tc)->CTRLB |= enablemask;
    589c:	91 81       	ldd	r25, Z+1	; 0x01
    589e:	89 2b       	or	r24, r25
    58a0:	81 83       	std	Z+1, r24	; 0x01
    58a2:	04 c0       	rjmp	.+8      	; 0x58ac <pwm_start+0x8c>
	} else if (tc_is_tc1(void *tc)) {
		((TC1_t *)tc)->CTRLB |=
    58a4:	91 81       	ldd	r25, Z+1	; 0x01
    58a6:	80 73       	andi	r24, 0x30	; 48
    58a8:	89 2b       	or	r24, r25
    58aa:	81 83       	std	Z+1, r24	; 0x01
	/* Enable TC by setting correct clock prescaler */
	tc_write_clock_source(config->tc, config->clk_sel);
    58ac:	e8 81       	ld	r30, Y
    58ae:	f9 81       	ldd	r31, Y+1	; 0x01
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    58b0:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    58b2:	80 7f       	andi	r24, 0xF0	; 240
    58b4:	9c 81       	ldd	r25, Y+4	; 0x04
    58b6:	89 2b       	or	r24, r25
    58b8:	80 83       	st	Z, r24
}
    58ba:	df 91       	pop	r29
    58bc:	cf 91       	pop	r28
    58be:	08 95       	ret

000058c0 <spi_init_pins>:
		
		tempColumn++;
		if (tempColumn%(MLCD_BYTES_LINE+1) == 0)	tempColumn = 1;
		tempRow = row;
	}
}
    58c0:	43 e0       	ldi	r20, 0x03	; 3
    58c2:	50 e0       	ldi	r21, 0x00	; 0
    58c4:	61 e0       	ldi	r22, 0x01	; 1
    58c6:	80 e4       	ldi	r24, 0x40	; 64
    58c8:	96 e0       	ldi	r25, 0x06	; 6
    58ca:	d8 dd       	rcall	.-1104   	; 0x547c <ioport_configure_port_pin>
    58cc:	43 e0       	ldi	r20, 0x03	; 3
    58ce:	50 e0       	ldi	r21, 0x00	; 0
    58d0:	62 e0       	ldi	r22, 0x02	; 2
    58d2:	80 e4       	ldi	r24, 0x40	; 64
    58d4:	96 e0       	ldi	r25, 0x06	; 6
    58d6:	d2 dd       	rcall	.-1116   	; 0x547c <ioport_configure_port_pin>
    58d8:	40 e0       	ldi	r20, 0x00	; 0
    58da:	58 e1       	ldi	r21, 0x18	; 24
    58dc:	64 e0       	ldi	r22, 0x04	; 4
    58de:	80 ea       	ldi	r24, 0xA0	; 160
    58e0:	96 e0       	ldi	r25, 0x06	; 6
    58e2:	cc dd       	rcall	.-1128   	; 0x547c <ioport_configure_port_pin>
    58e4:	40 e0       	ldi	r20, 0x00	; 0
    58e6:	58 e1       	ldi	r21, 0x18	; 24
    58e8:	68 e0       	ldi	r22, 0x08	; 8
    58ea:	80 ea       	ldi	r24, 0xA0	; 160
    58ec:	96 e0       	ldi	r25, 0x06	; 6
    58ee:	c6 dd       	rcall	.-1140   	; 0x547c <ioport_configure_port_pin>
    58f0:	40 e0       	ldi	r20, 0x00	; 0
    58f2:	58 e1       	ldi	r21, 0x18	; 24
    58f4:	60 e1       	ldi	r22, 0x10	; 16
    58f6:	80 ea       	ldi	r24, 0xA0	; 160
    58f8:	96 e0       	ldi	r25, 0x06	; 6
    58fa:	c0 dd       	rcall	.-1152   	; 0x547c <ioport_configure_port_pin>
    58fc:	40 e0       	ldi	r20, 0x00	; 0
    58fe:	58 e1       	ldi	r21, 0x18	; 24
    5900:	60 e2       	ldi	r22, 0x20	; 32
    5902:	80 ea       	ldi	r24, 0xA0	; 160
    5904:	96 e0       	ldi	r25, 0x06	; 6
    5906:	ba dd       	rcall	.-1164   	; 0x547c <ioport_configure_port_pin>
    5908:	43 e0       	ldi	r20, 0x03	; 3
    590a:	50 e0       	ldi	r21, 0x00	; 0
    590c:	60 e1       	ldi	r22, 0x10	; 16
    590e:	80 e4       	ldi	r24, 0x40	; 64
    5910:	96 e0       	ldi	r25, 0x06	; 6
    5912:	b4 dd       	rcall	.-1176   	; 0x547c <ioport_configure_port_pin>
    5914:	43 e0       	ldi	r20, 0x03	; 3
    5916:	50 e0       	ldi	r21, 0x00	; 0
    5918:	60 e2       	ldi	r22, 0x20	; 32
    591a:	80 e4       	ldi	r24, 0x40	; 64
    591c:	96 e0       	ldi	r25, 0x06	; 6
    591e:	ae dd       	rcall	.-1188   	; 0x547c <ioport_configure_port_pin>
    5920:	40 e0       	ldi	r20, 0x00	; 0
    5922:	50 e0       	ldi	r21, 0x00	; 0
    5924:	60 e4       	ldi	r22, 0x40	; 64
    5926:	80 e4       	ldi	r24, 0x40	; 64
    5928:	96 e0       	ldi	r25, 0x06	; 6
    592a:	a8 dd       	rcall	.-1200   	; 0x547c <ioport_configure_port_pin>
    592c:	43 e0       	ldi	r20, 0x03	; 3
    592e:	50 e0       	ldi	r21, 0x00	; 0
    5930:	60 e8       	ldi	r22, 0x80	; 128
    5932:	80 e4       	ldi	r24, 0x40	; 64
    5934:	96 e0       	ldi	r25, 0x06	; 6
    5936:	a2 cd       	rjmp	.-1212   	; 0x547c <ioport_configure_port_pin>
    5938:	08 95       	ret

0000593a <spi_init_module>:
    593a:	cf 92       	push	r12
    593c:	df 92       	push	r13
    593e:	ef 92       	push	r14
    5940:	ff 92       	push	r15
    5942:	0f 93       	push	r16
    5944:	1f 93       	push	r17
    5946:	80 ec       	ldi	r24, 0xC0	; 192
    5948:	98 e0       	ldi	r25, 0x08	; 8
    594a:	0e 94 16 24 	call	0x482c	; 0x482c <spi_master_init>
    594e:	c1 2c       	mov	r12, r1
    5950:	d1 2c       	mov	r13, r1
    5952:	76 01       	movw	r14, r12
    5954:	00 e8       	ldi	r16, 0x80	; 128
    5956:	14 e8       	ldi	r17, 0x84	; 132
    5958:	2e e1       	ldi	r18, 0x1E	; 30
    595a:	30 e0       	ldi	r19, 0x00	; 0
    595c:	40 e0       	ldi	r20, 0x00	; 0
    595e:	6b e0       	ldi	r22, 0x0B	; 11
    5960:	70 e2       	ldi	r23, 0x20	; 32
    5962:	80 ec       	ldi	r24, 0xC0	; 192
    5964:	98 e0       	ldi	r25, 0x08	; 8
    5966:	0e 94 2d 24 	call	0x485a	; 0x485a <spi_master_setup_device>
    596a:	e0 ec       	ldi	r30, 0xC0	; 192
    596c:	f8 e0       	ldi	r31, 0x08	; 8
    596e:	80 81       	ld	r24, Z
    5970:	80 64       	ori	r24, 0x40	; 64
    5972:	80 83       	st	Z, r24
    5974:	1f 91       	pop	r17
    5976:	0f 91       	pop	r16
    5978:	ff 90       	pop	r15
    597a:	ef 90       	pop	r14
    597c:	df 90       	pop	r13
    597e:	cf 90       	pop	r12
    5980:	08 95       	ret

00005982 <MLCDInit>:
    5982:	9e df       	rcall	.-196    	; 0x58c0 <spi_init_pins>
    5984:	21 e0       	ldi	r18, 0x01	; 1
    5986:	30 e0       	ldi	r19, 0x00	; 0
    5988:	43 e0       	ldi	r20, 0x03	; 3
    598a:	60 e0       	ldi	r22, 0x00	; 0
    598c:	80 e9       	ldi	r24, 0x90	; 144
    598e:	9b e8       	ldi	r25, 0x8B	; 139
    5990:	9a de       	rcall	.-716    	; 0x56c6 <pwm_init>
    5992:	62 e3       	ldi	r22, 0x32	; 50
    5994:	80 e9       	ldi	r24, 0x90	; 144
    5996:	9b e8       	ldi	r25, 0x8B	; 139
    5998:	43 df       	rcall	.-378    	; 0x5820 <pwm_start>
    599a:	cf cf       	rjmp	.-98     	; 0x593a <spi_init_module>
    599c:	08 95       	ret

0000599e <MLCDTurnOn>:
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	e0 e4       	ldi	r30, 0x40	; 64
    59a2:	f6 e0       	ldi	r31, 0x06	; 6
    59a4:	85 83       	std	Z+5, r24	; 0x05
    59a6:	08 95       	ret

000059a8 <MLCDSelect>:
    59a8:	6b e0       	ldi	r22, 0x0B	; 11
    59aa:	70 e2       	ldi	r23, 0x20	; 32
    59ac:	80 ec       	ldi	r24, 0xC0	; 192
    59ae:	98 e0       	ldi	r25, 0x08	; 8
    59b0:	0c 94 71 24 	jmp	0x48e2	; 0x48e2 <spi_deselect_device>
    59b4:	08 95       	ret

000059b6 <MLCDDeselect>:
    59b6:	6b e0       	ldi	r22, 0x0B	; 11
    59b8:	70 e2       	ldi	r23, 0x20	; 32
    59ba:	80 ec       	ldi	r24, 0xC0	; 192
    59bc:	98 e0       	ldi	r25, 0x08	; 8
    59be:	0c 94 5b 24 	jmp	0x48b6	; 0x48b6 <spi_select_device>
    59c2:	08 95       	ret

000059c4 <MLCDClearAll>:
    59c4:	cf 93       	push	r28
    59c6:	df 93       	push	r29
    59c8:	1f 92       	push	r1
    59ca:	1f 92       	push	r1
    59cc:	cd b7       	in	r28, 0x3d	; 61
    59ce:	de b7       	in	r29, 0x3e	; 62
    59d0:	80 e2       	ldi	r24, 0x20	; 32
    59d2:	89 83       	std	Y+1, r24	; 0x01
    59d4:	1a 82       	std	Y+2, r1	; 0x02
    59d6:	e8 df       	rcall	.-48     	; 0x59a8 <MLCDSelect>
    59d8:	42 e0       	ldi	r20, 0x02	; 2
    59da:	50 e0       	ldi	r21, 0x00	; 0
    59dc:	be 01       	movw	r22, r28
    59de:	6f 5f       	subi	r22, 0xFF	; 255
    59e0:	7f 4f       	sbci	r23, 0xFF	; 255
    59e2:	80 ec       	ldi	r24, 0xC0	; 192
    59e4:	98 e0       	ldi	r25, 0x08	; 8
    59e6:	0e 94 4c 24 	call	0x4898	; 0x4898 <spi_write_packet>
    59ea:	e0 ec       	ldi	r30, 0xC0	; 192
    59ec:	f8 e0       	ldi	r31, 0x08	; 8
    59ee:	82 81       	ldd	r24, Z+2	; 0x02
    59f0:	88 23       	and	r24, r24
    59f2:	ec f7       	brge	.-6      	; 0x59ee <MLCDClearAll+0x2a>
    59f4:	e0 df       	rcall	.-64     	; 0x59b6 <MLCDDeselect>
    59f6:	40 ee       	ldi	r20, 0xE0	; 224
    59f8:	5e e2       	ldi	r21, 0x2E	; 46
    59fa:	6f ef       	ldi	r22, 0xFF	; 255
    59fc:	70 e0       	ldi	r23, 0x00	; 0
    59fe:	80 eb       	ldi	r24, 0xB0	; 176
    5a00:	9c e5       	ldi	r25, 0x5C	; 92
    5a02:	0e 94 2f 35 	call	0x6a5e	; 0x6a5e <memset>
    5a06:	0f 90       	pop	r0
    5a08:	0f 90       	pop	r0
    5a0a:	df 91       	pop	r29
    5a0c:	cf 91       	pop	r28
    5a0e:	08 95       	ret

00005a10 <MLCDClearFrame>:
    5a10:	40 ee       	ldi	r20, 0xE0	; 224
    5a12:	5e e2       	ldi	r21, 0x2E	; 46
    5a14:	6f ef       	ldi	r22, 0xFF	; 255
    5a16:	70 e0       	ldi	r23, 0x00	; 0
    5a18:	80 eb       	ldi	r24, 0xB0	; 176
    5a1a:	9c e5       	ldi	r25, 0x5C	; 92
    5a1c:	0c 94 2f 35 	jmp	0x6a5e	; 0x6a5e <memset>
    5a20:	08 95       	ret

00005a22 <MLCDAddLine>:
    5a22:	1f 93       	push	r17
    5a24:	cf 93       	push	r28
    5a26:	df 93       	push	r29
    5a28:	ec 01       	movw	r28, r24
    5a2a:	16 2f       	mov	r17, r22
    5a2c:	86 2f       	mov	r24, r22
    5a2e:	0e 94 06 24 	call	0x480c	; 0x480c <reverseByte>
    5a32:	e0 ec       	ldi	r30, 0xC0	; 192
    5a34:	f8 e0       	ldi	r31, 0x08	; 8
    5a36:	83 83       	std	Z+3, r24	; 0x03
    5a38:	a0 ec       	ldi	r26, 0xC0	; 192
    5a3a:	b8 e0       	ldi	r27, 0x08	; 8
    5a3c:	12 96       	adiw	r26, 0x02	; 2
    5a3e:	9c 91       	ld	r25, X
    5a40:	12 97       	sbiw	r26, 0x02	; 2
    5a42:	99 23       	and	r25, r25
    5a44:	dc f7       	brge	.-10     	; 0x5a3c <MLCDAddLine+0x1a>
    5a46:	42 e3       	ldi	r20, 0x32	; 50
    5a48:	50 e0       	ldi	r21, 0x00	; 0
    5a4a:	be 01       	movw	r22, r28
    5a4c:	80 ec       	ldi	r24, 0xC0	; 192
    5a4e:	98 e0       	ldi	r25, 0x08	; 8
    5a50:	0e 94 4c 24 	call	0x4898	; 0x4898 <spi_write_packet>
    5a54:	81 2f       	mov	r24, r17
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	01 97       	sbiw	r24, 0x01	; 1
    5a5a:	22 e3       	ldi	r18, 0x32	; 50
    5a5c:	28 9f       	mul	r18, r24
    5a5e:	d0 01       	movw	r26, r0
    5a60:	29 9f       	mul	r18, r25
    5a62:	b0 0d       	add	r27, r0
    5a64:	11 24       	eor	r1, r1
    5a66:	a0 55       	subi	r26, 0x50	; 80
    5a68:	b3 4a       	sbci	r27, 0xA3	; 163
    5a6a:	82 e3       	ldi	r24, 0x32	; 50
    5a6c:	fe 01       	movw	r30, r28
    5a6e:	01 90       	ld	r0, Z+
    5a70:	0d 92       	st	X+, r0
    5a72:	8a 95       	dec	r24
    5a74:	e1 f7       	brne	.-8      	; 0x5a6e <MLCDAddLine+0x4c>
    5a76:	e0 ec       	ldi	r30, 0xC0	; 192
    5a78:	f8 e0       	ldi	r31, 0x08	; 8
    5a7a:	82 81       	ldd	r24, Z+2	; 0x02
    5a7c:	88 23       	and	r24, r24
    5a7e:	ec f7       	brge	.-6      	; 0x5a7a <MLCDAddLine+0x58>
    5a80:	e0 ec       	ldi	r30, 0xC0	; 192
    5a82:	f8 e0       	ldi	r31, 0x08	; 8
    5a84:	13 82       	std	Z+3, r1	; 0x03
    5a86:	82 81       	ldd	r24, Z+2	; 0x02
    5a88:	88 23       	and	r24, r24
    5a8a:	ec f7       	brge	.-6      	; 0x5a86 <MLCDAddLine+0x64>
    5a8c:	df 91       	pop	r29
    5a8e:	cf 91       	pop	r28
    5a90:	1f 91       	pop	r17
    5a92:	08 95       	ret

00005a94 <MLCDWriteLine>:
    5a94:	1f 93       	push	r17
    5a96:	cf 93       	push	r28
    5a98:	df 93       	push	r29
    5a9a:	ec 01       	movw	r28, r24
    5a9c:	16 2f       	mov	r17, r22
    5a9e:	84 df       	rcall	.-248    	; 0x59a8 <MLCDSelect>
    5aa0:	80 e8       	ldi	r24, 0x80	; 128
    5aa2:	e0 ec       	ldi	r30, 0xC0	; 192
    5aa4:	f8 e0       	ldi	r31, 0x08	; 8
    5aa6:	83 83       	std	Z+3, r24	; 0x03
    5aa8:	82 81       	ldd	r24, Z+2	; 0x02
    5aaa:	88 23       	and	r24, r24
    5aac:	ec f7       	brge	.-6      	; 0x5aa8 <MLCDWriteLine+0x14>
    5aae:	61 2f       	mov	r22, r17
    5ab0:	ce 01       	movw	r24, r28
    5ab2:	b7 df       	rcall	.-146    	; 0x5a22 <MLCDAddLine>
    5ab4:	e0 ec       	ldi	r30, 0xC0	; 192
    5ab6:	f8 e0       	ldi	r31, 0x08	; 8
    5ab8:	13 82       	std	Z+3, r1	; 0x03
    5aba:	82 81       	ldd	r24, Z+2	; 0x02
    5abc:	88 23       	and	r24, r24
    5abe:	ec f7       	brge	.-6      	; 0x5aba <MLCDWriteLine+0x26>
    5ac0:	7a df       	rcall	.-268    	; 0x59b6 <MLCDDeselect>
    5ac2:	df 91       	pop	r29
    5ac4:	cf 91       	pop	r28
    5ac6:	1f 91       	pop	r17
    5ac8:	08 95       	ret

00005aca <MLCDWriteFrame>:
    5aca:	0f 93       	push	r16
    5acc:	1f 93       	push	r17
    5ace:	cf 93       	push	r28
    5ad0:	df 93       	push	r29
    5ad2:	08 2f       	mov	r16, r24
    5ad4:	19 2f       	mov	r17, r25
    5ad6:	68 df       	rcall	.-304    	; 0x59a8 <MLCDSelect>
    5ad8:	80 e8       	ldi	r24, 0x80	; 128
    5ada:	e0 ec       	ldi	r30, 0xC0	; 192
    5adc:	f8 e0       	ldi	r31, 0x08	; 8
    5ade:	83 83       	std	Z+3, r24	; 0x03
    5ae0:	22 81       	ldd	r18, Z+2	; 0x02
    5ae2:	22 23       	and	r18, r18
    5ae4:	ec f7       	brge	.-6      	; 0x5ae0 <MLCDWriteFrame+0x16>
    5ae6:	c0 2f       	mov	r28, r16
    5ae8:	d1 2f       	mov	r29, r17
    5aea:	11 e0       	ldi	r17, 0x01	; 1
    5aec:	61 2f       	mov	r22, r17
    5aee:	ce 01       	movw	r24, r28
    5af0:	98 df       	rcall	.-208    	; 0x5a22 <MLCDAddLine>
    5af2:	1f 5f       	subi	r17, 0xFF	; 255
    5af4:	e2 96       	adiw	r28, 0x32	; 50
    5af6:	11 3f       	cpi	r17, 0xF1	; 241
    5af8:	c9 f7       	brne	.-14     	; 0x5aec <MLCDWriteFrame+0x22>
    5afa:	e0 ec       	ldi	r30, 0xC0	; 192
    5afc:	f8 e0       	ldi	r31, 0x08	; 8
    5afe:	13 82       	std	Z+3, r1	; 0x03
    5b00:	82 81       	ldd	r24, Z+2	; 0x02
    5b02:	88 23       	and	r24, r24
    5b04:	ec f7       	brge	.-6      	; 0x5b00 <MLCDWriteFrame+0x36>
    5b06:	57 df       	rcall	.-338    	; 0x59b6 <MLCDDeselect>
    5b08:	df 91       	pop	r29
    5b0a:	cf 91       	pop	r28
    5b0c:	1f 91       	pop	r17
    5b0e:	0f 91       	pop	r16
    5b10:	08 95       	ret

00005b12 <MLCDShowImecLogo>:
    5b12:	ff 92       	push	r15
    5b14:	0f 93       	push	r16
    5b16:	1f 93       	push	r17
    5b18:	cf 93       	push	r28
    5b1a:	df 93       	push	r29
    5b1c:	cd b7       	in	r28, 0x3d	; 61
    5b1e:	de b7       	in	r29, 0x3e	; 62
    5b20:	e2 97       	sbiw	r28, 0x32	; 50
    5b22:	cd bf       	out	0x3d, r28	; 61
    5b24:	de bf       	out	0x3e, r29	; 62
    5b26:	08 e7       	ldi	r16, 0x78	; 120
    5b28:	13 e0       	ldi	r17, 0x03	; 3
    5b2a:	ff 24       	eor	r15, r15
    5b2c:	f3 94       	inc	r15
    5b2e:	42 e3       	ldi	r20, 0x32	; 50
    5b30:	50 e0       	ldi	r21, 0x00	; 0
    5b32:	b8 01       	movw	r22, r16
    5b34:	ce 01       	movw	r24, r28
    5b36:	01 96       	adiw	r24, 0x01	; 1
    5b38:	7e d7       	rcall	.+3836   	; 0x6a36 <memcpy_P>
    5b3a:	6f 2d       	mov	r22, r15
    5b3c:	ce 01       	movw	r24, r28
    5b3e:	01 96       	adiw	r24, 0x01	; 1
    5b40:	a9 df       	rcall	.-174    	; 0x5a94 <MLCDWriteLine>
    5b42:	0e 5c       	subi	r16, 0xCE	; 206
    5b44:	1f 4f       	sbci	r17, 0xFF	; 255
    5b46:	f3 94       	inc	r15
    5b48:	81 ef       	ldi	r24, 0xF1	; 241
    5b4a:	f8 12       	cpse	r15, r24
    5b4c:	f0 cf       	rjmp	.-32     	; 0x5b2e <MLCDShowImecLogo+0x1c>
    5b4e:	e2 96       	adiw	r28, 0x32	; 50
    5b50:	cd bf       	out	0x3d, r28	; 61
    5b52:	de bf       	out	0x3e, r29	; 62
    5b54:	df 91       	pop	r29
    5b56:	cf 91       	pop	r28
    5b58:	1f 91       	pop	r17
    5b5a:	0f 91       	pop	r16
    5b5c:	ff 90       	pop	r15
    5b5e:	08 95       	ret

00005b60 <MLCDRefreshFrame>:
    5b60:	80 eb       	ldi	r24, 0xB0	; 176
    5b62:	9c e5       	ldi	r25, 0x5C	; 92
    5b64:	b2 cf       	rjmp	.-156    	; 0x5aca <MLCDWriteFrame>
    5b66:	08 95       	ret

00005b68 <MLCDWriteCharacter>:
    5b68:	af 92       	push	r10
    5b6a:	bf 92       	push	r11
    5b6c:	cf 92       	push	r12
    5b6e:	df 92       	push	r13
    5b70:	ef 92       	push	r14
    5b72:	0f 93       	push	r16
    5b74:	1f 93       	push	r17
    5b76:	cf 93       	push	r28
    5b78:	df 93       	push	r29
    5b7a:	a4 2e       	mov	r10, r20
    5b7c:	b1 2c       	mov	r11, r1
    5b7e:	6a 9d       	mul	r22, r10
    5b80:	60 01       	movw	r12, r0
    5b82:	6b 9d       	mul	r22, r11
    5b84:	d0 0c       	add	r13, r0
    5b86:	11 24       	eor	r1, r1
    5b88:	c1 14       	cp	r12, r1
    5b8a:	d1 04       	cpc	r13, r1
    5b8c:	c1 f1       	breq	.+112    	; 0x5bfe <MLCDWriteCharacter+0x96>
    5b8e:	e8 2f       	mov	r30, r24
    5b90:	f9 2f       	mov	r31, r25
    5b92:	30 2f       	mov	r19, r16
    5b94:	c0 e0       	ldi	r28, 0x00	; 0
    5b96:	d0 e0       	ldi	r29, 0x00	; 0
    5b98:	12 e3       	ldi	r17, 0x32	; 50
    5b9a:	a0 0e       	add	r10, r16
    5b9c:	b1 1c       	adc	r11, r1
    5b9e:	ee 20       	and	r14, r14
    5ba0:	89 f0       	breq	.+34     	; 0x5bc4 <MLCDWriteCharacter+0x5c>
    5ba2:	82 2f       	mov	r24, r18
    5ba4:	90 e0       	ldi	r25, 0x00	; 0
    5ba6:	01 97       	sbiw	r24, 0x01	; 1
    5ba8:	18 9f       	mul	r17, r24
    5baa:	d0 01       	movw	r26, r0
    5bac:	19 9f       	mul	r17, r25
    5bae:	b0 0d       	add	r27, r0
    5bb0:	11 24       	eor	r1, r1
    5bb2:	a0 55       	subi	r26, 0x50	; 80
    5bb4:	b3 4a       	sbci	r27, 0xA3	; 163
    5bb6:	a3 0f       	add	r26, r19
    5bb8:	b1 1d       	adc	r27, r1
    5bba:	11 97       	sbiw	r26, 0x01	; 1
    5bbc:	80 81       	ld	r24, Z
    5bbe:	80 95       	com	r24
    5bc0:	8c 93       	st	X, r24
    5bc2:	0f c0       	rjmp	.+30     	; 0x5be2 <MLCDWriteCharacter+0x7a>
    5bc4:	40 81       	ld	r20, Z
    5bc6:	82 2f       	mov	r24, r18
    5bc8:	90 e0       	ldi	r25, 0x00	; 0
    5bca:	01 97       	sbiw	r24, 0x01	; 1
    5bcc:	18 9f       	mul	r17, r24
    5bce:	d0 01       	movw	r26, r0
    5bd0:	19 9f       	mul	r17, r25
    5bd2:	b0 0d       	add	r27, r0
    5bd4:	11 24       	eor	r1, r1
    5bd6:	a0 55       	subi	r26, 0x50	; 80
    5bd8:	b3 4a       	sbci	r27, 0xA3	; 163
    5bda:	a3 0f       	add	r26, r19
    5bdc:	b1 1d       	adc	r27, r1
    5bde:	11 97       	sbiw	r26, 0x01	; 1
    5be0:	4c 93       	st	X, r20
    5be2:	3f 5f       	subi	r19, 0xFF	; 255
    5be4:	83 2f       	mov	r24, r19
    5be6:	90 e0       	ldi	r25, 0x00	; 0
    5be8:	b5 01       	movw	r22, r10
    5bea:	98 d5       	rcall	.+2864   	; 0x671c <__divmodhi4>
    5bec:	89 2b       	or	r24, r25
    5bee:	11 f4       	brne	.+4      	; 0x5bf4 <MLCDWriteCharacter+0x8c>
    5bf0:	2f 5f       	subi	r18, 0xFF	; 255
    5bf2:	30 2f       	mov	r19, r16
    5bf4:	21 96       	adiw	r28, 0x01	; 1
    5bf6:	31 96       	adiw	r30, 0x01	; 1
    5bf8:	cc 15       	cp	r28, r12
    5bfa:	dd 05       	cpc	r29, r13
    5bfc:	81 f6       	brne	.-96     	; 0x5b9e <MLCDWriteCharacter+0x36>
    5bfe:	df 91       	pop	r29
    5c00:	cf 91       	pop	r28
    5c02:	1f 91       	pop	r17
    5c04:	0f 91       	pop	r16
    5c06:	ef 90       	pop	r14
    5c08:	df 90       	pop	r13
    5c0a:	cf 90       	pop	r12
    5c0c:	bf 90       	pop	r11
    5c0e:	af 90       	pop	r10
    5c10:	08 95       	ret

00005c12 <MLCDWriteString>:
    5c12:	8f 92       	push	r8
    5c14:	9f 92       	push	r9
    5c16:	af 92       	push	r10
    5c18:	bf 92       	push	r11
    5c1a:	cf 92       	push	r12
    5c1c:	df 92       	push	r13
    5c1e:	ef 92       	push	r14
    5c20:	ff 92       	push	r15
    5c22:	0f 93       	push	r16
    5c24:	1f 93       	push	r17
    5c26:	cf 93       	push	r28
    5c28:	df 93       	push	r29
    5c2a:	1f 92       	push	r1
    5c2c:	cd b7       	in	r28, 0x3d	; 61
    5c2e:	de b7       	in	r29, 0x3e	; 62
    5c30:	fc 01       	movw	r30, r24
    5c32:	f6 2e       	mov	r15, r22
    5c34:	94 2e       	mov	r9, r20
    5c36:	12 2f       	mov	r17, r18
    5c38:	80 2e       	mov	r8, r16
    5c3a:	80 81       	ld	r24, Z
    5c3c:	88 23       	and	r24, r24
    5c3e:	c1 f1       	breq	.+112    	; 0x5cb0 <MLCDWriteString+0x9e>
    5c40:	6f 01       	movw	r12, r30
    5c42:	2f ef       	ldi	r18, 0xFF	; 255
    5c44:	c2 1a       	sub	r12, r18
    5c46:	d2 0a       	sbc	r13, r18
    5c48:	0f 2e       	mov	r0, r31
    5c4a:	f3 e3       	ldi	r31, 0x33	; 51
    5c4c:	af 2e       	mov	r10, r31
    5c4e:	b1 2c       	mov	r11, r1
    5c50:	f0 2d       	mov	r31, r0
    5c52:	19 82       	std	Y+1, r1	; 0x01
    5c54:	31 e1       	ldi	r19, 0x11	; 17
    5c56:	f3 12       	cpse	r15, r19
    5c58:	0c c0       	rjmp	.+24     	; 0x5c72 <MLCDWriteString+0x60>
    5c5a:	be 01       	movw	r22, r28
    5c5c:	6f 5f       	subi	r22, 0xFF	; 255
    5c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c60:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <getCharacterImage>
    5c64:	e8 2c       	mov	r14, r8
    5c66:	01 2f       	mov	r16, r17
    5c68:	29 2d       	mov	r18, r9
    5c6a:	49 81       	ldd	r20, Y+1	; 0x01
    5c6c:	61 e1       	ldi	r22, 0x11	; 17
    5c6e:	7c df       	rcall	.-264    	; 0x5b68 <MLCDWriteCharacter>
    5c70:	0e c0       	rjmp	.+28     	; 0x5c8e <MLCDWriteString+0x7c>
    5c72:	9b e2       	ldi	r25, 0x2B	; 43
    5c74:	f9 12       	cpse	r15, r25
    5c76:	0b c0       	rjmp	.+22     	; 0x5c8e <MLCDWriteString+0x7c>
    5c78:	be 01       	movw	r22, r28
    5c7a:	6f 5f       	subi	r22, 0xFF	; 255
    5c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c7e:	0e 94 d0 19 	call	0x33a0	; 0x33a0 <getLargeCharacterImage>
    5c82:	e8 2c       	mov	r14, r8
    5c84:	01 2f       	mov	r16, r17
    5c86:	29 2d       	mov	r18, r9
    5c88:	49 81       	ldd	r20, Y+1	; 0x01
    5c8a:	6b e2       	ldi	r22, 0x2B	; 43
    5c8c:	6d df       	rcall	.-294    	; 0x5b68 <MLCDWriteCharacter>
    5c8e:	89 81       	ldd	r24, Y+1	; 0x01
    5c90:	18 0f       	add	r17, r24
    5c92:	e1 2f       	mov	r30, r17
    5c94:	f0 e0       	ldi	r31, 0x00	; 0
    5c96:	95 01       	movw	r18, r10
    5c98:	28 1b       	sub	r18, r24
    5c9a:	31 09       	sbc	r19, r1
    5c9c:	2e 17       	cp	r18, r30
    5c9e:	3f 07       	cpc	r19, r31
    5ca0:	14 f4       	brge	.+4      	; 0x5ca6 <MLCDWriteString+0x94>
    5ca2:	9f 0c       	add	r9, r15
    5ca4:	11 e0       	ldi	r17, 0x01	; 1
    5ca6:	f6 01       	movw	r30, r12
    5ca8:	81 91       	ld	r24, Z+
    5caa:	6f 01       	movw	r12, r30
    5cac:	81 11       	cpse	r24, r1
    5cae:	d1 cf       	rjmp	.-94     	; 0x5c52 <MLCDWriteString+0x40>
    5cb0:	0f 90       	pop	r0
    5cb2:	df 91       	pop	r29
    5cb4:	cf 91       	pop	r28
    5cb6:	1f 91       	pop	r17
    5cb8:	0f 91       	pop	r16
    5cba:	ff 90       	pop	r15
    5cbc:	ef 90       	pop	r14
    5cbe:	df 90       	pop	r13
    5cc0:	cf 90       	pop	r12
    5cc2:	bf 90       	pop	r11
    5cc4:	af 90       	pop	r10
    5cc6:	9f 90       	pop	r9
    5cc8:	8f 90       	pop	r8
    5cca:	08 95       	ret

00005ccc <MLCDDrawSquare>:
    5ccc:	9f 92       	push	r9
    5cce:	af 92       	push	r10
    5cd0:	bf 92       	push	r11
    5cd2:	cf 92       	push	r12
    5cd4:	df 92       	push	r13
    5cd6:	ef 92       	push	r14
    5cd8:	ff 92       	push	r15
    5cda:	0f 93       	push	r16
    5cdc:	1f 93       	push	r17
    5cde:	cf 93       	push	r28
    5ce0:	df 93       	push	r29
    5ce2:	e8 2e       	mov	r14, r24
    5ce4:	f1 2c       	mov	r15, r1
    5ce6:	e1 14       	cp	r14, r1
    5ce8:	f1 04       	cpc	r15, r1
    5cea:	09 f4       	brne	.+2      	; 0x5cee <MLCDDrawSquare+0x22>
    5cec:	62 c0       	rjmp	.+196    	; 0x5db2 <MLCDDrawSquare+0xe6>
    5cee:	f7 01       	movw	r30, r14
    5cf0:	ee 0f       	add	r30, r30
    5cf2:	ff 1f       	adc	r31, r31
    5cf4:	ee 0f       	add	r30, r30
    5cf6:	ff 1f       	adc	r31, r31
    5cf8:	ee 0f       	add	r30, r30
    5cfa:	ff 1f       	adc	r31, r31
    5cfc:	00 e0       	ldi	r16, 0x00	; 0
    5cfe:	10 e0       	ldi	r17, 0x00	; 0
    5d00:	96 2e       	mov	r9, r22
    5d02:	0f 2e       	mov	r0, r31
    5d04:	f2 e3       	ldi	r31, 0x32	; 50
    5d06:	df 2e       	mov	r13, r31
    5d08:	f0 2d       	mov	r31, r0
    5d0a:	cc 24       	eor	r12, r12
    5d0c:	ca 94       	dec	r12
    5d0e:	51 ef       	ldi	r21, 0xF1	; 241
    5d10:	0f 2e       	mov	r0, r31
    5d12:	f1 ea       	ldi	r31, 0xA1	; 161
    5d14:	af 2e       	mov	r10, r31
    5d16:	f0 2d       	mov	r31, r0
    5d18:	0f 2e       	mov	r0, r31
    5d1a:	f3 e3       	ldi	r31, 0x33	; 51
    5d1c:	bf 2e       	mov	r11, r31
    5d1e:	f0 2d       	mov	r31, r0
    5d20:	40 c0       	rjmp	.+128    	; 0x5da2 <MLCDDrawSquare+0xd6>
    5d22:	22 23       	and	r18, r18
    5d24:	71 f0       	breq	.+28     	; 0x5d42 <MLCDDrawSquare+0x76>
    5d26:	c3 2f       	mov	r28, r19
    5d28:	d0 e0       	ldi	r29, 0x00	; 0
    5d2a:	21 97       	sbiw	r28, 0x01	; 1
    5d2c:	dc 9e       	mul	r13, r28
    5d2e:	d0 01       	movw	r26, r0
    5d30:	dd 9e       	mul	r13, r29
    5d32:	b0 0d       	add	r27, r0
    5d34:	11 24       	eor	r1, r1
    5d36:	a6 0f       	add	r26, r22
    5d38:	b7 1f       	adc	r27, r23
    5d3a:	a1 55       	subi	r26, 0x51	; 81
    5d3c:	b3 4a       	sbci	r27, 0xA3	; 163
    5d3e:	cc 92       	st	X, r12
    5d40:	0d c0       	rjmp	.+26     	; 0x5d5c <MLCDDrawSquare+0x90>
    5d42:	c3 2f       	mov	r28, r19
    5d44:	d0 e0       	ldi	r29, 0x00	; 0
    5d46:	21 97       	sbiw	r28, 0x01	; 1
    5d48:	dc 9e       	mul	r13, r28
    5d4a:	d0 01       	movw	r26, r0
    5d4c:	dd 9e       	mul	r13, r29
    5d4e:	b0 0d       	add	r27, r0
    5d50:	11 24       	eor	r1, r1
    5d52:	a6 0f       	add	r26, r22
    5d54:	b7 1f       	adc	r27, r23
    5d56:	a1 55       	subi	r26, 0x51	; 81
    5d58:	b3 4a       	sbci	r27, 0xA3	; 163
    5d5a:	1c 92       	st	X, r1
    5d5c:	3f 5f       	subi	r19, 0xFF	; 255
    5d5e:	a1 e0       	ldi	r26, 0x01	; 1
    5d60:	31 3f       	cpi	r19, 0xF1	; 241
    5d62:	08 f4       	brcc	.+2      	; 0x5d66 <MLCDDrawSquare+0x9a>
    5d64:	a0 e0       	ldi	r26, 0x00	; 0
    5d66:	b3 2f       	mov	r27, r19
    5d68:	a5 9f       	mul	r26, r21
    5d6a:	b0 19       	sub	r27, r0
    5d6c:	11 24       	eor	r1, r1
    5d6e:	b1 11       	cpse	r27, r1
    5d70:	01 c0       	rjmp	.+2      	; 0x5d74 <MLCDDrawSquare+0xa8>
    5d72:	31 e0       	ldi	r19, 0x01	; 1
    5d74:	01 96       	adiw	r24, 0x01	; 1
    5d76:	8e 17       	cp	r24, r30
    5d78:	9f 07       	cpc	r25, r31
    5d7a:	99 f6       	brne	.-90     	; 0x5d22 <MLCDDrawSquare+0x56>
    5d7c:	4f 5f       	subi	r20, 0xFF	; 255
    5d7e:	4a 9d       	mul	r20, r10
    5d80:	81 2d       	mov	r24, r1
    5d82:	11 24       	eor	r1, r1
    5d84:	82 95       	swap	r24
    5d86:	86 95       	lsr	r24
    5d88:	87 70       	andi	r24, 0x07	; 7
    5d8a:	94 2f       	mov	r25, r20
    5d8c:	8b 9d       	mul	r24, r11
    5d8e:	90 19       	sub	r25, r0
    5d90:	11 24       	eor	r1, r1
    5d92:	91 11       	cpse	r25, r1
    5d94:	01 c0       	rjmp	.+2      	; 0x5d98 <MLCDDrawSquare+0xcc>
    5d96:	41 e0       	ldi	r20, 0x01	; 1
    5d98:	0f 5f       	subi	r16, 0xFF	; 255
    5d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d9c:	0e 15       	cp	r16, r14
    5d9e:	1f 05       	cpc	r17, r15
    5da0:	40 f4       	brcc	.+16     	; 0x5db2 <MLCDDrawSquare+0xe6>
    5da2:	30 97       	sbiw	r30, 0x00	; 0
    5da4:	59 f3       	breq	.-42     	; 0x5d7c <MLCDDrawSquare+0xb0>
    5da6:	39 2d       	mov	r19, r9
    5da8:	80 e0       	ldi	r24, 0x00	; 0
    5daa:	90 e0       	ldi	r25, 0x00	; 0
    5dac:	64 2f       	mov	r22, r20
    5dae:	70 e0       	ldi	r23, 0x00	; 0
    5db0:	b8 cf       	rjmp	.-144    	; 0x5d22 <MLCDDrawSquare+0x56>
    5db2:	df 91       	pop	r29
    5db4:	cf 91       	pop	r28
    5db6:	1f 91       	pop	r17
    5db8:	0f 91       	pop	r16
    5dba:	ff 90       	pop	r15
    5dbc:	ef 90       	pop	r14
    5dbe:	df 90       	pop	r13
    5dc0:	cf 90       	pop	r12
    5dc2:	bf 90       	pop	r11
    5dc4:	af 90       	pop	r10
    5dc6:	9f 90       	pop	r9
    5dc8:	08 95       	ret

00005dca <MLCDDrawSnakeBait>:

void MLCDDrawSnakeBait(uint8_t row, uint8_t column, bool white){
    5dca:	cf 93       	push	r28
    5dcc:	df 93       	push	r29
    5dce:	e7 e5       	ldi	r30, 0x57	; 87
    5dd0:	fc e5       	ldi	r31, 0x5C	; 92
    5dd2:	2f e5       	ldi	r18, 0x5F	; 95
    5dd4:	3c e5       	ldi	r19, 0x5C	; 92
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    5dd6:	70 e0       	ldi	r23, 0x00	; 0
    5dd8:	92 e3       	ldi	r25, 0x32	; 50
}

void MLCDDrawSnakeBait(uint8_t row, uint8_t column, bool white){
	uint16_t i;
	for(i=0;i<8;i++){
		if(white)
    5dda:	44 23       	and	r20, r20
    5ddc:	81 f0       	breq	.+32     	; 0x5dfe <MLCDDrawSnakeBait+0x34>
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    5dde:	c8 2f       	mov	r28, r24
    5de0:	d0 e0       	ldi	r29, 0x00	; 0
    5de2:	21 97       	sbiw	r28, 0x01	; 1
    5de4:	9c 9f       	mul	r25, r28
    5de6:	d0 01       	movw	r26, r0
    5de8:	9d 9f       	mul	r25, r29
    5dea:	b0 0d       	add	r27, r0
    5dec:	11 24       	eor	r1, r1
    5dee:	a6 0f       	add	r26, r22
    5df0:	b7 1f       	adc	r27, r23
    5df2:	a1 55       	subi	r26, 0x51	; 81
    5df4:	b3 4a       	sbci	r27, 0xA3	; 163

void MLCDDrawSnakeBait(uint8_t row, uint8_t column, bool white){
	uint16_t i;
	for(i=0;i<8;i++){
		if(white)
			MLCDUpdateByte(~snake_bait[i], row, column);
    5df6:	50 81       	ld	r21, Z
    5df8:	50 95       	com	r21
void MLCDRefreshFrame(void){
	MLCDWriteFrame(frame);
}

void MLCDUpdateByte(uint8_t data, uint8_t row, uint8_t column){
	frame[row-1][column-1] = data;
    5dfa:	5c 93       	st	X, r21
    5dfc:	0e c0       	rjmp	.+28     	; 0x5e1a <MLCDDrawSnakeBait+0x50>
    5dfe:	c8 2f       	mov	r28, r24
    5e00:	d0 e0       	ldi	r29, 0x00	; 0
    5e02:	21 97       	sbiw	r28, 0x01	; 1
    5e04:	9c 9f       	mul	r25, r28
    5e06:	d0 01       	movw	r26, r0
    5e08:	9d 9f       	mul	r25, r29
    5e0a:	b0 0d       	add	r27, r0
    5e0c:	11 24       	eor	r1, r1
    5e0e:	a6 0f       	add	r26, r22
    5e10:	b7 1f       	adc	r27, r23
    5e12:	a1 55       	subi	r26, 0x51	; 81
    5e14:	b3 4a       	sbci	r27, 0xA3	; 163
    5e16:	50 81       	ld	r21, Z
    5e18:	5c 93       	st	X, r21
		if(white)
			MLCDUpdateByte(~snake_bait[i], row, column);
		else
			MLCDUpdateByte(snake_bait[i], row, column);
			
		row++;
    5e1a:	8f 5f       	subi	r24, 0xFF	; 255
    5e1c:	31 96       	adiw	r30, 0x01	; 1
	}
}

void MLCDDrawSnakeBait(uint8_t row, uint8_t column, bool white){
	uint16_t i;
	for(i=0;i<8;i++){
    5e1e:	e2 17       	cp	r30, r18
    5e20:	f3 07       	cpc	r31, r19
    5e22:	d9 f6       	brne	.-74     	; 0x5dda <MLCDDrawSnakeBait+0x10>
		else
			MLCDUpdateByte(snake_bait[i], row, column);
			
		row++;
	}
}
    5e24:	df 91       	pop	r29
    5e26:	cf 91       	pop	r28
    5e28:	08 95       	ret

00005e2a <ioport_set_pin_sense_mode>:
typedef uint8_t ioport_port_t;
typedef uint8_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 3;
    5e2a:	e8 2f       	mov	r30, r24
    5e2c:	e6 95       	lsr	r30
    5e2e:	e6 95       	lsr	r30
    5e30:	e6 95       	lsr	r30
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
	       (port * IOPORT_PORT_OFFSET));
    5e32:	90 e2       	ldi	r25, 0x20	; 32
    5e34:	e9 9f       	mul	r30, r25
    5e36:	f0 01       	movw	r30, r0
    5e38:	11 24       	eor	r1, r1
__always_inline static void arch_ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    5e3a:	e0 5f       	subi	r30, 0xF0	; 240
    5e3c:	f9 4f       	sbci	r31, 0xF9	; 249
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_index(
		ioport_pin_t pin)
{
	return (pin & 0x07);
    5e3e:	87 70       	andi	r24, 0x07	; 7

__always_inline static void arch_ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    5e40:	e8 0f       	add	r30, r24
    5e42:	f1 1d       	adc	r31, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    5e44:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    5e46:	f8 94       	cli
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= ~PORT_ISC_gm;
    5e48:	90 81       	ld	r25, Z
    5e4a:	98 7f       	andi	r25, 0xF8	; 248
    5e4c:	90 83       	st	Z, r25
	*pin_ctrl |= (pin_sense & PORT_ISC_gm);
    5e4e:	90 81       	ld	r25, Z
    5e50:	67 70       	andi	r22, 0x07	; 7
    5e52:	69 2b       	or	r22, r25
    5e54:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5e56:	8f bf       	out	0x3f, r24	; 63
    5e58:	08 95       	ret

00005e5a <main>:


int main (void)
{
	
	board_init();
    5e5a:	38 db       	rcall	.-2448   	; 0x54cc <board_init>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    5e5c:	80 e4       	ldi	r24, 0x40	; 64
    5e5e:	e0 ea       	ldi	r30, 0xA0	; 160
    5e60:	f6 e0       	ldi	r31, 0x06	; 6
    5e62:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    5e64:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    5e66:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    5e68:	e6 eb       	ldi	r30, 0xB6	; 182
    5e6a:	f6 e0       	ldi	r31, 0x06	; 6
    5e6c:	90 81       	ld	r25, Z
    5e6e:	97 70       	andi	r25, 0x07	; 7
    5e70:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    5e72:	90 81       	ld	r25, Z
    5e74:	98 61       	ori	r25, 0x18	; 24
    5e76:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5e78:	8f bf       	out	0x3f, r24	; 63
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->DIRCLR = arch_ioport_pin_to_mask(pin);
    5e7a:	80 e8       	ldi	r24, 0x80	; 128
    5e7c:	e0 ea       	ldi	r30, 0xA0	; 160
    5e7e:	f6 e0       	ldi	r31, 0x06	; 6
    5e80:	82 83       	std	Z+2, r24	; 0x02

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    5e82:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    5e84:	f8 94       	cli
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    5e86:	e7 eb       	ldi	r30, 0xB7	; 183
    5e88:	f6 e0       	ldi	r31, 0x06	; 6
    5e8a:	90 81       	ld	r25, Z
    5e8c:	97 70       	andi	r25, 0x07	; 7
    5e8e:	90 83       	st	Z, r25
	*pin_ctrl |= mode;
    5e90:	90 81       	ld	r25, Z
    5e92:	98 61       	ori	r25, 0x18	; 24
    5e94:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    5e96:	8f bf       	out	0x3f, r24	; 63
	ioport_set_pin_dir(PB0, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(PB0, IOPORT_MODE_PULLUP);
	ioport_set_pin_dir(PB1, IOPORT_DIR_INPUT);
	ioport_set_pin_mode(PB1, IOPORT_MODE_PULLUP);
	sysclk_init();
    5e98:	b6 da       	rcall	.-2708   	; 0x5406 <sysclk_init>
	
	ioport_set_pin_sense_mode(ioport_pin_to_mask(PORTF_PIN2CTRL), IOPORT_SENSE_FALLING);
    5e9a:	80 91 b2 06 	lds	r24, 0x06B2
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    5e9e:	87 70       	andi	r24, 0x07	; 7
    5ea0:	c1 e0       	ldi	r28, 0x01	; 1
    5ea2:	62 e0       	ldi	r22, 0x02	; 2
    5ea4:	9c 2f       	mov	r25, r28
    5ea6:	01 c0       	rjmp	.+2      	; 0x5eaa <main+0x50>
    5ea8:	99 0f       	add	r25, r25
    5eaa:	8a 95       	dec	r24
    5eac:	ea f7       	brpl	.-6      	; 0x5ea8 <main+0x4e>
    5eae:	89 2f       	mov	r24, r25
    5eb0:	bc df       	rcall	.-136    	; 0x5e2a <ioport_set_pin_sense_mode>
	ioport_set_pin_sense_mode(ioport_pin_to_mask(PORTF_PIN3CTRL), IOPORT_SENSE_FALLING);
    5eb2:	80 91 b3 06 	lds	r24, 0x06B3
    5eb6:	87 70       	andi	r24, 0x07	; 7
    5eb8:	62 e0       	ldi	r22, 0x02	; 2
    5eba:	ec 2f       	mov	r30, r28
    5ebc:	01 c0       	rjmp	.+2      	; 0x5ec0 <main+0x66>
    5ebe:	ee 0f       	add	r30, r30
    5ec0:	8a 95       	dec	r24
    5ec2:	ea f7       	brpl	.-6      	; 0x5ebe <main+0x64>
    5ec4:	8e 2f       	mov	r24, r30
    5ec6:	b1 df       	rcall	.-158    	; 0x5e2a <ioport_set_pin_sense_mode>
	ioport_set_pin_sense_mode(ioport_pin_to_mask(PORTF_PIN4CTRL), IOPORT_SENSE_FALLING);
    5ec8:	80 91 b4 06 	lds	r24, 0x06B4
    5ecc:	87 70       	andi	r24, 0x07	; 7
    5ece:	62 e0       	ldi	r22, 0x02	; 2
    5ed0:	fc 2f       	mov	r31, r28
    5ed2:	01 c0       	rjmp	.+2      	; 0x5ed6 <main+0x7c>
    5ed4:	ff 0f       	add	r31, r31
    5ed6:	8a 95       	dec	r24
    5ed8:	ea f7       	brpl	.-6      	; 0x5ed4 <main+0x7a>
    5eda:	8f 2f       	mov	r24, r31
    5edc:	a6 df       	rcall	.-180    	; 0x5e2a <ioport_set_pin_sense_mode>
	ioport_set_pin_sense_mode(ioport_pin_to_mask(PORTF_PIN5CTRL), IOPORT_SENSE_FALLING);
    5ede:	80 91 b5 06 	lds	r24, 0x06B5
    5ee2:	87 70       	andi	r24, 0x07	; 7
    5ee4:	62 e0       	ldi	r22, 0x02	; 2
    5ee6:	01 c0       	rjmp	.+2      	; 0x5eea <main+0x90>
    5ee8:	cc 0f       	add	r28, r28
    5eea:	8a 95       	dec	r24
    5eec:	ea f7       	brpl	.-6      	; 0x5ee8 <main+0x8e>
    5eee:	8c 2f       	mov	r24, r28
    5ef0:	9c df       	rcall	.-200    	; 0x5e2a <ioport_set_pin_sense_mode>
	MLCDDrawRLArrow(FONT_SIZE_LARGE+1,	1,					MLCD_ARROW_LEFT,	MLCD_BLACK);
}


void PORT_ConfigureInterrupt0(PORT_t * port, PORT_INT0LVL_t intLevel, uint8_t pinMask){
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT0LVL_gm ) | intLevel;
    5ef2:	e0 ea       	ldi	r30, 0xA0	; 160
    5ef4:	f6 e0       	ldi	r31, 0x06	; 6
    5ef6:	81 85       	ldd	r24, Z+9	; 0x09
    5ef8:	8c 7f       	andi	r24, 0xFC	; 252
    5efa:	82 60       	ori	r24, 0x02	; 2
    5efc:	81 87       	std	Z+9, r24	; 0x09
	port->INT0MASK = pinMask;
    5efe:	8c e3       	ldi	r24, 0x3C	; 60
    5f00:	82 87       	std	Z+10, r24	; 0x0a
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    5f02:	e0 ea       	ldi	r30, 0xA0	; 160
    5f04:	f0 e0       	ldi	r31, 0x00	; 0
    5f06:	87 e0       	ldi	r24, 0x07	; 7
    5f08:	82 83       	std	Z+2, r24	; 0x02
		PMIC.CTRL &= ~PMIC_RREN_bm;
		PMIC.INTPRI = 0;
		break;

	case PMIC_SCH_ROUND_ROBIN:
		PMIC.CTRL |= PMIC_RREN_bm;
    5f0a:	82 81       	ldd	r24, Z+2	; 0x02
    5f0c:	80 68       	ori	r24, 0x80	; 128
    5f0e:	82 83       	std	Z+2, r24	; 0x02
 */
static inline void pmic_enable_level(enum pmic_level level)
{
	Assert((level & PMIC_LVL_NMI));

	PMIC.CTRL |= level;
    5f10:	82 81       	ldd	r24, Z+2	; 0x02
    5f12:	82 60       	ori	r24, 0x02	; 2
    5f14:	82 83       	std	Z+2, r24	; 0x02
	PORT_ConfigureInterrupt0( &PORTF, PORT_INT0LVL_MED_gc, PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm);
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_ROUND_ROBIN);
	pmic_enable_level(PMIC_LVL_MEDIUM);
	
	cpu_irq_enable();
    5f16:	78 94       	sei
	
	MLCDInit();
    5f18:	34 dd       	rcall	.-1432   	; 0x5982 <MLCDInit>
	MLCDClearAll();
    5f1a:	54 dd       	rcall	.-1368   	; 0x59c4 <MLCDClearAll>
	MLCDTurnOn();
    5f1c:	40 dd       	rcall	.-1408   	; 0x599e <MLCDTurnOn>
	
	adc_init();
    5f1e:	0e 94 1f 1c 	call	0x383e	; 0x383e <adc_init>
	//adc_enable(&MY_ADC);
	
	MLCDShowImecLogo();
    5f22:	f7 dd       	rcall	.-1042   	; 0x5b12 <MLCDShowImecLogo>
	//delay_ms(2000);
	MLCDClearFrame();
    5f24:	75 dd       	rcall	.-1302   	; 0x5a10 <MLCDClearFrame>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    5f26:	00 ea       	ldi	r16, 0xA0	; 160
    5f28:	16 e0       	ldi	r17, 0x06	; 6
 *
 * \param mode Sleep mode, from the device IO header file.
 */
static inline void sleep_set_mode(enum SLEEP_SMODE_enum mode)
{
	SLEEP.CTRL = mode | (SLEEP.CTRL & ~SLEEP_SMODE_gm);
    5f2a:	c8 e4       	ldi	r28, 0x48	; 72
    5f2c:	d0 e0       	ldi	r29, 0x00	; 0
    5f2e:	f8 01       	movw	r30, r16
    5f30:	80 85       	ldd	r24, Z+8	; 0x08
		else if (screen%4 == 3)	BarScreen();
		*/
		//MLCDRefreshFrame();
		//MLCDClearFrame();
		
		if(gpio_pin_is_low(PB1) && gpio_pin_is_low(PB0)){
    5f32:	88 23       	and	r24, r24
    5f34:	24 f0       	brlt	.+8      	; 0x5f3e <main+0xe4>
    5f36:	80 85       	ldd	r24, Z+8	; 0x08
    5f38:	86 ff       	sbrs	r24, 6
			playSnake();
    5f3a:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <playSnake>
    5f3e:	88 81       	ld	r24, Y
    5f40:	81 7f       	andi	r24, 0xF1	; 241
    5f42:	84 60       	ori	r24, 0x04	; 4
    5f44:	88 83       	st	Y, r24
		}
		sleep_set_mode(SLEEP_SMODE_PDOWN_gc);
		sleep_enable();
    5f46:	88 81       	ld	r24, Y
    5f48:	81 60       	ori	r24, 0x01	; 1
    5f4a:	88 83       	st	Y, r24
		sleep_enter();
    5f4c:	88 95       	sleep
		sleep_disable();
    5f4e:	88 81       	ld	r24, Y
    5f50:	8e 7f       	andi	r24, 0xFE	; 254
    5f52:	88 83       	st	Y, r24
	}
    5f54:	ec cf       	rjmp	.-40     	; 0x5f2e <main+0xd4>

00005f56 <__vector_104>:
	
}

ISR(PORTF_INT0_vect)
{
    5f56:	1f 92       	push	r1
    5f58:	0f 92       	push	r0
    5f5a:	0f b6       	in	r0, 0x3f	; 63
    5f5c:	0f 92       	push	r0
    5f5e:	11 24       	eor	r1, r1
    5f60:	0b b6       	in	r0, 0x3b	; 59
    5f62:	0f 92       	push	r0
    5f64:	2f 93       	push	r18
    5f66:	3f 93       	push	r19
    5f68:	4f 93       	push	r20
    5f6a:	5f 93       	push	r21
    5f6c:	6f 93       	push	r22
    5f6e:	7f 93       	push	r23
    5f70:	8f 93       	push	r24
    5f72:	9f 93       	push	r25
    5f74:	af 93       	push	r26
    5f76:	bf 93       	push	r27
    5f78:	ef 93       	push	r30
    5f7a:	ff 93       	push	r31
    5f7c:	e0 ea       	ldi	r30, 0xA0	; 160
    5f7e:	f6 e0       	ldi	r31, 0x06	; 6
    5f80:	80 85       	ldd	r24, Z+8	; 0x08
	//sleep_disable();
	
	if(gpio_pin_is_low(MLCD_PB0)){
    5f82:	82 fd       	sbrc	r24, 2
    5f84:	0a c0       	rjmp	.+20     	; 0x5f9a <__vector_104+0x44>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    5f86:	81 e0       	ldi	r24, 0x01	; 1
    5f88:	e0 ee       	ldi	r30, 0xE0	; 224
    5f8a:	f7 e0       	ldi	r31, 0x07	; 7
    5f8c:	86 83       	std	Z+6, r24	; 0x06
		//LED_Off(LED1);
		LED_On(LED0);
		screen++;		
    5f8e:	80 91 99 5c 	lds	r24, 0x5C99
    5f92:	8f 5f       	subi	r24, 0xFF	; 255
    5f94:	80 93 99 5c 	sts	0x5C99, r24
    5f98:	2d c0       	rjmp	.+90     	; 0x5ff4 <__vector_104+0x9e>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    5f9a:	e0 ea       	ldi	r30, 0xA0	; 160
    5f9c:	f6 e0       	ldi	r31, 0x06	; 6
    5f9e:	80 85       	ldd	r24, Z+8	; 0x08
	} else if(gpio_pin_is_low(MLCD_PB1)){
    5fa0:	83 fd       	sbrc	r24, 3
    5fa2:	0e c0       	rjmp	.+28     	; 0x5fc0 <__vector_104+0x6a>
		MLCDShowImecLogo();
    5fa4:	b6 dd       	rcall	.-1172   	; 0x5b12 <MLCDShowImecLogo>
    5fa6:	85 e8       	ldi	r24, 0x85	; 133
    5fa8:	95 e4       	ldi	r25, 0x45	; 69
    5faa:	a1 e0       	ldi	r26, 0x01	; 1
    5fac:	b0 e0       	ldi	r27, 0x00	; 0
    5fae:	01 97       	sbiw	r24, 0x01	; 1
    5fb0:	a1 09       	sbc	r26, r1
    5fb2:	b1 09       	sbc	r27, r1
    5fb4:	00 97       	sbiw	r24, 0x00	; 0
    5fb6:	a1 05       	cpc	r26, r1
    5fb8:	b1 05       	cpc	r27, r1
    5fba:	c9 f7       	brne	.-14     	; 0x5fae <__vector_104+0x58>
		delay_ms(1000);
		MLCDClearFrame();
    5fbc:	29 dd       	rcall	.-1454   	; 0x5a10 <MLCDClearFrame>
    5fbe:	1a c0       	rjmp	.+52     	; 0x5ff4 <__vector_104+0x9e>
    5fc0:	e0 ea       	ldi	r30, 0xA0	; 160
    5fc2:	f6 e0       	ldi	r31, 0x06	; 6
    5fc4:	80 85       	ldd	r24, Z+8	; 0x08
	} else if(gpio_pin_is_low(MLCD_PB2)){
    5fc6:	84 fd       	sbrc	r24, 4
    5fc8:	0a c0       	rjmp	.+20     	; 0x5fde <__vector_104+0x88>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    5fca:	82 e0       	ldi	r24, 0x02	; 2
    5fcc:	e0 ee       	ldi	r30, 0xE0	; 224
    5fce:	f7 e0       	ldi	r31, 0x07	; 7
    5fd0:	86 83       	std	Z+6, r24	; 0x06
		//LED_Off(LED0);
		LED_On(LED1);
		screen--;
    5fd2:	80 91 99 5c 	lds	r24, 0x5C99
    5fd6:	81 50       	subi	r24, 0x01	; 1
    5fd8:	80 93 99 5c 	sts	0x5C99, r24
    5fdc:	0b c0       	rjmp	.+22     	; 0x5ff4 <__vector_104+0x9e>

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    5fde:	e0 ea       	ldi	r30, 0xA0	; 160
    5fe0:	f6 e0       	ldi	r31, 0x06	; 6
    5fe2:	80 85       	ldd	r24, Z+8	; 0x08
	} else if(gpio_pin_is_low(MLCD_PB3)){
    5fe4:	85 ff       	sbrs	r24, 5
    5fe6:	06 c0       	rjmp	.+12     	; 0x5ff4 <__vector_104+0x9e>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    5fe8:	e0 ee       	ldi	r30, 0xE0	; 224
    5fea:	f7 e0       	ldi	r31, 0x07	; 7
    5fec:	82 e0       	ldi	r24, 0x02	; 2
    5fee:	85 83       	std	Z+5, r24	; 0x05
    5ff0:	81 e0       	ldi	r24, 0x01	; 1
    5ff2:	85 83       	std	Z+5, r24	; 0x05
		
	} else{
		LED_Off(LED1);
		LED_Off(LED0);	
	}
}
    5ff4:	ff 91       	pop	r31
    5ff6:	ef 91       	pop	r30
    5ff8:	bf 91       	pop	r27
    5ffa:	af 91       	pop	r26
    5ffc:	9f 91       	pop	r25
    5ffe:	8f 91       	pop	r24
    6000:	7f 91       	pop	r23
    6002:	6f 91       	pop	r22
    6004:	5f 91       	pop	r21
    6006:	4f 91       	pop	r20
    6008:	3f 91       	pop	r19
    600a:	2f 91       	pop	r18
    600c:	0f 90       	pop	r0
    600e:	0b be       	out	0x3b, r0	; 59
    6010:	0f 90       	pop	r0
    6012:	0f be       	out	0x3f, r0	; 63
    6014:	0f 90       	pop	r0
    6016:	1f 90       	pop	r1
    6018:	18 95       	reti

0000601a <vfprintf>:
    601a:	2f 92       	push	r2
    601c:	3f 92       	push	r3
    601e:	4f 92       	push	r4
    6020:	5f 92       	push	r5
    6022:	6f 92       	push	r6
    6024:	7f 92       	push	r7
    6026:	8f 92       	push	r8
    6028:	9f 92       	push	r9
    602a:	af 92       	push	r10
    602c:	bf 92       	push	r11
    602e:	cf 92       	push	r12
    6030:	df 92       	push	r13
    6032:	ef 92       	push	r14
    6034:	ff 92       	push	r15
    6036:	0f 93       	push	r16
    6038:	1f 93       	push	r17
    603a:	cf 93       	push	r28
    603c:	df 93       	push	r29
    603e:	cd b7       	in	r28, 0x3d	; 61
    6040:	de b7       	in	r29, 0x3e	; 62
    6042:	63 97       	sbiw	r28, 0x13	; 19
    6044:	cd bf       	out	0x3d, r28	; 61
    6046:	de bf       	out	0x3e, r29	; 62
    6048:	7c 01       	movw	r14, r24
    604a:	1b 01       	movw	r2, r22
    604c:	6a 01       	movw	r12, r20
    604e:	fc 01       	movw	r30, r24
    6050:	16 82       	std	Z+6, r1	; 0x06
    6052:	17 82       	std	Z+7, r1	; 0x07
    6054:	83 81       	ldd	r24, Z+3	; 0x03
    6056:	81 ff       	sbrs	r24, 1
    6058:	49 c3       	rjmp	.+1682   	; 0x66ec <vfprintf+0x6d2>
    605a:	be 01       	movw	r22, r28
    605c:	6f 5f       	subi	r22, 0xFF	; 255
    605e:	7f 4f       	sbci	r23, 0xFF	; 255
    6060:	4b 01       	movw	r8, r22
    6062:	f7 01       	movw	r30, r14
    6064:	93 81       	ldd	r25, Z+3	; 0x03
    6066:	f1 01       	movw	r30, r2
    6068:	93 fd       	sbrc	r25, 3
    606a:	85 91       	lpm	r24, Z+
    606c:	93 ff       	sbrs	r25, 3
    606e:	81 91       	ld	r24, Z+
    6070:	1f 01       	movw	r2, r30
    6072:	88 23       	and	r24, r24
    6074:	09 f4       	brne	.+2      	; 0x6078 <vfprintf+0x5e>
    6076:	36 c3       	rjmp	.+1644   	; 0x66e4 <vfprintf+0x6ca>
    6078:	85 32       	cpi	r24, 0x25	; 37
    607a:	39 f4       	brne	.+14     	; 0x608a <vfprintf+0x70>
    607c:	93 fd       	sbrc	r25, 3
    607e:	85 91       	lpm	r24, Z+
    6080:	93 ff       	sbrs	r25, 3
    6082:	81 91       	ld	r24, Z+
    6084:	1f 01       	movw	r2, r30
    6086:	85 32       	cpi	r24, 0x25	; 37
    6088:	31 f4       	brne	.+12     	; 0x6096 <vfprintf+0x7c>
    608a:	b7 01       	movw	r22, r14
    608c:	90 e0       	ldi	r25, 0x00	; 0
    608e:	f9 d4       	rcall	.+2546   	; 0x6a82 <fputc>
    6090:	56 01       	movw	r10, r12
    6092:	65 01       	movw	r12, r10
    6094:	e6 cf       	rjmp	.-52     	; 0x6062 <vfprintf+0x48>
    6096:	10 e0       	ldi	r17, 0x00	; 0
    6098:	51 2c       	mov	r5, r1
    609a:	20 e0       	ldi	r18, 0x00	; 0
    609c:	20 32       	cpi	r18, 0x20	; 32
    609e:	a0 f4       	brcc	.+40     	; 0x60c8 <vfprintf+0xae>
    60a0:	8b 32       	cpi	r24, 0x2B	; 43
    60a2:	69 f0       	breq	.+26     	; 0x60be <vfprintf+0xa4>
    60a4:	30 f4       	brcc	.+12     	; 0x60b2 <vfprintf+0x98>
    60a6:	80 32       	cpi	r24, 0x20	; 32
    60a8:	59 f0       	breq	.+22     	; 0x60c0 <vfprintf+0xa6>
    60aa:	83 32       	cpi	r24, 0x23	; 35
    60ac:	69 f4       	brne	.+26     	; 0x60c8 <vfprintf+0xae>
    60ae:	20 61       	ori	r18, 0x10	; 16
    60b0:	2c c0       	rjmp	.+88     	; 0x610a <vfprintf+0xf0>
    60b2:	8d 32       	cpi	r24, 0x2D	; 45
    60b4:	39 f0       	breq	.+14     	; 0x60c4 <vfprintf+0xaa>
    60b6:	80 33       	cpi	r24, 0x30	; 48
    60b8:	39 f4       	brne	.+14     	; 0x60c8 <vfprintf+0xae>
    60ba:	21 60       	ori	r18, 0x01	; 1
    60bc:	26 c0       	rjmp	.+76     	; 0x610a <vfprintf+0xf0>
    60be:	22 60       	ori	r18, 0x02	; 2
    60c0:	24 60       	ori	r18, 0x04	; 4
    60c2:	23 c0       	rjmp	.+70     	; 0x610a <vfprintf+0xf0>
    60c4:	28 60       	ori	r18, 0x08	; 8
    60c6:	21 c0       	rjmp	.+66     	; 0x610a <vfprintf+0xf0>
    60c8:	27 fd       	sbrc	r18, 7
    60ca:	27 c0       	rjmp	.+78     	; 0x611a <vfprintf+0x100>
    60cc:	30 ed       	ldi	r19, 0xD0	; 208
    60ce:	38 0f       	add	r19, r24
    60d0:	3a 30       	cpi	r19, 0x0A	; 10
    60d2:	78 f4       	brcc	.+30     	; 0x60f2 <vfprintf+0xd8>
    60d4:	26 ff       	sbrs	r18, 6
    60d6:	06 c0       	rjmp	.+12     	; 0x60e4 <vfprintf+0xca>
    60d8:	fa e0       	ldi	r31, 0x0A	; 10
    60da:	1f 9f       	mul	r17, r31
    60dc:	30 0d       	add	r19, r0
    60de:	11 24       	eor	r1, r1
    60e0:	13 2f       	mov	r17, r19
    60e2:	13 c0       	rjmp	.+38     	; 0x610a <vfprintf+0xf0>
    60e4:	6a e0       	ldi	r22, 0x0A	; 10
    60e6:	56 9e       	mul	r5, r22
    60e8:	30 0d       	add	r19, r0
    60ea:	11 24       	eor	r1, r1
    60ec:	53 2e       	mov	r5, r19
    60ee:	20 62       	ori	r18, 0x20	; 32
    60f0:	0c c0       	rjmp	.+24     	; 0x610a <vfprintf+0xf0>
    60f2:	8e 32       	cpi	r24, 0x2E	; 46
    60f4:	21 f4       	brne	.+8      	; 0x60fe <vfprintf+0xe4>
    60f6:	26 fd       	sbrc	r18, 6
    60f8:	f5 c2       	rjmp	.+1514   	; 0x66e4 <vfprintf+0x6ca>
    60fa:	20 64       	ori	r18, 0x40	; 64
    60fc:	06 c0       	rjmp	.+12     	; 0x610a <vfprintf+0xf0>
    60fe:	8c 36       	cpi	r24, 0x6C	; 108
    6100:	11 f4       	brne	.+4      	; 0x6106 <vfprintf+0xec>
    6102:	20 68       	ori	r18, 0x80	; 128
    6104:	02 c0       	rjmp	.+4      	; 0x610a <vfprintf+0xf0>
    6106:	88 36       	cpi	r24, 0x68	; 104
    6108:	41 f4       	brne	.+16     	; 0x611a <vfprintf+0x100>
    610a:	f1 01       	movw	r30, r2
    610c:	93 fd       	sbrc	r25, 3
    610e:	85 91       	lpm	r24, Z+
    6110:	93 ff       	sbrs	r25, 3
    6112:	81 91       	ld	r24, Z+
    6114:	1f 01       	movw	r2, r30
    6116:	81 11       	cpse	r24, r1
    6118:	c1 cf       	rjmp	.-126    	; 0x609c <vfprintf+0x82>
    611a:	9b eb       	ldi	r25, 0xBB	; 187
    611c:	98 0f       	add	r25, r24
    611e:	93 30       	cpi	r25, 0x03	; 3
    6120:	18 f4       	brcc	.+6      	; 0x6128 <vfprintf+0x10e>
    6122:	20 61       	ori	r18, 0x10	; 16
    6124:	80 5e       	subi	r24, 0xE0	; 224
    6126:	06 c0       	rjmp	.+12     	; 0x6134 <vfprintf+0x11a>
    6128:	9b e9       	ldi	r25, 0x9B	; 155
    612a:	98 0f       	add	r25, r24
    612c:	93 30       	cpi	r25, 0x03	; 3
    612e:	08 f0       	brcs	.+2      	; 0x6132 <vfprintf+0x118>
    6130:	9a c1       	rjmp	.+820    	; 0x6466 <vfprintf+0x44c>
    6132:	2f 7e       	andi	r18, 0xEF	; 239
    6134:	26 ff       	sbrs	r18, 6
    6136:	16 e0       	ldi	r17, 0x06	; 6
    6138:	2f 73       	andi	r18, 0x3F	; 63
    613a:	72 2e       	mov	r7, r18
    613c:	85 36       	cpi	r24, 0x65	; 101
    613e:	21 f4       	brne	.+8      	; 0x6148 <vfprintf+0x12e>
    6140:	f2 2f       	mov	r31, r18
    6142:	f0 64       	ori	r31, 0x40	; 64
    6144:	7f 2e       	mov	r7, r31
    6146:	08 c0       	rjmp	.+16     	; 0x6158 <vfprintf+0x13e>
    6148:	86 36       	cpi	r24, 0x66	; 102
    614a:	21 f4       	brne	.+8      	; 0x6154 <vfprintf+0x13a>
    614c:	62 2f       	mov	r22, r18
    614e:	60 68       	ori	r22, 0x80	; 128
    6150:	76 2e       	mov	r7, r22
    6152:	02 c0       	rjmp	.+4      	; 0x6158 <vfprintf+0x13e>
    6154:	11 11       	cpse	r17, r1
    6156:	11 50       	subi	r17, 0x01	; 1
    6158:	77 fe       	sbrs	r7, 7
    615a:	07 c0       	rjmp	.+14     	; 0x616a <vfprintf+0x150>
    615c:	1c 33       	cpi	r17, 0x3C	; 60
    615e:	48 f4       	brcc	.+18     	; 0x6172 <vfprintf+0x158>
    6160:	44 24       	eor	r4, r4
    6162:	43 94       	inc	r4
    6164:	41 0e       	add	r4, r17
    6166:	27 e0       	ldi	r18, 0x07	; 7
    6168:	0b c0       	rjmp	.+22     	; 0x6180 <vfprintf+0x166>
    616a:	18 30       	cpi	r17, 0x08	; 8
    616c:	30 f4       	brcc	.+12     	; 0x617a <vfprintf+0x160>
    616e:	21 2f       	mov	r18, r17
    6170:	06 c0       	rjmp	.+12     	; 0x617e <vfprintf+0x164>
    6172:	27 e0       	ldi	r18, 0x07	; 7
    6174:	4c e3       	ldi	r20, 0x3C	; 60
    6176:	44 2e       	mov	r4, r20
    6178:	03 c0       	rjmp	.+6      	; 0x6180 <vfprintf+0x166>
    617a:	27 e0       	ldi	r18, 0x07	; 7
    617c:	17 e0       	ldi	r17, 0x07	; 7
    617e:	41 2c       	mov	r4, r1
    6180:	56 01       	movw	r10, r12
    6182:	74 e0       	ldi	r23, 0x04	; 4
    6184:	a7 0e       	add	r10, r23
    6186:	b1 1c       	adc	r11, r1
    6188:	f6 01       	movw	r30, r12
    618a:	60 81       	ld	r22, Z
    618c:	71 81       	ldd	r23, Z+1	; 0x01
    618e:	82 81       	ldd	r24, Z+2	; 0x02
    6190:	93 81       	ldd	r25, Z+3	; 0x03
    6192:	04 2d       	mov	r16, r4
    6194:	a4 01       	movw	r20, r8
    6196:	77 d3       	rcall	.+1774   	; 0x6886 <__ftoa_engine>
    6198:	6c 01       	movw	r12, r24
    619a:	09 81       	ldd	r16, Y+1	; 0x01
    619c:	00 ff       	sbrs	r16, 0
    619e:	02 c0       	rjmp	.+4      	; 0x61a4 <vfprintf+0x18a>
    61a0:	03 ff       	sbrs	r16, 3
    61a2:	06 c0       	rjmp	.+12     	; 0x61b0 <vfprintf+0x196>
    61a4:	71 fc       	sbrc	r7, 1
    61a6:	07 c0       	rjmp	.+14     	; 0x61b6 <vfprintf+0x19c>
    61a8:	72 fc       	sbrc	r7, 2
    61aa:	08 c0       	rjmp	.+16     	; 0x61bc <vfprintf+0x1a2>
    61ac:	61 2c       	mov	r6, r1
    61ae:	08 c0       	rjmp	.+16     	; 0x61c0 <vfprintf+0x1a6>
    61b0:	3d e2       	ldi	r19, 0x2D	; 45
    61b2:	63 2e       	mov	r6, r19
    61b4:	05 c0       	rjmp	.+10     	; 0x61c0 <vfprintf+0x1a6>
    61b6:	2b e2       	ldi	r18, 0x2B	; 43
    61b8:	62 2e       	mov	r6, r18
    61ba:	02 c0       	rjmp	.+4      	; 0x61c0 <vfprintf+0x1a6>
    61bc:	90 e2       	ldi	r25, 0x20	; 32
    61be:	69 2e       	mov	r6, r25
    61c0:	80 2f       	mov	r24, r16
    61c2:	8c 70       	andi	r24, 0x0C	; 12
    61c4:	81 f1       	breq	.+96     	; 0x6226 <vfprintf+0x20c>
    61c6:	66 20       	and	r6, r6
    61c8:	11 f0       	breq	.+4      	; 0x61ce <vfprintf+0x1b4>
    61ca:	84 e0       	ldi	r24, 0x04	; 4
    61cc:	01 c0       	rjmp	.+2      	; 0x61d0 <vfprintf+0x1b6>
    61ce:	83 e0       	ldi	r24, 0x03	; 3
    61d0:	85 15       	cp	r24, r5
    61d2:	10 f0       	brcs	.+4      	; 0x61d8 <vfprintf+0x1be>
    61d4:	51 2c       	mov	r5, r1
    61d6:	0a c0       	rjmp	.+20     	; 0x61ec <vfprintf+0x1d2>
    61d8:	58 1a       	sub	r5, r24
    61da:	73 fc       	sbrc	r7, 3
    61dc:	07 c0       	rjmp	.+14     	; 0x61ec <vfprintf+0x1d2>
    61de:	b7 01       	movw	r22, r14
    61e0:	80 e2       	ldi	r24, 0x20	; 32
    61e2:	90 e0       	ldi	r25, 0x00	; 0
    61e4:	4e d4       	rcall	.+2204   	; 0x6a82 <fputc>
    61e6:	5a 94       	dec	r5
    61e8:	d1 f7       	brne	.-12     	; 0x61de <vfprintf+0x1c4>
    61ea:	f4 cf       	rjmp	.-24     	; 0x61d4 <vfprintf+0x1ba>
    61ec:	66 20       	and	r6, r6
    61ee:	21 f0       	breq	.+8      	; 0x61f8 <vfprintf+0x1de>
    61f0:	b7 01       	movw	r22, r14
    61f2:	86 2d       	mov	r24, r6
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	45 d4       	rcall	.+2186   	; 0x6a82 <fputc>
    61f8:	03 fd       	sbrc	r16, 3
    61fa:	03 c0       	rjmp	.+6      	; 0x6202 <vfprintf+0x1e8>
    61fc:	0c e5       	ldi	r16, 0x5C	; 92
    61fe:	12 e3       	ldi	r17, 0x32	; 50
    6200:	02 c0       	rjmp	.+4      	; 0x6206 <vfprintf+0x1ec>
    6202:	08 e5       	ldi	r16, 0x58	; 88
    6204:	12 e3       	ldi	r17, 0x32	; 50
    6206:	f7 2d       	mov	r31, r7
    6208:	f0 71       	andi	r31, 0x10	; 16
    620a:	7f 2e       	mov	r7, r31
    620c:	f8 01       	movw	r30, r16
    620e:	84 91       	lpm	r24, Z
    6210:	88 23       	and	r24, r24
    6212:	09 f4       	brne	.+2      	; 0x6216 <vfprintf+0x1fc>
    6214:	5e c2       	rjmp	.+1212   	; 0x66d2 <vfprintf+0x6b8>
    6216:	71 10       	cpse	r7, r1
    6218:	80 52       	subi	r24, 0x20	; 32
    621a:	b7 01       	movw	r22, r14
    621c:	90 e0       	ldi	r25, 0x00	; 0
    621e:	31 d4       	rcall	.+2146   	; 0x6a82 <fputc>
    6220:	0f 5f       	subi	r16, 0xFF	; 255
    6222:	1f 4f       	sbci	r17, 0xFF	; 255
    6224:	f3 cf       	rjmp	.-26     	; 0x620c <vfprintf+0x1f2>
    6226:	77 fe       	sbrs	r7, 7
    6228:	0f c0       	rjmp	.+30     	; 0x6248 <vfprintf+0x22e>
    622a:	4c 0c       	add	r4, r12
    622c:	04 ff       	sbrs	r16, 4
    622e:	04 c0       	rjmp	.+8      	; 0x6238 <vfprintf+0x21e>
    6230:	8a 81       	ldd	r24, Y+2	; 0x02
    6232:	81 33       	cpi	r24, 0x31	; 49
    6234:	09 f4       	brne	.+2      	; 0x6238 <vfprintf+0x21e>
    6236:	4a 94       	dec	r4
    6238:	14 14       	cp	r1, r4
    623a:	74 f5       	brge	.+92     	; 0x6298 <vfprintf+0x27e>
    623c:	f8 e0       	ldi	r31, 0x08	; 8
    623e:	f4 15       	cp	r31, r4
    6240:	78 f5       	brcc	.+94     	; 0x62a0 <vfprintf+0x286>
    6242:	88 e0       	ldi	r24, 0x08	; 8
    6244:	48 2e       	mov	r4, r24
    6246:	2c c0       	rjmp	.+88     	; 0x62a0 <vfprintf+0x286>
    6248:	76 fc       	sbrc	r7, 6
    624a:	2a c0       	rjmp	.+84     	; 0x62a0 <vfprintf+0x286>
    624c:	81 2f       	mov	r24, r17
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	8c 15       	cp	r24, r12
    6252:	9d 05       	cpc	r25, r13
    6254:	9c f0       	brlt	.+38     	; 0x627c <vfprintf+0x262>
    6256:	6c ef       	ldi	r22, 0xFC	; 252
    6258:	c6 16       	cp	r12, r22
    625a:	6f ef       	ldi	r22, 0xFF	; 255
    625c:	d6 06       	cpc	r13, r22
    625e:	74 f0       	brlt	.+28     	; 0x627c <vfprintf+0x262>
    6260:	77 2d       	mov	r23, r7
    6262:	70 68       	ori	r23, 0x80	; 128
    6264:	77 2e       	mov	r7, r23
    6266:	0a c0       	rjmp	.+20     	; 0x627c <vfprintf+0x262>
    6268:	e2 e0       	ldi	r30, 0x02	; 2
    626a:	f0 e0       	ldi	r31, 0x00	; 0
    626c:	ec 0f       	add	r30, r28
    626e:	fd 1f       	adc	r31, r29
    6270:	e1 0f       	add	r30, r17
    6272:	f1 1d       	adc	r31, r1
    6274:	80 81       	ld	r24, Z
    6276:	80 33       	cpi	r24, 0x30	; 48
    6278:	19 f4       	brne	.+6      	; 0x6280 <vfprintf+0x266>
    627a:	11 50       	subi	r17, 0x01	; 1
    627c:	11 11       	cpse	r17, r1
    627e:	f4 cf       	rjmp	.-24     	; 0x6268 <vfprintf+0x24e>
    6280:	77 fe       	sbrs	r7, 7
    6282:	0e c0       	rjmp	.+28     	; 0x62a0 <vfprintf+0x286>
    6284:	44 24       	eor	r4, r4
    6286:	43 94       	inc	r4
    6288:	41 0e       	add	r4, r17
    628a:	81 2f       	mov	r24, r17
    628c:	90 e0       	ldi	r25, 0x00	; 0
    628e:	c8 16       	cp	r12, r24
    6290:	d9 06       	cpc	r13, r25
    6292:	2c f4       	brge	.+10     	; 0x629e <vfprintf+0x284>
    6294:	1c 19       	sub	r17, r12
    6296:	04 c0       	rjmp	.+8      	; 0x62a0 <vfprintf+0x286>
    6298:	44 24       	eor	r4, r4
    629a:	43 94       	inc	r4
    629c:	01 c0       	rjmp	.+2      	; 0x62a0 <vfprintf+0x286>
    629e:	10 e0       	ldi	r17, 0x00	; 0
    62a0:	77 fe       	sbrs	r7, 7
    62a2:	07 c0       	rjmp	.+14     	; 0x62b2 <vfprintf+0x298>
    62a4:	1c 14       	cp	r1, r12
    62a6:	1d 04       	cpc	r1, r13
    62a8:	3c f4       	brge	.+14     	; 0x62b8 <vfprintf+0x29e>
    62aa:	96 01       	movw	r18, r12
    62ac:	2f 5f       	subi	r18, 0xFF	; 255
    62ae:	3f 4f       	sbci	r19, 0xFF	; 255
    62b0:	05 c0       	rjmp	.+10     	; 0x62bc <vfprintf+0x2a2>
    62b2:	25 e0       	ldi	r18, 0x05	; 5
    62b4:	30 e0       	ldi	r19, 0x00	; 0
    62b6:	02 c0       	rjmp	.+4      	; 0x62bc <vfprintf+0x2a2>
    62b8:	21 e0       	ldi	r18, 0x01	; 1
    62ba:	30 e0       	ldi	r19, 0x00	; 0
    62bc:	66 20       	and	r6, r6
    62be:	11 f0       	breq	.+4      	; 0x62c4 <vfprintf+0x2aa>
    62c0:	2f 5f       	subi	r18, 0xFF	; 255
    62c2:	3f 4f       	sbci	r19, 0xFF	; 255
    62c4:	11 23       	and	r17, r17
    62c6:	31 f0       	breq	.+12     	; 0x62d4 <vfprintf+0x2ba>
    62c8:	41 2f       	mov	r20, r17
    62ca:	50 e0       	ldi	r21, 0x00	; 0
    62cc:	4f 5f       	subi	r20, 0xFF	; 255
    62ce:	5f 4f       	sbci	r21, 0xFF	; 255
    62d0:	24 0f       	add	r18, r20
    62d2:	35 1f       	adc	r19, r21
    62d4:	45 2d       	mov	r20, r5
    62d6:	50 e0       	ldi	r21, 0x00	; 0
    62d8:	24 17       	cp	r18, r20
    62da:	35 07       	cpc	r19, r21
    62dc:	14 f4       	brge	.+4      	; 0x62e2 <vfprintf+0x2c8>
    62de:	52 1a       	sub	r5, r18
    62e0:	01 c0       	rjmp	.+2      	; 0x62e4 <vfprintf+0x2ca>
    62e2:	51 2c       	mov	r5, r1
    62e4:	87 2d       	mov	r24, r7
    62e6:	89 70       	andi	r24, 0x09	; 9
    62e8:	41 f4       	brne	.+16     	; 0x62fa <vfprintf+0x2e0>
    62ea:	55 20       	and	r5, r5
    62ec:	31 f0       	breq	.+12     	; 0x62fa <vfprintf+0x2e0>
    62ee:	b7 01       	movw	r22, r14
    62f0:	80 e2       	ldi	r24, 0x20	; 32
    62f2:	90 e0       	ldi	r25, 0x00	; 0
    62f4:	c6 d3       	rcall	.+1932   	; 0x6a82 <fputc>
    62f6:	5a 94       	dec	r5
    62f8:	f8 cf       	rjmp	.-16     	; 0x62ea <vfprintf+0x2d0>
    62fa:	66 20       	and	r6, r6
    62fc:	21 f0       	breq	.+8      	; 0x6306 <vfprintf+0x2ec>
    62fe:	b7 01       	movw	r22, r14
    6300:	86 2d       	mov	r24, r6
    6302:	90 e0       	ldi	r25, 0x00	; 0
    6304:	be d3       	rcall	.+1916   	; 0x6a82 <fputc>
    6306:	73 fc       	sbrc	r7, 3
    6308:	08 c0       	rjmp	.+16     	; 0x631a <vfprintf+0x300>
    630a:	55 20       	and	r5, r5
    630c:	31 f0       	breq	.+12     	; 0x631a <vfprintf+0x300>
    630e:	b7 01       	movw	r22, r14
    6310:	80 e3       	ldi	r24, 0x30	; 48
    6312:	90 e0       	ldi	r25, 0x00	; 0
    6314:	b6 d3       	rcall	.+1900   	; 0x6a82 <fputc>
    6316:	5a 94       	dec	r5
    6318:	f8 cf       	rjmp	.-16     	; 0x630a <vfprintf+0x2f0>
    631a:	77 fe       	sbrs	r7, 7
    631c:	5d c0       	rjmp	.+186    	; 0x63d8 <vfprintf+0x3be>
    631e:	9c 2d       	mov	r25, r12
    6320:	8d 2d       	mov	r24, r13
    6322:	d7 fe       	sbrs	r13, 7
    6324:	02 c0       	rjmp	.+4      	; 0x632a <vfprintf+0x310>
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	80 e0       	ldi	r24, 0x00	; 0
    632a:	69 2e       	mov	r6, r25
    632c:	78 2e       	mov	r7, r24
    632e:	40 e0       	ldi	r20, 0x00	; 0
    6330:	50 e0       	ldi	r21, 0x00	; 0
    6332:	c6 01       	movw	r24, r12
    6334:	84 19       	sub	r24, r4
    6336:	91 09       	sbc	r25, r1
    6338:	8c 87       	std	Y+12, r24	; 0x0c
    633a:	9d 87       	std	Y+13, r25	; 0x0d
    633c:	96 01       	movw	r18, r12
    633e:	26 19       	sub	r18, r6
    6340:	37 09       	sbc	r19, r7
    6342:	28 0d       	add	r18, r8
    6344:	39 1d       	adc	r19, r9
    6346:	81 2f       	mov	r24, r17
    6348:	90 e0       	ldi	r25, 0x00	; 0
    634a:	ee 27       	eor	r30, r30
    634c:	ff 27       	eor	r31, r31
    634e:	e8 1b       	sub	r30, r24
    6350:	f9 0b       	sbc	r31, r25
    6352:	ee 87       	std	Y+14, r30	; 0x0e
    6354:	ff 87       	std	Y+15, r31	; 0x0f
    6356:	ff ef       	ldi	r31, 0xFF	; 255
    6358:	6f 16       	cp	r6, r31
    635a:	7f 06       	cpc	r7, r31
    635c:	61 f4       	brne	.+24     	; 0x6376 <vfprintf+0x35c>
    635e:	b7 01       	movw	r22, r14
    6360:	8e e2       	ldi	r24, 0x2E	; 46
    6362:	90 e0       	ldi	r25, 0x00	; 0
    6364:	2b 8b       	std	Y+19, r18	; 0x13
    6366:	3a 8b       	std	Y+18, r19	; 0x12
    6368:	48 8b       	std	Y+16, r20	; 0x10
    636a:	59 8b       	std	Y+17, r21	; 0x11
    636c:	8a d3       	rcall	.+1812   	; 0x6a82 <fputc>
    636e:	59 89       	ldd	r21, Y+17	; 0x11
    6370:	48 89       	ldd	r20, Y+16	; 0x10
    6372:	3a 89       	ldd	r19, Y+18	; 0x12
    6374:	2b 89       	ldd	r18, Y+19	; 0x13
    6376:	c6 14       	cp	r12, r6
    6378:	d7 04       	cpc	r13, r7
    637a:	54 f0       	brlt	.+20     	; 0x6390 <vfprintf+0x376>
    637c:	6c 85       	ldd	r22, Y+12	; 0x0c
    637e:	7d 85       	ldd	r23, Y+13	; 0x0d
    6380:	66 15       	cp	r22, r6
    6382:	77 05       	cpc	r23, r7
    6384:	2c f4       	brge	.+10     	; 0x6390 <vfprintf+0x376>
    6386:	f9 01       	movw	r30, r18
    6388:	e4 0f       	add	r30, r20
    638a:	f5 1f       	adc	r31, r21
    638c:	81 81       	ldd	r24, Z+1	; 0x01
    638e:	01 c0       	rjmp	.+2      	; 0x6392 <vfprintf+0x378>
    6390:	80 e3       	ldi	r24, 0x30	; 48
    6392:	71 e0       	ldi	r23, 0x01	; 1
    6394:	67 1a       	sub	r6, r23
    6396:	71 08       	sbc	r7, r1
    6398:	4f 5f       	subi	r20, 0xFF	; 255
    639a:	5f 4f       	sbci	r21, 0xFF	; 255
    639c:	ee 85       	ldd	r30, Y+14	; 0x0e
    639e:	ff 85       	ldd	r31, Y+15	; 0x0f
    63a0:	6e 16       	cp	r6, r30
    63a2:	7f 06       	cpc	r7, r31
    63a4:	64 f0       	brlt	.+24     	; 0x63be <vfprintf+0x3a4>
    63a6:	b7 01       	movw	r22, r14
    63a8:	90 e0       	ldi	r25, 0x00	; 0
    63aa:	2b 8b       	std	Y+19, r18	; 0x13
    63ac:	3a 8b       	std	Y+18, r19	; 0x12
    63ae:	48 8b       	std	Y+16, r20	; 0x10
    63b0:	59 8b       	std	Y+17, r21	; 0x11
    63b2:	67 d3       	rcall	.+1742   	; 0x6a82 <fputc>
    63b4:	2b 89       	ldd	r18, Y+19	; 0x13
    63b6:	3a 89       	ldd	r19, Y+18	; 0x12
    63b8:	48 89       	ldd	r20, Y+16	; 0x10
    63ba:	59 89       	ldd	r21, Y+17	; 0x11
    63bc:	cc cf       	rjmp	.-104    	; 0x6356 <vfprintf+0x33c>
    63be:	6c 14       	cp	r6, r12
    63c0:	7d 04       	cpc	r7, r13
    63c2:	39 f4       	brne	.+14     	; 0x63d2 <vfprintf+0x3b8>
    63c4:	9a 81       	ldd	r25, Y+2	; 0x02
    63c6:	96 33       	cpi	r25, 0x36	; 54
    63c8:	18 f4       	brcc	.+6      	; 0x63d0 <vfprintf+0x3b6>
    63ca:	95 33       	cpi	r25, 0x35	; 53
    63cc:	11 f4       	brne	.+4      	; 0x63d2 <vfprintf+0x3b8>
    63ce:	04 ff       	sbrs	r16, 4
    63d0:	81 e3       	ldi	r24, 0x31	; 49
    63d2:	b7 01       	movw	r22, r14
    63d4:	90 e0       	ldi	r25, 0x00	; 0
    63d6:	45 c0       	rjmp	.+138    	; 0x6462 <vfprintf+0x448>
    63d8:	8a 81       	ldd	r24, Y+2	; 0x02
    63da:	81 33       	cpi	r24, 0x31	; 49
    63dc:	09 f0       	breq	.+2      	; 0x63e0 <vfprintf+0x3c6>
    63de:	0f 7e       	andi	r16, 0xEF	; 239
    63e0:	b7 01       	movw	r22, r14
    63e2:	90 e0       	ldi	r25, 0x00	; 0
    63e4:	4e d3       	rcall	.+1692   	; 0x6a82 <fputc>
    63e6:	11 11       	cpse	r17, r1
    63e8:	05 c0       	rjmp	.+10     	; 0x63f4 <vfprintf+0x3da>
    63ea:	74 fe       	sbrs	r7, 4
    63ec:	16 c0       	rjmp	.+44     	; 0x641a <vfprintf+0x400>
    63ee:	85 e4       	ldi	r24, 0x45	; 69
    63f0:	90 e0       	ldi	r25, 0x00	; 0
    63f2:	15 c0       	rjmp	.+42     	; 0x641e <vfprintf+0x404>
    63f4:	b7 01       	movw	r22, r14
    63f6:	8e e2       	ldi	r24, 0x2E	; 46
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	43 d3       	rcall	.+1670   	; 0x6a82 <fputc>
    63fc:	82 e0       	ldi	r24, 0x02	; 2
    63fe:	66 24       	eor	r6, r6
    6400:	63 94       	inc	r6
    6402:	68 0e       	add	r6, r24
    6404:	f4 01       	movw	r30, r8
    6406:	e8 0f       	add	r30, r24
    6408:	f1 1d       	adc	r31, r1
    640a:	80 81       	ld	r24, Z
    640c:	b7 01       	movw	r22, r14
    640e:	90 e0       	ldi	r25, 0x00	; 0
    6410:	38 d3       	rcall	.+1648   	; 0x6a82 <fputc>
    6412:	11 50       	subi	r17, 0x01	; 1
    6414:	51 f3       	breq	.-44     	; 0x63ea <vfprintf+0x3d0>
    6416:	86 2d       	mov	r24, r6
    6418:	f2 cf       	rjmp	.-28     	; 0x63fe <vfprintf+0x3e4>
    641a:	85 e6       	ldi	r24, 0x65	; 101
    641c:	90 e0       	ldi	r25, 0x00	; 0
    641e:	b7 01       	movw	r22, r14
    6420:	30 d3       	rcall	.+1632   	; 0x6a82 <fputc>
    6422:	d7 fc       	sbrc	r13, 7
    6424:	05 c0       	rjmp	.+10     	; 0x6430 <vfprintf+0x416>
    6426:	c1 14       	cp	r12, r1
    6428:	d1 04       	cpc	r13, r1
    642a:	39 f4       	brne	.+14     	; 0x643a <vfprintf+0x420>
    642c:	04 ff       	sbrs	r16, 4
    642e:	05 c0       	rjmp	.+10     	; 0x643a <vfprintf+0x420>
    6430:	d1 94       	neg	r13
    6432:	c1 94       	neg	r12
    6434:	d1 08       	sbc	r13, r1
    6436:	8d e2       	ldi	r24, 0x2D	; 45
    6438:	01 c0       	rjmp	.+2      	; 0x643c <vfprintf+0x422>
    643a:	8b e2       	ldi	r24, 0x2B	; 43
    643c:	b7 01       	movw	r22, r14
    643e:	90 e0       	ldi	r25, 0x00	; 0
    6440:	20 d3       	rcall	.+1600   	; 0x6a82 <fputc>
    6442:	80 e3       	ldi	r24, 0x30	; 48
    6444:	6a e0       	ldi	r22, 0x0A	; 10
    6446:	c6 16       	cp	r12, r22
    6448:	d1 04       	cpc	r13, r1
    644a:	2c f0       	brlt	.+10     	; 0x6456 <vfprintf+0x43c>
    644c:	8f 5f       	subi	r24, 0xFF	; 255
    644e:	fa e0       	ldi	r31, 0x0A	; 10
    6450:	cf 1a       	sub	r12, r31
    6452:	d1 08       	sbc	r13, r1
    6454:	f7 cf       	rjmp	.-18     	; 0x6444 <vfprintf+0x42a>
    6456:	b7 01       	movw	r22, r14
    6458:	90 e0       	ldi	r25, 0x00	; 0
    645a:	13 d3       	rcall	.+1574   	; 0x6a82 <fputc>
    645c:	b7 01       	movw	r22, r14
    645e:	c6 01       	movw	r24, r12
    6460:	c0 96       	adiw	r24, 0x30	; 48
    6462:	0f d3       	rcall	.+1566   	; 0x6a82 <fputc>
    6464:	36 c1       	rjmp	.+620    	; 0x66d2 <vfprintf+0x6b8>
    6466:	83 36       	cpi	r24, 0x63	; 99
    6468:	31 f0       	breq	.+12     	; 0x6476 <vfprintf+0x45c>
    646a:	83 37       	cpi	r24, 0x73	; 115
    646c:	79 f0       	breq	.+30     	; 0x648c <vfprintf+0x472>
    646e:	83 35       	cpi	r24, 0x53	; 83
    6470:	09 f0       	breq	.+2      	; 0x6474 <vfprintf+0x45a>
    6472:	54 c0       	rjmp	.+168    	; 0x651c <vfprintf+0x502>
    6474:	20 c0       	rjmp	.+64     	; 0x64b6 <vfprintf+0x49c>
    6476:	56 01       	movw	r10, r12
    6478:	72 e0       	ldi	r23, 0x02	; 2
    647a:	a7 0e       	add	r10, r23
    647c:	b1 1c       	adc	r11, r1
    647e:	f6 01       	movw	r30, r12
    6480:	80 81       	ld	r24, Z
    6482:	89 83       	std	Y+1, r24	; 0x01
    6484:	01 e0       	ldi	r16, 0x01	; 1
    6486:	10 e0       	ldi	r17, 0x00	; 0
    6488:	64 01       	movw	r12, r8
    648a:	13 c0       	rjmp	.+38     	; 0x64b2 <vfprintf+0x498>
    648c:	56 01       	movw	r10, r12
    648e:	f2 e0       	ldi	r31, 0x02	; 2
    6490:	af 0e       	add	r10, r31
    6492:	b1 1c       	adc	r11, r1
    6494:	f6 01       	movw	r30, r12
    6496:	c0 80       	ld	r12, Z
    6498:	d1 80       	ldd	r13, Z+1	; 0x01
    649a:	26 ff       	sbrs	r18, 6
    649c:	03 c0       	rjmp	.+6      	; 0x64a4 <vfprintf+0x48a>
    649e:	61 2f       	mov	r22, r17
    64a0:	70 e0       	ldi	r23, 0x00	; 0
    64a2:	02 c0       	rjmp	.+4      	; 0x64a8 <vfprintf+0x48e>
    64a4:	6f ef       	ldi	r22, 0xFF	; 255
    64a6:	7f ef       	ldi	r23, 0xFF	; 255
    64a8:	c6 01       	movw	r24, r12
    64aa:	2b 8b       	std	Y+19, r18	; 0x13
    64ac:	df d2       	rcall	.+1470   	; 0x6a6c <strnlen>
    64ae:	8c 01       	movw	r16, r24
    64b0:	2b 89       	ldd	r18, Y+19	; 0x13
    64b2:	2f 77       	andi	r18, 0x7F	; 127
    64b4:	14 c0       	rjmp	.+40     	; 0x64de <vfprintf+0x4c4>
    64b6:	56 01       	movw	r10, r12
    64b8:	f2 e0       	ldi	r31, 0x02	; 2
    64ba:	af 0e       	add	r10, r31
    64bc:	b1 1c       	adc	r11, r1
    64be:	f6 01       	movw	r30, r12
    64c0:	c0 80       	ld	r12, Z
    64c2:	d1 80       	ldd	r13, Z+1	; 0x01
    64c4:	26 ff       	sbrs	r18, 6
    64c6:	03 c0       	rjmp	.+6      	; 0x64ce <vfprintf+0x4b4>
    64c8:	61 2f       	mov	r22, r17
    64ca:	70 e0       	ldi	r23, 0x00	; 0
    64cc:	02 c0       	rjmp	.+4      	; 0x64d2 <vfprintf+0x4b8>
    64ce:	6f ef       	ldi	r22, 0xFF	; 255
    64d0:	7f ef       	ldi	r23, 0xFF	; 255
    64d2:	c6 01       	movw	r24, r12
    64d4:	2b 8b       	std	Y+19, r18	; 0x13
    64d6:	b8 d2       	rcall	.+1392   	; 0x6a48 <strnlen_P>
    64d8:	8c 01       	movw	r16, r24
    64da:	2b 89       	ldd	r18, Y+19	; 0x13
    64dc:	20 68       	ori	r18, 0x80	; 128
    64de:	72 2e       	mov	r7, r18
    64e0:	23 fd       	sbrc	r18, 3
    64e2:	18 c0       	rjmp	.+48     	; 0x6514 <vfprintf+0x4fa>
    64e4:	85 2d       	mov	r24, r5
    64e6:	90 e0       	ldi	r25, 0x00	; 0
    64e8:	08 17       	cp	r16, r24
    64ea:	19 07       	cpc	r17, r25
    64ec:	98 f4       	brcc	.+38     	; 0x6514 <vfprintf+0x4fa>
    64ee:	b7 01       	movw	r22, r14
    64f0:	80 e2       	ldi	r24, 0x20	; 32
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	c6 d2       	rcall	.+1420   	; 0x6a82 <fputc>
    64f6:	5a 94       	dec	r5
    64f8:	f5 cf       	rjmp	.-22     	; 0x64e4 <vfprintf+0x4ca>
    64fa:	f6 01       	movw	r30, r12
    64fc:	77 fc       	sbrc	r7, 7
    64fe:	85 91       	lpm	r24, Z+
    6500:	77 fe       	sbrs	r7, 7
    6502:	81 91       	ld	r24, Z+
    6504:	6f 01       	movw	r12, r30
    6506:	b7 01       	movw	r22, r14
    6508:	90 e0       	ldi	r25, 0x00	; 0
    650a:	bb d2       	rcall	.+1398   	; 0x6a82 <fputc>
    650c:	51 10       	cpse	r5, r1
    650e:	5a 94       	dec	r5
    6510:	01 50       	subi	r16, 0x01	; 1
    6512:	11 09       	sbc	r17, r1
    6514:	01 15       	cp	r16, r1
    6516:	11 05       	cpc	r17, r1
    6518:	81 f7       	brne	.-32     	; 0x64fa <vfprintf+0x4e0>
    651a:	db c0       	rjmp	.+438    	; 0x66d2 <vfprintf+0x6b8>
    651c:	84 36       	cpi	r24, 0x64	; 100
    651e:	11 f0       	breq	.+4      	; 0x6524 <vfprintf+0x50a>
    6520:	89 36       	cpi	r24, 0x69	; 105
    6522:	49 f5       	brne	.+82     	; 0x6576 <vfprintf+0x55c>
    6524:	56 01       	movw	r10, r12
    6526:	27 ff       	sbrs	r18, 7
    6528:	09 c0       	rjmp	.+18     	; 0x653c <vfprintf+0x522>
    652a:	f4 e0       	ldi	r31, 0x04	; 4
    652c:	af 0e       	add	r10, r31
    652e:	b1 1c       	adc	r11, r1
    6530:	f6 01       	movw	r30, r12
    6532:	60 81       	ld	r22, Z
    6534:	71 81       	ldd	r23, Z+1	; 0x01
    6536:	82 81       	ldd	r24, Z+2	; 0x02
    6538:	93 81       	ldd	r25, Z+3	; 0x03
    653a:	0a c0       	rjmp	.+20     	; 0x6550 <vfprintf+0x536>
    653c:	f2 e0       	ldi	r31, 0x02	; 2
    653e:	af 0e       	add	r10, r31
    6540:	b1 1c       	adc	r11, r1
    6542:	f6 01       	movw	r30, r12
    6544:	60 81       	ld	r22, Z
    6546:	71 81       	ldd	r23, Z+1	; 0x01
    6548:	88 27       	eor	r24, r24
    654a:	77 fd       	sbrc	r23, 7
    654c:	80 95       	com	r24
    654e:	98 2f       	mov	r25, r24
    6550:	02 2f       	mov	r16, r18
    6552:	0f 76       	andi	r16, 0x6F	; 111
    6554:	97 ff       	sbrs	r25, 7
    6556:	08 c0       	rjmp	.+16     	; 0x6568 <vfprintf+0x54e>
    6558:	90 95       	com	r25
    655a:	80 95       	com	r24
    655c:	70 95       	com	r23
    655e:	61 95       	neg	r22
    6560:	7f 4f       	sbci	r23, 0xFF	; 255
    6562:	8f 4f       	sbci	r24, 0xFF	; 255
    6564:	9f 4f       	sbci	r25, 0xFF	; 255
    6566:	00 68       	ori	r16, 0x80	; 128
    6568:	2a e0       	ldi	r18, 0x0A	; 10
    656a:	30 e0       	ldi	r19, 0x00	; 0
    656c:	a4 01       	movw	r20, r8
    656e:	bb d2       	rcall	.+1398   	; 0x6ae6 <__ultoa_invert>
    6570:	c8 2e       	mov	r12, r24
    6572:	c8 18       	sub	r12, r8
    6574:	3d c0       	rjmp	.+122    	; 0x65f0 <vfprintf+0x5d6>
    6576:	02 2f       	mov	r16, r18
    6578:	85 37       	cpi	r24, 0x75	; 117
    657a:	21 f4       	brne	.+8      	; 0x6584 <vfprintf+0x56a>
    657c:	0f 7e       	andi	r16, 0xEF	; 239
    657e:	2a e0       	ldi	r18, 0x0A	; 10
    6580:	30 e0       	ldi	r19, 0x00	; 0
    6582:	1d c0       	rjmp	.+58     	; 0x65be <vfprintf+0x5a4>
    6584:	09 7f       	andi	r16, 0xF9	; 249
    6586:	8f 36       	cpi	r24, 0x6F	; 111
    6588:	91 f0       	breq	.+36     	; 0x65ae <vfprintf+0x594>
    658a:	18 f4       	brcc	.+6      	; 0x6592 <vfprintf+0x578>
    658c:	88 35       	cpi	r24, 0x58	; 88
    658e:	59 f0       	breq	.+22     	; 0x65a6 <vfprintf+0x58c>
    6590:	a9 c0       	rjmp	.+338    	; 0x66e4 <vfprintf+0x6ca>
    6592:	80 37       	cpi	r24, 0x70	; 112
    6594:	19 f0       	breq	.+6      	; 0x659c <vfprintf+0x582>
    6596:	88 37       	cpi	r24, 0x78	; 120
    6598:	11 f0       	breq	.+4      	; 0x659e <vfprintf+0x584>
    659a:	a4 c0       	rjmp	.+328    	; 0x66e4 <vfprintf+0x6ca>
    659c:	00 61       	ori	r16, 0x10	; 16
    659e:	04 ff       	sbrs	r16, 4
    65a0:	09 c0       	rjmp	.+18     	; 0x65b4 <vfprintf+0x59a>
    65a2:	04 60       	ori	r16, 0x04	; 4
    65a4:	07 c0       	rjmp	.+14     	; 0x65b4 <vfprintf+0x59a>
    65a6:	24 ff       	sbrs	r18, 4
    65a8:	08 c0       	rjmp	.+16     	; 0x65ba <vfprintf+0x5a0>
    65aa:	06 60       	ori	r16, 0x06	; 6
    65ac:	06 c0       	rjmp	.+12     	; 0x65ba <vfprintf+0x5a0>
    65ae:	28 e0       	ldi	r18, 0x08	; 8
    65b0:	30 e0       	ldi	r19, 0x00	; 0
    65b2:	05 c0       	rjmp	.+10     	; 0x65be <vfprintf+0x5a4>
    65b4:	20 e1       	ldi	r18, 0x10	; 16
    65b6:	30 e0       	ldi	r19, 0x00	; 0
    65b8:	02 c0       	rjmp	.+4      	; 0x65be <vfprintf+0x5a4>
    65ba:	20 e1       	ldi	r18, 0x10	; 16
    65bc:	32 e0       	ldi	r19, 0x02	; 2
    65be:	56 01       	movw	r10, r12
    65c0:	07 ff       	sbrs	r16, 7
    65c2:	09 c0       	rjmp	.+18     	; 0x65d6 <vfprintf+0x5bc>
    65c4:	f4 e0       	ldi	r31, 0x04	; 4
    65c6:	af 0e       	add	r10, r31
    65c8:	b1 1c       	adc	r11, r1
    65ca:	f6 01       	movw	r30, r12
    65cc:	60 81       	ld	r22, Z
    65ce:	71 81       	ldd	r23, Z+1	; 0x01
    65d0:	82 81       	ldd	r24, Z+2	; 0x02
    65d2:	93 81       	ldd	r25, Z+3	; 0x03
    65d4:	08 c0       	rjmp	.+16     	; 0x65e6 <vfprintf+0x5cc>
    65d6:	f2 e0       	ldi	r31, 0x02	; 2
    65d8:	af 0e       	add	r10, r31
    65da:	b1 1c       	adc	r11, r1
    65dc:	f6 01       	movw	r30, r12
    65de:	60 81       	ld	r22, Z
    65e0:	71 81       	ldd	r23, Z+1	; 0x01
    65e2:	80 e0       	ldi	r24, 0x00	; 0
    65e4:	90 e0       	ldi	r25, 0x00	; 0
    65e6:	a4 01       	movw	r20, r8
    65e8:	7e d2       	rcall	.+1276   	; 0x6ae6 <__ultoa_invert>
    65ea:	c8 2e       	mov	r12, r24
    65ec:	c8 18       	sub	r12, r8
    65ee:	0f 77       	andi	r16, 0x7F	; 127
    65f0:	06 ff       	sbrs	r16, 6
    65f2:	0b c0       	rjmp	.+22     	; 0x660a <vfprintf+0x5f0>
    65f4:	20 2f       	mov	r18, r16
    65f6:	2e 7f       	andi	r18, 0xFE	; 254
    65f8:	c1 16       	cp	r12, r17
    65fa:	50 f4       	brcc	.+20     	; 0x6610 <vfprintf+0x5f6>
    65fc:	04 ff       	sbrs	r16, 4
    65fe:	0a c0       	rjmp	.+20     	; 0x6614 <vfprintf+0x5fa>
    6600:	02 fd       	sbrc	r16, 2
    6602:	08 c0       	rjmp	.+16     	; 0x6614 <vfprintf+0x5fa>
    6604:	20 2f       	mov	r18, r16
    6606:	2e 7e       	andi	r18, 0xEE	; 238
    6608:	05 c0       	rjmp	.+10     	; 0x6614 <vfprintf+0x5fa>
    660a:	dc 2c       	mov	r13, r12
    660c:	20 2f       	mov	r18, r16
    660e:	03 c0       	rjmp	.+6      	; 0x6616 <vfprintf+0x5fc>
    6610:	dc 2c       	mov	r13, r12
    6612:	01 c0       	rjmp	.+2      	; 0x6616 <vfprintf+0x5fc>
    6614:	d1 2e       	mov	r13, r17
    6616:	24 ff       	sbrs	r18, 4
    6618:	0d c0       	rjmp	.+26     	; 0x6634 <vfprintf+0x61a>
    661a:	fe 01       	movw	r30, r28
    661c:	ec 0d       	add	r30, r12
    661e:	f1 1d       	adc	r31, r1
    6620:	80 81       	ld	r24, Z
    6622:	80 33       	cpi	r24, 0x30	; 48
    6624:	11 f4       	brne	.+4      	; 0x662a <vfprintf+0x610>
    6626:	29 7e       	andi	r18, 0xE9	; 233
    6628:	09 c0       	rjmp	.+18     	; 0x663c <vfprintf+0x622>
    662a:	22 ff       	sbrs	r18, 2
    662c:	06 c0       	rjmp	.+12     	; 0x663a <vfprintf+0x620>
    662e:	d3 94       	inc	r13
    6630:	d3 94       	inc	r13
    6632:	04 c0       	rjmp	.+8      	; 0x663c <vfprintf+0x622>
    6634:	82 2f       	mov	r24, r18
    6636:	86 78       	andi	r24, 0x86	; 134
    6638:	09 f0       	breq	.+2      	; 0x663c <vfprintf+0x622>
    663a:	d3 94       	inc	r13
    663c:	23 fd       	sbrc	r18, 3
    663e:	12 c0       	rjmp	.+36     	; 0x6664 <vfprintf+0x64a>
    6640:	20 ff       	sbrs	r18, 0
    6642:	06 c0       	rjmp	.+12     	; 0x6650 <vfprintf+0x636>
    6644:	1c 2d       	mov	r17, r12
    6646:	d5 14       	cp	r13, r5
    6648:	18 f4       	brcc	.+6      	; 0x6650 <vfprintf+0x636>
    664a:	15 0d       	add	r17, r5
    664c:	1d 19       	sub	r17, r13
    664e:	d5 2c       	mov	r13, r5
    6650:	d5 14       	cp	r13, r5
    6652:	60 f4       	brcc	.+24     	; 0x666c <vfprintf+0x652>
    6654:	b7 01       	movw	r22, r14
    6656:	80 e2       	ldi	r24, 0x20	; 32
    6658:	90 e0       	ldi	r25, 0x00	; 0
    665a:	2b 8b       	std	Y+19, r18	; 0x13
    665c:	12 d2       	rcall	.+1060   	; 0x6a82 <fputc>
    665e:	d3 94       	inc	r13
    6660:	2b 89       	ldd	r18, Y+19	; 0x13
    6662:	f6 cf       	rjmp	.-20     	; 0x6650 <vfprintf+0x636>
    6664:	d5 14       	cp	r13, r5
    6666:	10 f4       	brcc	.+4      	; 0x666c <vfprintf+0x652>
    6668:	5d 18       	sub	r5, r13
    666a:	01 c0       	rjmp	.+2      	; 0x666e <vfprintf+0x654>
    666c:	51 2c       	mov	r5, r1
    666e:	24 ff       	sbrs	r18, 4
    6670:	11 c0       	rjmp	.+34     	; 0x6694 <vfprintf+0x67a>
    6672:	b7 01       	movw	r22, r14
    6674:	80 e3       	ldi	r24, 0x30	; 48
    6676:	90 e0       	ldi	r25, 0x00	; 0
    6678:	2b 8b       	std	Y+19, r18	; 0x13
    667a:	03 d2       	rcall	.+1030   	; 0x6a82 <fputc>
    667c:	2b 89       	ldd	r18, Y+19	; 0x13
    667e:	22 ff       	sbrs	r18, 2
    6680:	16 c0       	rjmp	.+44     	; 0x66ae <vfprintf+0x694>
    6682:	21 ff       	sbrs	r18, 1
    6684:	03 c0       	rjmp	.+6      	; 0x668c <vfprintf+0x672>
    6686:	88 e5       	ldi	r24, 0x58	; 88
    6688:	90 e0       	ldi	r25, 0x00	; 0
    668a:	02 c0       	rjmp	.+4      	; 0x6690 <vfprintf+0x676>
    668c:	88 e7       	ldi	r24, 0x78	; 120
    668e:	90 e0       	ldi	r25, 0x00	; 0
    6690:	b7 01       	movw	r22, r14
    6692:	0c c0       	rjmp	.+24     	; 0x66ac <vfprintf+0x692>
    6694:	82 2f       	mov	r24, r18
    6696:	86 78       	andi	r24, 0x86	; 134
    6698:	51 f0       	breq	.+20     	; 0x66ae <vfprintf+0x694>
    669a:	21 fd       	sbrc	r18, 1
    669c:	02 c0       	rjmp	.+4      	; 0x66a2 <vfprintf+0x688>
    669e:	80 e2       	ldi	r24, 0x20	; 32
    66a0:	01 c0       	rjmp	.+2      	; 0x66a4 <vfprintf+0x68a>
    66a2:	8b e2       	ldi	r24, 0x2B	; 43
    66a4:	27 fd       	sbrc	r18, 7
    66a6:	8d e2       	ldi	r24, 0x2D	; 45
    66a8:	b7 01       	movw	r22, r14
    66aa:	90 e0       	ldi	r25, 0x00	; 0
    66ac:	ea d1       	rcall	.+980    	; 0x6a82 <fputc>
    66ae:	c1 16       	cp	r12, r17
    66b0:	30 f4       	brcc	.+12     	; 0x66be <vfprintf+0x6a4>
    66b2:	b7 01       	movw	r22, r14
    66b4:	80 e3       	ldi	r24, 0x30	; 48
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	e4 d1       	rcall	.+968    	; 0x6a82 <fputc>
    66ba:	11 50       	subi	r17, 0x01	; 1
    66bc:	f8 cf       	rjmp	.-16     	; 0x66ae <vfprintf+0x694>
    66be:	ca 94       	dec	r12
    66c0:	f4 01       	movw	r30, r8
    66c2:	ec 0d       	add	r30, r12
    66c4:	f1 1d       	adc	r31, r1
    66c6:	80 81       	ld	r24, Z
    66c8:	b7 01       	movw	r22, r14
    66ca:	90 e0       	ldi	r25, 0x00	; 0
    66cc:	da d1       	rcall	.+948    	; 0x6a82 <fputc>
    66ce:	c1 10       	cpse	r12, r1
    66d0:	f6 cf       	rjmp	.-20     	; 0x66be <vfprintf+0x6a4>
    66d2:	55 20       	and	r5, r5
    66d4:	09 f4       	brne	.+2      	; 0x66d8 <vfprintf+0x6be>
    66d6:	dd cc       	rjmp	.-1606   	; 0x6092 <vfprintf+0x78>
    66d8:	b7 01       	movw	r22, r14
    66da:	80 e2       	ldi	r24, 0x20	; 32
    66dc:	90 e0       	ldi	r25, 0x00	; 0
    66de:	d1 d1       	rcall	.+930    	; 0x6a82 <fputc>
    66e0:	5a 94       	dec	r5
    66e2:	f7 cf       	rjmp	.-18     	; 0x66d2 <vfprintf+0x6b8>
    66e4:	f7 01       	movw	r30, r14
    66e6:	86 81       	ldd	r24, Z+6	; 0x06
    66e8:	97 81       	ldd	r25, Z+7	; 0x07
    66ea:	02 c0       	rjmp	.+4      	; 0x66f0 <vfprintf+0x6d6>
    66ec:	8f ef       	ldi	r24, 0xFF	; 255
    66ee:	9f ef       	ldi	r25, 0xFF	; 255
    66f0:	63 96       	adiw	r28, 0x13	; 19
    66f2:	cd bf       	out	0x3d, r28	; 61
    66f4:	de bf       	out	0x3e, r29	; 62
    66f6:	df 91       	pop	r29
    66f8:	cf 91       	pop	r28
    66fa:	1f 91       	pop	r17
    66fc:	0f 91       	pop	r16
    66fe:	ff 90       	pop	r15
    6700:	ef 90       	pop	r14
    6702:	df 90       	pop	r13
    6704:	cf 90       	pop	r12
    6706:	bf 90       	pop	r11
    6708:	af 90       	pop	r10
    670a:	9f 90       	pop	r9
    670c:	8f 90       	pop	r8
    670e:	7f 90       	pop	r7
    6710:	6f 90       	pop	r6
    6712:	5f 90       	pop	r5
    6714:	4f 90       	pop	r4
    6716:	3f 90       	pop	r3
    6718:	2f 90       	pop	r2
    671a:	08 95       	ret

0000671c <__divmodhi4>:
    671c:	97 fb       	bst	r25, 7
    671e:	07 2e       	mov	r0, r23
    6720:	16 f4       	brtc	.+4      	; 0x6726 <__divmodhi4+0xa>
    6722:	00 94       	com	r0
    6724:	06 d0       	rcall	.+12     	; 0x6732 <__divmodhi4_neg1>
    6726:	77 fd       	sbrc	r23, 7
    6728:	08 d0       	rcall	.+16     	; 0x673a <__divmodhi4_neg2>
    672a:	42 d0       	rcall	.+132    	; 0x67b0 <__udivmodhi4>
    672c:	07 fc       	sbrc	r0, 7
    672e:	05 d0       	rcall	.+10     	; 0x673a <__divmodhi4_neg2>
    6730:	3e f4       	brtc	.+14     	; 0x6740 <__divmodhi4_exit>

00006732 <__divmodhi4_neg1>:
    6732:	90 95       	com	r25
    6734:	81 95       	neg	r24
    6736:	9f 4f       	sbci	r25, 0xFF	; 255
    6738:	08 95       	ret

0000673a <__divmodhi4_neg2>:
    673a:	70 95       	com	r23
    673c:	61 95       	neg	r22
    673e:	7f 4f       	sbci	r23, 0xFF	; 255

00006740 <__divmodhi4_exit>:
    6740:	08 95       	ret

00006742 <__udivmodsi4>:
    6742:	a1 e2       	ldi	r26, 0x21	; 33
    6744:	1a 2e       	mov	r1, r26
    6746:	aa 1b       	sub	r26, r26
    6748:	bb 1b       	sub	r27, r27
    674a:	fd 01       	movw	r30, r26
    674c:	0d c0       	rjmp	.+26     	; 0x6768 <__udivmodsi4_ep>

0000674e <__udivmodsi4_loop>:
    674e:	aa 1f       	adc	r26, r26
    6750:	bb 1f       	adc	r27, r27
    6752:	ee 1f       	adc	r30, r30
    6754:	ff 1f       	adc	r31, r31
    6756:	a2 17       	cp	r26, r18
    6758:	b3 07       	cpc	r27, r19
    675a:	e4 07       	cpc	r30, r20
    675c:	f5 07       	cpc	r31, r21
    675e:	20 f0       	brcs	.+8      	; 0x6768 <__udivmodsi4_ep>
    6760:	a2 1b       	sub	r26, r18
    6762:	b3 0b       	sbc	r27, r19
    6764:	e4 0b       	sbc	r30, r20
    6766:	f5 0b       	sbc	r31, r21

00006768 <__udivmodsi4_ep>:
    6768:	66 1f       	adc	r22, r22
    676a:	77 1f       	adc	r23, r23
    676c:	88 1f       	adc	r24, r24
    676e:	99 1f       	adc	r25, r25
    6770:	1a 94       	dec	r1
    6772:	69 f7       	brne	.-38     	; 0x674e <__udivmodsi4_loop>
    6774:	60 95       	com	r22
    6776:	70 95       	com	r23
    6778:	80 95       	com	r24
    677a:	90 95       	com	r25
    677c:	9b 01       	movw	r18, r22
    677e:	ac 01       	movw	r20, r24
    6780:	bd 01       	movw	r22, r26
    6782:	cf 01       	movw	r24, r30
    6784:	08 95       	ret

00006786 <__tablejump2__>:
    6786:	ee 0f       	add	r30, r30
    6788:	ff 1f       	adc	r31, r31

0000678a <__tablejump__>:
    678a:	05 90       	lpm	r0, Z+
    678c:	f4 91       	lpm	r31, Z
    678e:	e0 2d       	mov	r30, r0
    6790:	19 94       	eijmp

00006792 <__umulhisi3>:
    6792:	a2 9f       	mul	r26, r18
    6794:	b0 01       	movw	r22, r0
    6796:	b3 9f       	mul	r27, r19
    6798:	c0 01       	movw	r24, r0
    679a:	a3 9f       	mul	r26, r19
    679c:	70 0d       	add	r23, r0
    679e:	81 1d       	adc	r24, r1
    67a0:	11 24       	eor	r1, r1
    67a2:	91 1d       	adc	r25, r1
    67a4:	b2 9f       	mul	r27, r18
    67a6:	70 0d       	add	r23, r0
    67a8:	81 1d       	adc	r24, r1
    67aa:	11 24       	eor	r1, r1
    67ac:	91 1d       	adc	r25, r1
    67ae:	08 95       	ret

000067b0 <__udivmodhi4>:
    67b0:	aa 1b       	sub	r26, r26
    67b2:	bb 1b       	sub	r27, r27
    67b4:	51 e1       	ldi	r21, 0x11	; 17
    67b6:	07 c0       	rjmp	.+14     	; 0x67c6 <__udivmodhi4_ep>

000067b8 <__udivmodhi4_loop>:
    67b8:	aa 1f       	adc	r26, r26
    67ba:	bb 1f       	adc	r27, r27
    67bc:	a6 17       	cp	r26, r22
    67be:	b7 07       	cpc	r27, r23
    67c0:	10 f0       	brcs	.+4      	; 0x67c6 <__udivmodhi4_ep>
    67c2:	a6 1b       	sub	r26, r22
    67c4:	b7 0b       	sbc	r27, r23

000067c6 <__udivmodhi4_ep>:
    67c6:	88 1f       	adc	r24, r24
    67c8:	99 1f       	adc	r25, r25
    67ca:	5a 95       	dec	r21
    67cc:	a9 f7       	brne	.-22     	; 0x67b8 <__udivmodhi4_loop>
    67ce:	80 95       	com	r24
    67d0:	90 95       	com	r25
    67d2:	bc 01       	movw	r22, r24
    67d4:	cd 01       	movw	r24, r26
    67d6:	08 95       	ret

000067d8 <do_rand>:
    67d8:	8f 92       	push	r8
    67da:	9f 92       	push	r9
    67dc:	af 92       	push	r10
    67de:	bf 92       	push	r11
    67e0:	cf 92       	push	r12
    67e2:	df 92       	push	r13
    67e4:	ef 92       	push	r14
    67e6:	ff 92       	push	r15
    67e8:	cf 93       	push	r28
    67ea:	df 93       	push	r29
    67ec:	ec 01       	movw	r28, r24
    67ee:	68 81       	ld	r22, Y
    67f0:	79 81       	ldd	r23, Y+1	; 0x01
    67f2:	8a 81       	ldd	r24, Y+2	; 0x02
    67f4:	9b 81       	ldd	r25, Y+3	; 0x03
    67f6:	61 15       	cp	r22, r1
    67f8:	71 05       	cpc	r23, r1
    67fa:	81 05       	cpc	r24, r1
    67fc:	91 05       	cpc	r25, r1
    67fe:	21 f4       	brne	.+8      	; 0x6808 <do_rand+0x30>
    6800:	64 e2       	ldi	r22, 0x24	; 36
    6802:	79 ed       	ldi	r23, 0xD9	; 217
    6804:	8b e5       	ldi	r24, 0x5B	; 91
    6806:	97 e0       	ldi	r25, 0x07	; 7
    6808:	2d e1       	ldi	r18, 0x1D	; 29
    680a:	33 ef       	ldi	r19, 0xF3	; 243
    680c:	41 e0       	ldi	r20, 0x01	; 1
    680e:	50 e0       	ldi	r21, 0x00	; 0
    6810:	c8 d1       	rcall	.+912    	; 0x6ba2 <__divmodsi4>
    6812:	49 01       	movw	r8, r18
    6814:	5a 01       	movw	r10, r20
    6816:	9b 01       	movw	r18, r22
    6818:	ac 01       	movw	r20, r24
    681a:	a7 ea       	ldi	r26, 0xA7	; 167
    681c:	b1 e4       	ldi	r27, 0x41	; 65
    681e:	dd d1       	rcall	.+954    	; 0x6bda <__muluhisi3>
    6820:	6b 01       	movw	r12, r22
    6822:	7c 01       	movw	r14, r24
    6824:	ac ee       	ldi	r26, 0xEC	; 236
    6826:	b4 ef       	ldi	r27, 0xF4	; 244
    6828:	a5 01       	movw	r20, r10
    682a:	94 01       	movw	r18, r8
    682c:	e2 d1       	rcall	.+964    	; 0x6bf2 <__mulohisi3>
    682e:	c6 0e       	add	r12, r22
    6830:	d7 1e       	adc	r13, r23
    6832:	e8 1e       	adc	r14, r24
    6834:	f9 1e       	adc	r15, r25
    6836:	f7 fe       	sbrs	r15, 7
    6838:	06 c0       	rjmp	.+12     	; 0x6846 <do_rand+0x6e>
    683a:	81 e0       	ldi	r24, 0x01	; 1
    683c:	c8 1a       	sub	r12, r24
    683e:	d1 08       	sbc	r13, r1
    6840:	e1 08       	sbc	r14, r1
    6842:	80 e8       	ldi	r24, 0x80	; 128
    6844:	f8 0a       	sbc	r15, r24
    6846:	c8 82       	st	Y, r12
    6848:	d9 82       	std	Y+1, r13	; 0x01
    684a:	ea 82       	std	Y+2, r14	; 0x02
    684c:	fb 82       	std	Y+3, r15	; 0x03
    684e:	c6 01       	movw	r24, r12
    6850:	9f 77       	andi	r25, 0x7F	; 127
    6852:	df 91       	pop	r29
    6854:	cf 91       	pop	r28
    6856:	ff 90       	pop	r15
    6858:	ef 90       	pop	r14
    685a:	df 90       	pop	r13
    685c:	cf 90       	pop	r12
    685e:	bf 90       	pop	r11
    6860:	af 90       	pop	r10
    6862:	9f 90       	pop	r9
    6864:	8f 90       	pop	r8
    6866:	08 95       	ret

00006868 <rand_r>:
    6868:	b7 cf       	rjmp	.-146    	; 0x67d8 <do_rand>

0000686a <rand>:
    686a:	86 e0       	ldi	r24, 0x06	; 6
    686c:	90 e2       	ldi	r25, 0x20	; 32
    686e:	b4 cf       	rjmp	.-152    	; 0x67d8 <do_rand>

00006870 <srand>:
    6870:	a0 e0       	ldi	r26, 0x00	; 0
    6872:	b0 e0       	ldi	r27, 0x00	; 0
    6874:	80 93 06 20 	sts	0x2006, r24
    6878:	90 93 07 20 	sts	0x2007, r25
    687c:	a0 93 08 20 	sts	0x2008, r26
    6880:	b0 93 09 20 	sts	0x2009, r27
    6884:	08 95       	ret

00006886 <__ftoa_engine>:
    6886:	28 30       	cpi	r18, 0x08	; 8
    6888:	08 f0       	brcs	.+2      	; 0x688c <__ftoa_engine+0x6>
    688a:	27 e0       	ldi	r18, 0x07	; 7
    688c:	33 27       	eor	r19, r19
    688e:	da 01       	movw	r26, r20
    6890:	99 0f       	add	r25, r25
    6892:	31 1d       	adc	r19, r1
    6894:	87 fd       	sbrc	r24, 7
    6896:	91 60       	ori	r25, 0x01	; 1
    6898:	00 96       	adiw	r24, 0x00	; 0
    689a:	61 05       	cpc	r22, r1
    689c:	71 05       	cpc	r23, r1
    689e:	39 f4       	brne	.+14     	; 0x68ae <__ftoa_engine+0x28>
    68a0:	32 60       	ori	r19, 0x02	; 2
    68a2:	2e 5f       	subi	r18, 0xFE	; 254
    68a4:	3d 93       	st	X+, r19
    68a6:	30 e3       	ldi	r19, 0x30	; 48
    68a8:	2a 95       	dec	r18
    68aa:	e1 f7       	brne	.-8      	; 0x68a4 <__ftoa_engine+0x1e>
    68ac:	08 95       	ret
    68ae:	9f 3f       	cpi	r25, 0xFF	; 255
    68b0:	30 f0       	brcs	.+12     	; 0x68be <__ftoa_engine+0x38>
    68b2:	80 38       	cpi	r24, 0x80	; 128
    68b4:	71 05       	cpc	r23, r1
    68b6:	61 05       	cpc	r22, r1
    68b8:	09 f0       	breq	.+2      	; 0x68bc <__ftoa_engine+0x36>
    68ba:	3c 5f       	subi	r19, 0xFC	; 252
    68bc:	3c 5f       	subi	r19, 0xFC	; 252
    68be:	3d 93       	st	X+, r19
    68c0:	91 30       	cpi	r25, 0x01	; 1
    68c2:	08 f0       	brcs	.+2      	; 0x68c6 <__ftoa_engine+0x40>
    68c4:	80 68       	ori	r24, 0x80	; 128
    68c6:	91 1d       	adc	r25, r1
    68c8:	df 93       	push	r29
    68ca:	cf 93       	push	r28
    68cc:	1f 93       	push	r17
    68ce:	0f 93       	push	r16
    68d0:	ff 92       	push	r15
    68d2:	ef 92       	push	r14
    68d4:	19 2f       	mov	r17, r25
    68d6:	98 7f       	andi	r25, 0xF8	; 248
    68d8:	96 95       	lsr	r25
    68da:	e9 2f       	mov	r30, r25
    68dc:	96 95       	lsr	r25
    68de:	96 95       	lsr	r25
    68e0:	e9 0f       	add	r30, r25
    68e2:	ff 27       	eor	r31, r31
    68e4:	e6 54       	subi	r30, 0x46	; 70
    68e6:	fd 4c       	sbci	r31, 0xCD	; 205
    68e8:	99 27       	eor	r25, r25
    68ea:	33 27       	eor	r19, r19
    68ec:	ee 24       	eor	r14, r14
    68ee:	ff 24       	eor	r15, r15
    68f0:	a7 01       	movw	r20, r14
    68f2:	e7 01       	movw	r28, r14
    68f4:	05 90       	lpm	r0, Z+
    68f6:	08 94       	sec
    68f8:	07 94       	ror	r0
    68fa:	28 f4       	brcc	.+10     	; 0x6906 <__ftoa_engine+0x80>
    68fc:	36 0f       	add	r19, r22
    68fe:	e7 1e       	adc	r14, r23
    6900:	f8 1e       	adc	r15, r24
    6902:	49 1f       	adc	r20, r25
    6904:	51 1d       	adc	r21, r1
    6906:	66 0f       	add	r22, r22
    6908:	77 1f       	adc	r23, r23
    690a:	88 1f       	adc	r24, r24
    690c:	99 1f       	adc	r25, r25
    690e:	06 94       	lsr	r0
    6910:	a1 f7       	brne	.-24     	; 0x68fa <__ftoa_engine+0x74>
    6912:	05 90       	lpm	r0, Z+
    6914:	07 94       	ror	r0
    6916:	28 f4       	brcc	.+10     	; 0x6922 <__ftoa_engine+0x9c>
    6918:	e7 0e       	add	r14, r23
    691a:	f8 1e       	adc	r15, r24
    691c:	49 1f       	adc	r20, r25
    691e:	56 1f       	adc	r21, r22
    6920:	c1 1d       	adc	r28, r1
    6922:	77 0f       	add	r23, r23
    6924:	88 1f       	adc	r24, r24
    6926:	99 1f       	adc	r25, r25
    6928:	66 1f       	adc	r22, r22
    692a:	06 94       	lsr	r0
    692c:	a1 f7       	brne	.-24     	; 0x6916 <__ftoa_engine+0x90>
    692e:	05 90       	lpm	r0, Z+
    6930:	07 94       	ror	r0
    6932:	28 f4       	brcc	.+10     	; 0x693e <__ftoa_engine+0xb8>
    6934:	f8 0e       	add	r15, r24
    6936:	49 1f       	adc	r20, r25
    6938:	56 1f       	adc	r21, r22
    693a:	c7 1f       	adc	r28, r23
    693c:	d1 1d       	adc	r29, r1
    693e:	88 0f       	add	r24, r24
    6940:	99 1f       	adc	r25, r25
    6942:	66 1f       	adc	r22, r22
    6944:	77 1f       	adc	r23, r23
    6946:	06 94       	lsr	r0
    6948:	a1 f7       	brne	.-24     	; 0x6932 <__ftoa_engine+0xac>
    694a:	05 90       	lpm	r0, Z+
    694c:	07 94       	ror	r0
    694e:	20 f4       	brcc	.+8      	; 0x6958 <__ftoa_engine+0xd2>
    6950:	49 0f       	add	r20, r25
    6952:	56 1f       	adc	r21, r22
    6954:	c7 1f       	adc	r28, r23
    6956:	d8 1f       	adc	r29, r24
    6958:	99 0f       	add	r25, r25
    695a:	66 1f       	adc	r22, r22
    695c:	77 1f       	adc	r23, r23
    695e:	88 1f       	adc	r24, r24
    6960:	06 94       	lsr	r0
    6962:	a9 f7       	brne	.-22     	; 0x694e <__ftoa_engine+0xc8>
    6964:	84 91       	lpm	r24, Z
    6966:	10 95       	com	r17
    6968:	17 70       	andi	r17, 0x07	; 7
    696a:	41 f0       	breq	.+16     	; 0x697c <__ftoa_engine+0xf6>
    696c:	d6 95       	lsr	r29
    696e:	c7 95       	ror	r28
    6970:	57 95       	ror	r21
    6972:	47 95       	ror	r20
    6974:	f7 94       	ror	r15
    6976:	e7 94       	ror	r14
    6978:	1a 95       	dec	r17
    697a:	c1 f7       	brne	.-16     	; 0x696c <__ftoa_engine+0xe6>
    697c:	e0 e6       	ldi	r30, 0x60	; 96
    697e:	f2 e3       	ldi	r31, 0x32	; 50
    6980:	68 94       	set
    6982:	15 90       	lpm	r1, Z+
    6984:	15 91       	lpm	r17, Z+
    6986:	35 91       	lpm	r19, Z+
    6988:	65 91       	lpm	r22, Z+
    698a:	95 91       	lpm	r25, Z+
    698c:	05 90       	lpm	r0, Z+
    698e:	7f e2       	ldi	r23, 0x2F	; 47
    6990:	73 95       	inc	r23
    6992:	e1 18       	sub	r14, r1
    6994:	f1 0a       	sbc	r15, r17
    6996:	43 0b       	sbc	r20, r19
    6998:	56 0b       	sbc	r21, r22
    699a:	c9 0b       	sbc	r28, r25
    699c:	d0 09       	sbc	r29, r0
    699e:	c0 f7       	brcc	.-16     	; 0x6990 <__ftoa_engine+0x10a>
    69a0:	e1 0c       	add	r14, r1
    69a2:	f1 1e       	adc	r15, r17
    69a4:	43 1f       	adc	r20, r19
    69a6:	56 1f       	adc	r21, r22
    69a8:	c9 1f       	adc	r28, r25
    69aa:	d0 1d       	adc	r29, r0
    69ac:	7e f4       	brtc	.+30     	; 0x69cc <__ftoa_engine+0x146>
    69ae:	70 33       	cpi	r23, 0x30	; 48
    69b0:	11 f4       	brne	.+4      	; 0x69b6 <__ftoa_engine+0x130>
    69b2:	8a 95       	dec	r24
    69b4:	e6 cf       	rjmp	.-52     	; 0x6982 <__ftoa_engine+0xfc>
    69b6:	e8 94       	clt
    69b8:	01 50       	subi	r16, 0x01	; 1
    69ba:	30 f0       	brcs	.+12     	; 0x69c8 <__ftoa_engine+0x142>
    69bc:	08 0f       	add	r16, r24
    69be:	0a f4       	brpl	.+2      	; 0x69c2 <__ftoa_engine+0x13c>
    69c0:	00 27       	eor	r16, r16
    69c2:	02 17       	cp	r16, r18
    69c4:	08 f4       	brcc	.+2      	; 0x69c8 <__ftoa_engine+0x142>
    69c6:	20 2f       	mov	r18, r16
    69c8:	23 95       	inc	r18
    69ca:	02 2f       	mov	r16, r18
    69cc:	7a 33       	cpi	r23, 0x3A	; 58
    69ce:	28 f0       	brcs	.+10     	; 0x69da <__ftoa_engine+0x154>
    69d0:	79 e3       	ldi	r23, 0x39	; 57
    69d2:	7d 93       	st	X+, r23
    69d4:	2a 95       	dec	r18
    69d6:	e9 f7       	brne	.-6      	; 0x69d2 <__ftoa_engine+0x14c>
    69d8:	10 c0       	rjmp	.+32     	; 0x69fa <__ftoa_engine+0x174>
    69da:	7d 93       	st	X+, r23
    69dc:	2a 95       	dec	r18
    69de:	89 f6       	brne	.-94     	; 0x6982 <__ftoa_engine+0xfc>
    69e0:	06 94       	lsr	r0
    69e2:	97 95       	ror	r25
    69e4:	67 95       	ror	r22
    69e6:	37 95       	ror	r19
    69e8:	17 95       	ror	r17
    69ea:	17 94       	ror	r1
    69ec:	e1 18       	sub	r14, r1
    69ee:	f1 0a       	sbc	r15, r17
    69f0:	43 0b       	sbc	r20, r19
    69f2:	56 0b       	sbc	r21, r22
    69f4:	c9 0b       	sbc	r28, r25
    69f6:	d0 09       	sbc	r29, r0
    69f8:	98 f0       	brcs	.+38     	; 0x6a20 <__ftoa_engine+0x19a>
    69fa:	23 95       	inc	r18
    69fc:	7e 91       	ld	r23, -X
    69fe:	73 95       	inc	r23
    6a00:	7a 33       	cpi	r23, 0x3A	; 58
    6a02:	08 f0       	brcs	.+2      	; 0x6a06 <__ftoa_engine+0x180>
    6a04:	70 e3       	ldi	r23, 0x30	; 48
    6a06:	7c 93       	st	X, r23
    6a08:	20 13       	cpse	r18, r16
    6a0a:	b8 f7       	brcc	.-18     	; 0x69fa <__ftoa_engine+0x174>
    6a0c:	7e 91       	ld	r23, -X
    6a0e:	70 61       	ori	r23, 0x10	; 16
    6a10:	7d 93       	st	X+, r23
    6a12:	30 f0       	brcs	.+12     	; 0x6a20 <__ftoa_engine+0x19a>
    6a14:	83 95       	inc	r24
    6a16:	71 e3       	ldi	r23, 0x31	; 49
    6a18:	7d 93       	st	X+, r23
    6a1a:	70 e3       	ldi	r23, 0x30	; 48
    6a1c:	2a 95       	dec	r18
    6a1e:	e1 f7       	brne	.-8      	; 0x6a18 <__ftoa_engine+0x192>
    6a20:	11 24       	eor	r1, r1
    6a22:	ef 90       	pop	r14
    6a24:	ff 90       	pop	r15
    6a26:	0f 91       	pop	r16
    6a28:	1f 91       	pop	r17
    6a2a:	cf 91       	pop	r28
    6a2c:	df 91       	pop	r29
    6a2e:	99 27       	eor	r25, r25
    6a30:	87 fd       	sbrc	r24, 7
    6a32:	90 95       	com	r25
    6a34:	08 95       	ret

00006a36 <memcpy_P>:
    6a36:	fb 01       	movw	r30, r22
    6a38:	dc 01       	movw	r26, r24
    6a3a:	02 c0       	rjmp	.+4      	; 0x6a40 <memcpy_P+0xa>
    6a3c:	05 90       	lpm	r0, Z+
    6a3e:	0d 92       	st	X+, r0
    6a40:	41 50       	subi	r20, 0x01	; 1
    6a42:	50 40       	sbci	r21, 0x00	; 0
    6a44:	d8 f7       	brcc	.-10     	; 0x6a3c <memcpy_P+0x6>
    6a46:	08 95       	ret

00006a48 <strnlen_P>:
    6a48:	fc 01       	movw	r30, r24
    6a4a:	05 90       	lpm	r0, Z+
    6a4c:	61 50       	subi	r22, 0x01	; 1
    6a4e:	70 40       	sbci	r23, 0x00	; 0
    6a50:	01 10       	cpse	r0, r1
    6a52:	d8 f7       	brcc	.-10     	; 0x6a4a <strnlen_P+0x2>
    6a54:	80 95       	com	r24
    6a56:	90 95       	com	r25
    6a58:	8e 0f       	add	r24, r30
    6a5a:	9f 1f       	adc	r25, r31
    6a5c:	08 95       	ret

00006a5e <memset>:
    6a5e:	dc 01       	movw	r26, r24
    6a60:	01 c0       	rjmp	.+2      	; 0x6a64 <memset+0x6>
    6a62:	6d 93       	st	X+, r22
    6a64:	41 50       	subi	r20, 0x01	; 1
    6a66:	50 40       	sbci	r21, 0x00	; 0
    6a68:	e0 f7       	brcc	.-8      	; 0x6a62 <memset+0x4>
    6a6a:	08 95       	ret

00006a6c <strnlen>:
    6a6c:	fc 01       	movw	r30, r24
    6a6e:	61 50       	subi	r22, 0x01	; 1
    6a70:	70 40       	sbci	r23, 0x00	; 0
    6a72:	01 90       	ld	r0, Z+
    6a74:	01 10       	cpse	r0, r1
    6a76:	d8 f7       	brcc	.-10     	; 0x6a6e <strnlen+0x2>
    6a78:	80 95       	com	r24
    6a7a:	90 95       	com	r25
    6a7c:	8e 0f       	add	r24, r30
    6a7e:	9f 1f       	adc	r25, r31
    6a80:	08 95       	ret

00006a82 <fputc>:
    6a82:	0f 93       	push	r16
    6a84:	1f 93       	push	r17
    6a86:	cf 93       	push	r28
    6a88:	df 93       	push	r29
    6a8a:	18 2f       	mov	r17, r24
    6a8c:	09 2f       	mov	r16, r25
    6a8e:	eb 01       	movw	r28, r22
    6a90:	8b 81       	ldd	r24, Y+3	; 0x03
    6a92:	81 fd       	sbrc	r24, 1
    6a94:	03 c0       	rjmp	.+6      	; 0x6a9c <fputc+0x1a>
    6a96:	8f ef       	ldi	r24, 0xFF	; 255
    6a98:	9f ef       	ldi	r25, 0xFF	; 255
    6a9a:	20 c0       	rjmp	.+64     	; 0x6adc <fputc+0x5a>
    6a9c:	82 ff       	sbrs	r24, 2
    6a9e:	10 c0       	rjmp	.+32     	; 0x6ac0 <fputc+0x3e>
    6aa0:	4e 81       	ldd	r20, Y+6	; 0x06
    6aa2:	5f 81       	ldd	r21, Y+7	; 0x07
    6aa4:	2c 81       	ldd	r18, Y+4	; 0x04
    6aa6:	3d 81       	ldd	r19, Y+5	; 0x05
    6aa8:	42 17       	cp	r20, r18
    6aaa:	53 07       	cpc	r21, r19
    6aac:	7c f4       	brge	.+30     	; 0x6acc <fputc+0x4a>
    6aae:	e8 81       	ld	r30, Y
    6ab0:	f9 81       	ldd	r31, Y+1	; 0x01
    6ab2:	9f 01       	movw	r18, r30
    6ab4:	2f 5f       	subi	r18, 0xFF	; 255
    6ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    6ab8:	28 83       	st	Y, r18
    6aba:	39 83       	std	Y+1, r19	; 0x01
    6abc:	10 83       	st	Z, r17
    6abe:	06 c0       	rjmp	.+12     	; 0x6acc <fputc+0x4a>
    6ac0:	e8 85       	ldd	r30, Y+8	; 0x08
    6ac2:	f9 85       	ldd	r31, Y+9	; 0x09
    6ac4:	81 2f       	mov	r24, r17
    6ac6:	19 95       	eicall
    6ac8:	89 2b       	or	r24, r25
    6aca:	29 f7       	brne	.-54     	; 0x6a96 <fputc+0x14>
    6acc:	2e 81       	ldd	r18, Y+6	; 0x06
    6ace:	3f 81       	ldd	r19, Y+7	; 0x07
    6ad0:	2f 5f       	subi	r18, 0xFF	; 255
    6ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ad4:	2e 83       	std	Y+6, r18	; 0x06
    6ad6:	3f 83       	std	Y+7, r19	; 0x07
    6ad8:	81 2f       	mov	r24, r17
    6ada:	90 2f       	mov	r25, r16
    6adc:	df 91       	pop	r29
    6ade:	cf 91       	pop	r28
    6ae0:	1f 91       	pop	r17
    6ae2:	0f 91       	pop	r16
    6ae4:	08 95       	ret

00006ae6 <__ultoa_invert>:
    6ae6:	fa 01       	movw	r30, r20
    6ae8:	aa 27       	eor	r26, r26
    6aea:	28 30       	cpi	r18, 0x08	; 8
    6aec:	51 f1       	breq	.+84     	; 0x6b42 <__ultoa_invert+0x5c>
    6aee:	20 31       	cpi	r18, 0x10	; 16
    6af0:	81 f1       	breq	.+96     	; 0x6b52 <__ultoa_invert+0x6c>
    6af2:	e8 94       	clt
    6af4:	6f 93       	push	r22
    6af6:	6e 7f       	andi	r22, 0xFE	; 254
    6af8:	6e 5f       	subi	r22, 0xFE	; 254
    6afa:	7f 4f       	sbci	r23, 0xFF	; 255
    6afc:	8f 4f       	sbci	r24, 0xFF	; 255
    6afe:	9f 4f       	sbci	r25, 0xFF	; 255
    6b00:	af 4f       	sbci	r26, 0xFF	; 255
    6b02:	b1 e0       	ldi	r27, 0x01	; 1
    6b04:	3e d0       	rcall	.+124    	; 0x6b82 <__ultoa_invert+0x9c>
    6b06:	b4 e0       	ldi	r27, 0x04	; 4
    6b08:	3c d0       	rcall	.+120    	; 0x6b82 <__ultoa_invert+0x9c>
    6b0a:	67 0f       	add	r22, r23
    6b0c:	78 1f       	adc	r23, r24
    6b0e:	89 1f       	adc	r24, r25
    6b10:	9a 1f       	adc	r25, r26
    6b12:	a1 1d       	adc	r26, r1
    6b14:	68 0f       	add	r22, r24
    6b16:	79 1f       	adc	r23, r25
    6b18:	8a 1f       	adc	r24, r26
    6b1a:	91 1d       	adc	r25, r1
    6b1c:	a1 1d       	adc	r26, r1
    6b1e:	6a 0f       	add	r22, r26
    6b20:	71 1d       	adc	r23, r1
    6b22:	81 1d       	adc	r24, r1
    6b24:	91 1d       	adc	r25, r1
    6b26:	a1 1d       	adc	r26, r1
    6b28:	20 d0       	rcall	.+64     	; 0x6b6a <__ultoa_invert+0x84>
    6b2a:	09 f4       	brne	.+2      	; 0x6b2e <__ultoa_invert+0x48>
    6b2c:	68 94       	set
    6b2e:	3f 91       	pop	r19
    6b30:	2a e0       	ldi	r18, 0x0A	; 10
    6b32:	26 9f       	mul	r18, r22
    6b34:	11 24       	eor	r1, r1
    6b36:	30 19       	sub	r19, r0
    6b38:	30 5d       	subi	r19, 0xD0	; 208
    6b3a:	31 93       	st	Z+, r19
    6b3c:	de f6       	brtc	.-74     	; 0x6af4 <__ultoa_invert+0xe>
    6b3e:	cf 01       	movw	r24, r30
    6b40:	08 95       	ret
    6b42:	46 2f       	mov	r20, r22
    6b44:	47 70       	andi	r20, 0x07	; 7
    6b46:	40 5d       	subi	r20, 0xD0	; 208
    6b48:	41 93       	st	Z+, r20
    6b4a:	b3 e0       	ldi	r27, 0x03	; 3
    6b4c:	0f d0       	rcall	.+30     	; 0x6b6c <__ultoa_invert+0x86>
    6b4e:	c9 f7       	brne	.-14     	; 0x6b42 <__ultoa_invert+0x5c>
    6b50:	f6 cf       	rjmp	.-20     	; 0x6b3e <__ultoa_invert+0x58>
    6b52:	46 2f       	mov	r20, r22
    6b54:	4f 70       	andi	r20, 0x0F	; 15
    6b56:	40 5d       	subi	r20, 0xD0	; 208
    6b58:	4a 33       	cpi	r20, 0x3A	; 58
    6b5a:	18 f0       	brcs	.+6      	; 0x6b62 <__ultoa_invert+0x7c>
    6b5c:	49 5d       	subi	r20, 0xD9	; 217
    6b5e:	31 fd       	sbrc	r19, 1
    6b60:	40 52       	subi	r20, 0x20	; 32
    6b62:	41 93       	st	Z+, r20
    6b64:	02 d0       	rcall	.+4      	; 0x6b6a <__ultoa_invert+0x84>
    6b66:	a9 f7       	brne	.-22     	; 0x6b52 <__ultoa_invert+0x6c>
    6b68:	ea cf       	rjmp	.-44     	; 0x6b3e <__ultoa_invert+0x58>
    6b6a:	b4 e0       	ldi	r27, 0x04	; 4
    6b6c:	a6 95       	lsr	r26
    6b6e:	97 95       	ror	r25
    6b70:	87 95       	ror	r24
    6b72:	77 95       	ror	r23
    6b74:	67 95       	ror	r22
    6b76:	ba 95       	dec	r27
    6b78:	c9 f7       	brne	.-14     	; 0x6b6c <__ultoa_invert+0x86>
    6b7a:	00 97       	sbiw	r24, 0x00	; 0
    6b7c:	61 05       	cpc	r22, r1
    6b7e:	71 05       	cpc	r23, r1
    6b80:	08 95       	ret
    6b82:	9b 01       	movw	r18, r22
    6b84:	ac 01       	movw	r20, r24
    6b86:	0a 2e       	mov	r0, r26
    6b88:	06 94       	lsr	r0
    6b8a:	57 95       	ror	r21
    6b8c:	47 95       	ror	r20
    6b8e:	37 95       	ror	r19
    6b90:	27 95       	ror	r18
    6b92:	ba 95       	dec	r27
    6b94:	c9 f7       	brne	.-14     	; 0x6b88 <__ultoa_invert+0xa2>
    6b96:	62 0f       	add	r22, r18
    6b98:	73 1f       	adc	r23, r19
    6b9a:	84 1f       	adc	r24, r20
    6b9c:	95 1f       	adc	r25, r21
    6b9e:	a0 1d       	adc	r26, r0
    6ba0:	08 95       	ret

00006ba2 <__divmodsi4>:
    6ba2:	05 2e       	mov	r0, r21
    6ba4:	97 fb       	bst	r25, 7
    6ba6:	16 f4       	brtc	.+4      	; 0x6bac <__divmodsi4+0xa>
    6ba8:	00 94       	com	r0
    6baa:	0f d0       	rcall	.+30     	; 0x6bca <__negsi2>
    6bac:	57 fd       	sbrc	r21, 7
    6bae:	05 d0       	rcall	.+10     	; 0x6bba <__divmodsi4_neg2>
    6bb0:	c8 dd       	rcall	.-1136   	; 0x6742 <__udivmodsi4>
    6bb2:	07 fc       	sbrc	r0, 7
    6bb4:	02 d0       	rcall	.+4      	; 0x6bba <__divmodsi4_neg2>
    6bb6:	46 f4       	brtc	.+16     	; 0x6bc8 <__divmodsi4_exit>
    6bb8:	08 c0       	rjmp	.+16     	; 0x6bca <__negsi2>

00006bba <__divmodsi4_neg2>:
    6bba:	50 95       	com	r21
    6bbc:	40 95       	com	r20
    6bbe:	30 95       	com	r19
    6bc0:	21 95       	neg	r18
    6bc2:	3f 4f       	sbci	r19, 0xFF	; 255
    6bc4:	4f 4f       	sbci	r20, 0xFF	; 255
    6bc6:	5f 4f       	sbci	r21, 0xFF	; 255

00006bc8 <__divmodsi4_exit>:
    6bc8:	08 95       	ret

00006bca <__negsi2>:
    6bca:	90 95       	com	r25
    6bcc:	80 95       	com	r24
    6bce:	70 95       	com	r23
    6bd0:	61 95       	neg	r22
    6bd2:	7f 4f       	sbci	r23, 0xFF	; 255
    6bd4:	8f 4f       	sbci	r24, 0xFF	; 255
    6bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    6bd8:	08 95       	ret

00006bda <__muluhisi3>:
    6bda:	db dd       	rcall	.-1098   	; 0x6792 <__umulhisi3>
    6bdc:	a5 9f       	mul	r26, r21
    6bde:	90 0d       	add	r25, r0
    6be0:	b4 9f       	mul	r27, r20
    6be2:	90 0d       	add	r25, r0
    6be4:	a4 9f       	mul	r26, r20
    6be6:	80 0d       	add	r24, r0
    6be8:	91 1d       	adc	r25, r1
    6bea:	11 24       	eor	r1, r1
    6bec:	08 95       	ret

00006bee <__mulshisi3>:
    6bee:	b7 ff       	sbrs	r27, 7
    6bf0:	f4 cf       	rjmp	.-24     	; 0x6bda <__muluhisi3>

00006bf2 <__mulohisi3>:
    6bf2:	f3 df       	rcall	.-26     	; 0x6bda <__muluhisi3>
    6bf4:	82 1b       	sub	r24, r18
    6bf6:	93 0b       	sbc	r25, r19
    6bf8:	08 95       	ret

00006bfa <_exit>:
    6bfa:	f8 94       	cli

00006bfc <__stop_program>:
    6bfc:	ff cf       	rjmp	.-2      	; 0x6bfc <__stop_program>
